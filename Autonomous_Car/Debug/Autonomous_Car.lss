
Autonomous_Car.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005e82  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000016a  00800060  00005e82  00005f16  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000028  008001ca  008001ca  00006080  2**0
                  ALLOC
  3 .stab         00006b70  00000000  00000000  00006080  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002dc8  00000000  00000000  0000cbf0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001e0  00000000  00000000  0000f9b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000232  00000000  00000000  0000fb98  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002891  00000000  00000000  0000fdca  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001628  00000000  00000000  0001265b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000013de  00000000  00000000  00013c83  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000200  00000000  00000000  00015064  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000030f  00000000  00000000  00015264  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a56  00000000  00000000  00015573  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00015fc9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 7a 14 	jmp	0x28f4	; 0x28f4 <__vector_1>
       8:	0c 94 ad 14 	jmp	0x295a	; 0x295a <__vector_2>
       c:	0c 94 e0 14 	jmp	0x29c0	; 0x29c0 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 87 0e 	jmp	0x1d0e	; 0x1d0e <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 54 0e 	jmp	0x1ca8	; 0x1ca8 <__vector_8>
      24:	0c 94 ee 0d 	jmp	0x1bdc	; 0x1bdc <__vector_9>
      28:	0c 94 7d 12 	jmp	0x24fa	; 0x24fa <__vector_10>
      2c:	0c 94 41 12 	jmp	0x2482	; 0x2482 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e8       	ldi	r30, 0x82	; 130
      68:	fe e5       	ldi	r31, 0x5E	; 94
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 3c       	cpi	r26, 0xCA	; 202
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	aa ec       	ldi	r26, 0xCA	; 202
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 3f       	cpi	r26, 0xF2	; 242
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 94 2e 	call	0x5d28	; 0x5d28 <main>
      8a:	0c 94 3f 2f 	jmp	0x5e7e	; 0x5e7e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 c3 2e 	jmp	0x5d86	; 0x5d86 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 ec       	ldi	r26, 0xC0	; 192
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 df 2e 	jmp	0x5dbe	; 0x5dbe <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 cf 2e 	jmp	0x5d9e	; 0x5d9e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 eb 2e 	jmp	0x5dd6	; 0x5dd6 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 cf 2e 	jmp	0x5d9e	; 0x5d9e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 eb 2e 	jmp	0x5dd6	; 0x5dd6 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 c3 2e 	jmp	0x5d86	; 0x5d86 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 ec       	ldi	r24, 0xC0	; 192
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 df 2e 	jmp	0x5dbe	; 0x5dbe <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 cb 2e 	jmp	0x5d96	; 0x5d96 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 ec       	ldi	r22, 0xC0	; 192
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 e7 2e 	jmp	0x5dce	; 0x5dce <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 cf 2e 	jmp	0x5d9e	; 0x5d9e <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 eb 2e 	jmp	0x5dd6	; 0x5dd6 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 cf 2e 	jmp	0x5d9e	; 0x5d9e <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 eb 2e 	jmp	0x5dd6	; 0x5dd6 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 cf 2e 	jmp	0x5d9e	; 0x5d9e <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 eb 2e 	jmp	0x5dd6	; 0x5dd6 <__epilogue_restores__+0x18>

000008aa <__lesf2>:
     8aa:	a8 e1       	ldi	r26, 0x18	; 24
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 cf 2e 	jmp	0x5d9e	; 0x5d9e <__prologue_saves__+0x18>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	2d 83       	std	Y+5, r18	; 0x05
     8c0:	3e 83       	std	Y+6, r19	; 0x06
     8c2:	4f 83       	std	Y+7, r20	; 0x07
     8c4:	58 87       	std	Y+8, r21	; 0x08
     8c6:	89 e0       	ldi	r24, 0x09	; 9
     8c8:	e8 2e       	mov	r14, r24
     8ca:	f1 2c       	mov	r15, r1
     8cc:	ec 0e       	add	r14, r28
     8ce:	fd 1e       	adc	r15, r29
     8d0:	ce 01       	movw	r24, r28
     8d2:	01 96       	adiw	r24, 0x01	; 1
     8d4:	b7 01       	movw	r22, r14
     8d6:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     8da:	8e 01       	movw	r16, r28
     8dc:	0f 5e       	subi	r16, 0xEF	; 239
     8de:	1f 4f       	sbci	r17, 0xFF	; 255
     8e0:	ce 01       	movw	r24, r28
     8e2:	05 96       	adiw	r24, 0x05	; 5
     8e4:	b8 01       	movw	r22, r16
     8e6:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     8ea:	89 85       	ldd	r24, Y+9	; 0x09
     8ec:	82 30       	cpi	r24, 0x02	; 2
     8ee:	40 f0       	brcs	.+16     	; 0x900 <__lesf2+0x56>
     8f0:	89 89       	ldd	r24, Y+17	; 0x11
     8f2:	82 30       	cpi	r24, 0x02	; 2
     8f4:	28 f0       	brcs	.+10     	; 0x900 <__lesf2+0x56>
     8f6:	c7 01       	movw	r24, r14
     8f8:	b8 01       	movw	r22, r16
     8fa:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fpcmp_parts_f>
     8fe:	01 c0       	rjmp	.+2      	; 0x902 <__lesf2+0x58>
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	68 96       	adiw	r28, 0x18	; 24
     904:	e6 e0       	ldi	r30, 0x06	; 6
     906:	0c 94 eb 2e 	jmp	0x5dd6	; 0x5dd6 <__epilogue_restores__+0x18>

0000090a <__floatsisf>:
     90a:	a8 e0       	ldi	r26, 0x08	; 8
     90c:	b0 e0       	ldi	r27, 0x00	; 0
     90e:	eb e8       	ldi	r30, 0x8B	; 139
     910:	f4 e0       	ldi	r31, 0x04	; 4
     912:	0c 94 cc 2e 	jmp	0x5d98	; 0x5d98 <__prologue_saves__+0x12>
     916:	9b 01       	movw	r18, r22
     918:	ac 01       	movw	r20, r24
     91a:	83 e0       	ldi	r24, 0x03	; 3
     91c:	89 83       	std	Y+1, r24	; 0x01
     91e:	da 01       	movw	r26, r20
     920:	c9 01       	movw	r24, r18
     922:	88 27       	eor	r24, r24
     924:	b7 fd       	sbrc	r27, 7
     926:	83 95       	inc	r24
     928:	99 27       	eor	r25, r25
     92a:	aa 27       	eor	r26, r26
     92c:	bb 27       	eor	r27, r27
     92e:	b8 2e       	mov	r11, r24
     930:	21 15       	cp	r18, r1
     932:	31 05       	cpc	r19, r1
     934:	41 05       	cpc	r20, r1
     936:	51 05       	cpc	r21, r1
     938:	19 f4       	brne	.+6      	; 0x940 <__floatsisf+0x36>
     93a:	82 e0       	ldi	r24, 0x02	; 2
     93c:	89 83       	std	Y+1, r24	; 0x01
     93e:	3a c0       	rjmp	.+116    	; 0x9b4 <__floatsisf+0xaa>
     940:	88 23       	and	r24, r24
     942:	a9 f0       	breq	.+42     	; 0x96e <__floatsisf+0x64>
     944:	20 30       	cpi	r18, 0x00	; 0
     946:	80 e0       	ldi	r24, 0x00	; 0
     948:	38 07       	cpc	r19, r24
     94a:	80 e0       	ldi	r24, 0x00	; 0
     94c:	48 07       	cpc	r20, r24
     94e:	80 e8       	ldi	r24, 0x80	; 128
     950:	58 07       	cpc	r21, r24
     952:	29 f4       	brne	.+10     	; 0x95e <__floatsisf+0x54>
     954:	60 e0       	ldi	r22, 0x00	; 0
     956:	70 e0       	ldi	r23, 0x00	; 0
     958:	80 e0       	ldi	r24, 0x00	; 0
     95a:	9f ec       	ldi	r25, 0xCF	; 207
     95c:	30 c0       	rjmp	.+96     	; 0x9be <__floatsisf+0xb4>
     95e:	ee 24       	eor	r14, r14
     960:	ff 24       	eor	r15, r15
     962:	87 01       	movw	r16, r14
     964:	e2 1a       	sub	r14, r18
     966:	f3 0a       	sbc	r15, r19
     968:	04 0b       	sbc	r16, r20
     96a:	15 0b       	sbc	r17, r21
     96c:	02 c0       	rjmp	.+4      	; 0x972 <__floatsisf+0x68>
     96e:	79 01       	movw	r14, r18
     970:	8a 01       	movw	r16, r20
     972:	8e e1       	ldi	r24, 0x1E	; 30
     974:	c8 2e       	mov	r12, r24
     976:	d1 2c       	mov	r13, r1
     978:	dc 82       	std	Y+4, r13	; 0x04
     97a:	cb 82       	std	Y+3, r12	; 0x03
     97c:	ed 82       	std	Y+5, r14	; 0x05
     97e:	fe 82       	std	Y+6, r15	; 0x06
     980:	0f 83       	std	Y+7, r16	; 0x07
     982:	18 87       	std	Y+8, r17	; 0x08
     984:	c8 01       	movw	r24, r16
     986:	b7 01       	movw	r22, r14
     988:	0e 94 b0 05 	call	0xb60	; 0xb60 <__clzsi2>
     98c:	01 97       	sbiw	r24, 0x01	; 1
     98e:	18 16       	cp	r1, r24
     990:	19 06       	cpc	r1, r25
     992:	84 f4       	brge	.+32     	; 0x9b4 <__floatsisf+0xaa>
     994:	08 2e       	mov	r0, r24
     996:	04 c0       	rjmp	.+8      	; 0x9a0 <__floatsisf+0x96>
     998:	ee 0c       	add	r14, r14
     99a:	ff 1c       	adc	r15, r15
     99c:	00 1f       	adc	r16, r16
     99e:	11 1f       	adc	r17, r17
     9a0:	0a 94       	dec	r0
     9a2:	d2 f7       	brpl	.-12     	; 0x998 <__floatsisf+0x8e>
     9a4:	ed 82       	std	Y+5, r14	; 0x05
     9a6:	fe 82       	std	Y+6, r15	; 0x06
     9a8:	0f 83       	std	Y+7, r16	; 0x07
     9aa:	18 87       	std	Y+8, r17	; 0x08
     9ac:	c8 1a       	sub	r12, r24
     9ae:	d9 0a       	sbc	r13, r25
     9b0:	dc 82       	std	Y+4, r13	; 0x04
     9b2:	cb 82       	std	Y+3, r12	; 0x03
     9b4:	ba 82       	std	Y+2, r11	; 0x02
     9b6:	ce 01       	movw	r24, r28
     9b8:	01 96       	adiw	r24, 0x01	; 1
     9ba:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     9be:	28 96       	adiw	r28, 0x08	; 8
     9c0:	e9 e0       	ldi	r30, 0x09	; 9
     9c2:	0c 94 e8 2e 	jmp	0x5dd0	; 0x5dd0 <__epilogue_restores__+0x12>

000009c6 <__fixsfsi>:
     9c6:	ac e0       	ldi	r26, 0x0C	; 12
     9c8:	b0 e0       	ldi	r27, 0x00	; 0
     9ca:	e9 ee       	ldi	r30, 0xE9	; 233
     9cc:	f4 e0       	ldi	r31, 0x04	; 4
     9ce:	0c 94 d3 2e 	jmp	0x5da6	; 0x5da6 <__prologue_saves__+0x20>
     9d2:	69 83       	std	Y+1, r22	; 0x01
     9d4:	7a 83       	std	Y+2, r23	; 0x02
     9d6:	8b 83       	std	Y+3, r24	; 0x03
     9d8:	9c 83       	std	Y+4, r25	; 0x04
     9da:	ce 01       	movw	r24, r28
     9dc:	01 96       	adiw	r24, 0x01	; 1
     9de:	be 01       	movw	r22, r28
     9e0:	6b 5f       	subi	r22, 0xFB	; 251
     9e2:	7f 4f       	sbci	r23, 0xFF	; 255
     9e4:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     9e8:	8d 81       	ldd	r24, Y+5	; 0x05
     9ea:	82 30       	cpi	r24, 0x02	; 2
     9ec:	61 f1       	breq	.+88     	; 0xa46 <__fixsfsi+0x80>
     9ee:	82 30       	cpi	r24, 0x02	; 2
     9f0:	50 f1       	brcs	.+84     	; 0xa46 <__fixsfsi+0x80>
     9f2:	84 30       	cpi	r24, 0x04	; 4
     9f4:	21 f4       	brne	.+8      	; 0x9fe <__fixsfsi+0x38>
     9f6:	8e 81       	ldd	r24, Y+6	; 0x06
     9f8:	88 23       	and	r24, r24
     9fa:	51 f1       	breq	.+84     	; 0xa50 <__fixsfsi+0x8a>
     9fc:	2e c0       	rjmp	.+92     	; 0xa5a <__fixsfsi+0x94>
     9fe:	2f 81       	ldd	r18, Y+7	; 0x07
     a00:	38 85       	ldd	r19, Y+8	; 0x08
     a02:	37 fd       	sbrc	r19, 7
     a04:	20 c0       	rjmp	.+64     	; 0xa46 <__fixsfsi+0x80>
     a06:	6e 81       	ldd	r22, Y+6	; 0x06
     a08:	2f 31       	cpi	r18, 0x1F	; 31
     a0a:	31 05       	cpc	r19, r1
     a0c:	1c f0       	brlt	.+6      	; 0xa14 <__fixsfsi+0x4e>
     a0e:	66 23       	and	r22, r22
     a10:	f9 f0       	breq	.+62     	; 0xa50 <__fixsfsi+0x8a>
     a12:	23 c0       	rjmp	.+70     	; 0xa5a <__fixsfsi+0x94>
     a14:	8e e1       	ldi	r24, 0x1E	; 30
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	82 1b       	sub	r24, r18
     a1a:	93 0b       	sbc	r25, r19
     a1c:	29 85       	ldd	r18, Y+9	; 0x09
     a1e:	3a 85       	ldd	r19, Y+10	; 0x0a
     a20:	4b 85       	ldd	r20, Y+11	; 0x0b
     a22:	5c 85       	ldd	r21, Y+12	; 0x0c
     a24:	04 c0       	rjmp	.+8      	; 0xa2e <__fixsfsi+0x68>
     a26:	56 95       	lsr	r21
     a28:	47 95       	ror	r20
     a2a:	37 95       	ror	r19
     a2c:	27 95       	ror	r18
     a2e:	8a 95       	dec	r24
     a30:	d2 f7       	brpl	.-12     	; 0xa26 <__fixsfsi+0x60>
     a32:	66 23       	and	r22, r22
     a34:	b1 f0       	breq	.+44     	; 0xa62 <__fixsfsi+0x9c>
     a36:	50 95       	com	r21
     a38:	40 95       	com	r20
     a3a:	30 95       	com	r19
     a3c:	21 95       	neg	r18
     a3e:	3f 4f       	sbci	r19, 0xFF	; 255
     a40:	4f 4f       	sbci	r20, 0xFF	; 255
     a42:	5f 4f       	sbci	r21, 0xFF	; 255
     a44:	0e c0       	rjmp	.+28     	; 0xa62 <__fixsfsi+0x9c>
     a46:	20 e0       	ldi	r18, 0x00	; 0
     a48:	30 e0       	ldi	r19, 0x00	; 0
     a4a:	40 e0       	ldi	r20, 0x00	; 0
     a4c:	50 e0       	ldi	r21, 0x00	; 0
     a4e:	09 c0       	rjmp	.+18     	; 0xa62 <__fixsfsi+0x9c>
     a50:	2f ef       	ldi	r18, 0xFF	; 255
     a52:	3f ef       	ldi	r19, 0xFF	; 255
     a54:	4f ef       	ldi	r20, 0xFF	; 255
     a56:	5f e7       	ldi	r21, 0x7F	; 127
     a58:	04 c0       	rjmp	.+8      	; 0xa62 <__fixsfsi+0x9c>
     a5a:	20 e0       	ldi	r18, 0x00	; 0
     a5c:	30 e0       	ldi	r19, 0x00	; 0
     a5e:	40 e0       	ldi	r20, 0x00	; 0
     a60:	50 e8       	ldi	r21, 0x80	; 128
     a62:	b9 01       	movw	r22, r18
     a64:	ca 01       	movw	r24, r20
     a66:	2c 96       	adiw	r28, 0x0c	; 12
     a68:	e2 e0       	ldi	r30, 0x02	; 2
     a6a:	0c 94 ef 2e 	jmp	0x5dde	; 0x5dde <__epilogue_restores__+0x20>

00000a6e <__floatunsisf>:
     a6e:	a8 e0       	ldi	r26, 0x08	; 8
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	ed e3       	ldi	r30, 0x3D	; 61
     a74:	f5 e0       	ldi	r31, 0x05	; 5
     a76:	0c 94 cb 2e 	jmp	0x5d96	; 0x5d96 <__prologue_saves__+0x10>
     a7a:	7b 01       	movw	r14, r22
     a7c:	8c 01       	movw	r16, r24
     a7e:	61 15       	cp	r22, r1
     a80:	71 05       	cpc	r23, r1
     a82:	81 05       	cpc	r24, r1
     a84:	91 05       	cpc	r25, r1
     a86:	19 f4       	brne	.+6      	; 0xa8e <__floatunsisf+0x20>
     a88:	82 e0       	ldi	r24, 0x02	; 2
     a8a:	89 83       	std	Y+1, r24	; 0x01
     a8c:	60 c0       	rjmp	.+192    	; 0xb4e <__floatunsisf+0xe0>
     a8e:	83 e0       	ldi	r24, 0x03	; 3
     a90:	89 83       	std	Y+1, r24	; 0x01
     a92:	8e e1       	ldi	r24, 0x1E	; 30
     a94:	c8 2e       	mov	r12, r24
     a96:	d1 2c       	mov	r13, r1
     a98:	dc 82       	std	Y+4, r13	; 0x04
     a9a:	cb 82       	std	Y+3, r12	; 0x03
     a9c:	ed 82       	std	Y+5, r14	; 0x05
     a9e:	fe 82       	std	Y+6, r15	; 0x06
     aa0:	0f 83       	std	Y+7, r16	; 0x07
     aa2:	18 87       	std	Y+8, r17	; 0x08
     aa4:	c8 01       	movw	r24, r16
     aa6:	b7 01       	movw	r22, r14
     aa8:	0e 94 b0 05 	call	0xb60	; 0xb60 <__clzsi2>
     aac:	fc 01       	movw	r30, r24
     aae:	31 97       	sbiw	r30, 0x01	; 1
     ab0:	f7 ff       	sbrs	r31, 7
     ab2:	3b c0       	rjmp	.+118    	; 0xb2a <__floatunsisf+0xbc>
     ab4:	22 27       	eor	r18, r18
     ab6:	33 27       	eor	r19, r19
     ab8:	2e 1b       	sub	r18, r30
     aba:	3f 0b       	sbc	r19, r31
     abc:	57 01       	movw	r10, r14
     abe:	68 01       	movw	r12, r16
     ac0:	02 2e       	mov	r0, r18
     ac2:	04 c0       	rjmp	.+8      	; 0xacc <__floatunsisf+0x5e>
     ac4:	d6 94       	lsr	r13
     ac6:	c7 94       	ror	r12
     ac8:	b7 94       	ror	r11
     aca:	a7 94       	ror	r10
     acc:	0a 94       	dec	r0
     ace:	d2 f7       	brpl	.-12     	; 0xac4 <__floatunsisf+0x56>
     ad0:	40 e0       	ldi	r20, 0x00	; 0
     ad2:	50 e0       	ldi	r21, 0x00	; 0
     ad4:	60 e0       	ldi	r22, 0x00	; 0
     ad6:	70 e0       	ldi	r23, 0x00	; 0
     ad8:	81 e0       	ldi	r24, 0x01	; 1
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	a0 e0       	ldi	r26, 0x00	; 0
     ade:	b0 e0       	ldi	r27, 0x00	; 0
     ae0:	04 c0       	rjmp	.+8      	; 0xaea <__floatunsisf+0x7c>
     ae2:	88 0f       	add	r24, r24
     ae4:	99 1f       	adc	r25, r25
     ae6:	aa 1f       	adc	r26, r26
     ae8:	bb 1f       	adc	r27, r27
     aea:	2a 95       	dec	r18
     aec:	d2 f7       	brpl	.-12     	; 0xae2 <__floatunsisf+0x74>
     aee:	01 97       	sbiw	r24, 0x01	; 1
     af0:	a1 09       	sbc	r26, r1
     af2:	b1 09       	sbc	r27, r1
     af4:	8e 21       	and	r24, r14
     af6:	9f 21       	and	r25, r15
     af8:	a0 23       	and	r26, r16
     afa:	b1 23       	and	r27, r17
     afc:	00 97       	sbiw	r24, 0x00	; 0
     afe:	a1 05       	cpc	r26, r1
     b00:	b1 05       	cpc	r27, r1
     b02:	21 f0       	breq	.+8      	; 0xb0c <__floatunsisf+0x9e>
     b04:	41 e0       	ldi	r20, 0x01	; 1
     b06:	50 e0       	ldi	r21, 0x00	; 0
     b08:	60 e0       	ldi	r22, 0x00	; 0
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	4a 29       	or	r20, r10
     b0e:	5b 29       	or	r21, r11
     b10:	6c 29       	or	r22, r12
     b12:	7d 29       	or	r23, r13
     b14:	4d 83       	std	Y+5, r20	; 0x05
     b16:	5e 83       	std	Y+6, r21	; 0x06
     b18:	6f 83       	std	Y+7, r22	; 0x07
     b1a:	78 87       	std	Y+8, r23	; 0x08
     b1c:	8e e1       	ldi	r24, 0x1E	; 30
     b1e:	90 e0       	ldi	r25, 0x00	; 0
     b20:	8e 1b       	sub	r24, r30
     b22:	9f 0b       	sbc	r25, r31
     b24:	9c 83       	std	Y+4, r25	; 0x04
     b26:	8b 83       	std	Y+3, r24	; 0x03
     b28:	12 c0       	rjmp	.+36     	; 0xb4e <__floatunsisf+0xe0>
     b2a:	30 97       	sbiw	r30, 0x00	; 0
     b2c:	81 f0       	breq	.+32     	; 0xb4e <__floatunsisf+0xe0>
     b2e:	0e 2e       	mov	r0, r30
     b30:	04 c0       	rjmp	.+8      	; 0xb3a <__floatunsisf+0xcc>
     b32:	ee 0c       	add	r14, r14
     b34:	ff 1c       	adc	r15, r15
     b36:	00 1f       	adc	r16, r16
     b38:	11 1f       	adc	r17, r17
     b3a:	0a 94       	dec	r0
     b3c:	d2 f7       	brpl	.-12     	; 0xb32 <__floatunsisf+0xc4>
     b3e:	ed 82       	std	Y+5, r14	; 0x05
     b40:	fe 82       	std	Y+6, r15	; 0x06
     b42:	0f 83       	std	Y+7, r16	; 0x07
     b44:	18 87       	std	Y+8, r17	; 0x08
     b46:	ce 1a       	sub	r12, r30
     b48:	df 0a       	sbc	r13, r31
     b4a:	dc 82       	std	Y+4, r13	; 0x04
     b4c:	cb 82       	std	Y+3, r12	; 0x03
     b4e:	1a 82       	std	Y+2, r1	; 0x02
     b50:	ce 01       	movw	r24, r28
     b52:	01 96       	adiw	r24, 0x01	; 1
     b54:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     b58:	28 96       	adiw	r28, 0x08	; 8
     b5a:	ea e0       	ldi	r30, 0x0A	; 10
     b5c:	0c 94 e7 2e 	jmp	0x5dce	; 0x5dce <__epilogue_restores__+0x10>

00000b60 <__clzsi2>:
     b60:	ef 92       	push	r14
     b62:	ff 92       	push	r15
     b64:	0f 93       	push	r16
     b66:	1f 93       	push	r17
     b68:	7b 01       	movw	r14, r22
     b6a:	8c 01       	movw	r16, r24
     b6c:	80 e0       	ldi	r24, 0x00	; 0
     b6e:	e8 16       	cp	r14, r24
     b70:	80 e0       	ldi	r24, 0x00	; 0
     b72:	f8 06       	cpc	r15, r24
     b74:	81 e0       	ldi	r24, 0x01	; 1
     b76:	08 07       	cpc	r16, r24
     b78:	80 e0       	ldi	r24, 0x00	; 0
     b7a:	18 07       	cpc	r17, r24
     b7c:	88 f4       	brcc	.+34     	; 0xba0 <__clzsi2+0x40>
     b7e:	8f ef       	ldi	r24, 0xFF	; 255
     b80:	e8 16       	cp	r14, r24
     b82:	f1 04       	cpc	r15, r1
     b84:	01 05       	cpc	r16, r1
     b86:	11 05       	cpc	r17, r1
     b88:	31 f0       	breq	.+12     	; 0xb96 <__clzsi2+0x36>
     b8a:	28 f0       	brcs	.+10     	; 0xb96 <__clzsi2+0x36>
     b8c:	88 e0       	ldi	r24, 0x08	; 8
     b8e:	90 e0       	ldi	r25, 0x00	; 0
     b90:	a0 e0       	ldi	r26, 0x00	; 0
     b92:	b0 e0       	ldi	r27, 0x00	; 0
     b94:	17 c0       	rjmp	.+46     	; 0xbc4 <__clzsi2+0x64>
     b96:	80 e0       	ldi	r24, 0x00	; 0
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	a0 e0       	ldi	r26, 0x00	; 0
     b9c:	b0 e0       	ldi	r27, 0x00	; 0
     b9e:	12 c0       	rjmp	.+36     	; 0xbc4 <__clzsi2+0x64>
     ba0:	80 e0       	ldi	r24, 0x00	; 0
     ba2:	e8 16       	cp	r14, r24
     ba4:	80 e0       	ldi	r24, 0x00	; 0
     ba6:	f8 06       	cpc	r15, r24
     ba8:	80 e0       	ldi	r24, 0x00	; 0
     baa:	08 07       	cpc	r16, r24
     bac:	81 e0       	ldi	r24, 0x01	; 1
     bae:	18 07       	cpc	r17, r24
     bb0:	28 f0       	brcs	.+10     	; 0xbbc <__clzsi2+0x5c>
     bb2:	88 e1       	ldi	r24, 0x18	; 24
     bb4:	90 e0       	ldi	r25, 0x00	; 0
     bb6:	a0 e0       	ldi	r26, 0x00	; 0
     bb8:	b0 e0       	ldi	r27, 0x00	; 0
     bba:	04 c0       	rjmp	.+8      	; 0xbc4 <__clzsi2+0x64>
     bbc:	80 e1       	ldi	r24, 0x10	; 16
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	a0 e0       	ldi	r26, 0x00	; 0
     bc2:	b0 e0       	ldi	r27, 0x00	; 0
     bc4:	20 e2       	ldi	r18, 0x20	; 32
     bc6:	30 e0       	ldi	r19, 0x00	; 0
     bc8:	40 e0       	ldi	r20, 0x00	; 0
     bca:	50 e0       	ldi	r21, 0x00	; 0
     bcc:	28 1b       	sub	r18, r24
     bce:	39 0b       	sbc	r19, r25
     bd0:	4a 0b       	sbc	r20, r26
     bd2:	5b 0b       	sbc	r21, r27
     bd4:	04 c0       	rjmp	.+8      	; 0xbde <__clzsi2+0x7e>
     bd6:	16 95       	lsr	r17
     bd8:	07 95       	ror	r16
     bda:	f7 94       	ror	r15
     bdc:	e7 94       	ror	r14
     bde:	8a 95       	dec	r24
     be0:	d2 f7       	brpl	.-12     	; 0xbd6 <__clzsi2+0x76>
     be2:	f7 01       	movw	r30, r14
     be4:	e8 53       	subi	r30, 0x38	; 56
     be6:	ff 4f       	sbci	r31, 0xFF	; 255
     be8:	80 81       	ld	r24, Z
     bea:	28 1b       	sub	r18, r24
     bec:	31 09       	sbc	r19, r1
     bee:	41 09       	sbc	r20, r1
     bf0:	51 09       	sbc	r21, r1
     bf2:	c9 01       	movw	r24, r18
     bf4:	1f 91       	pop	r17
     bf6:	0f 91       	pop	r16
     bf8:	ff 90       	pop	r15
     bfa:	ef 90       	pop	r14
     bfc:	08 95       	ret

00000bfe <__pack_f>:
     bfe:	df 92       	push	r13
     c00:	ef 92       	push	r14
     c02:	ff 92       	push	r15
     c04:	0f 93       	push	r16
     c06:	1f 93       	push	r17
     c08:	fc 01       	movw	r30, r24
     c0a:	e4 80       	ldd	r14, Z+4	; 0x04
     c0c:	f5 80       	ldd	r15, Z+5	; 0x05
     c0e:	06 81       	ldd	r16, Z+6	; 0x06
     c10:	17 81       	ldd	r17, Z+7	; 0x07
     c12:	d1 80       	ldd	r13, Z+1	; 0x01
     c14:	80 81       	ld	r24, Z
     c16:	82 30       	cpi	r24, 0x02	; 2
     c18:	48 f4       	brcc	.+18     	; 0xc2c <__pack_f+0x2e>
     c1a:	80 e0       	ldi	r24, 0x00	; 0
     c1c:	90 e0       	ldi	r25, 0x00	; 0
     c1e:	a0 e1       	ldi	r26, 0x10	; 16
     c20:	b0 e0       	ldi	r27, 0x00	; 0
     c22:	e8 2a       	or	r14, r24
     c24:	f9 2a       	or	r15, r25
     c26:	0a 2b       	or	r16, r26
     c28:	1b 2b       	or	r17, r27
     c2a:	a5 c0       	rjmp	.+330    	; 0xd76 <__pack_f+0x178>
     c2c:	84 30       	cpi	r24, 0x04	; 4
     c2e:	09 f4       	brne	.+2      	; 0xc32 <__pack_f+0x34>
     c30:	9f c0       	rjmp	.+318    	; 0xd70 <__pack_f+0x172>
     c32:	82 30       	cpi	r24, 0x02	; 2
     c34:	21 f4       	brne	.+8      	; 0xc3e <__pack_f+0x40>
     c36:	ee 24       	eor	r14, r14
     c38:	ff 24       	eor	r15, r15
     c3a:	87 01       	movw	r16, r14
     c3c:	05 c0       	rjmp	.+10     	; 0xc48 <__pack_f+0x4a>
     c3e:	e1 14       	cp	r14, r1
     c40:	f1 04       	cpc	r15, r1
     c42:	01 05       	cpc	r16, r1
     c44:	11 05       	cpc	r17, r1
     c46:	19 f4       	brne	.+6      	; 0xc4e <__pack_f+0x50>
     c48:	e0 e0       	ldi	r30, 0x00	; 0
     c4a:	f0 e0       	ldi	r31, 0x00	; 0
     c4c:	96 c0       	rjmp	.+300    	; 0xd7a <__pack_f+0x17c>
     c4e:	62 81       	ldd	r22, Z+2	; 0x02
     c50:	73 81       	ldd	r23, Z+3	; 0x03
     c52:	9f ef       	ldi	r25, 0xFF	; 255
     c54:	62 38       	cpi	r22, 0x82	; 130
     c56:	79 07       	cpc	r23, r25
     c58:	0c f0       	brlt	.+2      	; 0xc5c <__pack_f+0x5e>
     c5a:	5b c0       	rjmp	.+182    	; 0xd12 <__pack_f+0x114>
     c5c:	22 e8       	ldi	r18, 0x82	; 130
     c5e:	3f ef       	ldi	r19, 0xFF	; 255
     c60:	26 1b       	sub	r18, r22
     c62:	37 0b       	sbc	r19, r23
     c64:	2a 31       	cpi	r18, 0x1A	; 26
     c66:	31 05       	cpc	r19, r1
     c68:	2c f0       	brlt	.+10     	; 0xc74 <__pack_f+0x76>
     c6a:	20 e0       	ldi	r18, 0x00	; 0
     c6c:	30 e0       	ldi	r19, 0x00	; 0
     c6e:	40 e0       	ldi	r20, 0x00	; 0
     c70:	50 e0       	ldi	r21, 0x00	; 0
     c72:	2a c0       	rjmp	.+84     	; 0xcc8 <__pack_f+0xca>
     c74:	b8 01       	movw	r22, r16
     c76:	a7 01       	movw	r20, r14
     c78:	02 2e       	mov	r0, r18
     c7a:	04 c0       	rjmp	.+8      	; 0xc84 <__pack_f+0x86>
     c7c:	76 95       	lsr	r23
     c7e:	67 95       	ror	r22
     c80:	57 95       	ror	r21
     c82:	47 95       	ror	r20
     c84:	0a 94       	dec	r0
     c86:	d2 f7       	brpl	.-12     	; 0xc7c <__pack_f+0x7e>
     c88:	81 e0       	ldi	r24, 0x01	; 1
     c8a:	90 e0       	ldi	r25, 0x00	; 0
     c8c:	a0 e0       	ldi	r26, 0x00	; 0
     c8e:	b0 e0       	ldi	r27, 0x00	; 0
     c90:	04 c0       	rjmp	.+8      	; 0xc9a <__pack_f+0x9c>
     c92:	88 0f       	add	r24, r24
     c94:	99 1f       	adc	r25, r25
     c96:	aa 1f       	adc	r26, r26
     c98:	bb 1f       	adc	r27, r27
     c9a:	2a 95       	dec	r18
     c9c:	d2 f7       	brpl	.-12     	; 0xc92 <__pack_f+0x94>
     c9e:	01 97       	sbiw	r24, 0x01	; 1
     ca0:	a1 09       	sbc	r26, r1
     ca2:	b1 09       	sbc	r27, r1
     ca4:	8e 21       	and	r24, r14
     ca6:	9f 21       	and	r25, r15
     ca8:	a0 23       	and	r26, r16
     caa:	b1 23       	and	r27, r17
     cac:	00 97       	sbiw	r24, 0x00	; 0
     cae:	a1 05       	cpc	r26, r1
     cb0:	b1 05       	cpc	r27, r1
     cb2:	21 f0       	breq	.+8      	; 0xcbc <__pack_f+0xbe>
     cb4:	81 e0       	ldi	r24, 0x01	; 1
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	a0 e0       	ldi	r26, 0x00	; 0
     cba:	b0 e0       	ldi	r27, 0x00	; 0
     cbc:	9a 01       	movw	r18, r20
     cbe:	ab 01       	movw	r20, r22
     cc0:	28 2b       	or	r18, r24
     cc2:	39 2b       	or	r19, r25
     cc4:	4a 2b       	or	r20, r26
     cc6:	5b 2b       	or	r21, r27
     cc8:	da 01       	movw	r26, r20
     cca:	c9 01       	movw	r24, r18
     ccc:	8f 77       	andi	r24, 0x7F	; 127
     cce:	90 70       	andi	r25, 0x00	; 0
     cd0:	a0 70       	andi	r26, 0x00	; 0
     cd2:	b0 70       	andi	r27, 0x00	; 0
     cd4:	80 34       	cpi	r24, 0x40	; 64
     cd6:	91 05       	cpc	r25, r1
     cd8:	a1 05       	cpc	r26, r1
     cda:	b1 05       	cpc	r27, r1
     cdc:	39 f4       	brne	.+14     	; 0xcec <__pack_f+0xee>
     cde:	27 ff       	sbrs	r18, 7
     ce0:	09 c0       	rjmp	.+18     	; 0xcf4 <__pack_f+0xf6>
     ce2:	20 5c       	subi	r18, 0xC0	; 192
     ce4:	3f 4f       	sbci	r19, 0xFF	; 255
     ce6:	4f 4f       	sbci	r20, 0xFF	; 255
     ce8:	5f 4f       	sbci	r21, 0xFF	; 255
     cea:	04 c0       	rjmp	.+8      	; 0xcf4 <__pack_f+0xf6>
     cec:	21 5c       	subi	r18, 0xC1	; 193
     cee:	3f 4f       	sbci	r19, 0xFF	; 255
     cf0:	4f 4f       	sbci	r20, 0xFF	; 255
     cf2:	5f 4f       	sbci	r21, 0xFF	; 255
     cf4:	e0 e0       	ldi	r30, 0x00	; 0
     cf6:	f0 e0       	ldi	r31, 0x00	; 0
     cf8:	20 30       	cpi	r18, 0x00	; 0
     cfa:	a0 e0       	ldi	r26, 0x00	; 0
     cfc:	3a 07       	cpc	r19, r26
     cfe:	a0 e0       	ldi	r26, 0x00	; 0
     d00:	4a 07       	cpc	r20, r26
     d02:	a0 e4       	ldi	r26, 0x40	; 64
     d04:	5a 07       	cpc	r21, r26
     d06:	10 f0       	brcs	.+4      	; 0xd0c <__pack_f+0x10e>
     d08:	e1 e0       	ldi	r30, 0x01	; 1
     d0a:	f0 e0       	ldi	r31, 0x00	; 0
     d0c:	79 01       	movw	r14, r18
     d0e:	8a 01       	movw	r16, r20
     d10:	27 c0       	rjmp	.+78     	; 0xd60 <__pack_f+0x162>
     d12:	60 38       	cpi	r22, 0x80	; 128
     d14:	71 05       	cpc	r23, r1
     d16:	64 f5       	brge	.+88     	; 0xd70 <__pack_f+0x172>
     d18:	fb 01       	movw	r30, r22
     d1a:	e1 58       	subi	r30, 0x81	; 129
     d1c:	ff 4f       	sbci	r31, 0xFF	; 255
     d1e:	d8 01       	movw	r26, r16
     d20:	c7 01       	movw	r24, r14
     d22:	8f 77       	andi	r24, 0x7F	; 127
     d24:	90 70       	andi	r25, 0x00	; 0
     d26:	a0 70       	andi	r26, 0x00	; 0
     d28:	b0 70       	andi	r27, 0x00	; 0
     d2a:	80 34       	cpi	r24, 0x40	; 64
     d2c:	91 05       	cpc	r25, r1
     d2e:	a1 05       	cpc	r26, r1
     d30:	b1 05       	cpc	r27, r1
     d32:	39 f4       	brne	.+14     	; 0xd42 <__pack_f+0x144>
     d34:	e7 fe       	sbrs	r14, 7
     d36:	0d c0       	rjmp	.+26     	; 0xd52 <__pack_f+0x154>
     d38:	80 e4       	ldi	r24, 0x40	; 64
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	a0 e0       	ldi	r26, 0x00	; 0
     d3e:	b0 e0       	ldi	r27, 0x00	; 0
     d40:	04 c0       	rjmp	.+8      	; 0xd4a <__pack_f+0x14c>
     d42:	8f e3       	ldi	r24, 0x3F	; 63
     d44:	90 e0       	ldi	r25, 0x00	; 0
     d46:	a0 e0       	ldi	r26, 0x00	; 0
     d48:	b0 e0       	ldi	r27, 0x00	; 0
     d4a:	e8 0e       	add	r14, r24
     d4c:	f9 1e       	adc	r15, r25
     d4e:	0a 1f       	adc	r16, r26
     d50:	1b 1f       	adc	r17, r27
     d52:	17 ff       	sbrs	r17, 7
     d54:	05 c0       	rjmp	.+10     	; 0xd60 <__pack_f+0x162>
     d56:	16 95       	lsr	r17
     d58:	07 95       	ror	r16
     d5a:	f7 94       	ror	r15
     d5c:	e7 94       	ror	r14
     d5e:	31 96       	adiw	r30, 0x01	; 1
     d60:	87 e0       	ldi	r24, 0x07	; 7
     d62:	16 95       	lsr	r17
     d64:	07 95       	ror	r16
     d66:	f7 94       	ror	r15
     d68:	e7 94       	ror	r14
     d6a:	8a 95       	dec	r24
     d6c:	d1 f7       	brne	.-12     	; 0xd62 <__pack_f+0x164>
     d6e:	05 c0       	rjmp	.+10     	; 0xd7a <__pack_f+0x17c>
     d70:	ee 24       	eor	r14, r14
     d72:	ff 24       	eor	r15, r15
     d74:	87 01       	movw	r16, r14
     d76:	ef ef       	ldi	r30, 0xFF	; 255
     d78:	f0 e0       	ldi	r31, 0x00	; 0
     d7a:	6e 2f       	mov	r22, r30
     d7c:	67 95       	ror	r22
     d7e:	66 27       	eor	r22, r22
     d80:	67 95       	ror	r22
     d82:	90 2f       	mov	r25, r16
     d84:	9f 77       	andi	r25, 0x7F	; 127
     d86:	d7 94       	ror	r13
     d88:	dd 24       	eor	r13, r13
     d8a:	d7 94       	ror	r13
     d8c:	8e 2f       	mov	r24, r30
     d8e:	86 95       	lsr	r24
     d90:	49 2f       	mov	r20, r25
     d92:	46 2b       	or	r20, r22
     d94:	58 2f       	mov	r21, r24
     d96:	5d 29       	or	r21, r13
     d98:	b7 01       	movw	r22, r14
     d9a:	ca 01       	movw	r24, r20
     d9c:	1f 91       	pop	r17
     d9e:	0f 91       	pop	r16
     da0:	ff 90       	pop	r15
     da2:	ef 90       	pop	r14
     da4:	df 90       	pop	r13
     da6:	08 95       	ret

00000da8 <__unpack_f>:
     da8:	fc 01       	movw	r30, r24
     daa:	db 01       	movw	r26, r22
     dac:	40 81       	ld	r20, Z
     dae:	51 81       	ldd	r21, Z+1	; 0x01
     db0:	22 81       	ldd	r18, Z+2	; 0x02
     db2:	62 2f       	mov	r22, r18
     db4:	6f 77       	andi	r22, 0x7F	; 127
     db6:	70 e0       	ldi	r23, 0x00	; 0
     db8:	22 1f       	adc	r18, r18
     dba:	22 27       	eor	r18, r18
     dbc:	22 1f       	adc	r18, r18
     dbe:	93 81       	ldd	r25, Z+3	; 0x03
     dc0:	89 2f       	mov	r24, r25
     dc2:	88 0f       	add	r24, r24
     dc4:	82 2b       	or	r24, r18
     dc6:	28 2f       	mov	r18, r24
     dc8:	30 e0       	ldi	r19, 0x00	; 0
     dca:	99 1f       	adc	r25, r25
     dcc:	99 27       	eor	r25, r25
     dce:	99 1f       	adc	r25, r25
     dd0:	11 96       	adiw	r26, 0x01	; 1
     dd2:	9c 93       	st	X, r25
     dd4:	11 97       	sbiw	r26, 0x01	; 1
     dd6:	21 15       	cp	r18, r1
     dd8:	31 05       	cpc	r19, r1
     dda:	a9 f5       	brne	.+106    	; 0xe46 <__unpack_f+0x9e>
     ddc:	41 15       	cp	r20, r1
     dde:	51 05       	cpc	r21, r1
     de0:	61 05       	cpc	r22, r1
     de2:	71 05       	cpc	r23, r1
     de4:	11 f4       	brne	.+4      	; 0xdea <__unpack_f+0x42>
     de6:	82 e0       	ldi	r24, 0x02	; 2
     de8:	37 c0       	rjmp	.+110    	; 0xe58 <__unpack_f+0xb0>
     dea:	82 e8       	ldi	r24, 0x82	; 130
     dec:	9f ef       	ldi	r25, 0xFF	; 255
     dee:	13 96       	adiw	r26, 0x03	; 3
     df0:	9c 93       	st	X, r25
     df2:	8e 93       	st	-X, r24
     df4:	12 97       	sbiw	r26, 0x02	; 2
     df6:	9a 01       	movw	r18, r20
     df8:	ab 01       	movw	r20, r22
     dfa:	67 e0       	ldi	r22, 0x07	; 7
     dfc:	22 0f       	add	r18, r18
     dfe:	33 1f       	adc	r19, r19
     e00:	44 1f       	adc	r20, r20
     e02:	55 1f       	adc	r21, r21
     e04:	6a 95       	dec	r22
     e06:	d1 f7       	brne	.-12     	; 0xdfc <__unpack_f+0x54>
     e08:	83 e0       	ldi	r24, 0x03	; 3
     e0a:	8c 93       	st	X, r24
     e0c:	0d c0       	rjmp	.+26     	; 0xe28 <__unpack_f+0x80>
     e0e:	22 0f       	add	r18, r18
     e10:	33 1f       	adc	r19, r19
     e12:	44 1f       	adc	r20, r20
     e14:	55 1f       	adc	r21, r21
     e16:	12 96       	adiw	r26, 0x02	; 2
     e18:	8d 91       	ld	r24, X+
     e1a:	9c 91       	ld	r25, X
     e1c:	13 97       	sbiw	r26, 0x03	; 3
     e1e:	01 97       	sbiw	r24, 0x01	; 1
     e20:	13 96       	adiw	r26, 0x03	; 3
     e22:	9c 93       	st	X, r25
     e24:	8e 93       	st	-X, r24
     e26:	12 97       	sbiw	r26, 0x02	; 2
     e28:	20 30       	cpi	r18, 0x00	; 0
     e2a:	80 e0       	ldi	r24, 0x00	; 0
     e2c:	38 07       	cpc	r19, r24
     e2e:	80 e0       	ldi	r24, 0x00	; 0
     e30:	48 07       	cpc	r20, r24
     e32:	80 e4       	ldi	r24, 0x40	; 64
     e34:	58 07       	cpc	r21, r24
     e36:	58 f3       	brcs	.-42     	; 0xe0e <__unpack_f+0x66>
     e38:	14 96       	adiw	r26, 0x04	; 4
     e3a:	2d 93       	st	X+, r18
     e3c:	3d 93       	st	X+, r19
     e3e:	4d 93       	st	X+, r20
     e40:	5c 93       	st	X, r21
     e42:	17 97       	sbiw	r26, 0x07	; 7
     e44:	08 95       	ret
     e46:	2f 3f       	cpi	r18, 0xFF	; 255
     e48:	31 05       	cpc	r19, r1
     e4a:	79 f4       	brne	.+30     	; 0xe6a <__unpack_f+0xc2>
     e4c:	41 15       	cp	r20, r1
     e4e:	51 05       	cpc	r21, r1
     e50:	61 05       	cpc	r22, r1
     e52:	71 05       	cpc	r23, r1
     e54:	19 f4       	brne	.+6      	; 0xe5c <__unpack_f+0xb4>
     e56:	84 e0       	ldi	r24, 0x04	; 4
     e58:	8c 93       	st	X, r24
     e5a:	08 95       	ret
     e5c:	64 ff       	sbrs	r22, 4
     e5e:	03 c0       	rjmp	.+6      	; 0xe66 <__unpack_f+0xbe>
     e60:	81 e0       	ldi	r24, 0x01	; 1
     e62:	8c 93       	st	X, r24
     e64:	12 c0       	rjmp	.+36     	; 0xe8a <__unpack_f+0xe2>
     e66:	1c 92       	st	X, r1
     e68:	10 c0       	rjmp	.+32     	; 0xe8a <__unpack_f+0xe2>
     e6a:	2f 57       	subi	r18, 0x7F	; 127
     e6c:	30 40       	sbci	r19, 0x00	; 0
     e6e:	13 96       	adiw	r26, 0x03	; 3
     e70:	3c 93       	st	X, r19
     e72:	2e 93       	st	-X, r18
     e74:	12 97       	sbiw	r26, 0x02	; 2
     e76:	83 e0       	ldi	r24, 0x03	; 3
     e78:	8c 93       	st	X, r24
     e7a:	87 e0       	ldi	r24, 0x07	; 7
     e7c:	44 0f       	add	r20, r20
     e7e:	55 1f       	adc	r21, r21
     e80:	66 1f       	adc	r22, r22
     e82:	77 1f       	adc	r23, r23
     e84:	8a 95       	dec	r24
     e86:	d1 f7       	brne	.-12     	; 0xe7c <__unpack_f+0xd4>
     e88:	70 64       	ori	r23, 0x40	; 64
     e8a:	14 96       	adiw	r26, 0x04	; 4
     e8c:	4d 93       	st	X+, r20
     e8e:	5d 93       	st	X+, r21
     e90:	6d 93       	st	X+, r22
     e92:	7c 93       	st	X, r23
     e94:	17 97       	sbiw	r26, 0x07	; 7
     e96:	08 95       	ret

00000e98 <__fpcmp_parts_f>:
     e98:	1f 93       	push	r17
     e9a:	dc 01       	movw	r26, r24
     e9c:	fb 01       	movw	r30, r22
     e9e:	9c 91       	ld	r25, X
     ea0:	92 30       	cpi	r25, 0x02	; 2
     ea2:	08 f4       	brcc	.+2      	; 0xea6 <__fpcmp_parts_f+0xe>
     ea4:	47 c0       	rjmp	.+142    	; 0xf34 <__fpcmp_parts_f+0x9c>
     ea6:	80 81       	ld	r24, Z
     ea8:	82 30       	cpi	r24, 0x02	; 2
     eaa:	08 f4       	brcc	.+2      	; 0xeae <__fpcmp_parts_f+0x16>
     eac:	43 c0       	rjmp	.+134    	; 0xf34 <__fpcmp_parts_f+0x9c>
     eae:	94 30       	cpi	r25, 0x04	; 4
     eb0:	51 f4       	brne	.+20     	; 0xec6 <__fpcmp_parts_f+0x2e>
     eb2:	11 96       	adiw	r26, 0x01	; 1
     eb4:	1c 91       	ld	r17, X
     eb6:	84 30       	cpi	r24, 0x04	; 4
     eb8:	99 f5       	brne	.+102    	; 0xf20 <__fpcmp_parts_f+0x88>
     eba:	81 81       	ldd	r24, Z+1	; 0x01
     ebc:	68 2f       	mov	r22, r24
     ebe:	70 e0       	ldi	r23, 0x00	; 0
     ec0:	61 1b       	sub	r22, r17
     ec2:	71 09       	sbc	r23, r1
     ec4:	3f c0       	rjmp	.+126    	; 0xf44 <__fpcmp_parts_f+0xac>
     ec6:	84 30       	cpi	r24, 0x04	; 4
     ec8:	21 f0       	breq	.+8      	; 0xed2 <__fpcmp_parts_f+0x3a>
     eca:	92 30       	cpi	r25, 0x02	; 2
     ecc:	31 f4       	brne	.+12     	; 0xeda <__fpcmp_parts_f+0x42>
     ece:	82 30       	cpi	r24, 0x02	; 2
     ed0:	b9 f1       	breq	.+110    	; 0xf40 <__fpcmp_parts_f+0xa8>
     ed2:	81 81       	ldd	r24, Z+1	; 0x01
     ed4:	88 23       	and	r24, r24
     ed6:	89 f1       	breq	.+98     	; 0xf3a <__fpcmp_parts_f+0xa2>
     ed8:	2d c0       	rjmp	.+90     	; 0xf34 <__fpcmp_parts_f+0x9c>
     eda:	11 96       	adiw	r26, 0x01	; 1
     edc:	1c 91       	ld	r17, X
     ede:	11 97       	sbiw	r26, 0x01	; 1
     ee0:	82 30       	cpi	r24, 0x02	; 2
     ee2:	f1 f0       	breq	.+60     	; 0xf20 <__fpcmp_parts_f+0x88>
     ee4:	81 81       	ldd	r24, Z+1	; 0x01
     ee6:	18 17       	cp	r17, r24
     ee8:	d9 f4       	brne	.+54     	; 0xf20 <__fpcmp_parts_f+0x88>
     eea:	12 96       	adiw	r26, 0x02	; 2
     eec:	2d 91       	ld	r18, X+
     eee:	3c 91       	ld	r19, X
     ef0:	13 97       	sbiw	r26, 0x03	; 3
     ef2:	82 81       	ldd	r24, Z+2	; 0x02
     ef4:	93 81       	ldd	r25, Z+3	; 0x03
     ef6:	82 17       	cp	r24, r18
     ef8:	93 07       	cpc	r25, r19
     efa:	94 f0       	brlt	.+36     	; 0xf20 <__fpcmp_parts_f+0x88>
     efc:	28 17       	cp	r18, r24
     efe:	39 07       	cpc	r19, r25
     f00:	bc f0       	brlt	.+46     	; 0xf30 <__fpcmp_parts_f+0x98>
     f02:	14 96       	adiw	r26, 0x04	; 4
     f04:	8d 91       	ld	r24, X+
     f06:	9d 91       	ld	r25, X+
     f08:	0d 90       	ld	r0, X+
     f0a:	bc 91       	ld	r27, X
     f0c:	a0 2d       	mov	r26, r0
     f0e:	24 81       	ldd	r18, Z+4	; 0x04
     f10:	35 81       	ldd	r19, Z+5	; 0x05
     f12:	46 81       	ldd	r20, Z+6	; 0x06
     f14:	57 81       	ldd	r21, Z+7	; 0x07
     f16:	28 17       	cp	r18, r24
     f18:	39 07       	cpc	r19, r25
     f1a:	4a 07       	cpc	r20, r26
     f1c:	5b 07       	cpc	r21, r27
     f1e:	18 f4       	brcc	.+6      	; 0xf26 <__fpcmp_parts_f+0x8e>
     f20:	11 23       	and	r17, r17
     f22:	41 f0       	breq	.+16     	; 0xf34 <__fpcmp_parts_f+0x9c>
     f24:	0a c0       	rjmp	.+20     	; 0xf3a <__fpcmp_parts_f+0xa2>
     f26:	82 17       	cp	r24, r18
     f28:	93 07       	cpc	r25, r19
     f2a:	a4 07       	cpc	r26, r20
     f2c:	b5 07       	cpc	r27, r21
     f2e:	40 f4       	brcc	.+16     	; 0xf40 <__fpcmp_parts_f+0xa8>
     f30:	11 23       	and	r17, r17
     f32:	19 f0       	breq	.+6      	; 0xf3a <__fpcmp_parts_f+0xa2>
     f34:	61 e0       	ldi	r22, 0x01	; 1
     f36:	70 e0       	ldi	r23, 0x00	; 0
     f38:	05 c0       	rjmp	.+10     	; 0xf44 <__fpcmp_parts_f+0xac>
     f3a:	6f ef       	ldi	r22, 0xFF	; 255
     f3c:	7f ef       	ldi	r23, 0xFF	; 255
     f3e:	02 c0       	rjmp	.+4      	; 0xf44 <__fpcmp_parts_f+0xac>
     f40:	60 e0       	ldi	r22, 0x00	; 0
     f42:	70 e0       	ldi	r23, 0x00	; 0
     f44:	cb 01       	movw	r24, r22
     f46:	1f 91       	pop	r17
     f48:	08 95       	ret

00000f4a <MCAL_T1_u8T1Init>:
 *  Created on: Oct 22, 2023
 *      Author: TOP_WORLD
 */
#include "Timer1.h"
void (*Gptr_3)(void)='\0';
u8 MCAL_T1_u8T1Init(u8 LOC_u8Timer1Mode) {
     f4a:	df 93       	push	r29
     f4c:	cf 93       	push	r28
     f4e:	00 d0       	rcall	.+0      	; 0xf50 <MCAL_T1_u8T1Init+0x6>
     f50:	cd b7       	in	r28, 0x3d	; 61
     f52:	de b7       	in	r29, 0x3e	; 62
     f54:	8a 83       	std	Y+2, r24	; 0x02
	u8 LOC_u8ReturnValue = E_NOT_OK;
     f56:	81 e0       	ldi	r24, 0x01	; 1
     f58:	89 83       	std	Y+1, r24	; 0x01
	if (LOC_u8Timer1Mode <= FAST_PWM_OCR1A) {
     f5a:	8a 81       	ldd	r24, Y+2	; 0x02
     f5c:	80 31       	cpi	r24, 0x10	; 16
     f5e:	08 f0       	brcs	.+2      	; 0xf62 <MCAL_T1_u8T1Init+0x18>
     f60:	0f c2       	rjmp	.+1054   	; 0x1380 <MCAL_T1_u8T1Init+0x436>
		if (LOC_u8Timer1Mode == NORMAL_MODE) {
     f62:	8a 81       	ldd	r24, Y+2	; 0x02
     f64:	88 23       	and	r24, r24
     f66:	f1 f4       	brne	.+60     	; 0xfa4 <MCAL_T1_u8T1Init+0x5a>
			CLR_BIT(TCCR1A, PIN0);
     f68:	af e4       	ldi	r26, 0x4F	; 79
     f6a:	b0 e0       	ldi	r27, 0x00	; 0
     f6c:	ef e4       	ldi	r30, 0x4F	; 79
     f6e:	f0 e0       	ldi	r31, 0x00	; 0
     f70:	80 81       	ld	r24, Z
     f72:	8e 7f       	andi	r24, 0xFE	; 254
     f74:	8c 93       	st	X, r24
			CLR_BIT(TCCR1A, PIN1);
     f76:	af e4       	ldi	r26, 0x4F	; 79
     f78:	b0 e0       	ldi	r27, 0x00	; 0
     f7a:	ef e4       	ldi	r30, 0x4F	; 79
     f7c:	f0 e0       	ldi	r31, 0x00	; 0
     f7e:	80 81       	ld	r24, Z
     f80:	8d 7f       	andi	r24, 0xFD	; 253
     f82:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B, PIN3);
     f84:	ae e4       	ldi	r26, 0x4E	; 78
     f86:	b0 e0       	ldi	r27, 0x00	; 0
     f88:	ee e4       	ldi	r30, 0x4E	; 78
     f8a:	f0 e0       	ldi	r31, 0x00	; 0
     f8c:	80 81       	ld	r24, Z
     f8e:	87 7f       	andi	r24, 0xF7	; 247
     f90:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B, PIN4);
     f92:	ae e4       	ldi	r26, 0x4E	; 78
     f94:	b0 e0       	ldi	r27, 0x00	; 0
     f96:	ee e4       	ldi	r30, 0x4E	; 78
     f98:	f0 e0       	ldi	r31, 0x00	; 0
     f9a:	80 81       	ld	r24, Z
     f9c:	8f 7e       	andi	r24, 0xEF	; 239
     f9e:	8c 93       	st	X, r24
			LOC_u8ReturnValue = E_OK;
     fa0:	19 82       	std	Y+1, r1	; 0x01
     fa2:	ee c1       	rjmp	.+988    	; 0x1380 <MCAL_T1_u8T1Init+0x436>
		} else if (LOC_u8Timer1Mode == PWM_PHASE_CORRECT_8bit) {
     fa4:	8a 81       	ldd	r24, Y+2	; 0x02
     fa6:	81 30       	cpi	r24, 0x01	; 1
     fa8:	f1 f4       	brne	.+60     	; 0xfe6 <MCAL_T1_u8T1Init+0x9c>
			SET_BIT(TCCR1A, PIN0);
     faa:	af e4       	ldi	r26, 0x4F	; 79
     fac:	b0 e0       	ldi	r27, 0x00	; 0
     fae:	ef e4       	ldi	r30, 0x4F	; 79
     fb0:	f0 e0       	ldi	r31, 0x00	; 0
     fb2:	80 81       	ld	r24, Z
     fb4:	81 60       	ori	r24, 0x01	; 1
     fb6:	8c 93       	st	X, r24
			CLR_BIT(TCCR1A, PIN1);
     fb8:	af e4       	ldi	r26, 0x4F	; 79
     fba:	b0 e0       	ldi	r27, 0x00	; 0
     fbc:	ef e4       	ldi	r30, 0x4F	; 79
     fbe:	f0 e0       	ldi	r31, 0x00	; 0
     fc0:	80 81       	ld	r24, Z
     fc2:	8d 7f       	andi	r24, 0xFD	; 253
     fc4:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B, PIN3);
     fc6:	ae e4       	ldi	r26, 0x4E	; 78
     fc8:	b0 e0       	ldi	r27, 0x00	; 0
     fca:	ee e4       	ldi	r30, 0x4E	; 78
     fcc:	f0 e0       	ldi	r31, 0x00	; 0
     fce:	80 81       	ld	r24, Z
     fd0:	87 7f       	andi	r24, 0xF7	; 247
     fd2:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B, PIN4);
     fd4:	ae e4       	ldi	r26, 0x4E	; 78
     fd6:	b0 e0       	ldi	r27, 0x00	; 0
     fd8:	ee e4       	ldi	r30, 0x4E	; 78
     fda:	f0 e0       	ldi	r31, 0x00	; 0
     fdc:	80 81       	ld	r24, Z
     fde:	8f 7e       	andi	r24, 0xEF	; 239
     fe0:	8c 93       	st	X, r24
			LOC_u8ReturnValue = E_OK;
     fe2:	19 82       	std	Y+1, r1	; 0x01
     fe4:	cd c1       	rjmp	.+922    	; 0x1380 <MCAL_T1_u8T1Init+0x436>
		} else if (LOC_u8Timer1Mode == PWM_PHASE_CORRECT_9bit) {
     fe6:	8a 81       	ldd	r24, Y+2	; 0x02
     fe8:	82 30       	cpi	r24, 0x02	; 2
     fea:	f1 f4       	brne	.+60     	; 0x1028 <MCAL_T1_u8T1Init+0xde>
			CLR_BIT(TCCR1A, PIN0);
     fec:	af e4       	ldi	r26, 0x4F	; 79
     fee:	b0 e0       	ldi	r27, 0x00	; 0
     ff0:	ef e4       	ldi	r30, 0x4F	; 79
     ff2:	f0 e0       	ldi	r31, 0x00	; 0
     ff4:	80 81       	ld	r24, Z
     ff6:	8e 7f       	andi	r24, 0xFE	; 254
     ff8:	8c 93       	st	X, r24
			SET_BIT(TCCR1A, PIN1);
     ffa:	af e4       	ldi	r26, 0x4F	; 79
     ffc:	b0 e0       	ldi	r27, 0x00	; 0
     ffe:	ef e4       	ldi	r30, 0x4F	; 79
    1000:	f0 e0       	ldi	r31, 0x00	; 0
    1002:	80 81       	ld	r24, Z
    1004:	82 60       	ori	r24, 0x02	; 2
    1006:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B, PIN3);
    1008:	ae e4       	ldi	r26, 0x4E	; 78
    100a:	b0 e0       	ldi	r27, 0x00	; 0
    100c:	ee e4       	ldi	r30, 0x4E	; 78
    100e:	f0 e0       	ldi	r31, 0x00	; 0
    1010:	80 81       	ld	r24, Z
    1012:	87 7f       	andi	r24, 0xF7	; 247
    1014:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B, PIN4);
    1016:	ae e4       	ldi	r26, 0x4E	; 78
    1018:	b0 e0       	ldi	r27, 0x00	; 0
    101a:	ee e4       	ldi	r30, 0x4E	; 78
    101c:	f0 e0       	ldi	r31, 0x00	; 0
    101e:	80 81       	ld	r24, Z
    1020:	8f 7e       	andi	r24, 0xEF	; 239
    1022:	8c 93       	st	X, r24
			LOC_u8ReturnValue = E_OK;
    1024:	19 82       	std	Y+1, r1	; 0x01
    1026:	ac c1       	rjmp	.+856    	; 0x1380 <MCAL_T1_u8T1Init+0x436>
		} else if (LOC_u8Timer1Mode == PWM_PHASE_CORRECT_10bit) {
    1028:	8a 81       	ldd	r24, Y+2	; 0x02
    102a:	83 30       	cpi	r24, 0x03	; 3
    102c:	f1 f4       	brne	.+60     	; 0x106a <MCAL_T1_u8T1Init+0x120>
			SET_BIT(TCCR1A, PIN0);
    102e:	af e4       	ldi	r26, 0x4F	; 79
    1030:	b0 e0       	ldi	r27, 0x00	; 0
    1032:	ef e4       	ldi	r30, 0x4F	; 79
    1034:	f0 e0       	ldi	r31, 0x00	; 0
    1036:	80 81       	ld	r24, Z
    1038:	81 60       	ori	r24, 0x01	; 1
    103a:	8c 93       	st	X, r24
			SET_BIT(TCCR1A, PIN1);
    103c:	af e4       	ldi	r26, 0x4F	; 79
    103e:	b0 e0       	ldi	r27, 0x00	; 0
    1040:	ef e4       	ldi	r30, 0x4F	; 79
    1042:	f0 e0       	ldi	r31, 0x00	; 0
    1044:	80 81       	ld	r24, Z
    1046:	82 60       	ori	r24, 0x02	; 2
    1048:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B, PIN3);
    104a:	ae e4       	ldi	r26, 0x4E	; 78
    104c:	b0 e0       	ldi	r27, 0x00	; 0
    104e:	ee e4       	ldi	r30, 0x4E	; 78
    1050:	f0 e0       	ldi	r31, 0x00	; 0
    1052:	80 81       	ld	r24, Z
    1054:	87 7f       	andi	r24, 0xF7	; 247
    1056:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B, PIN4);
    1058:	ae e4       	ldi	r26, 0x4E	; 78
    105a:	b0 e0       	ldi	r27, 0x00	; 0
    105c:	ee e4       	ldi	r30, 0x4E	; 78
    105e:	f0 e0       	ldi	r31, 0x00	; 0
    1060:	80 81       	ld	r24, Z
    1062:	8f 7e       	andi	r24, 0xEF	; 239
    1064:	8c 93       	st	X, r24
			LOC_u8ReturnValue = E_OK;
    1066:	19 82       	std	Y+1, r1	; 0x01
    1068:	8b c1       	rjmp	.+790    	; 0x1380 <MCAL_T1_u8T1Init+0x436>
		} else if (LOC_u8Timer1Mode == CTC_OCR1A) {
    106a:	8a 81       	ldd	r24, Y+2	; 0x02
    106c:	84 30       	cpi	r24, 0x04	; 4
    106e:	f1 f4       	brne	.+60     	; 0x10ac <MCAL_T1_u8T1Init+0x162>
			CLR_BIT(TCCR1A, PIN0);
    1070:	af e4       	ldi	r26, 0x4F	; 79
    1072:	b0 e0       	ldi	r27, 0x00	; 0
    1074:	ef e4       	ldi	r30, 0x4F	; 79
    1076:	f0 e0       	ldi	r31, 0x00	; 0
    1078:	80 81       	ld	r24, Z
    107a:	8e 7f       	andi	r24, 0xFE	; 254
    107c:	8c 93       	st	X, r24
			CLR_BIT(TCCR1A, PIN1);
    107e:	af e4       	ldi	r26, 0x4F	; 79
    1080:	b0 e0       	ldi	r27, 0x00	; 0
    1082:	ef e4       	ldi	r30, 0x4F	; 79
    1084:	f0 e0       	ldi	r31, 0x00	; 0
    1086:	80 81       	ld	r24, Z
    1088:	8d 7f       	andi	r24, 0xFD	; 253
    108a:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, PIN3);
    108c:	ae e4       	ldi	r26, 0x4E	; 78
    108e:	b0 e0       	ldi	r27, 0x00	; 0
    1090:	ee e4       	ldi	r30, 0x4E	; 78
    1092:	f0 e0       	ldi	r31, 0x00	; 0
    1094:	80 81       	ld	r24, Z
    1096:	88 60       	ori	r24, 0x08	; 8
    1098:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B, PIN4);
    109a:	ae e4       	ldi	r26, 0x4E	; 78
    109c:	b0 e0       	ldi	r27, 0x00	; 0
    109e:	ee e4       	ldi	r30, 0x4E	; 78
    10a0:	f0 e0       	ldi	r31, 0x00	; 0
    10a2:	80 81       	ld	r24, Z
    10a4:	8f 7e       	andi	r24, 0xEF	; 239
    10a6:	8c 93       	st	X, r24
			LOC_u8ReturnValue = E_OK;
    10a8:	19 82       	std	Y+1, r1	; 0x01
    10aa:	6a c1       	rjmp	.+724    	; 0x1380 <MCAL_T1_u8T1Init+0x436>
		} else if (LOC_u8Timer1Mode == FAST_PWM_8bit) {
    10ac:	8a 81       	ldd	r24, Y+2	; 0x02
    10ae:	85 30       	cpi	r24, 0x05	; 5
    10b0:	f1 f4       	brne	.+60     	; 0x10ee <MCAL_T1_u8T1Init+0x1a4>
			SET_BIT(TCCR1A, PIN0);
    10b2:	af e4       	ldi	r26, 0x4F	; 79
    10b4:	b0 e0       	ldi	r27, 0x00	; 0
    10b6:	ef e4       	ldi	r30, 0x4F	; 79
    10b8:	f0 e0       	ldi	r31, 0x00	; 0
    10ba:	80 81       	ld	r24, Z
    10bc:	81 60       	ori	r24, 0x01	; 1
    10be:	8c 93       	st	X, r24
			CLR_BIT(TCCR1A, PIN1);
    10c0:	af e4       	ldi	r26, 0x4F	; 79
    10c2:	b0 e0       	ldi	r27, 0x00	; 0
    10c4:	ef e4       	ldi	r30, 0x4F	; 79
    10c6:	f0 e0       	ldi	r31, 0x00	; 0
    10c8:	80 81       	ld	r24, Z
    10ca:	8d 7f       	andi	r24, 0xFD	; 253
    10cc:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, PIN3);
    10ce:	ae e4       	ldi	r26, 0x4E	; 78
    10d0:	b0 e0       	ldi	r27, 0x00	; 0
    10d2:	ee e4       	ldi	r30, 0x4E	; 78
    10d4:	f0 e0       	ldi	r31, 0x00	; 0
    10d6:	80 81       	ld	r24, Z
    10d8:	88 60       	ori	r24, 0x08	; 8
    10da:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B, PIN4);
    10dc:	ae e4       	ldi	r26, 0x4E	; 78
    10de:	b0 e0       	ldi	r27, 0x00	; 0
    10e0:	ee e4       	ldi	r30, 0x4E	; 78
    10e2:	f0 e0       	ldi	r31, 0x00	; 0
    10e4:	80 81       	ld	r24, Z
    10e6:	8f 7e       	andi	r24, 0xEF	; 239
    10e8:	8c 93       	st	X, r24
			LOC_u8ReturnValue = E_OK;
    10ea:	19 82       	std	Y+1, r1	; 0x01
    10ec:	49 c1       	rjmp	.+658    	; 0x1380 <MCAL_T1_u8T1Init+0x436>
		} else if (LOC_u8Timer1Mode == FAST_PWM_9bit) {
    10ee:	8a 81       	ldd	r24, Y+2	; 0x02
    10f0:	86 30       	cpi	r24, 0x06	; 6
    10f2:	f1 f4       	brne	.+60     	; 0x1130 <MCAL_T1_u8T1Init+0x1e6>
			CLR_BIT(TCCR1A, PIN0);
    10f4:	af e4       	ldi	r26, 0x4F	; 79
    10f6:	b0 e0       	ldi	r27, 0x00	; 0
    10f8:	ef e4       	ldi	r30, 0x4F	; 79
    10fa:	f0 e0       	ldi	r31, 0x00	; 0
    10fc:	80 81       	ld	r24, Z
    10fe:	8e 7f       	andi	r24, 0xFE	; 254
    1100:	8c 93       	st	X, r24
			SET_BIT(TCCR1A, PIN1);
    1102:	af e4       	ldi	r26, 0x4F	; 79
    1104:	b0 e0       	ldi	r27, 0x00	; 0
    1106:	ef e4       	ldi	r30, 0x4F	; 79
    1108:	f0 e0       	ldi	r31, 0x00	; 0
    110a:	80 81       	ld	r24, Z
    110c:	82 60       	ori	r24, 0x02	; 2
    110e:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, PIN3);
    1110:	ae e4       	ldi	r26, 0x4E	; 78
    1112:	b0 e0       	ldi	r27, 0x00	; 0
    1114:	ee e4       	ldi	r30, 0x4E	; 78
    1116:	f0 e0       	ldi	r31, 0x00	; 0
    1118:	80 81       	ld	r24, Z
    111a:	88 60       	ori	r24, 0x08	; 8
    111c:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B, PIN4);
    111e:	ae e4       	ldi	r26, 0x4E	; 78
    1120:	b0 e0       	ldi	r27, 0x00	; 0
    1122:	ee e4       	ldi	r30, 0x4E	; 78
    1124:	f0 e0       	ldi	r31, 0x00	; 0
    1126:	80 81       	ld	r24, Z
    1128:	8f 7e       	andi	r24, 0xEF	; 239
    112a:	8c 93       	st	X, r24
			LOC_u8ReturnValue = E_OK;
    112c:	19 82       	std	Y+1, r1	; 0x01
    112e:	28 c1       	rjmp	.+592    	; 0x1380 <MCAL_T1_u8T1Init+0x436>
		} else if (LOC_u8Timer1Mode == FAST_PWM_10bit) {
    1130:	8a 81       	ldd	r24, Y+2	; 0x02
    1132:	87 30       	cpi	r24, 0x07	; 7
    1134:	f1 f4       	brne	.+60     	; 0x1172 <MCAL_T1_u8T1Init+0x228>
			SET_BIT(TCCR1A, PIN0);
    1136:	af e4       	ldi	r26, 0x4F	; 79
    1138:	b0 e0       	ldi	r27, 0x00	; 0
    113a:	ef e4       	ldi	r30, 0x4F	; 79
    113c:	f0 e0       	ldi	r31, 0x00	; 0
    113e:	80 81       	ld	r24, Z
    1140:	81 60       	ori	r24, 0x01	; 1
    1142:	8c 93       	st	X, r24
			SET_BIT(TCCR1A, PIN1);
    1144:	af e4       	ldi	r26, 0x4F	; 79
    1146:	b0 e0       	ldi	r27, 0x00	; 0
    1148:	ef e4       	ldi	r30, 0x4F	; 79
    114a:	f0 e0       	ldi	r31, 0x00	; 0
    114c:	80 81       	ld	r24, Z
    114e:	82 60       	ori	r24, 0x02	; 2
    1150:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, PIN3);
    1152:	ae e4       	ldi	r26, 0x4E	; 78
    1154:	b0 e0       	ldi	r27, 0x00	; 0
    1156:	ee e4       	ldi	r30, 0x4E	; 78
    1158:	f0 e0       	ldi	r31, 0x00	; 0
    115a:	80 81       	ld	r24, Z
    115c:	88 60       	ori	r24, 0x08	; 8
    115e:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B, PIN4);
    1160:	ae e4       	ldi	r26, 0x4E	; 78
    1162:	b0 e0       	ldi	r27, 0x00	; 0
    1164:	ee e4       	ldi	r30, 0x4E	; 78
    1166:	f0 e0       	ldi	r31, 0x00	; 0
    1168:	80 81       	ld	r24, Z
    116a:	8f 7e       	andi	r24, 0xEF	; 239
    116c:	8c 93       	st	X, r24
			LOC_u8ReturnValue = E_OK;
    116e:	19 82       	std	Y+1, r1	; 0x01
    1170:	07 c1       	rjmp	.+526    	; 0x1380 <MCAL_T1_u8T1Init+0x436>
		} else if (LOC_u8Timer1Mode == PWM_PHASE_AND_FREQUANCY_CORRECT_ICR1) {
    1172:	8a 81       	ldd	r24, Y+2	; 0x02
    1174:	88 30       	cpi	r24, 0x08	; 8
    1176:	f1 f4       	brne	.+60     	; 0x11b4 <MCAL_T1_u8T1Init+0x26a>
			CLR_BIT(TCCR1A, PIN0);
    1178:	af e4       	ldi	r26, 0x4F	; 79
    117a:	b0 e0       	ldi	r27, 0x00	; 0
    117c:	ef e4       	ldi	r30, 0x4F	; 79
    117e:	f0 e0       	ldi	r31, 0x00	; 0
    1180:	80 81       	ld	r24, Z
    1182:	8e 7f       	andi	r24, 0xFE	; 254
    1184:	8c 93       	st	X, r24
			CLR_BIT(TCCR1A, PIN1);
    1186:	af e4       	ldi	r26, 0x4F	; 79
    1188:	b0 e0       	ldi	r27, 0x00	; 0
    118a:	ef e4       	ldi	r30, 0x4F	; 79
    118c:	f0 e0       	ldi	r31, 0x00	; 0
    118e:	80 81       	ld	r24, Z
    1190:	8d 7f       	andi	r24, 0xFD	; 253
    1192:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B, PIN3);
    1194:	ae e4       	ldi	r26, 0x4E	; 78
    1196:	b0 e0       	ldi	r27, 0x00	; 0
    1198:	ee e4       	ldi	r30, 0x4E	; 78
    119a:	f0 e0       	ldi	r31, 0x00	; 0
    119c:	80 81       	ld	r24, Z
    119e:	87 7f       	andi	r24, 0xF7	; 247
    11a0:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, PIN4);
    11a2:	ae e4       	ldi	r26, 0x4E	; 78
    11a4:	b0 e0       	ldi	r27, 0x00	; 0
    11a6:	ee e4       	ldi	r30, 0x4E	; 78
    11a8:	f0 e0       	ldi	r31, 0x00	; 0
    11aa:	80 81       	ld	r24, Z
    11ac:	80 61       	ori	r24, 0x10	; 16
    11ae:	8c 93       	st	X, r24
			LOC_u8ReturnValue = E_OK;
    11b0:	19 82       	std	Y+1, r1	; 0x01
    11b2:	e6 c0       	rjmp	.+460    	; 0x1380 <MCAL_T1_u8T1Init+0x436>
		} else if (LOC_u8Timer1Mode == PWM_PHASE_AND_FREQUANCY_CORRECT_OCR1A) {
    11b4:	8a 81       	ldd	r24, Y+2	; 0x02
    11b6:	89 30       	cpi	r24, 0x09	; 9
    11b8:	f1 f4       	brne	.+60     	; 0x11f6 <MCAL_T1_u8T1Init+0x2ac>
			SET_BIT(TCCR1A, PIN0);
    11ba:	af e4       	ldi	r26, 0x4F	; 79
    11bc:	b0 e0       	ldi	r27, 0x00	; 0
    11be:	ef e4       	ldi	r30, 0x4F	; 79
    11c0:	f0 e0       	ldi	r31, 0x00	; 0
    11c2:	80 81       	ld	r24, Z
    11c4:	81 60       	ori	r24, 0x01	; 1
    11c6:	8c 93       	st	X, r24
			CLR_BIT(TCCR1A, PIN1);
    11c8:	af e4       	ldi	r26, 0x4F	; 79
    11ca:	b0 e0       	ldi	r27, 0x00	; 0
    11cc:	ef e4       	ldi	r30, 0x4F	; 79
    11ce:	f0 e0       	ldi	r31, 0x00	; 0
    11d0:	80 81       	ld	r24, Z
    11d2:	8d 7f       	andi	r24, 0xFD	; 253
    11d4:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B, PIN3);
    11d6:	ae e4       	ldi	r26, 0x4E	; 78
    11d8:	b0 e0       	ldi	r27, 0x00	; 0
    11da:	ee e4       	ldi	r30, 0x4E	; 78
    11dc:	f0 e0       	ldi	r31, 0x00	; 0
    11de:	80 81       	ld	r24, Z
    11e0:	87 7f       	andi	r24, 0xF7	; 247
    11e2:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, PIN4);
    11e4:	ae e4       	ldi	r26, 0x4E	; 78
    11e6:	b0 e0       	ldi	r27, 0x00	; 0
    11e8:	ee e4       	ldi	r30, 0x4E	; 78
    11ea:	f0 e0       	ldi	r31, 0x00	; 0
    11ec:	80 81       	ld	r24, Z
    11ee:	80 61       	ori	r24, 0x10	; 16
    11f0:	8c 93       	st	X, r24
			LOC_u8ReturnValue = E_OK;
    11f2:	19 82       	std	Y+1, r1	; 0x01
    11f4:	c5 c0       	rjmp	.+394    	; 0x1380 <MCAL_T1_u8T1Init+0x436>
		} else if (LOC_u8Timer1Mode == PWM_PHASE_CORRECT_ICR1) {
    11f6:	8a 81       	ldd	r24, Y+2	; 0x02
    11f8:	8a 30       	cpi	r24, 0x0A	; 10
    11fa:	f1 f4       	brne	.+60     	; 0x1238 <MCAL_T1_u8T1Init+0x2ee>
			CLR_BIT(TCCR1A, PIN0);
    11fc:	af e4       	ldi	r26, 0x4F	; 79
    11fe:	b0 e0       	ldi	r27, 0x00	; 0
    1200:	ef e4       	ldi	r30, 0x4F	; 79
    1202:	f0 e0       	ldi	r31, 0x00	; 0
    1204:	80 81       	ld	r24, Z
    1206:	8e 7f       	andi	r24, 0xFE	; 254
    1208:	8c 93       	st	X, r24
			SET_BIT(TCCR1A, PIN1);
    120a:	af e4       	ldi	r26, 0x4F	; 79
    120c:	b0 e0       	ldi	r27, 0x00	; 0
    120e:	ef e4       	ldi	r30, 0x4F	; 79
    1210:	f0 e0       	ldi	r31, 0x00	; 0
    1212:	80 81       	ld	r24, Z
    1214:	82 60       	ori	r24, 0x02	; 2
    1216:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B, PIN3);
    1218:	ae e4       	ldi	r26, 0x4E	; 78
    121a:	b0 e0       	ldi	r27, 0x00	; 0
    121c:	ee e4       	ldi	r30, 0x4E	; 78
    121e:	f0 e0       	ldi	r31, 0x00	; 0
    1220:	80 81       	ld	r24, Z
    1222:	87 7f       	andi	r24, 0xF7	; 247
    1224:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, PIN4);
    1226:	ae e4       	ldi	r26, 0x4E	; 78
    1228:	b0 e0       	ldi	r27, 0x00	; 0
    122a:	ee e4       	ldi	r30, 0x4E	; 78
    122c:	f0 e0       	ldi	r31, 0x00	; 0
    122e:	80 81       	ld	r24, Z
    1230:	80 61       	ori	r24, 0x10	; 16
    1232:	8c 93       	st	X, r24
			LOC_u8ReturnValue = E_OK;
    1234:	19 82       	std	Y+1, r1	; 0x01
    1236:	a4 c0       	rjmp	.+328    	; 0x1380 <MCAL_T1_u8T1Init+0x436>
		} else if (LOC_u8Timer1Mode == PWM_PHASE_CORRECT_OCR1A) {
    1238:	8a 81       	ldd	r24, Y+2	; 0x02
    123a:	8b 30       	cpi	r24, 0x0B	; 11
    123c:	f1 f4       	brne	.+60     	; 0x127a <MCAL_T1_u8T1Init+0x330>
			SET_BIT(TCCR1A, PIN0);
    123e:	af e4       	ldi	r26, 0x4F	; 79
    1240:	b0 e0       	ldi	r27, 0x00	; 0
    1242:	ef e4       	ldi	r30, 0x4F	; 79
    1244:	f0 e0       	ldi	r31, 0x00	; 0
    1246:	80 81       	ld	r24, Z
    1248:	81 60       	ori	r24, 0x01	; 1
    124a:	8c 93       	st	X, r24
			SET_BIT(TCCR1A, PIN1);
    124c:	af e4       	ldi	r26, 0x4F	; 79
    124e:	b0 e0       	ldi	r27, 0x00	; 0
    1250:	ef e4       	ldi	r30, 0x4F	; 79
    1252:	f0 e0       	ldi	r31, 0x00	; 0
    1254:	80 81       	ld	r24, Z
    1256:	82 60       	ori	r24, 0x02	; 2
    1258:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B, PIN3);
    125a:	ae e4       	ldi	r26, 0x4E	; 78
    125c:	b0 e0       	ldi	r27, 0x00	; 0
    125e:	ee e4       	ldi	r30, 0x4E	; 78
    1260:	f0 e0       	ldi	r31, 0x00	; 0
    1262:	80 81       	ld	r24, Z
    1264:	87 7f       	andi	r24, 0xF7	; 247
    1266:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, PIN4);
    1268:	ae e4       	ldi	r26, 0x4E	; 78
    126a:	b0 e0       	ldi	r27, 0x00	; 0
    126c:	ee e4       	ldi	r30, 0x4E	; 78
    126e:	f0 e0       	ldi	r31, 0x00	; 0
    1270:	80 81       	ld	r24, Z
    1272:	80 61       	ori	r24, 0x10	; 16
    1274:	8c 93       	st	X, r24
			LOC_u8ReturnValue = E_OK;
    1276:	19 82       	std	Y+1, r1	; 0x01
    1278:	83 c0       	rjmp	.+262    	; 0x1380 <MCAL_T1_u8T1Init+0x436>
		} else if (LOC_u8Timer1Mode == CTC_ICR1) {
    127a:	8a 81       	ldd	r24, Y+2	; 0x02
    127c:	8c 30       	cpi	r24, 0x0C	; 12
    127e:	f1 f4       	brne	.+60     	; 0x12bc <MCAL_T1_u8T1Init+0x372>
			CLR_BIT(TCCR1A, PIN0);
    1280:	af e4       	ldi	r26, 0x4F	; 79
    1282:	b0 e0       	ldi	r27, 0x00	; 0
    1284:	ef e4       	ldi	r30, 0x4F	; 79
    1286:	f0 e0       	ldi	r31, 0x00	; 0
    1288:	80 81       	ld	r24, Z
    128a:	8e 7f       	andi	r24, 0xFE	; 254
    128c:	8c 93       	st	X, r24
			CLR_BIT(TCCR1A, PIN1);
    128e:	af e4       	ldi	r26, 0x4F	; 79
    1290:	b0 e0       	ldi	r27, 0x00	; 0
    1292:	ef e4       	ldi	r30, 0x4F	; 79
    1294:	f0 e0       	ldi	r31, 0x00	; 0
    1296:	80 81       	ld	r24, Z
    1298:	8d 7f       	andi	r24, 0xFD	; 253
    129a:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, PIN3);
    129c:	ae e4       	ldi	r26, 0x4E	; 78
    129e:	b0 e0       	ldi	r27, 0x00	; 0
    12a0:	ee e4       	ldi	r30, 0x4E	; 78
    12a2:	f0 e0       	ldi	r31, 0x00	; 0
    12a4:	80 81       	ld	r24, Z
    12a6:	88 60       	ori	r24, 0x08	; 8
    12a8:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, PIN4);
    12aa:	ae e4       	ldi	r26, 0x4E	; 78
    12ac:	b0 e0       	ldi	r27, 0x00	; 0
    12ae:	ee e4       	ldi	r30, 0x4E	; 78
    12b0:	f0 e0       	ldi	r31, 0x00	; 0
    12b2:	80 81       	ld	r24, Z
    12b4:	80 61       	ori	r24, 0x10	; 16
    12b6:	8c 93       	st	X, r24
			LOC_u8ReturnValue = E_OK;
    12b8:	19 82       	std	Y+1, r1	; 0x01
    12ba:	62 c0       	rjmp	.+196    	; 0x1380 <MCAL_T1_u8T1Init+0x436>
		} else if (LOC_u8Timer1Mode == REVERSED_MODE) {
    12bc:	8a 81       	ldd	r24, Y+2	; 0x02
    12be:	8d 30       	cpi	r24, 0x0D	; 13
    12c0:	f1 f4       	brne	.+60     	; 0x12fe <MCAL_T1_u8T1Init+0x3b4>
			SET_BIT(TCCR1A, PIN0);
    12c2:	af e4       	ldi	r26, 0x4F	; 79
    12c4:	b0 e0       	ldi	r27, 0x00	; 0
    12c6:	ef e4       	ldi	r30, 0x4F	; 79
    12c8:	f0 e0       	ldi	r31, 0x00	; 0
    12ca:	80 81       	ld	r24, Z
    12cc:	81 60       	ori	r24, 0x01	; 1
    12ce:	8c 93       	st	X, r24
			CLR_BIT(TCCR1A, PIN1);
    12d0:	af e4       	ldi	r26, 0x4F	; 79
    12d2:	b0 e0       	ldi	r27, 0x00	; 0
    12d4:	ef e4       	ldi	r30, 0x4F	; 79
    12d6:	f0 e0       	ldi	r31, 0x00	; 0
    12d8:	80 81       	ld	r24, Z
    12da:	8d 7f       	andi	r24, 0xFD	; 253
    12dc:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, PIN3);
    12de:	ae e4       	ldi	r26, 0x4E	; 78
    12e0:	b0 e0       	ldi	r27, 0x00	; 0
    12e2:	ee e4       	ldi	r30, 0x4E	; 78
    12e4:	f0 e0       	ldi	r31, 0x00	; 0
    12e6:	80 81       	ld	r24, Z
    12e8:	88 60       	ori	r24, 0x08	; 8
    12ea:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, PIN4);
    12ec:	ae e4       	ldi	r26, 0x4E	; 78
    12ee:	b0 e0       	ldi	r27, 0x00	; 0
    12f0:	ee e4       	ldi	r30, 0x4E	; 78
    12f2:	f0 e0       	ldi	r31, 0x00	; 0
    12f4:	80 81       	ld	r24, Z
    12f6:	80 61       	ori	r24, 0x10	; 16
    12f8:	8c 93       	st	X, r24
			LOC_u8ReturnValue = E_OK;
    12fa:	19 82       	std	Y+1, r1	; 0x01
    12fc:	41 c0       	rjmp	.+130    	; 0x1380 <MCAL_T1_u8T1Init+0x436>
		} else if (LOC_u8Timer1Mode == FAST_PWM_ICR1) {
    12fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1300:	8e 30       	cpi	r24, 0x0E	; 14
    1302:	f1 f4       	brne	.+60     	; 0x1340 <MCAL_T1_u8T1Init+0x3f6>
			CLR_BIT(TCCR1A, PIN0);
    1304:	af e4       	ldi	r26, 0x4F	; 79
    1306:	b0 e0       	ldi	r27, 0x00	; 0
    1308:	ef e4       	ldi	r30, 0x4F	; 79
    130a:	f0 e0       	ldi	r31, 0x00	; 0
    130c:	80 81       	ld	r24, Z
    130e:	8e 7f       	andi	r24, 0xFE	; 254
    1310:	8c 93       	st	X, r24
			SET_BIT(TCCR1A, PIN1);
    1312:	af e4       	ldi	r26, 0x4F	; 79
    1314:	b0 e0       	ldi	r27, 0x00	; 0
    1316:	ef e4       	ldi	r30, 0x4F	; 79
    1318:	f0 e0       	ldi	r31, 0x00	; 0
    131a:	80 81       	ld	r24, Z
    131c:	82 60       	ori	r24, 0x02	; 2
    131e:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, PIN3);
    1320:	ae e4       	ldi	r26, 0x4E	; 78
    1322:	b0 e0       	ldi	r27, 0x00	; 0
    1324:	ee e4       	ldi	r30, 0x4E	; 78
    1326:	f0 e0       	ldi	r31, 0x00	; 0
    1328:	80 81       	ld	r24, Z
    132a:	88 60       	ori	r24, 0x08	; 8
    132c:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, PIN4);
    132e:	ae e4       	ldi	r26, 0x4E	; 78
    1330:	b0 e0       	ldi	r27, 0x00	; 0
    1332:	ee e4       	ldi	r30, 0x4E	; 78
    1334:	f0 e0       	ldi	r31, 0x00	; 0
    1336:	80 81       	ld	r24, Z
    1338:	80 61       	ori	r24, 0x10	; 16
    133a:	8c 93       	st	X, r24
			LOC_u8ReturnValue = E_OK;
    133c:	19 82       	std	Y+1, r1	; 0x01
    133e:	20 c0       	rjmp	.+64     	; 0x1380 <MCAL_T1_u8T1Init+0x436>
		} else if (LOC_u8Timer1Mode == FAST_PWM_OCR1A) {
    1340:	8a 81       	ldd	r24, Y+2	; 0x02
    1342:	8f 30       	cpi	r24, 0x0F	; 15
    1344:	e9 f4       	brne	.+58     	; 0x1380 <MCAL_T1_u8T1Init+0x436>
			SET_BIT(TCCR1A, PIN0);
    1346:	af e4       	ldi	r26, 0x4F	; 79
    1348:	b0 e0       	ldi	r27, 0x00	; 0
    134a:	ef e4       	ldi	r30, 0x4F	; 79
    134c:	f0 e0       	ldi	r31, 0x00	; 0
    134e:	80 81       	ld	r24, Z
    1350:	81 60       	ori	r24, 0x01	; 1
    1352:	8c 93       	st	X, r24
			SET_BIT(TCCR1A, PIN1);
    1354:	af e4       	ldi	r26, 0x4F	; 79
    1356:	b0 e0       	ldi	r27, 0x00	; 0
    1358:	ef e4       	ldi	r30, 0x4F	; 79
    135a:	f0 e0       	ldi	r31, 0x00	; 0
    135c:	80 81       	ld	r24, Z
    135e:	82 60       	ori	r24, 0x02	; 2
    1360:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, PIN3);
    1362:	ae e4       	ldi	r26, 0x4E	; 78
    1364:	b0 e0       	ldi	r27, 0x00	; 0
    1366:	ee e4       	ldi	r30, 0x4E	; 78
    1368:	f0 e0       	ldi	r31, 0x00	; 0
    136a:	80 81       	ld	r24, Z
    136c:	88 60       	ori	r24, 0x08	; 8
    136e:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, PIN4);
    1370:	ae e4       	ldi	r26, 0x4E	; 78
    1372:	b0 e0       	ldi	r27, 0x00	; 0
    1374:	ee e4       	ldi	r30, 0x4E	; 78
    1376:	f0 e0       	ldi	r31, 0x00	; 0
    1378:	80 81       	ld	r24, Z
    137a:	80 61       	ori	r24, 0x10	; 16
    137c:	8c 93       	st	X, r24
			LOC_u8ReturnValue = E_OK;
    137e:	19 82       	std	Y+1, r1	; 0x01
			//NOTHING
		}
	} else {
		//NOTHING
	}
	return LOC_u8ReturnValue;
    1380:	89 81       	ldd	r24, Y+1	; 0x01
}
    1382:	0f 90       	pop	r0
    1384:	0f 90       	pop	r0
    1386:	cf 91       	pop	r28
    1388:	df 91       	pop	r29
    138a:	08 95       	ret

0000138c <MCAL_T1_u8T1Prescaler>:
u8 MCAL_T1_u8T1Prescaler(u8 LOC_u8Clock_Selection, f32 *LOC_pfl32TickTime) {
    138c:	df 93       	push	r29
    138e:	cf 93       	push	r28
    1390:	00 d0       	rcall	.+0      	; 0x1392 <MCAL_T1_u8T1Prescaler+0x6>
    1392:	00 d0       	rcall	.+0      	; 0x1394 <MCAL_T1_u8T1Prescaler+0x8>
    1394:	cd b7       	in	r28, 0x3d	; 61
    1396:	de b7       	in	r29, 0x3e	; 62
    1398:	8a 83       	std	Y+2, r24	; 0x02
    139a:	7c 83       	std	Y+4, r23	; 0x04
    139c:	6b 83       	std	Y+3, r22	; 0x03
	u8 LOC_u8ReturnValue = E_NOT_OK;
    139e:	81 e0       	ldi	r24, 0x01	; 1
    13a0:	89 83       	std	Y+1, r24	; 0x01
	if (LOC_u8Clock_Selection <= EXTERNAL_RISING_EDGE) {
    13a2:	8a 81       	ldd	r24, Y+2	; 0x02
    13a4:	88 30       	cpi	r24, 0x08	; 8
    13a6:	08 f0       	brcs	.+2      	; 0x13aa <MCAL_T1_u8T1Prescaler+0x1e>
    13a8:	01 c1       	rjmp	.+514    	; 0x15ac <MCAL_T1_u8T1Prescaler+0x220>
		if (LOC_u8Clock_Selection == COUNTER_STOP) {
    13aa:	8a 81       	ldd	r24, Y+2	; 0x02
    13ac:	88 23       	and	r24, r24
    13ae:	b9 f4       	brne	.+46     	; 0x13de <MCAL_T1_u8T1Prescaler+0x52>
			CLR_BIT(TCCR1B, PIN0);
    13b0:	ae e4       	ldi	r26, 0x4E	; 78
    13b2:	b0 e0       	ldi	r27, 0x00	; 0
    13b4:	ee e4       	ldi	r30, 0x4E	; 78
    13b6:	f0 e0       	ldi	r31, 0x00	; 0
    13b8:	80 81       	ld	r24, Z
    13ba:	8e 7f       	andi	r24, 0xFE	; 254
    13bc:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B, PIN1);
    13be:	ae e4       	ldi	r26, 0x4E	; 78
    13c0:	b0 e0       	ldi	r27, 0x00	; 0
    13c2:	ee e4       	ldi	r30, 0x4E	; 78
    13c4:	f0 e0       	ldi	r31, 0x00	; 0
    13c6:	80 81       	ld	r24, Z
    13c8:	8d 7f       	andi	r24, 0xFD	; 253
    13ca:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B, PIN2);
    13cc:	ae e4       	ldi	r26, 0x4E	; 78
    13ce:	b0 e0       	ldi	r27, 0x00	; 0
    13d0:	ee e4       	ldi	r30, 0x4E	; 78
    13d2:	f0 e0       	ldi	r31, 0x00	; 0
    13d4:	80 81       	ld	r24, Z
    13d6:	8b 7f       	andi	r24, 0xFB	; 251
    13d8:	8c 93       	st	X, r24
			LOC_u8ReturnValue = E_OK;
    13da:	19 82       	std	Y+1, r1	; 0x01
    13dc:	e7 c0       	rjmp	.+462    	; 0x15ac <MCAL_T1_u8T1Prescaler+0x220>
		} else if (LOC_u8Clock_Selection == PRESCALLING_0) {
    13de:	8a 81       	ldd	r24, Y+2	; 0x02
    13e0:	81 30       	cpi	r24, 0x01	; 1
    13e2:	09 f5       	brne	.+66     	; 0x1426 <MCAL_T1_u8T1Prescaler+0x9a>
			SET_BIT(TCCR1B, PIN0);
    13e4:	ae e4       	ldi	r26, 0x4E	; 78
    13e6:	b0 e0       	ldi	r27, 0x00	; 0
    13e8:	ee e4       	ldi	r30, 0x4E	; 78
    13ea:	f0 e0       	ldi	r31, 0x00	; 0
    13ec:	80 81       	ld	r24, Z
    13ee:	81 60       	ori	r24, 0x01	; 1
    13f0:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B, PIN1);
    13f2:	ae e4       	ldi	r26, 0x4E	; 78
    13f4:	b0 e0       	ldi	r27, 0x00	; 0
    13f6:	ee e4       	ldi	r30, 0x4E	; 78
    13f8:	f0 e0       	ldi	r31, 0x00	; 0
    13fa:	80 81       	ld	r24, Z
    13fc:	8d 7f       	andi	r24, 0xFD	; 253
    13fe:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B, PIN2);
    1400:	ae e4       	ldi	r26, 0x4E	; 78
    1402:	b0 e0       	ldi	r27, 0x00	; 0
    1404:	ee e4       	ldi	r30, 0x4E	; 78
    1406:	f0 e0       	ldi	r31, 0x00	; 0
    1408:	80 81       	ld	r24, Z
    140a:	8b 7f       	andi	r24, 0xFB	; 251
    140c:	8c 93       	st	X, r24
			*LOC_pfl32TickTime = PRESCALLING0 / (f32) CPU_FREQUNCY;
    140e:	eb 81       	ldd	r30, Y+3	; 0x03
    1410:	fc 81       	ldd	r31, Y+4	; 0x04
    1412:	8d eb       	ldi	r24, 0xBD	; 189
    1414:	97 e3       	ldi	r25, 0x37	; 55
    1416:	a6 e8       	ldi	r26, 0x86	; 134
    1418:	b3 e3       	ldi	r27, 0x33	; 51
    141a:	80 83       	st	Z, r24
    141c:	91 83       	std	Z+1, r25	; 0x01
    141e:	a2 83       	std	Z+2, r26	; 0x02
    1420:	b3 83       	std	Z+3, r27	; 0x03
			LOC_u8ReturnValue = E_OK;
    1422:	19 82       	std	Y+1, r1	; 0x01
    1424:	c3 c0       	rjmp	.+390    	; 0x15ac <MCAL_T1_u8T1Prescaler+0x220>
		} else if (LOC_u8Clock_Selection == PRESCALLING_8) {
    1426:	8a 81       	ldd	r24, Y+2	; 0x02
    1428:	82 30       	cpi	r24, 0x02	; 2
    142a:	09 f5       	brne	.+66     	; 0x146e <MCAL_T1_u8T1Prescaler+0xe2>
			CLR_BIT(TCCR1B, PIN0);
    142c:	ae e4       	ldi	r26, 0x4E	; 78
    142e:	b0 e0       	ldi	r27, 0x00	; 0
    1430:	ee e4       	ldi	r30, 0x4E	; 78
    1432:	f0 e0       	ldi	r31, 0x00	; 0
    1434:	80 81       	ld	r24, Z
    1436:	8e 7f       	andi	r24, 0xFE	; 254
    1438:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, PIN1);
    143a:	ae e4       	ldi	r26, 0x4E	; 78
    143c:	b0 e0       	ldi	r27, 0x00	; 0
    143e:	ee e4       	ldi	r30, 0x4E	; 78
    1440:	f0 e0       	ldi	r31, 0x00	; 0
    1442:	80 81       	ld	r24, Z
    1444:	82 60       	ori	r24, 0x02	; 2
    1446:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B, PIN2);
    1448:	ae e4       	ldi	r26, 0x4E	; 78
    144a:	b0 e0       	ldi	r27, 0x00	; 0
    144c:	ee e4       	ldi	r30, 0x4E	; 78
    144e:	f0 e0       	ldi	r31, 0x00	; 0
    1450:	80 81       	ld	r24, Z
    1452:	8b 7f       	andi	r24, 0xFB	; 251
    1454:	8c 93       	st	X, r24
			*LOC_pfl32TickTime = PRESCALLING8 / (f32) CPU_FREQUNCY;
    1456:	eb 81       	ldd	r30, Y+3	; 0x03
    1458:	fc 81       	ldd	r31, Y+4	; 0x04
    145a:	8d eb       	ldi	r24, 0xBD	; 189
    145c:	97 e3       	ldi	r25, 0x37	; 55
    145e:	a6 e0       	ldi	r26, 0x06	; 6
    1460:	b5 e3       	ldi	r27, 0x35	; 53
    1462:	80 83       	st	Z, r24
    1464:	91 83       	std	Z+1, r25	; 0x01
    1466:	a2 83       	std	Z+2, r26	; 0x02
    1468:	b3 83       	std	Z+3, r27	; 0x03
			LOC_u8ReturnValue = E_OK;
    146a:	19 82       	std	Y+1, r1	; 0x01
    146c:	9f c0       	rjmp	.+318    	; 0x15ac <MCAL_T1_u8T1Prescaler+0x220>
		} else if (LOC_u8Clock_Selection == PRESCALLING_64) {
    146e:	8a 81       	ldd	r24, Y+2	; 0x02
    1470:	83 30       	cpi	r24, 0x03	; 3
    1472:	09 f5       	brne	.+66     	; 0x14b6 <MCAL_T1_u8T1Prescaler+0x12a>
			SET_BIT(TCCR1B, PIN0);
    1474:	ae e4       	ldi	r26, 0x4E	; 78
    1476:	b0 e0       	ldi	r27, 0x00	; 0
    1478:	ee e4       	ldi	r30, 0x4E	; 78
    147a:	f0 e0       	ldi	r31, 0x00	; 0
    147c:	80 81       	ld	r24, Z
    147e:	81 60       	ori	r24, 0x01	; 1
    1480:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, PIN1);
    1482:	ae e4       	ldi	r26, 0x4E	; 78
    1484:	b0 e0       	ldi	r27, 0x00	; 0
    1486:	ee e4       	ldi	r30, 0x4E	; 78
    1488:	f0 e0       	ldi	r31, 0x00	; 0
    148a:	80 81       	ld	r24, Z
    148c:	82 60       	ori	r24, 0x02	; 2
    148e:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B, PIN2);
    1490:	ae e4       	ldi	r26, 0x4E	; 78
    1492:	b0 e0       	ldi	r27, 0x00	; 0
    1494:	ee e4       	ldi	r30, 0x4E	; 78
    1496:	f0 e0       	ldi	r31, 0x00	; 0
    1498:	80 81       	ld	r24, Z
    149a:	8b 7f       	andi	r24, 0xFB	; 251
    149c:	8c 93       	st	X, r24
			*LOC_pfl32TickTime = PRESCALLING64 / (f32) CPU_FREQUNCY;
    149e:	eb 81       	ldd	r30, Y+3	; 0x03
    14a0:	fc 81       	ldd	r31, Y+4	; 0x04
    14a2:	8d eb       	ldi	r24, 0xBD	; 189
    14a4:	97 e3       	ldi	r25, 0x37	; 55
    14a6:	a6 e8       	ldi	r26, 0x86	; 134
    14a8:	b6 e3       	ldi	r27, 0x36	; 54
    14aa:	80 83       	st	Z, r24
    14ac:	91 83       	std	Z+1, r25	; 0x01
    14ae:	a2 83       	std	Z+2, r26	; 0x02
    14b0:	b3 83       	std	Z+3, r27	; 0x03
			LOC_u8ReturnValue = E_OK;
    14b2:	19 82       	std	Y+1, r1	; 0x01
    14b4:	7b c0       	rjmp	.+246    	; 0x15ac <MCAL_T1_u8T1Prescaler+0x220>
		} else if (LOC_u8Clock_Selection == PRESCALLING_256) {
    14b6:	8a 81       	ldd	r24, Y+2	; 0x02
    14b8:	84 30       	cpi	r24, 0x04	; 4
    14ba:	09 f5       	brne	.+66     	; 0x14fe <MCAL_T1_u8T1Prescaler+0x172>
			CLR_BIT(TCCR1B, PIN0);
    14bc:	ae e4       	ldi	r26, 0x4E	; 78
    14be:	b0 e0       	ldi	r27, 0x00	; 0
    14c0:	ee e4       	ldi	r30, 0x4E	; 78
    14c2:	f0 e0       	ldi	r31, 0x00	; 0
    14c4:	80 81       	ld	r24, Z
    14c6:	8e 7f       	andi	r24, 0xFE	; 254
    14c8:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B, PIN1);
    14ca:	ae e4       	ldi	r26, 0x4E	; 78
    14cc:	b0 e0       	ldi	r27, 0x00	; 0
    14ce:	ee e4       	ldi	r30, 0x4E	; 78
    14d0:	f0 e0       	ldi	r31, 0x00	; 0
    14d2:	80 81       	ld	r24, Z
    14d4:	8d 7f       	andi	r24, 0xFD	; 253
    14d6:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, PIN2);
    14d8:	ae e4       	ldi	r26, 0x4E	; 78
    14da:	b0 e0       	ldi	r27, 0x00	; 0
    14dc:	ee e4       	ldi	r30, 0x4E	; 78
    14de:	f0 e0       	ldi	r31, 0x00	; 0
    14e0:	80 81       	ld	r24, Z
    14e2:	84 60       	ori	r24, 0x04	; 4
    14e4:	8c 93       	st	X, r24
			*LOC_pfl32TickTime = PRESCALLING256 / (f32) CPU_FREQUNCY;
    14e6:	eb 81       	ldd	r30, Y+3	; 0x03
    14e8:	fc 81       	ldd	r31, Y+4	; 0x04
    14ea:	8d eb       	ldi	r24, 0xBD	; 189
    14ec:	97 e3       	ldi	r25, 0x37	; 55
    14ee:	a6 e8       	ldi	r26, 0x86	; 134
    14f0:	b7 e3       	ldi	r27, 0x37	; 55
    14f2:	80 83       	st	Z, r24
    14f4:	91 83       	std	Z+1, r25	; 0x01
    14f6:	a2 83       	std	Z+2, r26	; 0x02
    14f8:	b3 83       	std	Z+3, r27	; 0x03
			LOC_u8ReturnValue = E_OK;
    14fa:	19 82       	std	Y+1, r1	; 0x01
    14fc:	57 c0       	rjmp	.+174    	; 0x15ac <MCAL_T1_u8T1Prescaler+0x220>
		} else if (LOC_u8Clock_Selection == PRESCALLING_1024) {
    14fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1500:	85 30       	cpi	r24, 0x05	; 5
    1502:	09 f5       	brne	.+66     	; 0x1546 <MCAL_T1_u8T1Prescaler+0x1ba>
			SET_BIT(TCCR1B, PIN0);
    1504:	ae e4       	ldi	r26, 0x4E	; 78
    1506:	b0 e0       	ldi	r27, 0x00	; 0
    1508:	ee e4       	ldi	r30, 0x4E	; 78
    150a:	f0 e0       	ldi	r31, 0x00	; 0
    150c:	80 81       	ld	r24, Z
    150e:	81 60       	ori	r24, 0x01	; 1
    1510:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B, PIN1);
    1512:	ae e4       	ldi	r26, 0x4E	; 78
    1514:	b0 e0       	ldi	r27, 0x00	; 0
    1516:	ee e4       	ldi	r30, 0x4E	; 78
    1518:	f0 e0       	ldi	r31, 0x00	; 0
    151a:	80 81       	ld	r24, Z
    151c:	8d 7f       	andi	r24, 0xFD	; 253
    151e:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, PIN2);
    1520:	ae e4       	ldi	r26, 0x4E	; 78
    1522:	b0 e0       	ldi	r27, 0x00	; 0
    1524:	ee e4       	ldi	r30, 0x4E	; 78
    1526:	f0 e0       	ldi	r31, 0x00	; 0
    1528:	80 81       	ld	r24, Z
    152a:	84 60       	ori	r24, 0x04	; 4
    152c:	8c 93       	st	X, r24
			*LOC_pfl32TickTime = PRESCALLING1024 / (f32) CPU_FREQUNCY;
    152e:	eb 81       	ldd	r30, Y+3	; 0x03
    1530:	fc 81       	ldd	r31, Y+4	; 0x04
    1532:	8d eb       	ldi	r24, 0xBD	; 189
    1534:	97 e3       	ldi	r25, 0x37	; 55
    1536:	a6 e8       	ldi	r26, 0x86	; 134
    1538:	b8 e3       	ldi	r27, 0x38	; 56
    153a:	80 83       	st	Z, r24
    153c:	91 83       	std	Z+1, r25	; 0x01
    153e:	a2 83       	std	Z+2, r26	; 0x02
    1540:	b3 83       	std	Z+3, r27	; 0x03
			LOC_u8ReturnValue = E_OK;
    1542:	19 82       	std	Y+1, r1	; 0x01
    1544:	33 c0       	rjmp	.+102    	; 0x15ac <MCAL_T1_u8T1Prescaler+0x220>
		} else if (LOC_u8Clock_Selection == EXTERNAL_FALLING_EDGE) {
    1546:	8a 81       	ldd	r24, Y+2	; 0x02
    1548:	86 30       	cpi	r24, 0x06	; 6
    154a:	b9 f4       	brne	.+46     	; 0x157a <MCAL_T1_u8T1Prescaler+0x1ee>
			CLR_BIT(TCCR1B, PIN0);
    154c:	ae e4       	ldi	r26, 0x4E	; 78
    154e:	b0 e0       	ldi	r27, 0x00	; 0
    1550:	ee e4       	ldi	r30, 0x4E	; 78
    1552:	f0 e0       	ldi	r31, 0x00	; 0
    1554:	80 81       	ld	r24, Z
    1556:	8e 7f       	andi	r24, 0xFE	; 254
    1558:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, PIN1);
    155a:	ae e4       	ldi	r26, 0x4E	; 78
    155c:	b0 e0       	ldi	r27, 0x00	; 0
    155e:	ee e4       	ldi	r30, 0x4E	; 78
    1560:	f0 e0       	ldi	r31, 0x00	; 0
    1562:	80 81       	ld	r24, Z
    1564:	82 60       	ori	r24, 0x02	; 2
    1566:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, PIN2);
    1568:	ae e4       	ldi	r26, 0x4E	; 78
    156a:	b0 e0       	ldi	r27, 0x00	; 0
    156c:	ee e4       	ldi	r30, 0x4E	; 78
    156e:	f0 e0       	ldi	r31, 0x00	; 0
    1570:	80 81       	ld	r24, Z
    1572:	84 60       	ori	r24, 0x04	; 4
    1574:	8c 93       	st	X, r24
			LOC_u8ReturnValue = E_OK;
    1576:	19 82       	std	Y+1, r1	; 0x01
    1578:	19 c0       	rjmp	.+50     	; 0x15ac <MCAL_T1_u8T1Prescaler+0x220>
		} else if (LOC_u8Clock_Selection == EXTERNAL_RISING_EDGE) {
    157a:	8a 81       	ldd	r24, Y+2	; 0x02
    157c:	87 30       	cpi	r24, 0x07	; 7
    157e:	b1 f4       	brne	.+44     	; 0x15ac <MCAL_T1_u8T1Prescaler+0x220>
			SET_BIT(TCCR1B, PIN0);
    1580:	ae e4       	ldi	r26, 0x4E	; 78
    1582:	b0 e0       	ldi	r27, 0x00	; 0
    1584:	ee e4       	ldi	r30, 0x4E	; 78
    1586:	f0 e0       	ldi	r31, 0x00	; 0
    1588:	80 81       	ld	r24, Z
    158a:	81 60       	ori	r24, 0x01	; 1
    158c:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, PIN1);
    158e:	ae e4       	ldi	r26, 0x4E	; 78
    1590:	b0 e0       	ldi	r27, 0x00	; 0
    1592:	ee e4       	ldi	r30, 0x4E	; 78
    1594:	f0 e0       	ldi	r31, 0x00	; 0
    1596:	80 81       	ld	r24, Z
    1598:	82 60       	ori	r24, 0x02	; 2
    159a:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, PIN2);
    159c:	ae e4       	ldi	r26, 0x4E	; 78
    159e:	b0 e0       	ldi	r27, 0x00	; 0
    15a0:	ee e4       	ldi	r30, 0x4E	; 78
    15a2:	f0 e0       	ldi	r31, 0x00	; 0
    15a4:	80 81       	ld	r24, Z
    15a6:	84 60       	ori	r24, 0x04	; 4
    15a8:	8c 93       	st	X, r24
			LOC_u8ReturnValue = E_OK;
    15aa:	19 82       	std	Y+1, r1	; 0x01
			//NOTHING
		}
	} else {
		//NOTHING
	}
	return LOC_u8ReturnValue;
    15ac:	89 81       	ldd	r24, Y+1	; 0x01
}
    15ae:	0f 90       	pop	r0
    15b0:	0f 90       	pop	r0
    15b2:	0f 90       	pop	r0
    15b4:	0f 90       	pop	r0
    15b6:	cf 91       	pop	r28
    15b8:	df 91       	pop	r29
    15ba:	08 95       	ret

000015bc <MCAL_T1_u8T1CompareOutputMode>:
//Fast MODE PWM & PHASE CORRECT
u8 MCAL_T1_u8T1CompareOutputMode(u8 LOC_u8OutputMode, u8 LOC_u8Channel) {
    15bc:	df 93       	push	r29
    15be:	cf 93       	push	r28
    15c0:	00 d0       	rcall	.+0      	; 0x15c2 <MCAL_T1_u8T1CompareOutputMode+0x6>
    15c2:	0f 92       	push	r0
    15c4:	cd b7       	in	r28, 0x3d	; 61
    15c6:	de b7       	in	r29, 0x3e	; 62
    15c8:	8a 83       	std	Y+2, r24	; 0x02
    15ca:	6b 83       	std	Y+3, r22	; 0x03
	u8 LOC_u8ReturnValue = E_NOT_OK;
    15cc:	81 e0       	ldi	r24, 0x01	; 1
    15ce:	89 83       	std	Y+1, r24	; 0x01
	if (LOC_u8OutputMode <= INVERTING_MODE && LOC_u8Channel <= CHENNEL_B) {
    15d0:	8a 81       	ldd	r24, Y+2	; 0x02
    15d2:	82 30       	cpi	r24, 0x02	; 2
    15d4:	08 f0       	brcs	.+2      	; 0x15d8 <MCAL_T1_u8T1CompareOutputMode+0x1c>
    15d6:	72 c0       	rjmp	.+228    	; 0x16bc <MCAL_T1_u8T1CompareOutputMode+0x100>
    15d8:	8b 81       	ldd	r24, Y+3	; 0x03
    15da:	82 30       	cpi	r24, 0x02	; 2
    15dc:	08 f0       	brcs	.+2      	; 0x15e0 <MCAL_T1_u8T1CompareOutputMode+0x24>
    15de:	6e c0       	rjmp	.+220    	; 0x16bc <MCAL_T1_u8T1CompareOutputMode+0x100>
		if (LOC_u8Channel == CHENNEL_A) {
    15e0:	8b 81       	ldd	r24, Y+3	; 0x03
    15e2:	88 23       	and	r24, r24
    15e4:	a9 f5       	brne	.+106    	; 0x1650 <MCAL_T1_u8T1CompareOutputMode+0x94>
			if (LOC_u8OutputMode == NON_INVERTING_MODE) {
    15e6:	8a 81       	ldd	r24, Y+2	; 0x02
    15e8:	88 23       	and	r24, r24
    15ea:	b9 f4       	brne	.+46     	; 0x161a <MCAL_T1_u8T1CompareOutputMode+0x5e>
				CLR_BIT(TCCR1A, PIN6);
    15ec:	af e4       	ldi	r26, 0x4F	; 79
    15ee:	b0 e0       	ldi	r27, 0x00	; 0
    15f0:	ef e4       	ldi	r30, 0x4F	; 79
    15f2:	f0 e0       	ldi	r31, 0x00	; 0
    15f4:	80 81       	ld	r24, Z
    15f6:	8f 7b       	andi	r24, 0xBF	; 191
    15f8:	8c 93       	st	X, r24
				SET_BIT(TCCR1A, PIN7);
    15fa:	af e4       	ldi	r26, 0x4F	; 79
    15fc:	b0 e0       	ldi	r27, 0x00	; 0
    15fe:	ef e4       	ldi	r30, 0x4F	; 79
    1600:	f0 e0       	ldi	r31, 0x00	; 0
    1602:	80 81       	ld	r24, Z
    1604:	80 68       	ori	r24, 0x80	; 128
    1606:	8c 93       	st	X, r24
				SET_BIT(DDRD, PIN5);
    1608:	a1 e3       	ldi	r26, 0x31	; 49
    160a:	b0 e0       	ldi	r27, 0x00	; 0
    160c:	e1 e3       	ldi	r30, 0x31	; 49
    160e:	f0 e0       	ldi	r31, 0x00	; 0
    1610:	80 81       	ld	r24, Z
    1612:	80 62       	ori	r24, 0x20	; 32
    1614:	8c 93       	st	X, r24
				LOC_u8ReturnValue = E_OK;
    1616:	19 82       	std	Y+1, r1	; 0x01
    1618:	51 c0       	rjmp	.+162    	; 0x16bc <MCAL_T1_u8T1CompareOutputMode+0x100>
			} else if (LOC_u8OutputMode == INVERTING_MODE) {
    161a:	8a 81       	ldd	r24, Y+2	; 0x02
    161c:	81 30       	cpi	r24, 0x01	; 1
    161e:	09 f0       	breq	.+2      	; 0x1622 <MCAL_T1_u8T1CompareOutputMode+0x66>
    1620:	4d c0       	rjmp	.+154    	; 0x16bc <MCAL_T1_u8T1CompareOutputMode+0x100>
				SET_BIT(TCCR1A, PIN6);
    1622:	af e4       	ldi	r26, 0x4F	; 79
    1624:	b0 e0       	ldi	r27, 0x00	; 0
    1626:	ef e4       	ldi	r30, 0x4F	; 79
    1628:	f0 e0       	ldi	r31, 0x00	; 0
    162a:	80 81       	ld	r24, Z
    162c:	80 64       	ori	r24, 0x40	; 64
    162e:	8c 93       	st	X, r24
				SET_BIT(TCCR1A, PIN7);
    1630:	af e4       	ldi	r26, 0x4F	; 79
    1632:	b0 e0       	ldi	r27, 0x00	; 0
    1634:	ef e4       	ldi	r30, 0x4F	; 79
    1636:	f0 e0       	ldi	r31, 0x00	; 0
    1638:	80 81       	ld	r24, Z
    163a:	80 68       	ori	r24, 0x80	; 128
    163c:	8c 93       	st	X, r24
				SET_BIT(DDRD, PIN5);
    163e:	a1 e3       	ldi	r26, 0x31	; 49
    1640:	b0 e0       	ldi	r27, 0x00	; 0
    1642:	e1 e3       	ldi	r30, 0x31	; 49
    1644:	f0 e0       	ldi	r31, 0x00	; 0
    1646:	80 81       	ld	r24, Z
    1648:	80 62       	ori	r24, 0x20	; 32
    164a:	8c 93       	st	X, r24
				LOC_u8ReturnValue = E_OK;
    164c:	19 82       	std	Y+1, r1	; 0x01
    164e:	36 c0       	rjmp	.+108    	; 0x16bc <MCAL_T1_u8T1CompareOutputMode+0x100>
			} else {
				//NOTHING
			}
		} else if (LOC_u8Channel == CHENNEL_B) {
    1650:	8b 81       	ldd	r24, Y+3	; 0x03
    1652:	81 30       	cpi	r24, 0x01	; 1
    1654:	99 f5       	brne	.+102    	; 0x16bc <MCAL_T1_u8T1CompareOutputMode+0x100>
			if (LOC_u8OutputMode == NON_INVERTING_MODE) {
    1656:	8a 81       	ldd	r24, Y+2	; 0x02
    1658:	88 23       	and	r24, r24
    165a:	b9 f4       	brne	.+46     	; 0x168a <MCAL_T1_u8T1CompareOutputMode+0xce>
				CLR_BIT(TCCR1A, PIN4);
    165c:	af e4       	ldi	r26, 0x4F	; 79
    165e:	b0 e0       	ldi	r27, 0x00	; 0
    1660:	ef e4       	ldi	r30, 0x4F	; 79
    1662:	f0 e0       	ldi	r31, 0x00	; 0
    1664:	80 81       	ld	r24, Z
    1666:	8f 7e       	andi	r24, 0xEF	; 239
    1668:	8c 93       	st	X, r24
				SET_BIT(TCCR1A, PIN5);
    166a:	af e4       	ldi	r26, 0x4F	; 79
    166c:	b0 e0       	ldi	r27, 0x00	; 0
    166e:	ef e4       	ldi	r30, 0x4F	; 79
    1670:	f0 e0       	ldi	r31, 0x00	; 0
    1672:	80 81       	ld	r24, Z
    1674:	80 62       	ori	r24, 0x20	; 32
    1676:	8c 93       	st	X, r24
				SET_BIT(DDRD, PIN4);
    1678:	a1 e3       	ldi	r26, 0x31	; 49
    167a:	b0 e0       	ldi	r27, 0x00	; 0
    167c:	e1 e3       	ldi	r30, 0x31	; 49
    167e:	f0 e0       	ldi	r31, 0x00	; 0
    1680:	80 81       	ld	r24, Z
    1682:	80 61       	ori	r24, 0x10	; 16
    1684:	8c 93       	st	X, r24
				LOC_u8ReturnValue = E_OK;
    1686:	19 82       	std	Y+1, r1	; 0x01
    1688:	19 c0       	rjmp	.+50     	; 0x16bc <MCAL_T1_u8T1CompareOutputMode+0x100>
			} else if (LOC_u8OutputMode == INVERTING_MODE) {
    168a:	8a 81       	ldd	r24, Y+2	; 0x02
    168c:	81 30       	cpi	r24, 0x01	; 1
    168e:	b1 f4       	brne	.+44     	; 0x16bc <MCAL_T1_u8T1CompareOutputMode+0x100>
				SET_BIT(TCCR1A, PIN4);
    1690:	af e4       	ldi	r26, 0x4F	; 79
    1692:	b0 e0       	ldi	r27, 0x00	; 0
    1694:	ef e4       	ldi	r30, 0x4F	; 79
    1696:	f0 e0       	ldi	r31, 0x00	; 0
    1698:	80 81       	ld	r24, Z
    169a:	80 61       	ori	r24, 0x10	; 16
    169c:	8c 93       	st	X, r24
				SET_BIT(TCCR1A, PIN5);
    169e:	af e4       	ldi	r26, 0x4F	; 79
    16a0:	b0 e0       	ldi	r27, 0x00	; 0
    16a2:	ef e4       	ldi	r30, 0x4F	; 79
    16a4:	f0 e0       	ldi	r31, 0x00	; 0
    16a6:	80 81       	ld	r24, Z
    16a8:	80 62       	ori	r24, 0x20	; 32
    16aa:	8c 93       	st	X, r24
				SET_BIT(DDRD, PIN4);
    16ac:	a1 e3       	ldi	r26, 0x31	; 49
    16ae:	b0 e0       	ldi	r27, 0x00	; 0
    16b0:	e1 e3       	ldi	r30, 0x31	; 49
    16b2:	f0 e0       	ldi	r31, 0x00	; 0
    16b4:	80 81       	ld	r24, Z
    16b6:	80 61       	ori	r24, 0x10	; 16
    16b8:	8c 93       	st	X, r24
				LOC_u8ReturnValue = E_OK;
    16ba:	19 82       	std	Y+1, r1	; 0x01
			//NOTHING
		}
	} else {
		//NOTHING
	}
	return LOC_u8ReturnValue;
    16bc:	89 81       	ldd	r24, Y+1	; 0x01
}
    16be:	0f 90       	pop	r0
    16c0:	0f 90       	pop	r0
    16c2:	0f 90       	pop	r0
    16c4:	cf 91       	pop	r28
    16c6:	df 91       	pop	r29
    16c8:	08 95       	ret

000016ca <MCAL_T1_voidNoiseCancller>:
//NOISE CANCLLER
void MCAL_T1_voidNoiseCancller(void) {
    16ca:	df 93       	push	r29
    16cc:	cf 93       	push	r28
    16ce:	cd b7       	in	r28, 0x3d	; 61
    16d0:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TCCR1B, PIN7);
    16d2:	ae e4       	ldi	r26, 0x4E	; 78
    16d4:	b0 e0       	ldi	r27, 0x00	; 0
    16d6:	ee e4       	ldi	r30, 0x4E	; 78
    16d8:	f0 e0       	ldi	r31, 0x00	; 0
    16da:	80 81       	ld	r24, Z
    16dc:	80 68       	ori	r24, 0x80	; 128
    16de:	8c 93       	st	X, r24
}
    16e0:	cf 91       	pop	r28
    16e2:	df 91       	pop	r29
    16e4:	08 95       	ret

000016e6 <MCAL_T1_voidSetTCNT1Value>:
//Set TCNT1 Value
void MCAL_T1_voidSetTCNT1Value(u16 LOC_u16Value) {
    16e6:	df 93       	push	r29
    16e8:	cf 93       	push	r28
    16ea:	00 d0       	rcall	.+0      	; 0x16ec <MCAL_T1_voidSetTCNT1Value+0x6>
    16ec:	cd b7       	in	r28, 0x3d	; 61
    16ee:	de b7       	in	r29, 0x3e	; 62
    16f0:	9a 83       	std	Y+2, r25	; 0x02
    16f2:	89 83       	std	Y+1, r24	; 0x01
	if (LOC_u16Value <= SIXTEEN_BIT_MAX_VALUE) {
		TCNT1 = LOC_u16Value;
    16f4:	ec e4       	ldi	r30, 0x4C	; 76
    16f6:	f0 e0       	ldi	r31, 0x00	; 0
    16f8:	89 81       	ldd	r24, Y+1	; 0x01
    16fa:	9a 81       	ldd	r25, Y+2	; 0x02
    16fc:	91 83       	std	Z+1, r25	; 0x01
    16fe:	80 83       	st	Z, r24
	} else {
		//NOTHING
	}
}
    1700:	0f 90       	pop	r0
    1702:	0f 90       	pop	r0
    1704:	cf 91       	pop	r28
    1706:	df 91       	pop	r29
    1708:	08 95       	ret

0000170a <MCAL_T1_voidGetTCNT1Value>:
//GIT TCNT1
void MCAL_T1_voidGetTCNT1Value(u16 *LOC_pu16Value) {
    170a:	df 93       	push	r29
    170c:	cf 93       	push	r28
    170e:	00 d0       	rcall	.+0      	; 0x1710 <MCAL_T1_voidGetTCNT1Value+0x6>
    1710:	cd b7       	in	r28, 0x3d	; 61
    1712:	de b7       	in	r29, 0x3e	; 62
    1714:	9a 83       	std	Y+2, r25	; 0x02
    1716:	89 83       	std	Y+1, r24	; 0x01
	if (LOC_pu16Value) {
    1718:	89 81       	ldd	r24, Y+1	; 0x01
    171a:	9a 81       	ldd	r25, Y+2	; 0x02
    171c:	00 97       	sbiw	r24, 0x00	; 0
    171e:	41 f0       	breq	.+16     	; 0x1730 <MCAL_T1_voidGetTCNT1Value+0x26>
		*LOC_pu16Value = TCNT1;
    1720:	ec e4       	ldi	r30, 0x4C	; 76
    1722:	f0 e0       	ldi	r31, 0x00	; 0
    1724:	80 81       	ld	r24, Z
    1726:	91 81       	ldd	r25, Z+1	; 0x01
    1728:	e9 81       	ldd	r30, Y+1	; 0x01
    172a:	fa 81       	ldd	r31, Y+2	; 0x02
    172c:	91 83       	std	Z+1, r25	; 0x01
    172e:	80 83       	st	Z, r24
	}
}
    1730:	0f 90       	pop	r0
    1732:	0f 90       	pop	r0
    1734:	cf 91       	pop	r28
    1736:	df 91       	pop	r29
    1738:	08 95       	ret

0000173a <MCAL_T1_voidSetOCR1AValue>:
//Set OCR1A
void MCAL_T1_voidSetOCR1AValue(u16 LOC_u16Value) {
    173a:	df 93       	push	r29
    173c:	cf 93       	push	r28
    173e:	00 d0       	rcall	.+0      	; 0x1740 <MCAL_T1_voidSetOCR1AValue+0x6>
    1740:	cd b7       	in	r28, 0x3d	; 61
    1742:	de b7       	in	r29, 0x3e	; 62
    1744:	9a 83       	std	Y+2, r25	; 0x02
    1746:	89 83       	std	Y+1, r24	; 0x01
	if (LOC_u16Value <= SIXTEEN_BIT_MAX_VALUE) {
		OCR1A = LOC_u16Value;
    1748:	ea e4       	ldi	r30, 0x4A	; 74
    174a:	f0 e0       	ldi	r31, 0x00	; 0
    174c:	89 81       	ldd	r24, Y+1	; 0x01
    174e:	9a 81       	ldd	r25, Y+2	; 0x02
    1750:	91 83       	std	Z+1, r25	; 0x01
    1752:	80 83       	st	Z, r24
	} else {
		//NOTHING
	}
}
    1754:	0f 90       	pop	r0
    1756:	0f 90       	pop	r0
    1758:	cf 91       	pop	r28
    175a:	df 91       	pop	r29
    175c:	08 95       	ret

0000175e <MCAL_T1_voidSetOCR1BValue>:
//SET OCR1B
void MCAL_T1_voidSetOCR1BValue(u16 LOC_u16Value) {
    175e:	df 93       	push	r29
    1760:	cf 93       	push	r28
    1762:	00 d0       	rcall	.+0      	; 0x1764 <MCAL_T1_voidSetOCR1BValue+0x6>
    1764:	cd b7       	in	r28, 0x3d	; 61
    1766:	de b7       	in	r29, 0x3e	; 62
    1768:	9a 83       	std	Y+2, r25	; 0x02
    176a:	89 83       	std	Y+1, r24	; 0x01
	if (LOC_u16Value <= SIXTEEN_BIT_MAX_VALUE) {
		OCR1B = LOC_u16Value;
    176c:	e8 e4       	ldi	r30, 0x48	; 72
    176e:	f0 e0       	ldi	r31, 0x00	; 0
    1770:	89 81       	ldd	r24, Y+1	; 0x01
    1772:	9a 81       	ldd	r25, Y+2	; 0x02
    1774:	91 83       	std	Z+1, r25	; 0x01
    1776:	80 83       	st	Z, r24
	} else {
		//NOTHING
	}
}
    1778:	0f 90       	pop	r0
    177a:	0f 90       	pop	r0
    177c:	cf 91       	pop	r28
    177e:	df 91       	pop	r29
    1780:	08 95       	ret

00001782 <MCAL_T1_voidSetICR1Value>:
//SET ICR1
void MCAL_T1_voidSetICR1Value(u16 LOC_u16Value) {
    1782:	df 93       	push	r29
    1784:	cf 93       	push	r28
    1786:	00 d0       	rcall	.+0      	; 0x1788 <MCAL_T1_voidSetICR1Value+0x6>
    1788:	cd b7       	in	r28, 0x3d	; 61
    178a:	de b7       	in	r29, 0x3e	; 62
    178c:	9a 83       	std	Y+2, r25	; 0x02
    178e:	89 83       	std	Y+1, r24	; 0x01
	if (LOC_u16Value <= SIXTEEN_BIT_MAX_VALUE) {
		ICR1 = LOC_u16Value;
    1790:	e6 e4       	ldi	r30, 0x46	; 70
    1792:	f0 e0       	ldi	r31, 0x00	; 0
    1794:	89 81       	ldd	r24, Y+1	; 0x01
    1796:	9a 81       	ldd	r25, Y+2	; 0x02
    1798:	91 83       	std	Z+1, r25	; 0x01
    179a:	80 83       	st	Z, r24
	} else {
		//NOTHING
	}
}
    179c:	0f 90       	pop	r0
    179e:	0f 90       	pop	r0
    17a0:	cf 91       	pop	r28
    17a2:	df 91       	pop	r29
    17a4:	08 95       	ret

000017a6 <MCAL_T1_voidGetICR1Value>:
//Get ICR1
void MCAL_T1_voidGetICR1Value(u16 *LOC_pu16Value) {
    17a6:	df 93       	push	r29
    17a8:	cf 93       	push	r28
    17aa:	00 d0       	rcall	.+0      	; 0x17ac <MCAL_T1_voidGetICR1Value+0x6>
    17ac:	cd b7       	in	r28, 0x3d	; 61
    17ae:	de b7       	in	r29, 0x3e	; 62
    17b0:	9a 83       	std	Y+2, r25	; 0x02
    17b2:	89 83       	std	Y+1, r24	; 0x01
	if (LOC_pu16Value) {
    17b4:	89 81       	ldd	r24, Y+1	; 0x01
    17b6:	9a 81       	ldd	r25, Y+2	; 0x02
    17b8:	00 97       	sbiw	r24, 0x00	; 0
    17ba:	41 f0       	breq	.+16     	; 0x17cc <MCAL_T1_voidGetICR1Value+0x26>
		*LOC_pu16Value =ICR1;
    17bc:	e6 e4       	ldi	r30, 0x46	; 70
    17be:	f0 e0       	ldi	r31, 0x00	; 0
    17c0:	80 81       	ld	r24, Z
    17c2:	91 81       	ldd	r25, Z+1	; 0x01
    17c4:	e9 81       	ldd	r30, Y+1	; 0x01
    17c6:	fa 81       	ldd	r31, Y+2	; 0x02
    17c8:	91 83       	std	Z+1, r25	; 0x01
    17ca:	80 83       	st	Z, r24
	}
}
    17cc:	0f 90       	pop	r0
    17ce:	0f 90       	pop	r0
    17d0:	cf 91       	pop	r28
    17d2:	df 91       	pop	r29
    17d4:	08 95       	ret

000017d6 <MCAL_T1_voidTCNT1_GIEEnable>:
//TCNT1 PIE
void MCAL_T1_voidTCNT1_GIEEnable(void) {
    17d6:	df 93       	push	r29
    17d8:	cf 93       	push	r28
    17da:	cd b7       	in	r28, 0x3d	; 61
    17dc:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG, PIN7);
    17de:	af e5       	ldi	r26, 0x5F	; 95
    17e0:	b0 e0       	ldi	r27, 0x00	; 0
    17e2:	ef e5       	ldi	r30, 0x5F	; 95
    17e4:	f0 e0       	ldi	r31, 0x00	; 0
    17e6:	80 81       	ld	r24, Z
    17e8:	80 68       	ori	r24, 0x80	; 128
    17ea:	8c 93       	st	X, r24
	SET_BIT(TIMSK, PIN2);
    17ec:	a9 e5       	ldi	r26, 0x59	; 89
    17ee:	b0 e0       	ldi	r27, 0x00	; 0
    17f0:	e9 e5       	ldi	r30, 0x59	; 89
    17f2:	f0 e0       	ldi	r31, 0x00	; 0
    17f4:	80 81       	ld	r24, Z
    17f6:	84 60       	ori	r24, 0x04	; 4
    17f8:	8c 93       	st	X, r24
}
    17fa:	cf 91       	pop	r28
    17fc:	df 91       	pop	r29
    17fe:	08 95       	ret

00001800 <MCAL_T1_voidTCNT1_GIEDisable>:
void MCAL_T1_voidTCNT1_GIEDisable(void) {
    1800:	df 93       	push	r29
    1802:	cf 93       	push	r28
    1804:	cd b7       	in	r28, 0x3d	; 61
    1806:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK, PIN2);
    1808:	a9 e5       	ldi	r26, 0x59	; 89
    180a:	b0 e0       	ldi	r27, 0x00	; 0
    180c:	e9 e5       	ldi	r30, 0x59	; 89
    180e:	f0 e0       	ldi	r31, 0x00	; 0
    1810:	80 81       	ld	r24, Z
    1812:	8b 7f       	andi	r24, 0xFB	; 251
    1814:	8c 93       	st	X, r24
}
    1816:	cf 91       	pop	r28
    1818:	df 91       	pop	r29
    181a:	08 95       	ret

0000181c <MCAL_T1_voidOCR1B_GIEEnable>:
//OCR1B PIE
void MCAL_T1_voidOCR1B_GIEEnable(void) {
    181c:	df 93       	push	r29
    181e:	cf 93       	push	r28
    1820:	cd b7       	in	r28, 0x3d	; 61
    1822:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG, PIN7);
    1824:	af e5       	ldi	r26, 0x5F	; 95
    1826:	b0 e0       	ldi	r27, 0x00	; 0
    1828:	ef e5       	ldi	r30, 0x5F	; 95
    182a:	f0 e0       	ldi	r31, 0x00	; 0
    182c:	80 81       	ld	r24, Z
    182e:	80 68       	ori	r24, 0x80	; 128
    1830:	8c 93       	st	X, r24
	SET_BIT(TIMSK, PIN3);
    1832:	a9 e5       	ldi	r26, 0x59	; 89
    1834:	b0 e0       	ldi	r27, 0x00	; 0
    1836:	e9 e5       	ldi	r30, 0x59	; 89
    1838:	f0 e0       	ldi	r31, 0x00	; 0
    183a:	80 81       	ld	r24, Z
    183c:	88 60       	ori	r24, 0x08	; 8
    183e:	8c 93       	st	X, r24
}
    1840:	cf 91       	pop	r28
    1842:	df 91       	pop	r29
    1844:	08 95       	ret

00001846 <MCAL_T1_voidOCR1B_GIEDisable>:
void MCAL_T1_voidOCR1B_GIEDisable(void) {
    1846:	df 93       	push	r29
    1848:	cf 93       	push	r28
    184a:	cd b7       	in	r28, 0x3d	; 61
    184c:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK, PIN3);
    184e:	a9 e5       	ldi	r26, 0x59	; 89
    1850:	b0 e0       	ldi	r27, 0x00	; 0
    1852:	e9 e5       	ldi	r30, 0x59	; 89
    1854:	f0 e0       	ldi	r31, 0x00	; 0
    1856:	80 81       	ld	r24, Z
    1858:	87 7f       	andi	r24, 0xF7	; 247
    185a:	8c 93       	st	X, r24
}
    185c:	cf 91       	pop	r28
    185e:	df 91       	pop	r29
    1860:	08 95       	ret

00001862 <MCAL_T1_voidOCR1A_GIEEnable>:
//OCR1A PIE
void MCAL_T1_voidOCR1A_GIEEnable(void) {
    1862:	df 93       	push	r29
    1864:	cf 93       	push	r28
    1866:	cd b7       	in	r28, 0x3d	; 61
    1868:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG, PIN7);
    186a:	af e5       	ldi	r26, 0x5F	; 95
    186c:	b0 e0       	ldi	r27, 0x00	; 0
    186e:	ef e5       	ldi	r30, 0x5F	; 95
    1870:	f0 e0       	ldi	r31, 0x00	; 0
    1872:	80 81       	ld	r24, Z
    1874:	80 68       	ori	r24, 0x80	; 128
    1876:	8c 93       	st	X, r24
	SET_BIT(TIMSK, PIN4);
    1878:	a9 e5       	ldi	r26, 0x59	; 89
    187a:	b0 e0       	ldi	r27, 0x00	; 0
    187c:	e9 e5       	ldi	r30, 0x59	; 89
    187e:	f0 e0       	ldi	r31, 0x00	; 0
    1880:	80 81       	ld	r24, Z
    1882:	80 61       	ori	r24, 0x10	; 16
    1884:	8c 93       	st	X, r24
}
    1886:	cf 91       	pop	r28
    1888:	df 91       	pop	r29
    188a:	08 95       	ret

0000188c <MCAL_T1_voidOCR1A_GIEDisable>:
void MCAL_T1_voidOCR1A_GIEDisable(void) {
    188c:	df 93       	push	r29
    188e:	cf 93       	push	r28
    1890:	cd b7       	in	r28, 0x3d	; 61
    1892:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK, PIN4);
    1894:	a9 e5       	ldi	r26, 0x59	; 89
    1896:	b0 e0       	ldi	r27, 0x00	; 0
    1898:	e9 e5       	ldi	r30, 0x59	; 89
    189a:	f0 e0       	ldi	r31, 0x00	; 0
    189c:	80 81       	ld	r24, Z
    189e:	8f 7e       	andi	r24, 0xEF	; 239
    18a0:	8c 93       	st	X, r24
}
    18a2:	cf 91       	pop	r28
    18a4:	df 91       	pop	r29
    18a6:	08 95       	ret

000018a8 <MCAL_T1_voidICR1_GIEEnable>:
//ICR1 PIE
void MCAL_T1_voidICR1_GIEEnable(void) {
    18a8:	df 93       	push	r29
    18aa:	cf 93       	push	r28
    18ac:	cd b7       	in	r28, 0x3d	; 61
    18ae:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG, PIN7);
    18b0:	af e5       	ldi	r26, 0x5F	; 95
    18b2:	b0 e0       	ldi	r27, 0x00	; 0
    18b4:	ef e5       	ldi	r30, 0x5F	; 95
    18b6:	f0 e0       	ldi	r31, 0x00	; 0
    18b8:	80 81       	ld	r24, Z
    18ba:	80 68       	ori	r24, 0x80	; 128
    18bc:	8c 93       	st	X, r24
	SET_BIT(TIMSK, PIN5);
    18be:	a9 e5       	ldi	r26, 0x59	; 89
    18c0:	b0 e0       	ldi	r27, 0x00	; 0
    18c2:	e9 e5       	ldi	r30, 0x59	; 89
    18c4:	f0 e0       	ldi	r31, 0x00	; 0
    18c6:	80 81       	ld	r24, Z
    18c8:	80 62       	ori	r24, 0x20	; 32
    18ca:	8c 93       	st	X, r24
}
    18cc:	cf 91       	pop	r28
    18ce:	df 91       	pop	r29
    18d0:	08 95       	ret

000018d2 <MCAL_T1_voidICR1_GIEDisable>:
void MCAL_T1_voidICR1_GIEDisable(void) {
    18d2:	df 93       	push	r29
    18d4:	cf 93       	push	r28
    18d6:	cd b7       	in	r28, 0x3d	; 61
    18d8:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK, PIN5);
    18da:	a9 e5       	ldi	r26, 0x59	; 89
    18dc:	b0 e0       	ldi	r27, 0x00	; 0
    18de:	e9 e5       	ldi	r30, 0x59	; 89
    18e0:	f0 e0       	ldi	r31, 0x00	; 0
    18e2:	80 81       	ld	r24, Z
    18e4:	8f 7d       	andi	r24, 0xDF	; 223
    18e6:	8c 93       	st	X, r24
}
    18e8:	cf 91       	pop	r28
    18ea:	df 91       	pop	r29
    18ec:	08 95       	ret

000018ee <MCAL_T1_u8T1DelayNormalMode>:

u8 MCAL_T1_u8T1DelayNormalMode(u8 LOC_u8Clock_Selection,
		f32 LOC_f32NumOFSecond, u16 *LOC_pu8StartValue, u16 *LOC_pu16Counter) {
    18ee:	0f 93       	push	r16
    18f0:	1f 93       	push	r17
    18f2:	df 93       	push	r29
    18f4:	cf 93       	push	r28
    18f6:	cd b7       	in	r28, 0x3d	; 61
    18f8:	de b7       	in	r29, 0x3e	; 62
    18fa:	66 97       	sbiw	r28, 0x16	; 22
    18fc:	0f b6       	in	r0, 0x3f	; 63
    18fe:	f8 94       	cli
    1900:	de bf       	out	0x3e, r29	; 62
    1902:	0f be       	out	0x3f, r0	; 63
    1904:	cd bf       	out	0x3d, r28	; 61
    1906:	8e 87       	std	Y+14, r24	; 0x0e
    1908:	4f 87       	std	Y+15, r20	; 0x0f
    190a:	58 8b       	std	Y+16, r21	; 0x10
    190c:	69 8b       	std	Y+17, r22	; 0x11
    190e:	7a 8b       	std	Y+18, r23	; 0x12
    1910:	3c 8b       	std	Y+20, r19	; 0x14
    1912:	2b 8b       	std	Y+19, r18	; 0x13
    1914:	1e 8b       	std	Y+22, r17	; 0x16
    1916:	0d 8b       	std	Y+21, r16	; 0x15
	u8 LOC_u8ReturnValue = E_NOT_OK;
    1918:	81 e0       	ldi	r24, 0x01	; 1
    191a:	89 87       	std	Y+9, r24	; 0x09
	f32 TickTime = NUMBER_0;
    191c:	80 e0       	ldi	r24, 0x00	; 0
    191e:	90 e0       	ldi	r25, 0x00	; 0
    1920:	a0 e0       	ldi	r26, 0x00	; 0
    1922:	b0 e0       	ldi	r27, 0x00	; 0
    1924:	8a 87       	std	Y+10, r24	; 0x0a
    1926:	9b 87       	std	Y+11, r25	; 0x0b
    1928:	ac 87       	std	Y+12, r26	; 0x0c
    192a:	bd 87       	std	Y+13, r27	; 0x0d
	u32 N = NUMBER_0;
    192c:	1d 82       	std	Y+5, r1	; 0x05
    192e:	1e 82       	std	Y+6, r1	; 0x06
    1930:	1f 82       	std	Y+7, r1	; 0x07
    1932:	18 86       	std	Y+8, r1	; 0x08
	u16 counter = NUMBER_0;
    1934:	1c 82       	std	Y+4, r1	; 0x04
    1936:	1b 82       	std	Y+3, r1	; 0x03
	u16 Reminder = NUMBER_0;
    1938:	1a 82       	std	Y+2, r1	; 0x02
    193a:	19 82       	std	Y+1, r1	; 0x01
	MCAL_T1_u8T1Prescaler(LOC_u8Clock_Selection, &TickTime);
    193c:	9e 01       	movw	r18, r28
    193e:	26 5f       	subi	r18, 0xF6	; 246
    1940:	3f 4f       	sbci	r19, 0xFF	; 255
    1942:	8e 85       	ldd	r24, Y+14	; 0x0e
    1944:	b9 01       	movw	r22, r18
    1946:	0e 94 c6 09 	call	0x138c	; 0x138c <MCAL_T1_u8T1Prescaler>
	if (LOC_f32NumOFSecond <= 0 || LOC_f32NumOFSecond > 0) {
    194a:	6f 85       	ldd	r22, Y+15	; 0x0f
    194c:	78 89       	ldd	r23, Y+16	; 0x10
    194e:	89 89       	ldd	r24, Y+17	; 0x11
    1950:	9a 89       	ldd	r25, Y+18	; 0x12
    1952:	20 e0       	ldi	r18, 0x00	; 0
    1954:	30 e0       	ldi	r19, 0x00	; 0
    1956:	40 e0       	ldi	r20, 0x00	; 0
    1958:	50 e0       	ldi	r21, 0x00	; 0
    195a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__lesf2>
    195e:	18 16       	cp	r1, r24
    1960:	6c f4       	brge	.+26     	; 0x197c <MCAL_T1_u8T1DelayNormalMode+0x8e>
    1962:	6f 85       	ldd	r22, Y+15	; 0x0f
    1964:	78 89       	ldd	r23, Y+16	; 0x10
    1966:	89 89       	ldd	r24, Y+17	; 0x11
    1968:	9a 89       	ldd	r25, Y+18	; 0x12
    196a:	20 e0       	ldi	r18, 0x00	; 0
    196c:	30 e0       	ldi	r19, 0x00	; 0
    196e:	40 e0       	ldi	r20, 0x00	; 0
    1970:	50 e0       	ldi	r21, 0x00	; 0
    1972:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1976:	18 16       	cp	r1, r24
    1978:	0c f0       	brlt	.+2      	; 0x197c <MCAL_T1_u8T1DelayNormalMode+0x8e>
    197a:	6b c0       	rjmp	.+214    	; 0x1a52 <MCAL_T1_u8T1DelayNormalMode+0x164>
		N = LOC_f32NumOFSecond / (f32) TickTime;
    197c:	2a 85       	ldd	r18, Y+10	; 0x0a
    197e:	3b 85       	ldd	r19, Y+11	; 0x0b
    1980:	4c 85       	ldd	r20, Y+12	; 0x0c
    1982:	5d 85       	ldd	r21, Y+13	; 0x0d
    1984:	6f 85       	ldd	r22, Y+15	; 0x0f
    1986:	78 89       	ldd	r23, Y+16	; 0x10
    1988:	89 89       	ldd	r24, Y+17	; 0x11
    198a:	9a 89       	ldd	r25, Y+18	; 0x12
    198c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1990:	dc 01       	movw	r26, r24
    1992:	cb 01       	movw	r24, r22
    1994:	bc 01       	movw	r22, r24
    1996:	cd 01       	movw	r24, r26
    1998:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    199c:	dc 01       	movw	r26, r24
    199e:	cb 01       	movw	r24, r22
    19a0:	8d 83       	std	Y+5, r24	; 0x05
    19a2:	9e 83       	std	Y+6, r25	; 0x06
    19a4:	af 83       	std	Y+7, r26	; 0x07
    19a6:	b8 87       	std	Y+8, r27	; 0x08
		Reminder = N % OVER_FLOW_COUNT;
    19a8:	8d 81       	ldd	r24, Y+5	; 0x05
    19aa:	9e 81       	ldd	r25, Y+6	; 0x06
    19ac:	af 81       	ldd	r26, Y+7	; 0x07
    19ae:	b8 85       	ldd	r27, Y+8	; 0x08
    19b0:	2f ef       	ldi	r18, 0xFF	; 255
    19b2:	3f ef       	ldi	r19, 0xFF	; 255
    19b4:	40 e0       	ldi	r20, 0x00	; 0
    19b6:	50 e0       	ldi	r21, 0x00	; 0
    19b8:	bc 01       	movw	r22, r24
    19ba:	cd 01       	movw	r24, r26
    19bc:	0e 94 a1 2e 	call	0x5d42	; 0x5d42 <__udivmodsi4>
    19c0:	dc 01       	movw	r26, r24
    19c2:	cb 01       	movw	r24, r22
    19c4:	9a 83       	std	Y+2, r25	; 0x02
    19c6:	89 83       	std	Y+1, r24	; 0x01
		*LOC_pu8StartValue = Reminder;
    19c8:	eb 89       	ldd	r30, Y+19	; 0x13
    19ca:	fc 89       	ldd	r31, Y+20	; 0x14
    19cc:	89 81       	ldd	r24, Y+1	; 0x01
    19ce:	9a 81       	ldd	r25, Y+2	; 0x02
    19d0:	91 83       	std	Z+1, r25	; 0x01
    19d2:	80 83       	st	Z, r24
		if (Reminder == NUMBER_0) {
    19d4:	89 81       	ldd	r24, Y+1	; 0x01
    19d6:	9a 81       	ldd	r25, Y+2	; 0x02
    19d8:	00 97       	sbiw	r24, 0x00	; 0
    19da:	d9 f4       	brne	.+54     	; 0x1a12 <MCAL_T1_u8T1DelayNormalMode+0x124>
			MCAL_T1_voidSetTCNT1Value(Reminder);
    19dc:	89 81       	ldd	r24, Y+1	; 0x01
    19de:	9a 81       	ldd	r25, Y+2	; 0x02
    19e0:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <MCAL_T1_voidSetTCNT1Value>
			counter = N / OVER_FLOW_COUNT;
    19e4:	8d 81       	ldd	r24, Y+5	; 0x05
    19e6:	9e 81       	ldd	r25, Y+6	; 0x06
    19e8:	af 81       	ldd	r26, Y+7	; 0x07
    19ea:	b8 85       	ldd	r27, Y+8	; 0x08
    19ec:	2f ef       	ldi	r18, 0xFF	; 255
    19ee:	3f ef       	ldi	r19, 0xFF	; 255
    19f0:	40 e0       	ldi	r20, 0x00	; 0
    19f2:	50 e0       	ldi	r21, 0x00	; 0
    19f4:	bc 01       	movw	r22, r24
    19f6:	cd 01       	movw	r24, r26
    19f8:	0e 94 a1 2e 	call	0x5d42	; 0x5d42 <__udivmodsi4>
    19fc:	da 01       	movw	r26, r20
    19fe:	c9 01       	movw	r24, r18
    1a00:	9c 83       	std	Y+4, r25	; 0x04
    1a02:	8b 83       	std	Y+3, r24	; 0x03
			*LOC_pu16Counter = counter;
    1a04:	ed 89       	ldd	r30, Y+21	; 0x15
    1a06:	fe 89       	ldd	r31, Y+22	; 0x16
    1a08:	8b 81       	ldd	r24, Y+3	; 0x03
    1a0a:	9c 81       	ldd	r25, Y+4	; 0x04
    1a0c:	91 83       	std	Z+1, r25	; 0x01
    1a0e:	80 83       	st	Z, r24
    1a10:	1f c0       	rjmp	.+62     	; 0x1a50 <MCAL_T1_u8T1DelayNormalMode+0x162>
		} else if (Reminder != NUMBER_0) {
    1a12:	89 81       	ldd	r24, Y+1	; 0x01
    1a14:	9a 81       	ldd	r25, Y+2	; 0x02
    1a16:	00 97       	sbiw	r24, 0x00	; 0
    1a18:	d9 f0       	breq	.+54     	; 0x1a50 <MCAL_T1_u8T1DelayNormalMode+0x162>
			MCAL_T1_voidSetTCNT1Value(Reminder);
    1a1a:	89 81       	ldd	r24, Y+1	; 0x01
    1a1c:	9a 81       	ldd	r25, Y+2	; 0x02
    1a1e:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <MCAL_T1_voidSetTCNT1Value>
			counter = ((N / OVER_FLOW_COUNT) + NUMBER_1);
    1a22:	8d 81       	ldd	r24, Y+5	; 0x05
    1a24:	9e 81       	ldd	r25, Y+6	; 0x06
    1a26:	af 81       	ldd	r26, Y+7	; 0x07
    1a28:	b8 85       	ldd	r27, Y+8	; 0x08
    1a2a:	2f ef       	ldi	r18, 0xFF	; 255
    1a2c:	3f ef       	ldi	r19, 0xFF	; 255
    1a2e:	40 e0       	ldi	r20, 0x00	; 0
    1a30:	50 e0       	ldi	r21, 0x00	; 0
    1a32:	bc 01       	movw	r22, r24
    1a34:	cd 01       	movw	r24, r26
    1a36:	0e 94 a1 2e 	call	0x5d42	; 0x5d42 <__udivmodsi4>
    1a3a:	da 01       	movw	r26, r20
    1a3c:	c9 01       	movw	r24, r18
    1a3e:	01 96       	adiw	r24, 0x01	; 1
    1a40:	9c 83       	std	Y+4, r25	; 0x04
    1a42:	8b 83       	std	Y+3, r24	; 0x03
			*LOC_pu16Counter = counter;
    1a44:	ed 89       	ldd	r30, Y+21	; 0x15
    1a46:	fe 89       	ldd	r31, Y+22	; 0x16
    1a48:	8b 81       	ldd	r24, Y+3	; 0x03
    1a4a:	9c 81       	ldd	r25, Y+4	; 0x04
    1a4c:	91 83       	std	Z+1, r25	; 0x01
    1a4e:	80 83       	st	Z, r24
		} else {
			//NOTHING
		}
		LOC_u8ReturnValue = E_OK;
    1a50:	19 86       	std	Y+9, r1	; 0x09
	}
	return LOC_u8ReturnValue;
    1a52:	89 85       	ldd	r24, Y+9	; 0x09

}
    1a54:	66 96       	adiw	r28, 0x16	; 22
    1a56:	0f b6       	in	r0, 0x3f	; 63
    1a58:	f8 94       	cli
    1a5a:	de bf       	out	0x3e, r29	; 62
    1a5c:	0f be       	out	0x3f, r0	; 63
    1a5e:	cd bf       	out	0x3d, r28	; 61
    1a60:	cf 91       	pop	r28
    1a62:	df 91       	pop	r29
    1a64:	1f 91       	pop	r17
    1a66:	0f 91       	pop	r16
    1a68:	08 95       	ret

00001a6a <MCAL_T1_voidDelayCTCMode>:

void MCAL_T1_voidDelayCTCMode(u8 LOC_u8Clock_Selection,
		f32 LOC_fl32NumOFSecond, u16 *LOC_pu16Counter) {
    1a6a:	df 93       	push	r29
    1a6c:	cf 93       	push	r28
    1a6e:	cd b7       	in	r28, 0x3d	; 61
    1a70:	de b7       	in	r29, 0x3e	; 62
    1a72:	61 97       	sbiw	r28, 0x11	; 17
    1a74:	0f b6       	in	r0, 0x3f	; 63
    1a76:	f8 94       	cli
    1a78:	de bf       	out	0x3e, r29	; 62
    1a7a:	0f be       	out	0x3f, r0	; 63
    1a7c:	cd bf       	out	0x3d, r28	; 61
    1a7e:	8b 87       	std	Y+11, r24	; 0x0b
    1a80:	4c 87       	std	Y+12, r20	; 0x0c
    1a82:	5d 87       	std	Y+13, r21	; 0x0d
    1a84:	6e 87       	std	Y+14, r22	; 0x0e
    1a86:	7f 87       	std	Y+15, r23	; 0x0f
    1a88:	39 8b       	std	Y+17, r19	; 0x11
    1a8a:	28 8b       	std	Y+16, r18	; 0x10
	f32 TickTime = NUMBER_0;
    1a8c:	80 e0       	ldi	r24, 0x00	; 0
    1a8e:	90 e0       	ldi	r25, 0x00	; 0
    1a90:	a0 e0       	ldi	r26, 0x00	; 0
    1a92:	b0 e0       	ldi	r27, 0x00	; 0
    1a94:	8f 83       	std	Y+7, r24	; 0x07
    1a96:	98 87       	std	Y+8, r25	; 0x08
    1a98:	a9 87       	std	Y+9, r26	; 0x09
    1a9a:	ba 87       	std	Y+10, r27	; 0x0a
	f32 N = NUMBER_0;
    1a9c:	80 e0       	ldi	r24, 0x00	; 0
    1a9e:	90 e0       	ldi	r25, 0x00	; 0
    1aa0:	a0 e0       	ldi	r26, 0x00	; 0
    1aa2:	b0 e0       	ldi	r27, 0x00	; 0
    1aa4:	8b 83       	std	Y+3, r24	; 0x03
    1aa6:	9c 83       	std	Y+4, r25	; 0x04
    1aa8:	ad 83       	std	Y+5, r26	; 0x05
    1aaa:	be 83       	std	Y+6, r27	; 0x06
	u16 counter = NUMBER_0;
    1aac:	1a 82       	std	Y+2, r1	; 0x02
    1aae:	19 82       	std	Y+1, r1	; 0x01
	MCAL_T1_u8T1Prescaler(LOC_u8Clock_Selection, &TickTime);
    1ab0:	9e 01       	movw	r18, r28
    1ab2:	29 5f       	subi	r18, 0xF9	; 249
    1ab4:	3f 4f       	sbci	r19, 0xFF	; 255
    1ab6:	8b 85       	ldd	r24, Y+11	; 0x0b
    1ab8:	b9 01       	movw	r22, r18
    1aba:	0e 94 c6 09 	call	0x138c	; 0x138c <MCAL_T1_u8T1Prescaler>
	MCAL_T1_voidSetOCR1AValue(CTC_DELAY_CONST);
    1abe:	87 ec       	ldi	r24, 0xC7	; 199
    1ac0:	90 e0       	ldi	r25, 0x00	; 0
    1ac2:	0e 94 9d 0b 	call	0x173a	; 0x173a <MCAL_T1_voidSetOCR1AValue>
	if (LOC_fl32NumOFSecond <= 0 || LOC_fl32NumOFSecond > 0) {
    1ac6:	6c 85       	ldd	r22, Y+12	; 0x0c
    1ac8:	7d 85       	ldd	r23, Y+13	; 0x0d
    1aca:	8e 85       	ldd	r24, Y+14	; 0x0e
    1acc:	9f 85       	ldd	r25, Y+15	; 0x0f
    1ace:	20 e0       	ldi	r18, 0x00	; 0
    1ad0:	30 e0       	ldi	r19, 0x00	; 0
    1ad2:	40 e0       	ldi	r20, 0x00	; 0
    1ad4:	50 e0       	ldi	r21, 0x00	; 0
    1ad6:	0e 94 55 04 	call	0x8aa	; 0x8aa <__lesf2>
    1ada:	18 16       	cp	r1, r24
    1adc:	64 f4       	brge	.+24     	; 0x1af6 <MCAL_T1_voidDelayCTCMode+0x8c>
    1ade:	6c 85       	ldd	r22, Y+12	; 0x0c
    1ae0:	7d 85       	ldd	r23, Y+13	; 0x0d
    1ae2:	8e 85       	ldd	r24, Y+14	; 0x0e
    1ae4:	9f 85       	ldd	r25, Y+15	; 0x0f
    1ae6:	20 e0       	ldi	r18, 0x00	; 0
    1ae8:	30 e0       	ldi	r19, 0x00	; 0
    1aea:	40 e0       	ldi	r20, 0x00	; 0
    1aec:	50 e0       	ldi	r21, 0x00	; 0
    1aee:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1af2:	18 16       	cp	r1, r24
    1af4:	64 f5       	brge	.+88     	; 0x1b4e <MCAL_T1_voidDelayCTCMode+0xe4>
		N = ((CTC_DELAY_CONST + NUMBER_1) * TickTime);
    1af6:	8f 81       	ldd	r24, Y+7	; 0x07
    1af8:	98 85       	ldd	r25, Y+8	; 0x08
    1afa:	a9 85       	ldd	r26, Y+9	; 0x09
    1afc:	ba 85       	ldd	r27, Y+10	; 0x0a
    1afe:	bc 01       	movw	r22, r24
    1b00:	cd 01       	movw	r24, r26
    1b02:	20 e0       	ldi	r18, 0x00	; 0
    1b04:	30 e0       	ldi	r19, 0x00	; 0
    1b06:	48 e4       	ldi	r20, 0x48	; 72
    1b08:	53 e4       	ldi	r21, 0x43	; 67
    1b0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b0e:	dc 01       	movw	r26, r24
    1b10:	cb 01       	movw	r24, r22
    1b12:	8b 83       	std	Y+3, r24	; 0x03
    1b14:	9c 83       	std	Y+4, r25	; 0x04
    1b16:	ad 83       	std	Y+5, r26	; 0x05
    1b18:	be 83       	std	Y+6, r27	; 0x06
		counter = (LOC_fl32NumOFSecond / N);
    1b1a:	6c 85       	ldd	r22, Y+12	; 0x0c
    1b1c:	7d 85       	ldd	r23, Y+13	; 0x0d
    1b1e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1b20:	9f 85       	ldd	r25, Y+15	; 0x0f
    1b22:	2b 81       	ldd	r18, Y+3	; 0x03
    1b24:	3c 81       	ldd	r19, Y+4	; 0x04
    1b26:	4d 81       	ldd	r20, Y+5	; 0x05
    1b28:	5e 81       	ldd	r21, Y+6	; 0x06
    1b2a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1b2e:	dc 01       	movw	r26, r24
    1b30:	cb 01       	movw	r24, r22
    1b32:	bc 01       	movw	r22, r24
    1b34:	cd 01       	movw	r24, r26
    1b36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b3a:	dc 01       	movw	r26, r24
    1b3c:	cb 01       	movw	r24, r22
    1b3e:	9a 83       	std	Y+2, r25	; 0x02
    1b40:	89 83       	std	Y+1, r24	; 0x01
		*LOC_pu16Counter = counter;
    1b42:	e8 89       	ldd	r30, Y+16	; 0x10
    1b44:	f9 89       	ldd	r31, Y+17	; 0x11
    1b46:	89 81       	ldd	r24, Y+1	; 0x01
    1b48:	9a 81       	ldd	r25, Y+2	; 0x02
    1b4a:	91 83       	std	Z+1, r25	; 0x01
    1b4c:	80 83       	st	Z, r24
	} else {
		//NOTING
	}
}
    1b4e:	61 96       	adiw	r28, 0x11	; 17
    1b50:	0f b6       	in	r0, 0x3f	; 63
    1b52:	f8 94       	cli
    1b54:	de bf       	out	0x3e, r29	; 62
    1b56:	0f be       	out	0x3f, r0	; 63
    1b58:	cd bf       	out	0x3d, r28	; 61
    1b5a:	cf 91       	pop	r28
    1b5c:	df 91       	pop	r29
    1b5e:	08 95       	ret

00001b60 <MCAL_T1_voidSetTriggerEdge>:
//ICU EDGE
void MCAL_T1_voidSetTriggerEdge(u8 LOC_u8TriggerEdge) {
    1b60:	df 93       	push	r29
    1b62:	cf 93       	push	r28
    1b64:	0f 92       	push	r0
    1b66:	cd b7       	in	r28, 0x3d	; 61
    1b68:	de b7       	in	r29, 0x3e	; 62
    1b6a:	89 83       	std	Y+1, r24	; 0x01
	if (LOC_u8TriggerEdge <= RISING_EDGE) {
    1b6c:	89 81       	ldd	r24, Y+1	; 0x01
    1b6e:	82 30       	cpi	r24, 0x02	; 2
    1b70:	a8 f4       	brcc	.+42     	; 0x1b9c <MCAL_T1_voidSetTriggerEdge+0x3c>
		if (LOC_u8TriggerEdge == RISING_EDGE) {
    1b72:	89 81       	ldd	r24, Y+1	; 0x01
    1b74:	81 30       	cpi	r24, 0x01	; 1
    1b76:	41 f4       	brne	.+16     	; 0x1b88 <MCAL_T1_voidSetTriggerEdge+0x28>
			SET_BIT(TCCR1B, PIN6);
    1b78:	ae e4       	ldi	r26, 0x4E	; 78
    1b7a:	b0 e0       	ldi	r27, 0x00	; 0
    1b7c:	ee e4       	ldi	r30, 0x4E	; 78
    1b7e:	f0 e0       	ldi	r31, 0x00	; 0
    1b80:	80 81       	ld	r24, Z
    1b82:	80 64       	ori	r24, 0x40	; 64
    1b84:	8c 93       	st	X, r24
    1b86:	0a c0       	rjmp	.+20     	; 0x1b9c <MCAL_T1_voidSetTriggerEdge+0x3c>
		} else if (LOC_u8TriggerEdge == FALLING_EDGE) {
    1b88:	89 81       	ldd	r24, Y+1	; 0x01
    1b8a:	88 23       	and	r24, r24
    1b8c:	39 f4       	brne	.+14     	; 0x1b9c <MCAL_T1_voidSetTriggerEdge+0x3c>
			CLR_BIT(TCCR1B, PIN6);
    1b8e:	ae e4       	ldi	r26, 0x4E	; 78
    1b90:	b0 e0       	ldi	r27, 0x00	; 0
    1b92:	ee e4       	ldi	r30, 0x4E	; 78
    1b94:	f0 e0       	ldi	r31, 0x00	; 0
    1b96:	80 81       	ld	r24, Z
    1b98:	8f 7b       	andi	r24, 0xBF	; 191
    1b9a:	8c 93       	st	X, r24
			//NOTHING
		}
	} else {
		//NOTHING
	}
}
    1b9c:	0f 90       	pop	r0
    1b9e:	cf 91       	pop	r28
    1ba0:	df 91       	pop	r29
    1ba2:	08 95       	ret

00001ba4 <MCAL_T1_u8T1_Callback>:
u8 MCAL_T1_u8T1_Callback(void (*ptr)(void)) {
    1ba4:	df 93       	push	r29
    1ba6:	cf 93       	push	r28
    1ba8:	00 d0       	rcall	.+0      	; 0x1baa <MCAL_T1_u8T1_Callback+0x6>
    1baa:	0f 92       	push	r0
    1bac:	cd b7       	in	r28, 0x3d	; 61
    1bae:	de b7       	in	r29, 0x3e	; 62
    1bb0:	9b 83       	std	Y+3, r25	; 0x03
    1bb2:	8a 83       	std	Y+2, r24	; 0x02
	u8 LOC_u8ReturnValue = E_NOT_OK;
    1bb4:	81 e0       	ldi	r24, 0x01	; 1
    1bb6:	89 83       	std	Y+1, r24	; 0x01
	if (ptr != '\0') {
    1bb8:	8a 81       	ldd	r24, Y+2	; 0x02
    1bba:	9b 81       	ldd	r25, Y+3	; 0x03
    1bbc:	00 97       	sbiw	r24, 0x00	; 0
    1bbe:	39 f0       	breq	.+14     	; 0x1bce <MCAL_T1_u8T1_Callback+0x2a>
		Gptr_3 = ptr;
    1bc0:	8a 81       	ldd	r24, Y+2	; 0x02
    1bc2:	9b 81       	ldd	r25, Y+3	; 0x03
    1bc4:	90 93 cb 01 	sts	0x01CB, r25
    1bc8:	80 93 ca 01 	sts	0x01CA, r24
		LOC_u8ReturnValue = E_OK;
    1bcc:	19 82       	std	Y+1, r1	; 0x01
	}
	return LOC_u8ReturnValue;
    1bce:	89 81       	ldd	r24, Y+1	; 0x01
}
    1bd0:	0f 90       	pop	r0
    1bd2:	0f 90       	pop	r0
    1bd4:	0f 90       	pop	r0
    1bd6:	cf 91       	pop	r28
    1bd8:	df 91       	pop	r29
    1bda:	08 95       	ret

00001bdc <__vector_9>:

ISR(TIMER1_OVF_vect) {
    1bdc:	1f 92       	push	r1
    1bde:	0f 92       	push	r0
    1be0:	0f b6       	in	r0, 0x3f	; 63
    1be2:	0f 92       	push	r0
    1be4:	11 24       	eor	r1, r1
    1be6:	2f 93       	push	r18
    1be8:	3f 93       	push	r19
    1bea:	4f 93       	push	r20
    1bec:	5f 93       	push	r21
    1bee:	6f 93       	push	r22
    1bf0:	7f 93       	push	r23
    1bf2:	8f 93       	push	r24
    1bf4:	9f 93       	push	r25
    1bf6:	af 93       	push	r26
    1bf8:	bf 93       	push	r27
    1bfa:	ef 93       	push	r30
    1bfc:	ff 93       	push	r31
    1bfe:	df 93       	push	r29
    1c00:	cf 93       	push	r28
    1c02:	cd b7       	in	r28, 0x3d	; 61
    1c04:	de b7       	in	r29, 0x3e	; 62
	if (Gptr_3 != '\0') {
    1c06:	80 91 ca 01 	lds	r24, 0x01CA
    1c0a:	90 91 cb 01 	lds	r25, 0x01CB
    1c0e:	00 97       	sbiw	r24, 0x00	; 0
    1c10:	29 f0       	breq	.+10     	; 0x1c1c <__vector_9+0x40>
		Gptr_3();
    1c12:	e0 91 ca 01 	lds	r30, 0x01CA
    1c16:	f0 91 cb 01 	lds	r31, 0x01CB
    1c1a:	09 95       	icall
	}
}
    1c1c:	cf 91       	pop	r28
    1c1e:	df 91       	pop	r29
    1c20:	ff 91       	pop	r31
    1c22:	ef 91       	pop	r30
    1c24:	bf 91       	pop	r27
    1c26:	af 91       	pop	r26
    1c28:	9f 91       	pop	r25
    1c2a:	8f 91       	pop	r24
    1c2c:	7f 91       	pop	r23
    1c2e:	6f 91       	pop	r22
    1c30:	5f 91       	pop	r21
    1c32:	4f 91       	pop	r20
    1c34:	3f 91       	pop	r19
    1c36:	2f 91       	pop	r18
    1c38:	0f 90       	pop	r0
    1c3a:	0f be       	out	0x3f, r0	; 63
    1c3c:	0f 90       	pop	r0
    1c3e:	1f 90       	pop	r1
    1c40:	18 95       	reti

00001c42 <TIMER1_COMPA_vect>:
ISR(TIMER1_COMPA_vect) {
    1c42:	1f 92       	push	r1
    1c44:	0f 92       	push	r0
    1c46:	0f b6       	in	r0, 0x3f	; 63
    1c48:	0f 92       	push	r0
    1c4a:	11 24       	eor	r1, r1
    1c4c:	2f 93       	push	r18
    1c4e:	3f 93       	push	r19
    1c50:	4f 93       	push	r20
    1c52:	5f 93       	push	r21
    1c54:	6f 93       	push	r22
    1c56:	7f 93       	push	r23
    1c58:	8f 93       	push	r24
    1c5a:	9f 93       	push	r25
    1c5c:	af 93       	push	r26
    1c5e:	bf 93       	push	r27
    1c60:	ef 93       	push	r30
    1c62:	ff 93       	push	r31
    1c64:	df 93       	push	r29
    1c66:	cf 93       	push	r28
    1c68:	cd b7       	in	r28, 0x3d	; 61
    1c6a:	de b7       	in	r29, 0x3e	; 62
	if (Gptr_3 != '\0') {
    1c6c:	80 91 ca 01 	lds	r24, 0x01CA
    1c70:	90 91 cb 01 	lds	r25, 0x01CB
    1c74:	00 97       	sbiw	r24, 0x00	; 0
    1c76:	29 f0       	breq	.+10     	; 0x1c82 <TIMER1_COMPA_vect+0x40>
		Gptr_3();
    1c78:	e0 91 ca 01 	lds	r30, 0x01CA
    1c7c:	f0 91 cb 01 	lds	r31, 0x01CB
    1c80:	09 95       	icall
	}
}
    1c82:	cf 91       	pop	r28
    1c84:	df 91       	pop	r29
    1c86:	ff 91       	pop	r31
    1c88:	ef 91       	pop	r30
    1c8a:	bf 91       	pop	r27
    1c8c:	af 91       	pop	r26
    1c8e:	9f 91       	pop	r25
    1c90:	8f 91       	pop	r24
    1c92:	7f 91       	pop	r23
    1c94:	6f 91       	pop	r22
    1c96:	5f 91       	pop	r21
    1c98:	4f 91       	pop	r20
    1c9a:	3f 91       	pop	r19
    1c9c:	2f 91       	pop	r18
    1c9e:	0f 90       	pop	r0
    1ca0:	0f be       	out	0x3f, r0	; 63
    1ca2:	0f 90       	pop	r0
    1ca4:	1f 90       	pop	r1
    1ca6:	18 95       	reti

00001ca8 <__vector_8>:
ISR(TIMER1_COMPB_vect) {
    1ca8:	1f 92       	push	r1
    1caa:	0f 92       	push	r0
    1cac:	0f b6       	in	r0, 0x3f	; 63
    1cae:	0f 92       	push	r0
    1cb0:	11 24       	eor	r1, r1
    1cb2:	2f 93       	push	r18
    1cb4:	3f 93       	push	r19
    1cb6:	4f 93       	push	r20
    1cb8:	5f 93       	push	r21
    1cba:	6f 93       	push	r22
    1cbc:	7f 93       	push	r23
    1cbe:	8f 93       	push	r24
    1cc0:	9f 93       	push	r25
    1cc2:	af 93       	push	r26
    1cc4:	bf 93       	push	r27
    1cc6:	ef 93       	push	r30
    1cc8:	ff 93       	push	r31
    1cca:	df 93       	push	r29
    1ccc:	cf 93       	push	r28
    1cce:	cd b7       	in	r28, 0x3d	; 61
    1cd0:	de b7       	in	r29, 0x3e	; 62
	if (Gptr_3 != '\0') {
    1cd2:	80 91 ca 01 	lds	r24, 0x01CA
    1cd6:	90 91 cb 01 	lds	r25, 0x01CB
    1cda:	00 97       	sbiw	r24, 0x00	; 0
    1cdc:	29 f0       	breq	.+10     	; 0x1ce8 <__vector_8+0x40>
		Gptr_3();
    1cde:	e0 91 ca 01 	lds	r30, 0x01CA
    1ce2:	f0 91 cb 01 	lds	r31, 0x01CB
    1ce6:	09 95       	icall
	}
}
    1ce8:	cf 91       	pop	r28
    1cea:	df 91       	pop	r29
    1cec:	ff 91       	pop	r31
    1cee:	ef 91       	pop	r30
    1cf0:	bf 91       	pop	r27
    1cf2:	af 91       	pop	r26
    1cf4:	9f 91       	pop	r25
    1cf6:	8f 91       	pop	r24
    1cf8:	7f 91       	pop	r23
    1cfa:	6f 91       	pop	r22
    1cfc:	5f 91       	pop	r21
    1cfe:	4f 91       	pop	r20
    1d00:	3f 91       	pop	r19
    1d02:	2f 91       	pop	r18
    1d04:	0f 90       	pop	r0
    1d06:	0f be       	out	0x3f, r0	; 63
    1d08:	0f 90       	pop	r0
    1d0a:	1f 90       	pop	r1
    1d0c:	18 95       	reti

00001d0e <__vector_6>:
ISR(TIMER1_CAPT_vect) {
    1d0e:	1f 92       	push	r1
    1d10:	0f 92       	push	r0
    1d12:	0f b6       	in	r0, 0x3f	; 63
    1d14:	0f 92       	push	r0
    1d16:	11 24       	eor	r1, r1
    1d18:	2f 93       	push	r18
    1d1a:	3f 93       	push	r19
    1d1c:	4f 93       	push	r20
    1d1e:	5f 93       	push	r21
    1d20:	6f 93       	push	r22
    1d22:	7f 93       	push	r23
    1d24:	8f 93       	push	r24
    1d26:	9f 93       	push	r25
    1d28:	af 93       	push	r26
    1d2a:	bf 93       	push	r27
    1d2c:	ef 93       	push	r30
    1d2e:	ff 93       	push	r31
    1d30:	df 93       	push	r29
    1d32:	cf 93       	push	r28
    1d34:	cd b7       	in	r28, 0x3d	; 61
    1d36:	de b7       	in	r29, 0x3e	; 62
	if (Gptr_3 != '\0') {
    1d38:	80 91 ca 01 	lds	r24, 0x01CA
    1d3c:	90 91 cb 01 	lds	r25, 0x01CB
    1d40:	00 97       	sbiw	r24, 0x00	; 0
    1d42:	29 f0       	breq	.+10     	; 0x1d4e <__vector_6+0x40>
		Gptr_3();
    1d44:	e0 91 ca 01 	lds	r30, 0x01CA
    1d48:	f0 91 cb 01 	lds	r31, 0x01CB
    1d4c:	09 95       	icall
	}
}
    1d4e:	cf 91       	pop	r28
    1d50:	df 91       	pop	r29
    1d52:	ff 91       	pop	r31
    1d54:	ef 91       	pop	r30
    1d56:	bf 91       	pop	r27
    1d58:	af 91       	pop	r26
    1d5a:	9f 91       	pop	r25
    1d5c:	8f 91       	pop	r24
    1d5e:	7f 91       	pop	r23
    1d60:	6f 91       	pop	r22
    1d62:	5f 91       	pop	r21
    1d64:	4f 91       	pop	r20
    1d66:	3f 91       	pop	r19
    1d68:	2f 91       	pop	r18
    1d6a:	0f 90       	pop	r0
    1d6c:	0f be       	out	0x3f, r0	; 63
    1d6e:	0f 90       	pop	r0
    1d70:	1f 90       	pop	r1
    1d72:	18 95       	reti

00001d74 <MCAL_T1_FPWM_10bitRES>:

void MCAL_T1_FPWM_10bitRES(u8 copy_u8Channel, u8 copy_u8Duty) {
    1d74:	0f 93       	push	r16
    1d76:	1f 93       	push	r17
    1d78:	df 93       	push	r29
    1d7a:	cf 93       	push	r28
    1d7c:	00 d0       	rcall	.+0      	; 0x1d7e <MCAL_T1_FPWM_10bitRES+0xa>
    1d7e:	00 d0       	rcall	.+0      	; 0x1d80 <MCAL_T1_FPWM_10bitRES+0xc>
    1d80:	00 d0       	rcall	.+0      	; 0x1d82 <MCAL_T1_FPWM_10bitRES+0xe>
    1d82:	cd b7       	in	r28, 0x3d	; 61
    1d84:	de b7       	in	r29, 0x3e	; 62
    1d86:	8d 83       	std	Y+5, r24	; 0x05
    1d88:	6e 83       	std	Y+6, r22	; 0x06
	f32 LOC_fl32tickTime = 0;
    1d8a:	80 e0       	ldi	r24, 0x00	; 0
    1d8c:	90 e0       	ldi	r25, 0x00	; 0
    1d8e:	a0 e0       	ldi	r26, 0x00	; 0
    1d90:	b0 e0       	ldi	r27, 0x00	; 0
    1d92:	89 83       	std	Y+1, r24	; 0x01
    1d94:	9a 83       	std	Y+2, r25	; 0x02
    1d96:	ab 83       	std	Y+3, r26	; 0x03
    1d98:	bc 83       	std	Y+4, r27	; 0x04
	//Set Mode
	MCAL_T1_u8T1Init(PWM_PHASE_CORRECT_10bit);
    1d9a:	83 e0       	ldi	r24, 0x03	; 3
    1d9c:	0e 94 a5 07 	call	0xf4a	; 0xf4a <MCAL_T1_u8T1Init>
	//Select Prescaler
	MCAL_T1_u8T1Prescaler(PRESCALLING_64, &LOC_fl32tickTime);
    1da0:	83 e0       	ldi	r24, 0x03	; 3
    1da2:	9e 01       	movw	r18, r28
    1da4:	2f 5f       	subi	r18, 0xFF	; 255
    1da6:	3f 4f       	sbci	r19, 0xFF	; 255
    1da8:	b9 01       	movw	r22, r18
    1daa:	0e 94 c6 09 	call	0x138c	; 0x138c <MCAL_T1_u8T1Prescaler>
	MCAL_T1_u8T1CompareOutputMode(NON_INVERTING_MODE, copy_u8Channel);
    1dae:	80 e0       	ldi	r24, 0x00	; 0
    1db0:	6d 81       	ldd	r22, Y+5	; 0x05
    1db2:	0e 94 de 0a 	call	0x15bc	; 0x15bc <MCAL_T1_u8T1CompareOutputMode>
	if (copy_u8Channel == CHENNEL_A) {
    1db6:	8d 81       	ldd	r24, Y+5	; 0x05
    1db8:	88 23       	and	r24, r24
    1dba:	19 f5       	brne	.+70     	; 0x1e02 <MCAL_T1_FPWM_10bitRES+0x8e>
		OCR1A = copy_u8Duty * 10.23;
    1dbc:	0a e4       	ldi	r16, 0x4A	; 74
    1dbe:	10 e0       	ldi	r17, 0x00	; 0
    1dc0:	8e 81       	ldd	r24, Y+6	; 0x06
    1dc2:	88 2f       	mov	r24, r24
    1dc4:	90 e0       	ldi	r25, 0x00	; 0
    1dc6:	aa 27       	eor	r26, r26
    1dc8:	97 fd       	sbrc	r25, 7
    1dca:	a0 95       	com	r26
    1dcc:	ba 2f       	mov	r27, r26
    1dce:	bc 01       	movw	r22, r24
    1dd0:	cd 01       	movw	r24, r26
    1dd2:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    1dd6:	dc 01       	movw	r26, r24
    1dd8:	cb 01       	movw	r24, r22
    1dda:	bc 01       	movw	r22, r24
    1ddc:	cd 01       	movw	r24, r26
    1dde:	24 e1       	ldi	r18, 0x14	; 20
    1de0:	3e ea       	ldi	r19, 0xAE	; 174
    1de2:	43 e2       	ldi	r20, 0x23	; 35
    1de4:	51 e4       	ldi	r21, 0x41	; 65
    1de6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dea:	dc 01       	movw	r26, r24
    1dec:	cb 01       	movw	r24, r22
    1dee:	bc 01       	movw	r22, r24
    1df0:	cd 01       	movw	r24, r26
    1df2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1df6:	dc 01       	movw	r26, r24
    1df8:	cb 01       	movw	r24, r22
    1dfa:	f8 01       	movw	r30, r16
    1dfc:	91 83       	std	Z+1, r25	; 0x01
    1dfe:	80 83       	st	Z, r24
    1e00:	25 c0       	rjmp	.+74     	; 0x1e4c <MCAL_T1_FPWM_10bitRES+0xd8>
	} else if (copy_u8Channel == CHENNEL_B) {
    1e02:	8d 81       	ldd	r24, Y+5	; 0x05
    1e04:	81 30       	cpi	r24, 0x01	; 1
    1e06:	11 f5       	brne	.+68     	; 0x1e4c <MCAL_T1_FPWM_10bitRES+0xd8>
		OCR1B = copy_u8Duty * 10.23;
    1e08:	08 e4       	ldi	r16, 0x48	; 72
    1e0a:	10 e0       	ldi	r17, 0x00	; 0
    1e0c:	8e 81       	ldd	r24, Y+6	; 0x06
    1e0e:	88 2f       	mov	r24, r24
    1e10:	90 e0       	ldi	r25, 0x00	; 0
    1e12:	aa 27       	eor	r26, r26
    1e14:	97 fd       	sbrc	r25, 7
    1e16:	a0 95       	com	r26
    1e18:	ba 2f       	mov	r27, r26
    1e1a:	bc 01       	movw	r22, r24
    1e1c:	cd 01       	movw	r24, r26
    1e1e:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    1e22:	dc 01       	movw	r26, r24
    1e24:	cb 01       	movw	r24, r22
    1e26:	bc 01       	movw	r22, r24
    1e28:	cd 01       	movw	r24, r26
    1e2a:	24 e1       	ldi	r18, 0x14	; 20
    1e2c:	3e ea       	ldi	r19, 0xAE	; 174
    1e2e:	43 e2       	ldi	r20, 0x23	; 35
    1e30:	51 e4       	ldi	r21, 0x41	; 65
    1e32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e36:	dc 01       	movw	r26, r24
    1e38:	cb 01       	movw	r24, r22
    1e3a:	bc 01       	movw	r22, r24
    1e3c:	cd 01       	movw	r24, r26
    1e3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e42:	dc 01       	movw	r26, r24
    1e44:	cb 01       	movw	r24, r22
    1e46:	f8 01       	movw	r30, r16
    1e48:	91 83       	std	Z+1, r25	; 0x01
    1e4a:	80 83       	st	Z, r24

	} else {
		//NOTHING
	}
}
    1e4c:	26 96       	adiw	r28, 0x06	; 6
    1e4e:	0f b6       	in	r0, 0x3f	; 63
    1e50:	f8 94       	cli
    1e52:	de bf       	out	0x3e, r29	; 62
    1e54:	0f be       	out	0x3f, r0	; 63
    1e56:	cd bf       	out	0x3d, r28	; 61
    1e58:	cf 91       	pop	r28
    1e5a:	df 91       	pop	r29
    1e5c:	1f 91       	pop	r17
    1e5e:	0f 91       	pop	r16
    1e60:	08 95       	ret

00001e62 <MCAL_Timer0_Init>:
void (*Gptr3)(void)= '\0' ;
f32 Glob_TickTime;
u16 Start = 0;
u16 Counter = 0;

void MCAL_Timer0_Init(u8 Loc_u8Mode, u8 Loc_u8Prescaller,u8 Loc_u8OC0Mode) {
    1e62:	df 93       	push	r29
    1e64:	cf 93       	push	r28
    1e66:	00 d0       	rcall	.+0      	; 0x1e68 <MCAL_Timer0_Init+0x6>
    1e68:	00 d0       	rcall	.+0      	; 0x1e6a <MCAL_Timer0_Init+0x8>
    1e6a:	cd b7       	in	r28, 0x3d	; 61
    1e6c:	de b7       	in	r29, 0x3e	; 62
    1e6e:	8a 83       	std	Y+2, r24	; 0x02
    1e70:	6b 83       	std	Y+3, r22	; 0x03
    1e72:	4c 83       	std	Y+4, r20	; 0x04
	u8 LOC_u8ReturnValue = E_NOT_OK;
    1e74:	81 e0       	ldi	r24, 0x01	; 1
    1e76:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(SREG, 7);
    1e78:	af e5       	ldi	r26, 0x5F	; 95
    1e7a:	b0 e0       	ldi	r27, 0x00	; 0
    1e7c:	ef e5       	ldi	r30, 0x5F	; 95
    1e7e:	f0 e0       	ldi	r31, 0x00	; 0
    1e80:	80 81       	ld	r24, Z
    1e82:	80 68       	ori	r24, 0x80	; 128
    1e84:	8c 93       	st	X, r24
	if (Loc_u8Mode == Normal_Mode) {
    1e86:	8a 81       	ldd	r24, Y+2	; 0x02
    1e88:	88 23       	and	r24, r24
    1e8a:	b1 f4       	brne	.+44     	; 0x1eb8 <MCAL_Timer0_Init+0x56>
		CLR_BIT(TCCR0, 3);
    1e8c:	a3 e5       	ldi	r26, 0x53	; 83
    1e8e:	b0 e0       	ldi	r27, 0x00	; 0
    1e90:	e3 e5       	ldi	r30, 0x53	; 83
    1e92:	f0 e0       	ldi	r31, 0x00	; 0
    1e94:	80 81       	ld	r24, Z
    1e96:	87 7f       	andi	r24, 0xF7	; 247
    1e98:	8c 93       	st	X, r24
		CLR_BIT(TCCR0, 6);
    1e9a:	a3 e5       	ldi	r26, 0x53	; 83
    1e9c:	b0 e0       	ldi	r27, 0x00	; 0
    1e9e:	e3 e5       	ldi	r30, 0x53	; 83
    1ea0:	f0 e0       	ldi	r31, 0x00	; 0
    1ea2:	80 81       	ld	r24, Z
    1ea4:	8f 7b       	andi	r24, 0xBF	; 191
    1ea6:	8c 93       	st	X, r24
		SET_BIT(TIMSK, 0);
    1ea8:	a9 e5       	ldi	r26, 0x59	; 89
    1eaa:	b0 e0       	ldi	r27, 0x00	; 0
    1eac:	e9 e5       	ldi	r30, 0x59	; 89
    1eae:	f0 e0       	ldi	r31, 0x00	; 0
    1eb0:	80 81       	ld	r24, Z
    1eb2:	81 60       	ori	r24, 0x01	; 1
    1eb4:	8c 93       	st	X, r24
    1eb6:	35 c0       	rjmp	.+106    	; 0x1f22 <MCAL_Timer0_Init+0xc0>
	} else if (Loc_u8Mode == CTC_Mode) {
    1eb8:	8a 81       	ldd	r24, Y+2	; 0x02
    1eba:	81 30       	cpi	r24, 0x01	; 1
    1ebc:	b1 f4       	brne	.+44     	; 0x1eea <MCAL_Timer0_Init+0x88>
		SET_BIT(TCCR0, 3);
    1ebe:	a3 e5       	ldi	r26, 0x53	; 83
    1ec0:	b0 e0       	ldi	r27, 0x00	; 0
    1ec2:	e3 e5       	ldi	r30, 0x53	; 83
    1ec4:	f0 e0       	ldi	r31, 0x00	; 0
    1ec6:	80 81       	ld	r24, Z
    1ec8:	88 60       	ori	r24, 0x08	; 8
    1eca:	8c 93       	st	X, r24
		CLR_BIT(TCCR0, 6);
    1ecc:	a3 e5       	ldi	r26, 0x53	; 83
    1ece:	b0 e0       	ldi	r27, 0x00	; 0
    1ed0:	e3 e5       	ldi	r30, 0x53	; 83
    1ed2:	f0 e0       	ldi	r31, 0x00	; 0
    1ed4:	80 81       	ld	r24, Z
    1ed6:	8f 7b       	andi	r24, 0xBF	; 191
    1ed8:	8c 93       	st	X, r24
		SET_BIT(TIMSK, 1);
    1eda:	a9 e5       	ldi	r26, 0x59	; 89
    1edc:	b0 e0       	ldi	r27, 0x00	; 0
    1ede:	e9 e5       	ldi	r30, 0x59	; 89
    1ee0:	f0 e0       	ldi	r31, 0x00	; 0
    1ee2:	80 81       	ld	r24, Z
    1ee4:	82 60       	ori	r24, 0x02	; 2
    1ee6:	8c 93       	st	X, r24
    1ee8:	1c c0       	rjmp	.+56     	; 0x1f22 <MCAL_Timer0_Init+0xc0>
	} else if (Loc_u8Mode == PWM_Mode) {
    1eea:	8a 81       	ldd	r24, Y+2	; 0x02
    1eec:	82 30       	cpi	r24, 0x02	; 2
    1eee:	79 f4       	brne	.+30     	; 0x1f0e <MCAL_Timer0_Init+0xac>
		CLR_BIT(TCCR0, 3);
    1ef0:	a3 e5       	ldi	r26, 0x53	; 83
    1ef2:	b0 e0       	ldi	r27, 0x00	; 0
    1ef4:	e3 e5       	ldi	r30, 0x53	; 83
    1ef6:	f0 e0       	ldi	r31, 0x00	; 0
    1ef8:	80 81       	ld	r24, Z
    1efa:	87 7f       	andi	r24, 0xF7	; 247
    1efc:	8c 93       	st	X, r24
		SET_BIT(TCCR0, 6);
    1efe:	a3 e5       	ldi	r26, 0x53	; 83
    1f00:	b0 e0       	ldi	r27, 0x00	; 0
    1f02:	e3 e5       	ldi	r30, 0x53	; 83
    1f04:	f0 e0       	ldi	r31, 0x00	; 0
    1f06:	80 81       	ld	r24, Z
    1f08:	80 64       	ori	r24, 0x40	; 64
    1f0a:	8c 93       	st	X, r24
    1f0c:	0a c0       	rjmp	.+20     	; 0x1f22 <MCAL_Timer0_Init+0xc0>
	} else if (Loc_u8Mode == FastPWM_Mode) {
    1f0e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f10:	83 30       	cpi	r24, 0x03	; 3
    1f12:	39 f4       	brne	.+14     	; 0x1f22 <MCAL_Timer0_Init+0xc0>
//		SET_BIT(TCCR0, 3);
//		SET_BIT(TCCR0, 6);
		SET_BIT(TIMSK, 1);
    1f14:	a9 e5       	ldi	r26, 0x59	; 89
    1f16:	b0 e0       	ldi	r27, 0x00	; 0
    1f18:	e9 e5       	ldi	r30, 0x59	; 89
    1f1a:	f0 e0       	ldi	r31, 0x00	; 0
    1f1c:	80 81       	ld	r24, Z
    1f1e:	82 60       	ori	r24, 0x02	; 2
    1f20:	8c 93       	st	X, r24
	}
	if (Loc_u8Prescaller == NoPrescaller) {
    1f22:	8b 81       	ldd	r24, Y+3	; 0x03
    1f24:	88 23       	and	r24, r24
    1f26:	b9 f4       	brne	.+46     	; 0x1f56 <MCAL_Timer0_Init+0xf4>
		CLR_BIT(TCCR0, 0);
    1f28:	a3 e5       	ldi	r26, 0x53	; 83
    1f2a:	b0 e0       	ldi	r27, 0x00	; 0
    1f2c:	e3 e5       	ldi	r30, 0x53	; 83
    1f2e:	f0 e0       	ldi	r31, 0x00	; 0
    1f30:	80 81       	ld	r24, Z
    1f32:	8e 7f       	andi	r24, 0xFE	; 254
    1f34:	8c 93       	st	X, r24
		CLR_BIT(TCCR0, 1);
    1f36:	a3 e5       	ldi	r26, 0x53	; 83
    1f38:	b0 e0       	ldi	r27, 0x00	; 0
    1f3a:	e3 e5       	ldi	r30, 0x53	; 83
    1f3c:	f0 e0       	ldi	r31, 0x00	; 0
    1f3e:	80 81       	ld	r24, Z
    1f40:	8d 7f       	andi	r24, 0xFD	; 253
    1f42:	8c 93       	st	X, r24
		CLR_BIT(TCCR0, 2);
    1f44:	a3 e5       	ldi	r26, 0x53	; 83
    1f46:	b0 e0       	ldi	r27, 0x00	; 0
    1f48:	e3 e5       	ldi	r30, 0x53	; 83
    1f4a:	f0 e0       	ldi	r31, 0x00	; 0
    1f4c:	80 81       	ld	r24, Z
    1f4e:	8b 7f       	andi	r24, 0xFB	; 251
    1f50:	8c 93       	st	X, r24
		LOC_u8ReturnValue = E_OK;
    1f52:	19 82       	std	Y+1, r1	; 0x01
    1f54:	f1 c0       	rjmp	.+482    	; 0x2138 <MCAL_Timer0_Init+0x2d6>
	} else if (Loc_u8Prescaller == Prescaller_1) {
    1f56:	8b 81       	ldd	r24, Y+3	; 0x03
    1f58:	81 30       	cpi	r24, 0x01	; 1
    1f5a:	19 f5       	brne	.+70     	; 0x1fa2 <MCAL_Timer0_Init+0x140>
		SET_BIT(TCCR0, 0);
    1f5c:	a3 e5       	ldi	r26, 0x53	; 83
    1f5e:	b0 e0       	ldi	r27, 0x00	; 0
    1f60:	e3 e5       	ldi	r30, 0x53	; 83
    1f62:	f0 e0       	ldi	r31, 0x00	; 0
    1f64:	80 81       	ld	r24, Z
    1f66:	81 60       	ori	r24, 0x01	; 1
    1f68:	8c 93       	st	X, r24
		CLR_BIT(TCCR0, 1);
    1f6a:	a3 e5       	ldi	r26, 0x53	; 83
    1f6c:	b0 e0       	ldi	r27, 0x00	; 0
    1f6e:	e3 e5       	ldi	r30, 0x53	; 83
    1f70:	f0 e0       	ldi	r31, 0x00	; 0
    1f72:	80 81       	ld	r24, Z
    1f74:	8d 7f       	andi	r24, 0xFD	; 253
    1f76:	8c 93       	st	X, r24
		CLR_BIT(TCCR0, 2);
    1f78:	a3 e5       	ldi	r26, 0x53	; 83
    1f7a:	b0 e0       	ldi	r27, 0x00	; 0
    1f7c:	e3 e5       	ldi	r30, 0x53	; 83
    1f7e:	f0 e0       	ldi	r31, 0x00	; 0
    1f80:	80 81       	ld	r24, Z
    1f82:	8b 7f       	andi	r24, 0xFB	; 251
    1f84:	8c 93       	st	X, r24
		Glob_TickTime = Prescaller1_Value / (f32) CPU_Frequancy;
    1f86:	8d eb       	ldi	r24, 0xBD	; 189
    1f88:	97 e3       	ldi	r25, 0x37	; 55
    1f8a:	a6 e8       	ldi	r26, 0x86	; 134
    1f8c:	b3 e3       	ldi	r27, 0x33	; 51
    1f8e:	80 93 ea 01 	sts	0x01EA, r24
    1f92:	90 93 eb 01 	sts	0x01EB, r25
    1f96:	a0 93 ec 01 	sts	0x01EC, r26
    1f9a:	b0 93 ed 01 	sts	0x01ED, r27
		LOC_u8ReturnValue = E_OK;
    1f9e:	19 82       	std	Y+1, r1	; 0x01
    1fa0:	cb c0       	rjmp	.+406    	; 0x2138 <MCAL_Timer0_Init+0x2d6>
	} else if (Loc_u8Prescaller == Prescaller_8) {
    1fa2:	8b 81       	ldd	r24, Y+3	; 0x03
    1fa4:	82 30       	cpi	r24, 0x02	; 2
    1fa6:	19 f5       	brne	.+70     	; 0x1fee <MCAL_Timer0_Init+0x18c>
		CLR_BIT(TCCR0, 0);
    1fa8:	a3 e5       	ldi	r26, 0x53	; 83
    1faa:	b0 e0       	ldi	r27, 0x00	; 0
    1fac:	e3 e5       	ldi	r30, 0x53	; 83
    1fae:	f0 e0       	ldi	r31, 0x00	; 0
    1fb0:	80 81       	ld	r24, Z
    1fb2:	8e 7f       	andi	r24, 0xFE	; 254
    1fb4:	8c 93       	st	X, r24
		SET_BIT(TCCR0, 1);
    1fb6:	a3 e5       	ldi	r26, 0x53	; 83
    1fb8:	b0 e0       	ldi	r27, 0x00	; 0
    1fba:	e3 e5       	ldi	r30, 0x53	; 83
    1fbc:	f0 e0       	ldi	r31, 0x00	; 0
    1fbe:	80 81       	ld	r24, Z
    1fc0:	82 60       	ori	r24, 0x02	; 2
    1fc2:	8c 93       	st	X, r24
		CLR_BIT(TCCR0, 2);
    1fc4:	a3 e5       	ldi	r26, 0x53	; 83
    1fc6:	b0 e0       	ldi	r27, 0x00	; 0
    1fc8:	e3 e5       	ldi	r30, 0x53	; 83
    1fca:	f0 e0       	ldi	r31, 0x00	; 0
    1fcc:	80 81       	ld	r24, Z
    1fce:	8b 7f       	andi	r24, 0xFB	; 251
    1fd0:	8c 93       	st	X, r24
		Glob_TickTime = Prescaller8_Value / (f32) CPU_Frequancy;
    1fd2:	8d eb       	ldi	r24, 0xBD	; 189
    1fd4:	97 e3       	ldi	r25, 0x37	; 55
    1fd6:	a6 e0       	ldi	r26, 0x06	; 6
    1fd8:	b5 e3       	ldi	r27, 0x35	; 53
    1fda:	80 93 ea 01 	sts	0x01EA, r24
    1fde:	90 93 eb 01 	sts	0x01EB, r25
    1fe2:	a0 93 ec 01 	sts	0x01EC, r26
    1fe6:	b0 93 ed 01 	sts	0x01ED, r27
		LOC_u8ReturnValue = E_OK;
    1fea:	19 82       	std	Y+1, r1	; 0x01
    1fec:	a5 c0       	rjmp	.+330    	; 0x2138 <MCAL_Timer0_Init+0x2d6>
	} else if (Loc_u8Prescaller == Prescaller_64) {
    1fee:	8b 81       	ldd	r24, Y+3	; 0x03
    1ff0:	83 30       	cpi	r24, 0x03	; 3
    1ff2:	19 f5       	brne	.+70     	; 0x203a <MCAL_Timer0_Init+0x1d8>
		SET_BIT(TCCR0, 0);
    1ff4:	a3 e5       	ldi	r26, 0x53	; 83
    1ff6:	b0 e0       	ldi	r27, 0x00	; 0
    1ff8:	e3 e5       	ldi	r30, 0x53	; 83
    1ffa:	f0 e0       	ldi	r31, 0x00	; 0
    1ffc:	80 81       	ld	r24, Z
    1ffe:	81 60       	ori	r24, 0x01	; 1
    2000:	8c 93       	st	X, r24
		SET_BIT(TCCR0, 1);
    2002:	a3 e5       	ldi	r26, 0x53	; 83
    2004:	b0 e0       	ldi	r27, 0x00	; 0
    2006:	e3 e5       	ldi	r30, 0x53	; 83
    2008:	f0 e0       	ldi	r31, 0x00	; 0
    200a:	80 81       	ld	r24, Z
    200c:	82 60       	ori	r24, 0x02	; 2
    200e:	8c 93       	st	X, r24
		CLR_BIT(TCCR0, 2);
    2010:	a3 e5       	ldi	r26, 0x53	; 83
    2012:	b0 e0       	ldi	r27, 0x00	; 0
    2014:	e3 e5       	ldi	r30, 0x53	; 83
    2016:	f0 e0       	ldi	r31, 0x00	; 0
    2018:	80 81       	ld	r24, Z
    201a:	8b 7f       	andi	r24, 0xFB	; 251
    201c:	8c 93       	st	X, r24
		Glob_TickTime = Prescaller64_Value / (f32) CPU_Frequancy;
    201e:	8d eb       	ldi	r24, 0xBD	; 189
    2020:	97 e3       	ldi	r25, 0x37	; 55
    2022:	a6 e8       	ldi	r26, 0x86	; 134
    2024:	b6 e3       	ldi	r27, 0x36	; 54
    2026:	80 93 ea 01 	sts	0x01EA, r24
    202a:	90 93 eb 01 	sts	0x01EB, r25
    202e:	a0 93 ec 01 	sts	0x01EC, r26
    2032:	b0 93 ed 01 	sts	0x01ED, r27
		LOC_u8ReturnValue = E_OK;
    2036:	19 82       	std	Y+1, r1	; 0x01
    2038:	7f c0       	rjmp	.+254    	; 0x2138 <MCAL_Timer0_Init+0x2d6>
	} else if (Loc_u8Prescaller == Prescaller_256) {
    203a:	8b 81       	ldd	r24, Y+3	; 0x03
    203c:	84 30       	cpi	r24, 0x04	; 4
    203e:	19 f5       	brne	.+70     	; 0x2086 <MCAL_Timer0_Init+0x224>
		CLR_BIT(TCCR0, 0);
    2040:	a3 e5       	ldi	r26, 0x53	; 83
    2042:	b0 e0       	ldi	r27, 0x00	; 0
    2044:	e3 e5       	ldi	r30, 0x53	; 83
    2046:	f0 e0       	ldi	r31, 0x00	; 0
    2048:	80 81       	ld	r24, Z
    204a:	8e 7f       	andi	r24, 0xFE	; 254
    204c:	8c 93       	st	X, r24
		CLR_BIT(TCCR0, 1);
    204e:	a3 e5       	ldi	r26, 0x53	; 83
    2050:	b0 e0       	ldi	r27, 0x00	; 0
    2052:	e3 e5       	ldi	r30, 0x53	; 83
    2054:	f0 e0       	ldi	r31, 0x00	; 0
    2056:	80 81       	ld	r24, Z
    2058:	8d 7f       	andi	r24, 0xFD	; 253
    205a:	8c 93       	st	X, r24
		SET_BIT(TCCR0, 2);
    205c:	a3 e5       	ldi	r26, 0x53	; 83
    205e:	b0 e0       	ldi	r27, 0x00	; 0
    2060:	e3 e5       	ldi	r30, 0x53	; 83
    2062:	f0 e0       	ldi	r31, 0x00	; 0
    2064:	80 81       	ld	r24, Z
    2066:	84 60       	ori	r24, 0x04	; 4
    2068:	8c 93       	st	X, r24
		Glob_TickTime = Prescaller256_Value / (f32) CPU_Frequancy;
    206a:	8d eb       	ldi	r24, 0xBD	; 189
    206c:	97 e3       	ldi	r25, 0x37	; 55
    206e:	a6 e8       	ldi	r26, 0x86	; 134
    2070:	b7 e3       	ldi	r27, 0x37	; 55
    2072:	80 93 ea 01 	sts	0x01EA, r24
    2076:	90 93 eb 01 	sts	0x01EB, r25
    207a:	a0 93 ec 01 	sts	0x01EC, r26
    207e:	b0 93 ed 01 	sts	0x01ED, r27
		LOC_u8ReturnValue = E_OK;
    2082:	19 82       	std	Y+1, r1	; 0x01
    2084:	59 c0       	rjmp	.+178    	; 0x2138 <MCAL_Timer0_Init+0x2d6>
	} else if (Loc_u8Prescaller == Prescaller_1024) {
    2086:	8b 81       	ldd	r24, Y+3	; 0x03
    2088:	85 30       	cpi	r24, 0x05	; 5
    208a:	19 f5       	brne	.+70     	; 0x20d2 <MCAL_Timer0_Init+0x270>
		SET_BIT(TCCR0, 0);
    208c:	a3 e5       	ldi	r26, 0x53	; 83
    208e:	b0 e0       	ldi	r27, 0x00	; 0
    2090:	e3 e5       	ldi	r30, 0x53	; 83
    2092:	f0 e0       	ldi	r31, 0x00	; 0
    2094:	80 81       	ld	r24, Z
    2096:	81 60       	ori	r24, 0x01	; 1
    2098:	8c 93       	st	X, r24
		CLR_BIT(TCCR0, 1);
    209a:	a3 e5       	ldi	r26, 0x53	; 83
    209c:	b0 e0       	ldi	r27, 0x00	; 0
    209e:	e3 e5       	ldi	r30, 0x53	; 83
    20a0:	f0 e0       	ldi	r31, 0x00	; 0
    20a2:	80 81       	ld	r24, Z
    20a4:	8d 7f       	andi	r24, 0xFD	; 253
    20a6:	8c 93       	st	X, r24
		SET_BIT(TCCR0, 2);
    20a8:	a3 e5       	ldi	r26, 0x53	; 83
    20aa:	b0 e0       	ldi	r27, 0x00	; 0
    20ac:	e3 e5       	ldi	r30, 0x53	; 83
    20ae:	f0 e0       	ldi	r31, 0x00	; 0
    20b0:	80 81       	ld	r24, Z
    20b2:	84 60       	ori	r24, 0x04	; 4
    20b4:	8c 93       	st	X, r24
		Glob_TickTime = Prescaller1024_Value / (f32) CPU_Frequancy;
    20b6:	8d eb       	ldi	r24, 0xBD	; 189
    20b8:	97 e3       	ldi	r25, 0x37	; 55
    20ba:	a6 e8       	ldi	r26, 0x86	; 134
    20bc:	b8 e3       	ldi	r27, 0x38	; 56
    20be:	80 93 ea 01 	sts	0x01EA, r24
    20c2:	90 93 eb 01 	sts	0x01EB, r25
    20c6:	a0 93 ec 01 	sts	0x01EC, r26
    20ca:	b0 93 ed 01 	sts	0x01ED, r27
		LOC_u8ReturnValue = E_OK;
    20ce:	19 82       	std	Y+1, r1	; 0x01
    20d0:	33 c0       	rjmp	.+102    	; 0x2138 <MCAL_Timer0_Init+0x2d6>
	} else if (Loc_u8Prescaller == Clock_on_falling_edge) {
    20d2:	8b 81       	ldd	r24, Y+3	; 0x03
    20d4:	86 30       	cpi	r24, 0x06	; 6
    20d6:	b9 f4       	brne	.+46     	; 0x2106 <MCAL_Timer0_Init+0x2a4>
		CLR_BIT(TCCR0, 0);
    20d8:	a3 e5       	ldi	r26, 0x53	; 83
    20da:	b0 e0       	ldi	r27, 0x00	; 0
    20dc:	e3 e5       	ldi	r30, 0x53	; 83
    20de:	f0 e0       	ldi	r31, 0x00	; 0
    20e0:	80 81       	ld	r24, Z
    20e2:	8e 7f       	andi	r24, 0xFE	; 254
    20e4:	8c 93       	st	X, r24
		SET_BIT(TCCR0, 1);
    20e6:	a3 e5       	ldi	r26, 0x53	; 83
    20e8:	b0 e0       	ldi	r27, 0x00	; 0
    20ea:	e3 e5       	ldi	r30, 0x53	; 83
    20ec:	f0 e0       	ldi	r31, 0x00	; 0
    20ee:	80 81       	ld	r24, Z
    20f0:	82 60       	ori	r24, 0x02	; 2
    20f2:	8c 93       	st	X, r24
		SET_BIT(TCCR0, 2);
    20f4:	a3 e5       	ldi	r26, 0x53	; 83
    20f6:	b0 e0       	ldi	r27, 0x00	; 0
    20f8:	e3 e5       	ldi	r30, 0x53	; 83
    20fa:	f0 e0       	ldi	r31, 0x00	; 0
    20fc:	80 81       	ld	r24, Z
    20fe:	84 60       	ori	r24, 0x04	; 4
    2100:	8c 93       	st	X, r24
		LOC_u8ReturnValue = E_OK;
    2102:	19 82       	std	Y+1, r1	; 0x01
    2104:	19 c0       	rjmp	.+50     	; 0x2138 <MCAL_Timer0_Init+0x2d6>
	} else if (Loc_u8Prescaller == Clock_on_rising_edge) {
    2106:	8b 81       	ldd	r24, Y+3	; 0x03
    2108:	87 30       	cpi	r24, 0x07	; 7
    210a:	b1 f4       	brne	.+44     	; 0x2138 <MCAL_Timer0_Init+0x2d6>
		SET_BIT(TCCR0, 0);
    210c:	a3 e5       	ldi	r26, 0x53	; 83
    210e:	b0 e0       	ldi	r27, 0x00	; 0
    2110:	e3 e5       	ldi	r30, 0x53	; 83
    2112:	f0 e0       	ldi	r31, 0x00	; 0
    2114:	80 81       	ld	r24, Z
    2116:	81 60       	ori	r24, 0x01	; 1
    2118:	8c 93       	st	X, r24
		SET_BIT(TCCR0, 1);
    211a:	a3 e5       	ldi	r26, 0x53	; 83
    211c:	b0 e0       	ldi	r27, 0x00	; 0
    211e:	e3 e5       	ldi	r30, 0x53	; 83
    2120:	f0 e0       	ldi	r31, 0x00	; 0
    2122:	80 81       	ld	r24, Z
    2124:	82 60       	ori	r24, 0x02	; 2
    2126:	8c 93       	st	X, r24
		SET_BIT(TCCR0, 2);
    2128:	a3 e5       	ldi	r26, 0x53	; 83
    212a:	b0 e0       	ldi	r27, 0x00	; 0
    212c:	e3 e5       	ldi	r30, 0x53	; 83
    212e:	f0 e0       	ldi	r31, 0x00	; 0
    2130:	80 81       	ld	r24, Z
    2132:	84 60       	ori	r24, 0x04	; 4
    2134:	8c 93       	st	X, r24
		LOC_u8ReturnValue = E_OK;
    2136:	19 82       	std	Y+1, r1	; 0x01
	} else {
		//NOTHING
	}
	if (Loc_u8OC0Mode == Disconnected) {
    2138:	8c 81       	ldd	r24, Y+4	; 0x04
    213a:	88 23       	and	r24, r24
    213c:	79 f4       	brne	.+30     	; 0x215c <MCAL_Timer0_Init+0x2fa>
			CLR_BIT(TCCR0, 4);
    213e:	a3 e5       	ldi	r26, 0x53	; 83
    2140:	b0 e0       	ldi	r27, 0x00	; 0
    2142:	e3 e5       	ldi	r30, 0x53	; 83
    2144:	f0 e0       	ldi	r31, 0x00	; 0
    2146:	80 81       	ld	r24, Z
    2148:	8f 7e       	andi	r24, 0xEF	; 239
    214a:	8c 93       	st	X, r24
			CLR_BIT(TCCR0, 5);
    214c:	a3 e5       	ldi	r26, 0x53	; 83
    214e:	b0 e0       	ldi	r27, 0x00	; 0
    2150:	e3 e5       	ldi	r30, 0x53	; 83
    2152:	f0 e0       	ldi	r31, 0x00	; 0
    2154:	80 81       	ld	r24, Z
    2156:	8f 7d       	andi	r24, 0xDF	; 223
    2158:	8c 93       	st	X, r24
    215a:	43 c0       	rjmp	.+134    	; 0x21e2 <MCAL_Timer0_Init+0x380>
		} else if (Loc_u8OC0Mode == Reserved) {
    215c:	8c 81       	ldd	r24, Y+4	; 0x04
    215e:	81 30       	cpi	r24, 0x01	; 1
    2160:	79 f4       	brne	.+30     	; 0x2180 <MCAL_Timer0_Init+0x31e>
			SET_BIT(TCCR0, 4);
    2162:	a3 e5       	ldi	r26, 0x53	; 83
    2164:	b0 e0       	ldi	r27, 0x00	; 0
    2166:	e3 e5       	ldi	r30, 0x53	; 83
    2168:	f0 e0       	ldi	r31, 0x00	; 0
    216a:	80 81       	ld	r24, Z
    216c:	80 61       	ori	r24, 0x10	; 16
    216e:	8c 93       	st	X, r24
			CLR_BIT(TCCR0, 5);
    2170:	a3 e5       	ldi	r26, 0x53	; 83
    2172:	b0 e0       	ldi	r27, 0x00	; 0
    2174:	e3 e5       	ldi	r30, 0x53	; 83
    2176:	f0 e0       	ldi	r31, 0x00	; 0
    2178:	80 81       	ld	r24, Z
    217a:	8f 7d       	andi	r24, 0xDF	; 223
    217c:	8c 93       	st	X, r24
    217e:	31 c0       	rjmp	.+98     	; 0x21e2 <MCAL_Timer0_Init+0x380>
			//PWM, Fast PWM
		} else if (Loc_u8OC0Mode == Non_Inverted) {
    2180:	8c 81       	ldd	r24, Y+4	; 0x04
    2182:	82 30       	cpi	r24, 0x02	; 2
    2184:	b1 f4       	brne	.+44     	; 0x21b2 <MCAL_Timer0_Init+0x350>
			SET_BIT(TCCR0, 5);
    2186:	a3 e5       	ldi	r26, 0x53	; 83
    2188:	b0 e0       	ldi	r27, 0x00	; 0
    218a:	e3 e5       	ldi	r30, 0x53	; 83
    218c:	f0 e0       	ldi	r31, 0x00	; 0
    218e:	80 81       	ld	r24, Z
    2190:	80 62       	ori	r24, 0x20	; 32
    2192:	8c 93       	st	X, r24
			CLR_BIT(TCCR0, 4);
    2194:	a3 e5       	ldi	r26, 0x53	; 83
    2196:	b0 e0       	ldi	r27, 0x00	; 0
    2198:	e3 e5       	ldi	r30, 0x53	; 83
    219a:	f0 e0       	ldi	r31, 0x00	; 0
    219c:	80 81       	ld	r24, Z
    219e:	8f 7e       	andi	r24, 0xEF	; 239
    21a0:	8c 93       	st	X, r24
			// OC0
			SET_BIT(DDRB, 3);
    21a2:	a7 e3       	ldi	r26, 0x37	; 55
    21a4:	b0 e0       	ldi	r27, 0x00	; 0
    21a6:	e7 e3       	ldi	r30, 0x37	; 55
    21a8:	f0 e0       	ldi	r31, 0x00	; 0
    21aa:	80 81       	ld	r24, Z
    21ac:	88 60       	ori	r24, 0x08	; 8
    21ae:	8c 93       	st	X, r24
    21b0:	18 c0       	rjmp	.+48     	; 0x21e2 <MCAL_Timer0_Init+0x380>
			//PWM, Fast PWM
		} else if (Loc_u8OC0Mode == Inverted) {
    21b2:	8c 81       	ldd	r24, Y+4	; 0x04
    21b4:	83 30       	cpi	r24, 0x03	; 3
    21b6:	a9 f4       	brne	.+42     	; 0x21e2 <MCAL_Timer0_Init+0x380>
			SET_BIT(TCCR0, 4);
    21b8:	a3 e5       	ldi	r26, 0x53	; 83
    21ba:	b0 e0       	ldi	r27, 0x00	; 0
    21bc:	e3 e5       	ldi	r30, 0x53	; 83
    21be:	f0 e0       	ldi	r31, 0x00	; 0
    21c0:	80 81       	ld	r24, Z
    21c2:	80 61       	ori	r24, 0x10	; 16
    21c4:	8c 93       	st	X, r24
			SET_BIT(TCCR0, 5);
    21c6:	a3 e5       	ldi	r26, 0x53	; 83
    21c8:	b0 e0       	ldi	r27, 0x00	; 0
    21ca:	e3 e5       	ldi	r30, 0x53	; 83
    21cc:	f0 e0       	ldi	r31, 0x00	; 0
    21ce:	80 81       	ld	r24, Z
    21d0:	80 62       	ori	r24, 0x20	; 32
    21d2:	8c 93       	st	X, r24
			// OC0
			SET_BIT(DDRB, 3);
    21d4:	a7 e3       	ldi	r26, 0x37	; 55
    21d6:	b0 e0       	ldi	r27, 0x00	; 0
    21d8:	e7 e3       	ldi	r30, 0x37	; 55
    21da:	f0 e0       	ldi	r31, 0x00	; 0
    21dc:	80 81       	ld	r24, Z
    21de:	88 60       	ori	r24, 0x08	; 8
    21e0:	8c 93       	st	X, r24
		}
}
    21e2:	0f 90       	pop	r0
    21e4:	0f 90       	pop	r0
    21e6:	0f 90       	pop	r0
    21e8:	0f 90       	pop	r0
    21ea:	cf 91       	pop	r28
    21ec:	df 91       	pop	r29
    21ee:	08 95       	ret

000021f0 <MCAL_Timer0_SetPreloadValue>:
void MCAL_Timer0_SetPreloadValue(u8 Loc_u8Value) {
    21f0:	df 93       	push	r29
    21f2:	cf 93       	push	r28
    21f4:	0f 92       	push	r0
    21f6:	cd b7       	in	r28, 0x3d	; 61
    21f8:	de b7       	in	r29, 0x3e	; 62
    21fa:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = Loc_u8Value;
    21fc:	e2 e5       	ldi	r30, 0x52	; 82
    21fe:	f0 e0       	ldi	r31, 0x00	; 0
    2200:	89 81       	ldd	r24, Y+1	; 0x01
    2202:	80 83       	st	Z, r24
}
    2204:	0f 90       	pop	r0
    2206:	cf 91       	pop	r28
    2208:	df 91       	pop	r29
    220a:	08 95       	ret

0000220c <MCAL_Timer0_SetCompareValue>:
void MCAL_Timer0_SetCompareValue(u8 Loc_u8Value) {
    220c:	df 93       	push	r29
    220e:	cf 93       	push	r28
    2210:	0f 92       	push	r0
    2212:	cd b7       	in	r28, 0x3d	; 61
    2214:	de b7       	in	r29, 0x3e	; 62
    2216:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = Loc_u8Value;
    2218:	ec e5       	ldi	r30, 0x5C	; 92
    221a:	f0 e0       	ldi	r31, 0x00	; 0
    221c:	89 81       	ldd	r24, Y+1	; 0x01
    221e:	80 83       	st	Z, r24
}
    2220:	0f 90       	pop	r0
    2222:	cf 91       	pop	r28
    2224:	df 91       	pop	r29
    2226:	08 95       	ret

00002228 <MCAL_Timer0_EnableNormalMode>:
void MCAL_Timer0_EnableNormalMode() {
    2228:	df 93       	push	r29
    222a:	cf 93       	push	r28
    222c:	cd b7       	in	r28, 0x3d	; 61
    222e:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK, 0);
    2230:	a9 e5       	ldi	r26, 0x59	; 89
    2232:	b0 e0       	ldi	r27, 0x00	; 0
    2234:	e9 e5       	ldi	r30, 0x59	; 89
    2236:	f0 e0       	ldi	r31, 0x00	; 0
    2238:	80 81       	ld	r24, Z
    223a:	81 60       	ori	r24, 0x01	; 1
    223c:	8c 93       	st	X, r24
}
    223e:	cf 91       	pop	r28
    2240:	df 91       	pop	r29
    2242:	08 95       	ret

00002244 <MCAL_Timer0_DisableNormalMode>:
void MCAL_Timer0_DisableNormalMode() {
    2244:	df 93       	push	r29
    2246:	cf 93       	push	r28
    2248:	cd b7       	in	r28, 0x3d	; 61
    224a:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK, 0);
    224c:	a9 e5       	ldi	r26, 0x59	; 89
    224e:	b0 e0       	ldi	r27, 0x00	; 0
    2250:	e9 e5       	ldi	r30, 0x59	; 89
    2252:	f0 e0       	ldi	r31, 0x00	; 0
    2254:	80 81       	ld	r24, Z
    2256:	8e 7f       	andi	r24, 0xFE	; 254
    2258:	8c 93       	st	X, r24
}
    225a:	cf 91       	pop	r28
    225c:	df 91       	pop	r29
    225e:	08 95       	ret

00002260 <MCAL_Timer0_EnableCTCMode>:
void MCAL_Timer0_EnableCTCMode() {
    2260:	df 93       	push	r29
    2262:	cf 93       	push	r28
    2264:	cd b7       	in	r28, 0x3d	; 61
    2266:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK, 1);
    2268:	a9 e5       	ldi	r26, 0x59	; 89
    226a:	b0 e0       	ldi	r27, 0x00	; 0
    226c:	e9 e5       	ldi	r30, 0x59	; 89
    226e:	f0 e0       	ldi	r31, 0x00	; 0
    2270:	80 81       	ld	r24, Z
    2272:	82 60       	ori	r24, 0x02	; 2
    2274:	8c 93       	st	X, r24
}
    2276:	cf 91       	pop	r28
    2278:	df 91       	pop	r29
    227a:	08 95       	ret

0000227c <MCAL_Timer0_DisableCTCMode>:
void MCAL_Timer0_DisableCTCMode() {
    227c:	df 93       	push	r29
    227e:	cf 93       	push	r28
    2280:	cd b7       	in	r28, 0x3d	; 61
    2282:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK, 1);
    2284:	a9 e5       	ldi	r26, 0x59	; 89
    2286:	b0 e0       	ldi	r27, 0x00	; 0
    2288:	e9 e5       	ldi	r30, 0x59	; 89
    228a:	f0 e0       	ldi	r31, 0x00	; 0
    228c:	80 81       	ld	r24, Z
    228e:	8d 7f       	andi	r24, 0xFD	; 253
    2290:	8c 93       	st	X, r24
}
    2292:	cf 91       	pop	r28
    2294:	df 91       	pop	r29
    2296:	08 95       	ret

00002298 <MCAL_Timer0_Delayms_NormalMode>:

void MCAL_Timer0_Delayms_NormalMode(u32 Loc_u32MilliSeconds) {
    2298:	df 93       	push	r29
    229a:	cf 93       	push	r28
    229c:	cd b7       	in	r28, 0x3d	; 61
    229e:	de b7       	in	r29, 0x3e	; 62
    22a0:	28 97       	sbiw	r28, 0x08	; 8
    22a2:	0f b6       	in	r0, 0x3f	; 63
    22a4:	f8 94       	cli
    22a6:	de bf       	out	0x3e, r29	; 62
    22a8:	0f be       	out	0x3f, r0	; 63
    22aa:	cd bf       	out	0x3d, r28	; 61
    22ac:	6d 83       	std	Y+5, r22	; 0x05
    22ae:	7e 83       	std	Y+6, r23	; 0x06
    22b0:	8f 83       	std	Y+7, r24	; 0x07
    22b2:	98 87       	std	Y+8, r25	; 0x08
	u32 N = 0;
    22b4:	19 82       	std	Y+1, r1	; 0x01
    22b6:	1a 82       	std	Y+2, r1	; 0x02
    22b8:	1b 82       	std	Y+3, r1	; 0x03
    22ba:	1c 82       	std	Y+4, r1	; 0x04
	N = (Loc_u32MilliSeconds / 1000.0) / (f32) Glob_TickTime;
    22bc:	6d 81       	ldd	r22, Y+5	; 0x05
    22be:	7e 81       	ldd	r23, Y+6	; 0x06
    22c0:	8f 81       	ldd	r24, Y+7	; 0x07
    22c2:	98 85       	ldd	r25, Y+8	; 0x08
    22c4:	0e 94 37 05 	call	0xa6e	; 0xa6e <__floatunsisf>
    22c8:	dc 01       	movw	r26, r24
    22ca:	cb 01       	movw	r24, r22
    22cc:	bc 01       	movw	r22, r24
    22ce:	cd 01       	movw	r24, r26
    22d0:	20 e0       	ldi	r18, 0x00	; 0
    22d2:	30 e0       	ldi	r19, 0x00	; 0
    22d4:	4a e7       	ldi	r20, 0x7A	; 122
    22d6:	54 e4       	ldi	r21, 0x44	; 68
    22d8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    22dc:	dc 01       	movw	r26, r24
    22de:	cb 01       	movw	r24, r22
    22e0:	20 91 ea 01 	lds	r18, 0x01EA
    22e4:	30 91 eb 01 	lds	r19, 0x01EB
    22e8:	40 91 ec 01 	lds	r20, 0x01EC
    22ec:	50 91 ed 01 	lds	r21, 0x01ED
    22f0:	bc 01       	movw	r22, r24
    22f2:	cd 01       	movw	r24, r26
    22f4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    22f8:	dc 01       	movw	r26, r24
    22fa:	cb 01       	movw	r24, r22
    22fc:	bc 01       	movw	r22, r24
    22fe:	cd 01       	movw	r24, r26
    2300:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2304:	dc 01       	movw	r26, r24
    2306:	cb 01       	movw	r24, r22
    2308:	89 83       	std	Y+1, r24	; 0x01
    230a:	9a 83       	std	Y+2, r25	; 0x02
    230c:	ab 83       	std	Y+3, r26	; 0x03
    230e:	bc 83       	std	Y+4, r27	; 0x04
	Start = N % 256;
    2310:	89 81       	ldd	r24, Y+1	; 0x01
    2312:	9a 81       	ldd	r25, Y+2	; 0x02
    2314:	90 70       	andi	r25, 0x00	; 0
    2316:	90 93 d1 01 	sts	0x01D1, r25
    231a:	80 93 d0 01 	sts	0x01D0, r24
	if (Start == 0) {
    231e:	80 91 d0 01 	lds	r24, 0x01D0
    2322:	90 91 d1 01 	lds	r25, 0x01D1
    2326:	00 97       	sbiw	r24, 0x00	; 0
    2328:	99 f4       	brne	.+38     	; 0x2350 <MCAL_Timer0_Delayms_NormalMode+0xb8>
		MCAL_Timer0_SetPreloadValue(Start);
    232a:	80 91 d0 01 	lds	r24, 0x01D0
    232e:	90 91 d1 01 	lds	r25, 0x01D1
    2332:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <MCAL_Timer0_SetPreloadValue>
		Counter = N / 256;
    2336:	89 81       	ldd	r24, Y+1	; 0x01
    2338:	9a 81       	ldd	r25, Y+2	; 0x02
    233a:	ab 81       	ldd	r26, Y+3	; 0x03
    233c:	bc 81       	ldd	r27, Y+4	; 0x04
    233e:	89 2f       	mov	r24, r25
    2340:	9a 2f       	mov	r25, r26
    2342:	ab 2f       	mov	r26, r27
    2344:	bb 27       	eor	r27, r27
    2346:	90 93 d3 01 	sts	0x01D3, r25
    234a:	80 93 d2 01 	sts	0x01D2, r24
    234e:	19 c0       	rjmp	.+50     	; 0x2382 <MCAL_Timer0_Delayms_NormalMode+0xea>
	} else if (Start != 0) {
    2350:	80 91 d0 01 	lds	r24, 0x01D0
    2354:	90 91 d1 01 	lds	r25, 0x01D1
    2358:	00 97       	sbiw	r24, 0x00	; 0
    235a:	99 f0       	breq	.+38     	; 0x2382 <MCAL_Timer0_Delayms_NormalMode+0xea>
		MCAL_Timer0_SetPreloadValue(Start);
    235c:	80 91 d0 01 	lds	r24, 0x01D0
    2360:	90 91 d1 01 	lds	r25, 0x01D1
    2364:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <MCAL_Timer0_SetPreloadValue>
		Counter = ((N / 256) + 1);
    2368:	89 81       	ldd	r24, Y+1	; 0x01
    236a:	9a 81       	ldd	r25, Y+2	; 0x02
    236c:	ab 81       	ldd	r26, Y+3	; 0x03
    236e:	bc 81       	ldd	r27, Y+4	; 0x04
    2370:	89 2f       	mov	r24, r25
    2372:	9a 2f       	mov	r25, r26
    2374:	ab 2f       	mov	r26, r27
    2376:	bb 27       	eor	r27, r27
    2378:	01 96       	adiw	r24, 0x01	; 1
    237a:	90 93 d3 01 	sts	0x01D3, r25
    237e:	80 93 d2 01 	sts	0x01D2, r24
	} else {
		//NOTHING
	}
}
    2382:	28 96       	adiw	r28, 0x08	; 8
    2384:	0f b6       	in	r0, 0x3f	; 63
    2386:	f8 94       	cli
    2388:	de bf       	out	0x3e, r29	; 62
    238a:	0f be       	out	0x3f, r0	; 63
    238c:	cd bf       	out	0x3d, r28	; 61
    238e:	cf 91       	pop	r28
    2390:	df 91       	pop	r29
    2392:	08 95       	ret

00002394 <MCAL_Timer0_Delayms_CTCMode>:
void MCAL_Timer0_Delayms_CTCMode(u32 Loc_u32MilliSeconds) {
    2394:	df 93       	push	r29
    2396:	cf 93       	push	r28
    2398:	cd b7       	in	r28, 0x3d	; 61
    239a:	de b7       	in	r29, 0x3e	; 62
    239c:	29 97       	sbiw	r28, 0x09	; 9
    239e:	0f b6       	in	r0, 0x3f	; 63
    23a0:	f8 94       	cli
    23a2:	de bf       	out	0x3e, r29	; 62
    23a4:	0f be       	out	0x3f, r0	; 63
    23a6:	cd bf       	out	0x3d, r28	; 61
    23a8:	6e 83       	std	Y+6, r22	; 0x06
    23aa:	7f 83       	std	Y+7, r23	; 0x07
    23ac:	88 87       	std	Y+8, r24	; 0x08
    23ae:	99 87       	std	Y+9, r25	; 0x09
	u8 LOC_u8ReturnValue = E_NOT_OK;
    23b0:	81 e0       	ldi	r24, 0x01	; 1
    23b2:	8d 83       	std	Y+5, r24	; 0x05
	f32 N = 0;
    23b4:	80 e0       	ldi	r24, 0x00	; 0
    23b6:	90 e0       	ldi	r25, 0x00	; 0
    23b8:	a0 e0       	ldi	r26, 0x00	; 0
    23ba:	b0 e0       	ldi	r27, 0x00	; 0
    23bc:	89 83       	std	Y+1, r24	; 0x01
    23be:	9a 83       	std	Y+2, r25	; 0x02
    23c0:	ab 83       	std	Y+3, r26	; 0x03
    23c2:	bc 83       	std	Y+4, r27	; 0x04
	MCAL_Timer0_SetCompareValue(CompareStartValue);
    23c4:	87 ec       	ldi	r24, 0xC7	; 199
    23c6:	0e 94 06 11 	call	0x220c	; 0x220c <MCAL_Timer0_SetCompareValue>
	N = ((CompareStartValue + 1) * Glob_TickTime);
    23ca:	80 91 ea 01 	lds	r24, 0x01EA
    23ce:	90 91 eb 01 	lds	r25, 0x01EB
    23d2:	a0 91 ec 01 	lds	r26, 0x01EC
    23d6:	b0 91 ed 01 	lds	r27, 0x01ED
    23da:	bc 01       	movw	r22, r24
    23dc:	cd 01       	movw	r24, r26
    23de:	20 e0       	ldi	r18, 0x00	; 0
    23e0:	30 e0       	ldi	r19, 0x00	; 0
    23e2:	48 e4       	ldi	r20, 0x48	; 72
    23e4:	53 e4       	ldi	r21, 0x43	; 67
    23e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23ea:	dc 01       	movw	r26, r24
    23ec:	cb 01       	movw	r24, r22
    23ee:	89 83       	std	Y+1, r24	; 0x01
    23f0:	9a 83       	std	Y+2, r25	; 0x02
    23f2:	ab 83       	std	Y+3, r26	; 0x03
    23f4:	bc 83       	std	Y+4, r27	; 0x04
	Counter = ((Loc_u32MilliSeconds/1000.0) / N);
    23f6:	6e 81       	ldd	r22, Y+6	; 0x06
    23f8:	7f 81       	ldd	r23, Y+7	; 0x07
    23fa:	88 85       	ldd	r24, Y+8	; 0x08
    23fc:	99 85       	ldd	r25, Y+9	; 0x09
    23fe:	0e 94 37 05 	call	0xa6e	; 0xa6e <__floatunsisf>
    2402:	dc 01       	movw	r26, r24
    2404:	cb 01       	movw	r24, r22
    2406:	bc 01       	movw	r22, r24
    2408:	cd 01       	movw	r24, r26
    240a:	20 e0       	ldi	r18, 0x00	; 0
    240c:	30 e0       	ldi	r19, 0x00	; 0
    240e:	4a e7       	ldi	r20, 0x7A	; 122
    2410:	54 e4       	ldi	r21, 0x44	; 68
    2412:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2416:	dc 01       	movw	r26, r24
    2418:	cb 01       	movw	r24, r22
    241a:	bc 01       	movw	r22, r24
    241c:	cd 01       	movw	r24, r26
    241e:	29 81       	ldd	r18, Y+1	; 0x01
    2420:	3a 81       	ldd	r19, Y+2	; 0x02
    2422:	4b 81       	ldd	r20, Y+3	; 0x03
    2424:	5c 81       	ldd	r21, Y+4	; 0x04
    2426:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    242a:	dc 01       	movw	r26, r24
    242c:	cb 01       	movw	r24, r22
    242e:	bc 01       	movw	r22, r24
    2430:	cd 01       	movw	r24, r26
    2432:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2436:	dc 01       	movw	r26, r24
    2438:	cb 01       	movw	r24, r22
    243a:	90 93 d3 01 	sts	0x01D3, r25
    243e:	80 93 d2 01 	sts	0x01D2, r24

	LOC_u8ReturnValue = E_OK;
    2442:	1d 82       	std	Y+5, r1	; 0x05
}
    2444:	29 96       	adiw	r28, 0x09	; 9
    2446:	0f b6       	in	r0, 0x3f	; 63
    2448:	f8 94       	cli
    244a:	de bf       	out	0x3e, r29	; 62
    244c:	0f be       	out	0x3f, r0	; 63
    244e:	cd bf       	out	0x3d, r28	; 61
    2450:	cf 91       	pop	r28
    2452:	df 91       	pop	r29
    2454:	08 95       	ret

00002456 <MCAL_Timer0_CallBack>:

void MCAL_Timer0_CallBack(void (*ptr)(void)) {
    2456:	df 93       	push	r29
    2458:	cf 93       	push	r28
    245a:	00 d0       	rcall	.+0      	; 0x245c <MCAL_Timer0_CallBack+0x6>
    245c:	cd b7       	in	r28, 0x3d	; 61
    245e:	de b7       	in	r29, 0x3e	; 62
    2460:	9a 83       	std	Y+2, r25	; 0x02
    2462:	89 83       	std	Y+1, r24	; 0x01
	if (ptr != '\0')
    2464:	89 81       	ldd	r24, Y+1	; 0x01
    2466:	9a 81       	ldd	r25, Y+2	; 0x02
    2468:	00 97       	sbiw	r24, 0x00	; 0
    246a:	31 f0       	breq	.+12     	; 0x2478 <MCAL_Timer0_CallBack+0x22>
		Gptr3 = ptr;
    246c:	89 81       	ldd	r24, Y+1	; 0x01
    246e:	9a 81       	ldd	r25, Y+2	; 0x02
    2470:	90 93 cf 01 	sts	0x01CF, r25
    2474:	80 93 ce 01 	sts	0x01CE, r24
}
    2478:	0f 90       	pop	r0
    247a:	0f 90       	pop	r0
    247c:	cf 91       	pop	r28
    247e:	df 91       	pop	r29
    2480:	08 95       	ret

00002482 <__vector_11>:

ISR(TIMER0_OVF_vect) {
    2482:	1f 92       	push	r1
    2484:	0f 92       	push	r0
    2486:	0f b6       	in	r0, 0x3f	; 63
    2488:	0f 92       	push	r0
    248a:	11 24       	eor	r1, r1
    248c:	2f 93       	push	r18
    248e:	3f 93       	push	r19
    2490:	4f 93       	push	r20
    2492:	5f 93       	push	r21
    2494:	6f 93       	push	r22
    2496:	7f 93       	push	r23
    2498:	8f 93       	push	r24
    249a:	9f 93       	push	r25
    249c:	af 93       	push	r26
    249e:	bf 93       	push	r27
    24a0:	ef 93       	push	r30
    24a2:	ff 93       	push	r31
    24a4:	df 93       	push	r29
    24a6:	cf 93       	push	r28
    24a8:	cd b7       	in	r28, 0x3d	; 61
    24aa:	de b7       	in	r29, 0x3e	; 62
	if (Gptr3 != '\0')
    24ac:	80 91 ce 01 	lds	r24, 0x01CE
    24b0:	90 91 cf 01 	lds	r25, 0x01CF
    24b4:	00 97       	sbiw	r24, 0x00	; 0
    24b6:	29 f0       	breq	.+10     	; 0x24c2 <__vector_11+0x40>
		Gptr3();
    24b8:	e0 91 ce 01 	lds	r30, 0x01CE
    24bc:	f0 91 cf 01 	lds	r31, 0x01CF
    24c0:	09 95       	icall
	Glob_u16OvfCounter++;
    24c2:	80 91 cc 01 	lds	r24, 0x01CC
    24c6:	90 91 cd 01 	lds	r25, 0x01CD
    24ca:	01 96       	adiw	r24, 0x01	; 1
    24cc:	90 93 cd 01 	sts	0x01CD, r25
    24d0:	80 93 cc 01 	sts	0x01CC, r24
}
    24d4:	cf 91       	pop	r28
    24d6:	df 91       	pop	r29
    24d8:	ff 91       	pop	r31
    24da:	ef 91       	pop	r30
    24dc:	bf 91       	pop	r27
    24de:	af 91       	pop	r26
    24e0:	9f 91       	pop	r25
    24e2:	8f 91       	pop	r24
    24e4:	7f 91       	pop	r23
    24e6:	6f 91       	pop	r22
    24e8:	5f 91       	pop	r21
    24ea:	4f 91       	pop	r20
    24ec:	3f 91       	pop	r19
    24ee:	2f 91       	pop	r18
    24f0:	0f 90       	pop	r0
    24f2:	0f be       	out	0x3f, r0	; 63
    24f4:	0f 90       	pop	r0
    24f6:	1f 90       	pop	r1
    24f8:	18 95       	reti

000024fa <__vector_10>:
ISR(TIMER0_COMP_vect) {
    24fa:	1f 92       	push	r1
    24fc:	0f 92       	push	r0
    24fe:	0f b6       	in	r0, 0x3f	; 63
    2500:	0f 92       	push	r0
    2502:	11 24       	eor	r1, r1
    2504:	2f 93       	push	r18
    2506:	3f 93       	push	r19
    2508:	4f 93       	push	r20
    250a:	5f 93       	push	r21
    250c:	6f 93       	push	r22
    250e:	7f 93       	push	r23
    2510:	8f 93       	push	r24
    2512:	9f 93       	push	r25
    2514:	af 93       	push	r26
    2516:	bf 93       	push	r27
    2518:	ef 93       	push	r30
    251a:	ff 93       	push	r31
    251c:	df 93       	push	r29
    251e:	cf 93       	push	r28
    2520:	cd b7       	in	r28, 0x3d	; 61
    2522:	de b7       	in	r29, 0x3e	; 62
	if (Gptr3 != '\0')
    2524:	80 91 ce 01 	lds	r24, 0x01CE
    2528:	90 91 cf 01 	lds	r25, 0x01CF
    252c:	00 97       	sbiw	r24, 0x00	; 0
    252e:	29 f0       	breq	.+10     	; 0x253a <__vector_10+0x40>
		Gptr3();
    2530:	e0 91 ce 01 	lds	r30, 0x01CE
    2534:	f0 91 cf 01 	lds	r31, 0x01CF
    2538:	09 95       	icall
}
    253a:	cf 91       	pop	r28
    253c:	df 91       	pop	r29
    253e:	ff 91       	pop	r31
    2540:	ef 91       	pop	r30
    2542:	bf 91       	pop	r27
    2544:	af 91       	pop	r26
    2546:	9f 91       	pop	r25
    2548:	8f 91       	pop	r24
    254a:	7f 91       	pop	r23
    254c:	6f 91       	pop	r22
    254e:	5f 91       	pop	r21
    2550:	4f 91       	pop	r20
    2552:	3f 91       	pop	r19
    2554:	2f 91       	pop	r18
    2556:	0f 90       	pop	r0
    2558:	0f be       	out	0x3f, r0	; 63
    255a:	0f 90       	pop	r0
    255c:	1f 90       	pop	r1
    255e:	18 95       	reti

00002560 <MCAL_Interrupt_u8SetRegister>:

void (*Gptr0)(void)= '\0' ;
void (*Gptr1)(void)= '\0' ;
void (*Gptr2)(void)= '\0' ;

void MCAL_Interrupt_u8SetRegister(u8 Loc_u8PortID, u8 Loc_u8PortValue) {
    2560:	df 93       	push	r29
    2562:	cf 93       	push	r28
    2564:	00 d0       	rcall	.+0      	; 0x2566 <MCAL_Interrupt_u8SetRegister+0x6>
    2566:	cd b7       	in	r28, 0x3d	; 61
    2568:	de b7       	in	r29, 0x3e	; 62
    256a:	89 83       	std	Y+1, r24	; 0x01
    256c:	6a 83       	std	Y+2, r22	; 0x02
	if (Loc_u8PortValue == PORT_OUTPUT) {
    256e:	8a 81       	ldd	r24, Y+2	; 0x02
    2570:	8f 3f       	cpi	r24, 0xFF	; 255
    2572:	09 f5       	brne	.+66     	; 0x25b6 <MCAL_Interrupt_u8SetRegister+0x56>
		if (Loc_u8PortID == Sreg) {
    2574:	89 81       	ldd	r24, Y+1	; 0x01
    2576:	88 23       	and	r24, r24
    2578:	29 f4       	brne	.+10     	; 0x2584 <MCAL_Interrupt_u8SetRegister+0x24>
			SREG = PORT_OUTPUT;
    257a:	ef e5       	ldi	r30, 0x5F	; 95
    257c:	f0 e0       	ldi	r31, 0x00	; 0
    257e:	8f ef       	ldi	r24, 0xFF	; 255
    2580:	80 83       	st	Z, r24
    2582:	57 c0       	rjmp	.+174    	; 0x2632 <MCAL_Interrupt_u8SetRegister+0xd2>
		} else if (Loc_u8PortID == Gicr) {
    2584:	89 81       	ldd	r24, Y+1	; 0x01
    2586:	81 30       	cpi	r24, 0x01	; 1
    2588:	29 f4       	brne	.+10     	; 0x2594 <MCAL_Interrupt_u8SetRegister+0x34>
			GICR = PORT_OUTPUT;
    258a:	eb e5       	ldi	r30, 0x5B	; 91
    258c:	f0 e0       	ldi	r31, 0x00	; 0
    258e:	8f ef       	ldi	r24, 0xFF	; 255
    2590:	80 83       	st	Z, r24
    2592:	4f c0       	rjmp	.+158    	; 0x2632 <MCAL_Interrupt_u8SetRegister+0xd2>
		} else if (Loc_u8PortID == Mcucr) {
    2594:	89 81       	ldd	r24, Y+1	; 0x01
    2596:	82 30       	cpi	r24, 0x02	; 2
    2598:	29 f4       	brne	.+10     	; 0x25a4 <MCAL_Interrupt_u8SetRegister+0x44>
			MCUCR = PORT_OUTPUT;
    259a:	e5 e5       	ldi	r30, 0x55	; 85
    259c:	f0 e0       	ldi	r31, 0x00	; 0
    259e:	8f ef       	ldi	r24, 0xFF	; 255
    25a0:	80 83       	st	Z, r24
    25a2:	47 c0       	rjmp	.+142    	; 0x2632 <MCAL_Interrupt_u8SetRegister+0xd2>
		} else if (Loc_u8PortID == Mcucsr) {
    25a4:	89 81       	ldd	r24, Y+1	; 0x01
    25a6:	83 30       	cpi	r24, 0x03	; 3
    25a8:	09 f0       	breq	.+2      	; 0x25ac <MCAL_Interrupt_u8SetRegister+0x4c>
    25aa:	43 c0       	rjmp	.+134    	; 0x2632 <MCAL_Interrupt_u8SetRegister+0xd2>
			MCUCSR = PORT_OUTPUT;
    25ac:	e4 e5       	ldi	r30, 0x54	; 84
    25ae:	f0 e0       	ldi	r31, 0x00	; 0
    25b0:	8f ef       	ldi	r24, 0xFF	; 255
    25b2:	80 83       	st	Z, r24
    25b4:	3e c0       	rjmp	.+124    	; 0x2632 <MCAL_Interrupt_u8SetRegister+0xd2>
		} else {
			//Do Nothing
		}
	} else if (Loc_u8PortValue == PORT_INPUT) {
    25b6:	8a 81       	ldd	r24, Y+2	; 0x02
    25b8:	88 23       	and	r24, r24
    25ba:	e1 f4       	brne	.+56     	; 0x25f4 <MCAL_Interrupt_u8SetRegister+0x94>
		if (Loc_u8PortID == Sreg) {
    25bc:	89 81       	ldd	r24, Y+1	; 0x01
    25be:	88 23       	and	r24, r24
    25c0:	21 f4       	brne	.+8      	; 0x25ca <MCAL_Interrupt_u8SetRegister+0x6a>
			SREG = PORT_INPUT;
    25c2:	ef e5       	ldi	r30, 0x5F	; 95
    25c4:	f0 e0       	ldi	r31, 0x00	; 0
    25c6:	10 82       	st	Z, r1
    25c8:	34 c0       	rjmp	.+104    	; 0x2632 <MCAL_Interrupt_u8SetRegister+0xd2>
		} else if (Loc_u8PortID == Gicr) {
    25ca:	89 81       	ldd	r24, Y+1	; 0x01
    25cc:	81 30       	cpi	r24, 0x01	; 1
    25ce:	21 f4       	brne	.+8      	; 0x25d8 <MCAL_Interrupt_u8SetRegister+0x78>
			GICR = PORT_INPUT;
    25d0:	eb e5       	ldi	r30, 0x5B	; 91
    25d2:	f0 e0       	ldi	r31, 0x00	; 0
    25d4:	10 82       	st	Z, r1
    25d6:	2d c0       	rjmp	.+90     	; 0x2632 <MCAL_Interrupt_u8SetRegister+0xd2>
		} else if (Loc_u8PortID == Mcucr) {
    25d8:	89 81       	ldd	r24, Y+1	; 0x01
    25da:	82 30       	cpi	r24, 0x02	; 2
    25dc:	21 f4       	brne	.+8      	; 0x25e6 <MCAL_Interrupt_u8SetRegister+0x86>
			MCUCR = PORT_INPUT;
    25de:	e5 e5       	ldi	r30, 0x55	; 85
    25e0:	f0 e0       	ldi	r31, 0x00	; 0
    25e2:	10 82       	st	Z, r1
    25e4:	26 c0       	rjmp	.+76     	; 0x2632 <MCAL_Interrupt_u8SetRegister+0xd2>
		} else if (Loc_u8PortID == Mcucsr) {
    25e6:	89 81       	ldd	r24, Y+1	; 0x01
    25e8:	83 30       	cpi	r24, 0x03	; 3
    25ea:	19 f5       	brne	.+70     	; 0x2632 <MCAL_Interrupt_u8SetRegister+0xd2>
			MCUCSR = PORT_INPUT;
    25ec:	e4 e5       	ldi	r30, 0x54	; 84
    25ee:	f0 e0       	ldi	r31, 0x00	; 0
    25f0:	10 82       	st	Z, r1
    25f2:	1f c0       	rjmp	.+62     	; 0x2632 <MCAL_Interrupt_u8SetRegister+0xd2>
		} else {
			//Do Nothing
		}
	} else {
		if (Loc_u8PortID == Sreg) {
    25f4:	89 81       	ldd	r24, Y+1	; 0x01
    25f6:	88 23       	and	r24, r24
    25f8:	29 f4       	brne	.+10     	; 0x2604 <MCAL_Interrupt_u8SetRegister+0xa4>
			SREG = Loc_u8PortValue;
    25fa:	ef e5       	ldi	r30, 0x5F	; 95
    25fc:	f0 e0       	ldi	r31, 0x00	; 0
    25fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2600:	80 83       	st	Z, r24
    2602:	17 c0       	rjmp	.+46     	; 0x2632 <MCAL_Interrupt_u8SetRegister+0xd2>
		} else if (Loc_u8PortID == Gicr) {
    2604:	89 81       	ldd	r24, Y+1	; 0x01
    2606:	81 30       	cpi	r24, 0x01	; 1
    2608:	29 f4       	brne	.+10     	; 0x2614 <MCAL_Interrupt_u8SetRegister+0xb4>
			GICR = Loc_u8PortValue;
    260a:	eb e5       	ldi	r30, 0x5B	; 91
    260c:	f0 e0       	ldi	r31, 0x00	; 0
    260e:	8a 81       	ldd	r24, Y+2	; 0x02
    2610:	80 83       	st	Z, r24
    2612:	0f c0       	rjmp	.+30     	; 0x2632 <MCAL_Interrupt_u8SetRegister+0xd2>
		} else if (Loc_u8PortID == Mcucr) {
    2614:	89 81       	ldd	r24, Y+1	; 0x01
    2616:	82 30       	cpi	r24, 0x02	; 2
    2618:	29 f4       	brne	.+10     	; 0x2624 <MCAL_Interrupt_u8SetRegister+0xc4>
			MCUCR = Loc_u8PortValue;
    261a:	e5 e5       	ldi	r30, 0x55	; 85
    261c:	f0 e0       	ldi	r31, 0x00	; 0
    261e:	8a 81       	ldd	r24, Y+2	; 0x02
    2620:	80 83       	st	Z, r24
    2622:	07 c0       	rjmp	.+14     	; 0x2632 <MCAL_Interrupt_u8SetRegister+0xd2>
		} else if (Loc_u8PortID == Mcucsr) {
    2624:	89 81       	ldd	r24, Y+1	; 0x01
    2626:	83 30       	cpi	r24, 0x03	; 3
    2628:	21 f4       	brne	.+8      	; 0x2632 <MCAL_Interrupt_u8SetRegister+0xd2>
			MCUCSR = Loc_u8PortValue;
    262a:	e4 e5       	ldi	r30, 0x54	; 84
    262c:	f0 e0       	ldi	r31, 0x00	; 0
    262e:	8a 81       	ldd	r24, Y+2	; 0x02
    2630:	80 83       	st	Z, r24
		}
	}
}
    2632:	0f 90       	pop	r0
    2634:	0f 90       	pop	r0
    2636:	cf 91       	pop	r28
    2638:	df 91       	pop	r29
    263a:	08 95       	ret

0000263c <MCAL_Interrupt_u8SetRegisterPin>:

void MCAL_Interrupt_u8SetRegisterPin(u8 Loc_u8PortID, u8 Loc_u8PinID,
		u8 Loc_u8PinValue) {
    263c:	df 93       	push	r29
    263e:	cf 93       	push	r28
    2640:	00 d0       	rcall	.+0      	; 0x2642 <MCAL_Interrupt_u8SetRegisterPin+0x6>
    2642:	0f 92       	push	r0
    2644:	cd b7       	in	r28, 0x3d	; 61
    2646:	de b7       	in	r29, 0x3e	; 62
    2648:	89 83       	std	Y+1, r24	; 0x01
    264a:	6a 83       	std	Y+2, r22	; 0x02
    264c:	4b 83       	std	Y+3, r20	; 0x03
	if (Loc_u8PinValue == Pin_High) {
    264e:	8b 81       	ldd	r24, Y+3	; 0x03
    2650:	81 30       	cpi	r24, 0x01	; 1
    2652:	09 f0       	breq	.+2      	; 0x2656 <MCAL_Interrupt_u8SetRegisterPin+0x1a>
    2654:	5d c0       	rjmp	.+186    	; 0x2710 <MCAL_Interrupt_u8SetRegisterPin+0xd4>
		if (Loc_u8PortID == Sreg) {
    2656:	89 81       	ldd	r24, Y+1	; 0x01
    2658:	88 23       	and	r24, r24
    265a:	a1 f4       	brne	.+40     	; 0x2684 <MCAL_Interrupt_u8SetRegisterPin+0x48>
			SET_BIT(SREG, Loc_u8PinID);
    265c:	af e5       	ldi	r26, 0x5F	; 95
    265e:	b0 e0       	ldi	r27, 0x00	; 0
    2660:	ef e5       	ldi	r30, 0x5F	; 95
    2662:	f0 e0       	ldi	r31, 0x00	; 0
    2664:	80 81       	ld	r24, Z
    2666:	48 2f       	mov	r20, r24
    2668:	8a 81       	ldd	r24, Y+2	; 0x02
    266a:	28 2f       	mov	r18, r24
    266c:	30 e0       	ldi	r19, 0x00	; 0
    266e:	81 e0       	ldi	r24, 0x01	; 1
    2670:	90 e0       	ldi	r25, 0x00	; 0
    2672:	02 2e       	mov	r0, r18
    2674:	02 c0       	rjmp	.+4      	; 0x267a <MCAL_Interrupt_u8SetRegisterPin+0x3e>
    2676:	88 0f       	add	r24, r24
    2678:	99 1f       	adc	r25, r25
    267a:	0a 94       	dec	r0
    267c:	e2 f7       	brpl	.-8      	; 0x2676 <MCAL_Interrupt_u8SetRegisterPin+0x3a>
    267e:	84 2b       	or	r24, r20
    2680:	8c 93       	st	X, r24
    2682:	a9 c0       	rjmp	.+338    	; 0x27d6 <MCAL_Interrupt_u8SetRegisterPin+0x19a>
		} else if (Loc_u8PortID == Gicr) {
    2684:	89 81       	ldd	r24, Y+1	; 0x01
    2686:	81 30       	cpi	r24, 0x01	; 1
    2688:	a1 f4       	brne	.+40     	; 0x26b2 <MCAL_Interrupt_u8SetRegisterPin+0x76>
			SET_BIT(GICR, Loc_u8PinID);
    268a:	ab e5       	ldi	r26, 0x5B	; 91
    268c:	b0 e0       	ldi	r27, 0x00	; 0
    268e:	eb e5       	ldi	r30, 0x5B	; 91
    2690:	f0 e0       	ldi	r31, 0x00	; 0
    2692:	80 81       	ld	r24, Z
    2694:	48 2f       	mov	r20, r24
    2696:	8a 81       	ldd	r24, Y+2	; 0x02
    2698:	28 2f       	mov	r18, r24
    269a:	30 e0       	ldi	r19, 0x00	; 0
    269c:	81 e0       	ldi	r24, 0x01	; 1
    269e:	90 e0       	ldi	r25, 0x00	; 0
    26a0:	02 2e       	mov	r0, r18
    26a2:	02 c0       	rjmp	.+4      	; 0x26a8 <MCAL_Interrupt_u8SetRegisterPin+0x6c>
    26a4:	88 0f       	add	r24, r24
    26a6:	99 1f       	adc	r25, r25
    26a8:	0a 94       	dec	r0
    26aa:	e2 f7       	brpl	.-8      	; 0x26a4 <MCAL_Interrupt_u8SetRegisterPin+0x68>
    26ac:	84 2b       	or	r24, r20
    26ae:	8c 93       	st	X, r24
    26b0:	92 c0       	rjmp	.+292    	; 0x27d6 <MCAL_Interrupt_u8SetRegisterPin+0x19a>
		} else if (Loc_u8PortID == Mcucr) {
    26b2:	89 81       	ldd	r24, Y+1	; 0x01
    26b4:	82 30       	cpi	r24, 0x02	; 2
    26b6:	a1 f4       	brne	.+40     	; 0x26e0 <MCAL_Interrupt_u8SetRegisterPin+0xa4>
			SET_BIT(MCUCR, Loc_u8PinID);
    26b8:	a5 e5       	ldi	r26, 0x55	; 85
    26ba:	b0 e0       	ldi	r27, 0x00	; 0
    26bc:	e5 e5       	ldi	r30, 0x55	; 85
    26be:	f0 e0       	ldi	r31, 0x00	; 0
    26c0:	80 81       	ld	r24, Z
    26c2:	48 2f       	mov	r20, r24
    26c4:	8a 81       	ldd	r24, Y+2	; 0x02
    26c6:	28 2f       	mov	r18, r24
    26c8:	30 e0       	ldi	r19, 0x00	; 0
    26ca:	81 e0       	ldi	r24, 0x01	; 1
    26cc:	90 e0       	ldi	r25, 0x00	; 0
    26ce:	02 2e       	mov	r0, r18
    26d0:	02 c0       	rjmp	.+4      	; 0x26d6 <MCAL_Interrupt_u8SetRegisterPin+0x9a>
    26d2:	88 0f       	add	r24, r24
    26d4:	99 1f       	adc	r25, r25
    26d6:	0a 94       	dec	r0
    26d8:	e2 f7       	brpl	.-8      	; 0x26d2 <MCAL_Interrupt_u8SetRegisterPin+0x96>
    26da:	84 2b       	or	r24, r20
    26dc:	8c 93       	st	X, r24
    26de:	7b c0       	rjmp	.+246    	; 0x27d6 <MCAL_Interrupt_u8SetRegisterPin+0x19a>
		} else if (Loc_u8PortID == Mcucsr) {
    26e0:	89 81       	ldd	r24, Y+1	; 0x01
    26e2:	83 30       	cpi	r24, 0x03	; 3
    26e4:	09 f0       	breq	.+2      	; 0x26e8 <MCAL_Interrupt_u8SetRegisterPin+0xac>
    26e6:	77 c0       	rjmp	.+238    	; 0x27d6 <MCAL_Interrupt_u8SetRegisterPin+0x19a>
			SET_BIT(MCUCSR, Loc_u8PinID);
    26e8:	a4 e5       	ldi	r26, 0x54	; 84
    26ea:	b0 e0       	ldi	r27, 0x00	; 0
    26ec:	e4 e5       	ldi	r30, 0x54	; 84
    26ee:	f0 e0       	ldi	r31, 0x00	; 0
    26f0:	80 81       	ld	r24, Z
    26f2:	48 2f       	mov	r20, r24
    26f4:	8a 81       	ldd	r24, Y+2	; 0x02
    26f6:	28 2f       	mov	r18, r24
    26f8:	30 e0       	ldi	r19, 0x00	; 0
    26fa:	81 e0       	ldi	r24, 0x01	; 1
    26fc:	90 e0       	ldi	r25, 0x00	; 0
    26fe:	02 2e       	mov	r0, r18
    2700:	02 c0       	rjmp	.+4      	; 0x2706 <MCAL_Interrupt_u8SetRegisterPin+0xca>
    2702:	88 0f       	add	r24, r24
    2704:	99 1f       	adc	r25, r25
    2706:	0a 94       	dec	r0
    2708:	e2 f7       	brpl	.-8      	; 0x2702 <MCAL_Interrupt_u8SetRegisterPin+0xc6>
    270a:	84 2b       	or	r24, r20
    270c:	8c 93       	st	X, r24
    270e:	63 c0       	rjmp	.+198    	; 0x27d6 <MCAL_Interrupt_u8SetRegisterPin+0x19a>
		} else {
			//Do Nothing
		}
	} else if (Loc_u8PinValue == Pin_Low) {
    2710:	8b 81       	ldd	r24, Y+3	; 0x03
    2712:	88 23       	and	r24, r24
    2714:	09 f0       	breq	.+2      	; 0x2718 <MCAL_Interrupt_u8SetRegisterPin+0xdc>
    2716:	5f c0       	rjmp	.+190    	; 0x27d6 <MCAL_Interrupt_u8SetRegisterPin+0x19a>
		if (Loc_u8PortID == Sreg) {
    2718:	89 81       	ldd	r24, Y+1	; 0x01
    271a:	88 23       	and	r24, r24
    271c:	a9 f4       	brne	.+42     	; 0x2748 <MCAL_Interrupt_u8SetRegisterPin+0x10c>
			CLR_BIT(SREG, Loc_u8PinID);
    271e:	af e5       	ldi	r26, 0x5F	; 95
    2720:	b0 e0       	ldi	r27, 0x00	; 0
    2722:	ef e5       	ldi	r30, 0x5F	; 95
    2724:	f0 e0       	ldi	r31, 0x00	; 0
    2726:	80 81       	ld	r24, Z
    2728:	48 2f       	mov	r20, r24
    272a:	8a 81       	ldd	r24, Y+2	; 0x02
    272c:	28 2f       	mov	r18, r24
    272e:	30 e0       	ldi	r19, 0x00	; 0
    2730:	81 e0       	ldi	r24, 0x01	; 1
    2732:	90 e0       	ldi	r25, 0x00	; 0
    2734:	02 2e       	mov	r0, r18
    2736:	02 c0       	rjmp	.+4      	; 0x273c <MCAL_Interrupt_u8SetRegisterPin+0x100>
    2738:	88 0f       	add	r24, r24
    273a:	99 1f       	adc	r25, r25
    273c:	0a 94       	dec	r0
    273e:	e2 f7       	brpl	.-8      	; 0x2738 <MCAL_Interrupt_u8SetRegisterPin+0xfc>
    2740:	80 95       	com	r24
    2742:	84 23       	and	r24, r20
    2744:	8c 93       	st	X, r24
    2746:	47 c0       	rjmp	.+142    	; 0x27d6 <MCAL_Interrupt_u8SetRegisterPin+0x19a>
		} else if (Loc_u8PortID == Gicr) {
    2748:	89 81       	ldd	r24, Y+1	; 0x01
    274a:	81 30       	cpi	r24, 0x01	; 1
    274c:	a9 f4       	brne	.+42     	; 0x2778 <MCAL_Interrupt_u8SetRegisterPin+0x13c>
			CLR_BIT(GICR, Loc_u8PinID);
    274e:	ab e5       	ldi	r26, 0x5B	; 91
    2750:	b0 e0       	ldi	r27, 0x00	; 0
    2752:	eb e5       	ldi	r30, 0x5B	; 91
    2754:	f0 e0       	ldi	r31, 0x00	; 0
    2756:	80 81       	ld	r24, Z
    2758:	48 2f       	mov	r20, r24
    275a:	8a 81       	ldd	r24, Y+2	; 0x02
    275c:	28 2f       	mov	r18, r24
    275e:	30 e0       	ldi	r19, 0x00	; 0
    2760:	81 e0       	ldi	r24, 0x01	; 1
    2762:	90 e0       	ldi	r25, 0x00	; 0
    2764:	02 2e       	mov	r0, r18
    2766:	02 c0       	rjmp	.+4      	; 0x276c <MCAL_Interrupt_u8SetRegisterPin+0x130>
    2768:	88 0f       	add	r24, r24
    276a:	99 1f       	adc	r25, r25
    276c:	0a 94       	dec	r0
    276e:	e2 f7       	brpl	.-8      	; 0x2768 <MCAL_Interrupt_u8SetRegisterPin+0x12c>
    2770:	80 95       	com	r24
    2772:	84 23       	and	r24, r20
    2774:	8c 93       	st	X, r24
    2776:	2f c0       	rjmp	.+94     	; 0x27d6 <MCAL_Interrupt_u8SetRegisterPin+0x19a>
		} else if (Loc_u8PortID == Mcucr) {
    2778:	89 81       	ldd	r24, Y+1	; 0x01
    277a:	82 30       	cpi	r24, 0x02	; 2
    277c:	a9 f4       	brne	.+42     	; 0x27a8 <MCAL_Interrupt_u8SetRegisterPin+0x16c>
			CLR_BIT(MCUCR, Loc_u8PinID);
    277e:	a5 e5       	ldi	r26, 0x55	; 85
    2780:	b0 e0       	ldi	r27, 0x00	; 0
    2782:	e5 e5       	ldi	r30, 0x55	; 85
    2784:	f0 e0       	ldi	r31, 0x00	; 0
    2786:	80 81       	ld	r24, Z
    2788:	48 2f       	mov	r20, r24
    278a:	8a 81       	ldd	r24, Y+2	; 0x02
    278c:	28 2f       	mov	r18, r24
    278e:	30 e0       	ldi	r19, 0x00	; 0
    2790:	81 e0       	ldi	r24, 0x01	; 1
    2792:	90 e0       	ldi	r25, 0x00	; 0
    2794:	02 2e       	mov	r0, r18
    2796:	02 c0       	rjmp	.+4      	; 0x279c <MCAL_Interrupt_u8SetRegisterPin+0x160>
    2798:	88 0f       	add	r24, r24
    279a:	99 1f       	adc	r25, r25
    279c:	0a 94       	dec	r0
    279e:	e2 f7       	brpl	.-8      	; 0x2798 <MCAL_Interrupt_u8SetRegisterPin+0x15c>
    27a0:	80 95       	com	r24
    27a2:	84 23       	and	r24, r20
    27a4:	8c 93       	st	X, r24
    27a6:	17 c0       	rjmp	.+46     	; 0x27d6 <MCAL_Interrupt_u8SetRegisterPin+0x19a>
		} else if (Loc_u8PortID == Mcucsr) {
    27a8:	89 81       	ldd	r24, Y+1	; 0x01
    27aa:	83 30       	cpi	r24, 0x03	; 3
    27ac:	a1 f4       	brne	.+40     	; 0x27d6 <MCAL_Interrupt_u8SetRegisterPin+0x19a>
			CLR_BIT(MCUCSR, Loc_u8PinID);
    27ae:	a4 e5       	ldi	r26, 0x54	; 84
    27b0:	b0 e0       	ldi	r27, 0x00	; 0
    27b2:	e4 e5       	ldi	r30, 0x54	; 84
    27b4:	f0 e0       	ldi	r31, 0x00	; 0
    27b6:	80 81       	ld	r24, Z
    27b8:	48 2f       	mov	r20, r24
    27ba:	8a 81       	ldd	r24, Y+2	; 0x02
    27bc:	28 2f       	mov	r18, r24
    27be:	30 e0       	ldi	r19, 0x00	; 0
    27c0:	81 e0       	ldi	r24, 0x01	; 1
    27c2:	90 e0       	ldi	r25, 0x00	; 0
    27c4:	02 2e       	mov	r0, r18
    27c6:	02 c0       	rjmp	.+4      	; 0x27cc <MCAL_Interrupt_u8SetRegisterPin+0x190>
    27c8:	88 0f       	add	r24, r24
    27ca:	99 1f       	adc	r25, r25
    27cc:	0a 94       	dec	r0
    27ce:	e2 f7       	brpl	.-8      	; 0x27c8 <MCAL_Interrupt_u8SetRegisterPin+0x18c>
    27d0:	80 95       	com	r24
    27d2:	84 23       	and	r24, r20
    27d4:	8c 93       	st	X, r24
			//Do Nothing
		}
	} else {
		//Do Nothing
	}
}
    27d6:	0f 90       	pop	r0
    27d8:	0f 90       	pop	r0
    27da:	0f 90       	pop	r0
    27dc:	cf 91       	pop	r28
    27de:	df 91       	pop	r29
    27e0:	08 95       	ret

000027e2 <MCAL_Interrupt_EXIT_CallBack_0>:

void MCAL_Interrupt_EXIT_CallBack_0(void (*ptr)(void)) {
    27e2:	df 93       	push	r29
    27e4:	cf 93       	push	r28
    27e6:	00 d0       	rcall	.+0      	; 0x27e8 <MCAL_Interrupt_EXIT_CallBack_0+0x6>
    27e8:	cd b7       	in	r28, 0x3d	; 61
    27ea:	de b7       	in	r29, 0x3e	; 62
    27ec:	9a 83       	std	Y+2, r25	; 0x02
    27ee:	89 83       	std	Y+1, r24	; 0x01
	if (ptr != '\0')
    27f0:	89 81       	ldd	r24, Y+1	; 0x01
    27f2:	9a 81       	ldd	r25, Y+2	; 0x02
    27f4:	00 97       	sbiw	r24, 0x00	; 0
    27f6:	31 f0       	breq	.+12     	; 0x2804 <MCAL_Interrupt_EXIT_CallBack_0+0x22>
		Gptr0 = ptr;
    27f8:	89 81       	ldd	r24, Y+1	; 0x01
    27fa:	9a 81       	ldd	r25, Y+2	; 0x02
    27fc:	90 93 d5 01 	sts	0x01D5, r25
    2800:	80 93 d4 01 	sts	0x01D4, r24
}
    2804:	0f 90       	pop	r0
    2806:	0f 90       	pop	r0
    2808:	cf 91       	pop	r28
    280a:	df 91       	pop	r29
    280c:	08 95       	ret

0000280e <MCAL_Interrupt_EXIT_CallBack_1>:
void MCAL_Interrupt_EXIT_CallBack_1(void (*ptr)(void)) {
    280e:	df 93       	push	r29
    2810:	cf 93       	push	r28
    2812:	00 d0       	rcall	.+0      	; 0x2814 <MCAL_Interrupt_EXIT_CallBack_1+0x6>
    2814:	cd b7       	in	r28, 0x3d	; 61
    2816:	de b7       	in	r29, 0x3e	; 62
    2818:	9a 83       	std	Y+2, r25	; 0x02
    281a:	89 83       	std	Y+1, r24	; 0x01
	if (ptr != '\0')
    281c:	89 81       	ldd	r24, Y+1	; 0x01
    281e:	9a 81       	ldd	r25, Y+2	; 0x02
    2820:	00 97       	sbiw	r24, 0x00	; 0
    2822:	31 f0       	breq	.+12     	; 0x2830 <MCAL_Interrupt_EXIT_CallBack_1+0x22>
		Gptr1 = ptr;
    2824:	89 81       	ldd	r24, Y+1	; 0x01
    2826:	9a 81       	ldd	r25, Y+2	; 0x02
    2828:	90 93 d7 01 	sts	0x01D7, r25
    282c:	80 93 d6 01 	sts	0x01D6, r24
}
    2830:	0f 90       	pop	r0
    2832:	0f 90       	pop	r0
    2834:	cf 91       	pop	r28
    2836:	df 91       	pop	r29
    2838:	08 95       	ret

0000283a <MCAL_Interrupt_EXIT_CallBack_2>:
void MCAL_Interrupt_EXIT_CallBack_2(void (*ptr)(void)) {
    283a:	df 93       	push	r29
    283c:	cf 93       	push	r28
    283e:	00 d0       	rcall	.+0      	; 0x2840 <MCAL_Interrupt_EXIT_CallBack_2+0x6>
    2840:	cd b7       	in	r28, 0x3d	; 61
    2842:	de b7       	in	r29, 0x3e	; 62
    2844:	9a 83       	std	Y+2, r25	; 0x02
    2846:	89 83       	std	Y+1, r24	; 0x01
	if (ptr != '\0')
    2848:	89 81       	ldd	r24, Y+1	; 0x01
    284a:	9a 81       	ldd	r25, Y+2	; 0x02
    284c:	00 97       	sbiw	r24, 0x00	; 0
    284e:	31 f0       	breq	.+12     	; 0x285c <MCAL_Interrupt_EXIT_CallBack_2+0x22>
		Gptr2 = ptr;
    2850:	89 81       	ldd	r24, Y+1	; 0x01
    2852:	9a 81       	ldd	r25, Y+2	; 0x02
    2854:	90 93 d9 01 	sts	0x01D9, r25
    2858:	80 93 d8 01 	sts	0x01D8, r24
}
    285c:	0f 90       	pop	r0
    285e:	0f 90       	pop	r0
    2860:	cf 91       	pop	r28
    2862:	df 91       	pop	r29
    2864:	08 95       	ret

00002866 <MCAL_Interrupt_EnableGIE>:

void MCAL_Interrupt_EnableGIE(u8 Loc_u8value) {
    2866:	df 93       	push	r29
    2868:	cf 93       	push	r28
    286a:	0f 92       	push	r0
    286c:	cd b7       	in	r28, 0x3d	; 61
    286e:	de b7       	in	r29, 0x3e	; 62
    2870:	89 83       	std	Y+1, r24	; 0x01
	if (Loc_u8value == Enable) {
    2872:	89 81       	ldd	r24, Y+1	; 0x01
    2874:	81 30       	cpi	r24, 0x01	; 1
    2876:	31 f4       	brne	.+12     	; 0x2884 <MCAL_Interrupt_EnableGIE+0x1e>
		MCAL_Interrupt_u8SetRegisterPin(Sreg, SREG_Pin, Pin_High);
    2878:	80 e0       	ldi	r24, 0x00	; 0
    287a:	67 e0       	ldi	r22, 0x07	; 7
    287c:	41 e0       	ldi	r20, 0x01	; 1
    287e:	0e 94 1e 13 	call	0x263c	; 0x263c <MCAL_Interrupt_u8SetRegisterPin>
    2882:	08 c0       	rjmp	.+16     	; 0x2894 <MCAL_Interrupt_EnableGIE+0x2e>
	} else if (Loc_u8value == Disable) {
    2884:	89 81       	ldd	r24, Y+1	; 0x01
    2886:	88 23       	and	r24, r24
    2888:	29 f4       	brne	.+10     	; 0x2894 <MCAL_Interrupt_EnableGIE+0x2e>
		MCAL_Interrupt_u8SetRegisterPin(Sreg, SREG_Pin, Pin_Low);
    288a:	80 e0       	ldi	r24, 0x00	; 0
    288c:	67 e0       	ldi	r22, 0x07	; 7
    288e:	40 e0       	ldi	r20, 0x00	; 0
    2890:	0e 94 1e 13 	call	0x263c	; 0x263c <MCAL_Interrupt_u8SetRegisterPin>
	}
}
    2894:	0f 90       	pop	r0
    2896:	cf 91       	pop	r28
    2898:	df 91       	pop	r29
    289a:	08 95       	ret

0000289c <MCAL_Interrupt_InterruptRisingInit>:

void MCAL_Interrupt_InterruptRisingInit() {
    289c:	df 93       	push	r29
    289e:	cf 93       	push	r28
    28a0:	cd b7       	in	r28, 0x3d	; 61
    28a2:	de b7       	in	r29, 0x3e	; 62
	MCAL_Interrupt_u8SetRegisterPin(Gicr, GICR_Pin6, Pin_High);
    28a4:	81 e0       	ldi	r24, 0x01	; 1
    28a6:	66 e0       	ldi	r22, 0x06	; 6
    28a8:	41 e0       	ldi	r20, 0x01	; 1
    28aa:	0e 94 1e 13 	call	0x263c	; 0x263c <MCAL_Interrupt_u8SetRegisterPin>
	MCAL_Interrupt_u8SetRegisterPin(Mcucr,MCUCR_Pin0 , Pin_High);
    28ae:	82 e0       	ldi	r24, 0x02	; 2
    28b0:	60 e0       	ldi	r22, 0x00	; 0
    28b2:	41 e0       	ldi	r20, 0x01	; 1
    28b4:	0e 94 1e 13 	call	0x263c	; 0x263c <MCAL_Interrupt_u8SetRegisterPin>
	MCAL_Interrupt_u8SetRegisterPin(Mcucr,MCUCR_Pin1 , Pin_High);
    28b8:	82 e0       	ldi	r24, 0x02	; 2
    28ba:	61 e0       	ldi	r22, 0x01	; 1
    28bc:	41 e0       	ldi	r20, 0x01	; 1
    28be:	0e 94 1e 13 	call	0x263c	; 0x263c <MCAL_Interrupt_u8SetRegisterPin>
}
    28c2:	cf 91       	pop	r28
    28c4:	df 91       	pop	r29
    28c6:	08 95       	ret

000028c8 <MCAL_Interrupt_InterruptFallingInit>:
void MCAL_Interrupt_InterruptFallingInit() {
    28c8:	df 93       	push	r29
    28ca:	cf 93       	push	r28
    28cc:	cd b7       	in	r28, 0x3d	; 61
    28ce:	de b7       	in	r29, 0x3e	; 62
	MCAL_Interrupt_u8SetRegisterPin(Gicr, GICR_Pin6, Pin_High);
    28d0:	81 e0       	ldi	r24, 0x01	; 1
    28d2:	66 e0       	ldi	r22, 0x06	; 6
    28d4:	41 e0       	ldi	r20, 0x01	; 1
    28d6:	0e 94 1e 13 	call	0x263c	; 0x263c <MCAL_Interrupt_u8SetRegisterPin>
	MCAL_Interrupt_u8SetRegisterPin(Mcucr,MCUCR_Pin0 , Pin_Low);
    28da:	82 e0       	ldi	r24, 0x02	; 2
    28dc:	60 e0       	ldi	r22, 0x00	; 0
    28de:	40 e0       	ldi	r20, 0x00	; 0
    28e0:	0e 94 1e 13 	call	0x263c	; 0x263c <MCAL_Interrupt_u8SetRegisterPin>
	MCAL_Interrupt_u8SetRegisterPin(Mcucr,MCUCR_Pin1 , Pin_High);
    28e4:	82 e0       	ldi	r24, 0x02	; 2
    28e6:	61 e0       	ldi	r22, 0x01	; 1
    28e8:	41 e0       	ldi	r20, 0x01	; 1
    28ea:	0e 94 1e 13 	call	0x263c	; 0x263c <MCAL_Interrupt_u8SetRegisterPin>
}
    28ee:	cf 91       	pop	r28
    28f0:	df 91       	pop	r29
    28f2:	08 95       	ret

000028f4 <__vector_1>:

ISR(VECT_INT0) {
    28f4:	1f 92       	push	r1
    28f6:	0f 92       	push	r0
    28f8:	0f b6       	in	r0, 0x3f	; 63
    28fa:	0f 92       	push	r0
    28fc:	11 24       	eor	r1, r1
    28fe:	2f 93       	push	r18
    2900:	3f 93       	push	r19
    2902:	4f 93       	push	r20
    2904:	5f 93       	push	r21
    2906:	6f 93       	push	r22
    2908:	7f 93       	push	r23
    290a:	8f 93       	push	r24
    290c:	9f 93       	push	r25
    290e:	af 93       	push	r26
    2910:	bf 93       	push	r27
    2912:	ef 93       	push	r30
    2914:	ff 93       	push	r31
    2916:	df 93       	push	r29
    2918:	cf 93       	push	r28
    291a:	cd b7       	in	r28, 0x3d	; 61
    291c:	de b7       	in	r29, 0x3e	; 62
	if (Gptr0 != '\0')
    291e:	80 91 d4 01 	lds	r24, 0x01D4
    2922:	90 91 d5 01 	lds	r25, 0x01D5
    2926:	00 97       	sbiw	r24, 0x00	; 0
    2928:	29 f0       	breq	.+10     	; 0x2934 <__vector_1+0x40>
		Gptr0();
    292a:	e0 91 d4 01 	lds	r30, 0x01D4
    292e:	f0 91 d5 01 	lds	r31, 0x01D5
    2932:	09 95       	icall
}
    2934:	cf 91       	pop	r28
    2936:	df 91       	pop	r29
    2938:	ff 91       	pop	r31
    293a:	ef 91       	pop	r30
    293c:	bf 91       	pop	r27
    293e:	af 91       	pop	r26
    2940:	9f 91       	pop	r25
    2942:	8f 91       	pop	r24
    2944:	7f 91       	pop	r23
    2946:	6f 91       	pop	r22
    2948:	5f 91       	pop	r21
    294a:	4f 91       	pop	r20
    294c:	3f 91       	pop	r19
    294e:	2f 91       	pop	r18
    2950:	0f 90       	pop	r0
    2952:	0f be       	out	0x3f, r0	; 63
    2954:	0f 90       	pop	r0
    2956:	1f 90       	pop	r1
    2958:	18 95       	reti

0000295a <__vector_2>:
ISR(VECT_INT1) {
    295a:	1f 92       	push	r1
    295c:	0f 92       	push	r0
    295e:	0f b6       	in	r0, 0x3f	; 63
    2960:	0f 92       	push	r0
    2962:	11 24       	eor	r1, r1
    2964:	2f 93       	push	r18
    2966:	3f 93       	push	r19
    2968:	4f 93       	push	r20
    296a:	5f 93       	push	r21
    296c:	6f 93       	push	r22
    296e:	7f 93       	push	r23
    2970:	8f 93       	push	r24
    2972:	9f 93       	push	r25
    2974:	af 93       	push	r26
    2976:	bf 93       	push	r27
    2978:	ef 93       	push	r30
    297a:	ff 93       	push	r31
    297c:	df 93       	push	r29
    297e:	cf 93       	push	r28
    2980:	cd b7       	in	r28, 0x3d	; 61
    2982:	de b7       	in	r29, 0x3e	; 62
	if (Gptr1 != '\0')
    2984:	80 91 d6 01 	lds	r24, 0x01D6
    2988:	90 91 d7 01 	lds	r25, 0x01D7
    298c:	00 97       	sbiw	r24, 0x00	; 0
    298e:	29 f0       	breq	.+10     	; 0x299a <__vector_2+0x40>
		Gptr1();
    2990:	e0 91 d6 01 	lds	r30, 0x01D6
    2994:	f0 91 d7 01 	lds	r31, 0x01D7
    2998:	09 95       	icall
}
    299a:	cf 91       	pop	r28
    299c:	df 91       	pop	r29
    299e:	ff 91       	pop	r31
    29a0:	ef 91       	pop	r30
    29a2:	bf 91       	pop	r27
    29a4:	af 91       	pop	r26
    29a6:	9f 91       	pop	r25
    29a8:	8f 91       	pop	r24
    29aa:	7f 91       	pop	r23
    29ac:	6f 91       	pop	r22
    29ae:	5f 91       	pop	r21
    29b0:	4f 91       	pop	r20
    29b2:	3f 91       	pop	r19
    29b4:	2f 91       	pop	r18
    29b6:	0f 90       	pop	r0
    29b8:	0f be       	out	0x3f, r0	; 63
    29ba:	0f 90       	pop	r0
    29bc:	1f 90       	pop	r1
    29be:	18 95       	reti

000029c0 <__vector_3>:
ISR(VECT_INT2) {
    29c0:	1f 92       	push	r1
    29c2:	0f 92       	push	r0
    29c4:	0f b6       	in	r0, 0x3f	; 63
    29c6:	0f 92       	push	r0
    29c8:	11 24       	eor	r1, r1
    29ca:	2f 93       	push	r18
    29cc:	3f 93       	push	r19
    29ce:	4f 93       	push	r20
    29d0:	5f 93       	push	r21
    29d2:	6f 93       	push	r22
    29d4:	7f 93       	push	r23
    29d6:	8f 93       	push	r24
    29d8:	9f 93       	push	r25
    29da:	af 93       	push	r26
    29dc:	bf 93       	push	r27
    29de:	ef 93       	push	r30
    29e0:	ff 93       	push	r31
    29e2:	df 93       	push	r29
    29e4:	cf 93       	push	r28
    29e6:	cd b7       	in	r28, 0x3d	; 61
    29e8:	de b7       	in	r29, 0x3e	; 62
	if (Gptr2 != '\0')
    29ea:	80 91 d8 01 	lds	r24, 0x01D8
    29ee:	90 91 d9 01 	lds	r25, 0x01D9
    29f2:	00 97       	sbiw	r24, 0x00	; 0
    29f4:	29 f0       	breq	.+10     	; 0x2a00 <__vector_3+0x40>
		Gptr2();
    29f6:	e0 91 d8 01 	lds	r30, 0x01D8
    29fa:	f0 91 d9 01 	lds	r31, 0x01D9
    29fe:	09 95       	icall
}
    2a00:	cf 91       	pop	r28
    2a02:	df 91       	pop	r29
    2a04:	ff 91       	pop	r31
    2a06:	ef 91       	pop	r30
    2a08:	bf 91       	pop	r27
    2a0a:	af 91       	pop	r26
    2a0c:	9f 91       	pop	r25
    2a0e:	8f 91       	pop	r24
    2a10:	7f 91       	pop	r23
    2a12:	6f 91       	pop	r22
    2a14:	5f 91       	pop	r21
    2a16:	4f 91       	pop	r20
    2a18:	3f 91       	pop	r19
    2a1a:	2f 91       	pop	r18
    2a1c:	0f 90       	pop	r0
    2a1e:	0f be       	out	0x3f, r0	; 63
    2a20:	0f 90       	pop	r0
    2a22:	1f 90       	pop	r1
    2a24:	18 95       	reti

00002a26 <MCAL_DIO_u8SetPortDirection>:
 *      Author: Mohamed
 */

#include "DIO.h"

STD_Type MCAL_DIO_u8SetPortDirection(u8 Loc_u8PortID, u8 Loc_u8PortDirection) {
    2a26:	df 93       	push	r29
    2a28:	cf 93       	push	r28
    2a2a:	00 d0       	rcall	.+0      	; 0x2a2c <MCAL_DIO_u8SetPortDirection+0x6>
    2a2c:	0f 92       	push	r0
    2a2e:	cd b7       	in	r28, 0x3d	; 61
    2a30:	de b7       	in	r29, 0x3e	; 62
    2a32:	8a 83       	std	Y+2, r24	; 0x02
    2a34:	6b 83       	std	Y+3, r22	; 0x03
	u8 Loc_u8Return_Value = E_NOT_OK;
    2a36:	81 e0       	ldi	r24, 0x01	; 1
    2a38:	89 83       	std	Y+1, r24	; 0x01
	if (Loc_u8PortID <= PortD && Loc_u8PortDirection <= PORT_OUTPUT) {
    2a3a:	8a 81       	ldd	r24, Y+2	; 0x02
    2a3c:	84 30       	cpi	r24, 0x04	; 4
    2a3e:	08 f0       	brcs	.+2      	; 0x2a42 <MCAL_DIO_u8SetPortDirection+0x1c>
    2a40:	6e c0       	rjmp	.+220    	; 0x2b1e <MCAL_DIO_u8SetPortDirection+0xf8>
		if (Loc_u8PortDirection == PORT_OUTPUT) {
    2a42:	8b 81       	ldd	r24, Y+3	; 0x03
    2a44:	8f 3f       	cpi	r24, 0xFF	; 255
    2a46:	29 f5       	brne	.+74     	; 0x2a92 <MCAL_DIO_u8SetPortDirection+0x6c>
			if (Loc_u8PortID == PortA) {
    2a48:	8a 81       	ldd	r24, Y+2	; 0x02
    2a4a:	88 23       	and	r24, r24
    2a4c:	31 f4       	brne	.+12     	; 0x2a5a <MCAL_DIO_u8SetPortDirection+0x34>
				DDRA = PORT_OUTPUT;
    2a4e:	ea e3       	ldi	r30, 0x3A	; 58
    2a50:	f0 e0       	ldi	r31, 0x00	; 0
    2a52:	8f ef       	ldi	r24, 0xFF	; 255
    2a54:	80 83       	st	Z, r24
				Loc_u8Return_Value = E_OK;
    2a56:	19 82       	std	Y+1, r1	; 0x01
    2a58:	62 c0       	rjmp	.+196    	; 0x2b1e <MCAL_DIO_u8SetPortDirection+0xf8>
			} else if (Loc_u8PortID == PortB) {
    2a5a:	8a 81       	ldd	r24, Y+2	; 0x02
    2a5c:	81 30       	cpi	r24, 0x01	; 1
    2a5e:	31 f4       	brne	.+12     	; 0x2a6c <MCAL_DIO_u8SetPortDirection+0x46>
				DDRB = PORT_OUTPUT;
    2a60:	e7 e3       	ldi	r30, 0x37	; 55
    2a62:	f0 e0       	ldi	r31, 0x00	; 0
    2a64:	8f ef       	ldi	r24, 0xFF	; 255
    2a66:	80 83       	st	Z, r24
				Loc_u8Return_Value = E_OK;
    2a68:	19 82       	std	Y+1, r1	; 0x01
    2a6a:	59 c0       	rjmp	.+178    	; 0x2b1e <MCAL_DIO_u8SetPortDirection+0xf8>
			} else if (Loc_u8PortID == PortC) {
    2a6c:	8a 81       	ldd	r24, Y+2	; 0x02
    2a6e:	82 30       	cpi	r24, 0x02	; 2
    2a70:	31 f4       	brne	.+12     	; 0x2a7e <MCAL_DIO_u8SetPortDirection+0x58>
				DDRC = PORT_OUTPUT;
    2a72:	e4 e3       	ldi	r30, 0x34	; 52
    2a74:	f0 e0       	ldi	r31, 0x00	; 0
    2a76:	8f ef       	ldi	r24, 0xFF	; 255
    2a78:	80 83       	st	Z, r24
				Loc_u8Return_Value = E_OK;
    2a7a:	19 82       	std	Y+1, r1	; 0x01
    2a7c:	50 c0       	rjmp	.+160    	; 0x2b1e <MCAL_DIO_u8SetPortDirection+0xf8>
			} else if (Loc_u8PortID == PortD) {
    2a7e:	8a 81       	ldd	r24, Y+2	; 0x02
    2a80:	83 30       	cpi	r24, 0x03	; 3
    2a82:	09 f0       	breq	.+2      	; 0x2a86 <MCAL_DIO_u8SetPortDirection+0x60>
    2a84:	4c c0       	rjmp	.+152    	; 0x2b1e <MCAL_DIO_u8SetPortDirection+0xf8>
				DDRD = PORT_OUTPUT;
    2a86:	e1 e3       	ldi	r30, 0x31	; 49
    2a88:	f0 e0       	ldi	r31, 0x00	; 0
    2a8a:	8f ef       	ldi	r24, 0xFF	; 255
    2a8c:	80 83       	st	Z, r24
				Loc_u8Return_Value = E_OK;
    2a8e:	19 82       	std	Y+1, r1	; 0x01
    2a90:	46 c0       	rjmp	.+140    	; 0x2b1e <MCAL_DIO_u8SetPortDirection+0xf8>
			} else {
				//Do Nothing
			}
		} else if (Loc_u8PortDirection == PORT_INPUT) {
    2a92:	8b 81       	ldd	r24, Y+3	; 0x03
    2a94:	88 23       	and	r24, r24
    2a96:	01 f5       	brne	.+64     	; 0x2ad8 <MCAL_DIO_u8SetPortDirection+0xb2>
			if (Loc_u8PortID == PortA) {
    2a98:	8a 81       	ldd	r24, Y+2	; 0x02
    2a9a:	88 23       	and	r24, r24
    2a9c:	29 f4       	brne	.+10     	; 0x2aa8 <MCAL_DIO_u8SetPortDirection+0x82>
				DDRA = PORT_INPUT;
    2a9e:	ea e3       	ldi	r30, 0x3A	; 58
    2aa0:	f0 e0       	ldi	r31, 0x00	; 0
    2aa2:	10 82       	st	Z, r1
				Loc_u8Return_Value = E_OK;
    2aa4:	19 82       	std	Y+1, r1	; 0x01
    2aa6:	3b c0       	rjmp	.+118    	; 0x2b1e <MCAL_DIO_u8SetPortDirection+0xf8>
			} else if (Loc_u8PortID == PortB) {
    2aa8:	8a 81       	ldd	r24, Y+2	; 0x02
    2aaa:	81 30       	cpi	r24, 0x01	; 1
    2aac:	29 f4       	brne	.+10     	; 0x2ab8 <MCAL_DIO_u8SetPortDirection+0x92>
				DDRB = PORT_INPUT;
    2aae:	e7 e3       	ldi	r30, 0x37	; 55
    2ab0:	f0 e0       	ldi	r31, 0x00	; 0
    2ab2:	10 82       	st	Z, r1
				Loc_u8Return_Value = E_OK;
    2ab4:	19 82       	std	Y+1, r1	; 0x01
    2ab6:	33 c0       	rjmp	.+102    	; 0x2b1e <MCAL_DIO_u8SetPortDirection+0xf8>
			} else if (Loc_u8PortID == PortC) {
    2ab8:	8a 81       	ldd	r24, Y+2	; 0x02
    2aba:	82 30       	cpi	r24, 0x02	; 2
    2abc:	29 f4       	brne	.+10     	; 0x2ac8 <MCAL_DIO_u8SetPortDirection+0xa2>
				DDRC = PORT_INPUT;
    2abe:	e4 e3       	ldi	r30, 0x34	; 52
    2ac0:	f0 e0       	ldi	r31, 0x00	; 0
    2ac2:	10 82       	st	Z, r1
				Loc_u8Return_Value = E_OK;
    2ac4:	19 82       	std	Y+1, r1	; 0x01
    2ac6:	2b c0       	rjmp	.+86     	; 0x2b1e <MCAL_DIO_u8SetPortDirection+0xf8>
			} else if (Loc_u8PortID == PortD) {
    2ac8:	8a 81       	ldd	r24, Y+2	; 0x02
    2aca:	83 30       	cpi	r24, 0x03	; 3
    2acc:	41 f5       	brne	.+80     	; 0x2b1e <MCAL_DIO_u8SetPortDirection+0xf8>
				DDRD = PORT_INPUT;
    2ace:	e1 e3       	ldi	r30, 0x31	; 49
    2ad0:	f0 e0       	ldi	r31, 0x00	; 0
    2ad2:	10 82       	st	Z, r1
				Loc_u8Return_Value = E_OK;
    2ad4:	19 82       	std	Y+1, r1	; 0x01
    2ad6:	23 c0       	rjmp	.+70     	; 0x2b1e <MCAL_DIO_u8SetPortDirection+0xf8>
			} else {
				//Do Nothing
			}
		} else {
			if (Loc_u8PortID == PortA) {
    2ad8:	8a 81       	ldd	r24, Y+2	; 0x02
    2ada:	88 23       	and	r24, r24
    2adc:	31 f4       	brne	.+12     	; 0x2aea <MCAL_DIO_u8SetPortDirection+0xc4>
				DDRA = Loc_u8PortDirection;
    2ade:	ea e3       	ldi	r30, 0x3A	; 58
    2ae0:	f0 e0       	ldi	r31, 0x00	; 0
    2ae2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ae4:	80 83       	st	Z, r24
				Loc_u8Return_Value = E_OK;
    2ae6:	19 82       	std	Y+1, r1	; 0x01
    2ae8:	1a c0       	rjmp	.+52     	; 0x2b1e <MCAL_DIO_u8SetPortDirection+0xf8>
			} else if (Loc_u8PortID == PortB) {
    2aea:	8a 81       	ldd	r24, Y+2	; 0x02
    2aec:	81 30       	cpi	r24, 0x01	; 1
    2aee:	31 f4       	brne	.+12     	; 0x2afc <MCAL_DIO_u8SetPortDirection+0xd6>
				DDRB = Loc_u8PortDirection;
    2af0:	e7 e3       	ldi	r30, 0x37	; 55
    2af2:	f0 e0       	ldi	r31, 0x00	; 0
    2af4:	8b 81       	ldd	r24, Y+3	; 0x03
    2af6:	80 83       	st	Z, r24
				Loc_u8Return_Value = E_OK;
    2af8:	19 82       	std	Y+1, r1	; 0x01
    2afa:	11 c0       	rjmp	.+34     	; 0x2b1e <MCAL_DIO_u8SetPortDirection+0xf8>
			} else if (Loc_u8PortID == PortC) {
    2afc:	8a 81       	ldd	r24, Y+2	; 0x02
    2afe:	82 30       	cpi	r24, 0x02	; 2
    2b00:	31 f4       	brne	.+12     	; 0x2b0e <MCAL_DIO_u8SetPortDirection+0xe8>
				DDRC = Loc_u8PortDirection;
    2b02:	e4 e3       	ldi	r30, 0x34	; 52
    2b04:	f0 e0       	ldi	r31, 0x00	; 0
    2b06:	8b 81       	ldd	r24, Y+3	; 0x03
    2b08:	80 83       	st	Z, r24
				Loc_u8Return_Value = E_OK;
    2b0a:	19 82       	std	Y+1, r1	; 0x01
    2b0c:	08 c0       	rjmp	.+16     	; 0x2b1e <MCAL_DIO_u8SetPortDirection+0xf8>
			} else if (Loc_u8PortID == PortD) {
    2b0e:	8a 81       	ldd	r24, Y+2	; 0x02
    2b10:	83 30       	cpi	r24, 0x03	; 3
    2b12:	29 f4       	brne	.+10     	; 0x2b1e <MCAL_DIO_u8SetPortDirection+0xf8>
				DDRD = Loc_u8PortDirection;
    2b14:	e1 e3       	ldi	r30, 0x31	; 49
    2b16:	f0 e0       	ldi	r31, 0x00	; 0
    2b18:	8b 81       	ldd	r24, Y+3	; 0x03
    2b1a:	80 83       	st	Z, r24
				Loc_u8Return_Value = E_OK;
    2b1c:	19 82       	std	Y+1, r1	; 0x01
			}
		}
	} else {
		//Do Nothing
	}
	return Loc_u8Return_Value;
    2b1e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2b20:	0f 90       	pop	r0
    2b22:	0f 90       	pop	r0
    2b24:	0f 90       	pop	r0
    2b26:	cf 91       	pop	r28
    2b28:	df 91       	pop	r29
    2b2a:	08 95       	ret

00002b2c <MCAL_DIO_u8SetPinDirection>:

STD_Type MCAL_DIO_u8SetPinDirection(u8 Loc_u8PortID, u8 Loc_u8PinID,
		u8 Loc_u8PinDirection) {
    2b2c:	df 93       	push	r29
    2b2e:	cf 93       	push	r28
    2b30:	00 d0       	rcall	.+0      	; 0x2b32 <MCAL_DIO_u8SetPinDirection+0x6>
    2b32:	00 d0       	rcall	.+0      	; 0x2b34 <MCAL_DIO_u8SetPinDirection+0x8>
    2b34:	cd b7       	in	r28, 0x3d	; 61
    2b36:	de b7       	in	r29, 0x3e	; 62
    2b38:	8a 83       	std	Y+2, r24	; 0x02
    2b3a:	6b 83       	std	Y+3, r22	; 0x03
    2b3c:	4c 83       	std	Y+4, r20	; 0x04
	u8 Loc_u8Return_Value = E_NOT_OK;
    2b3e:	81 e0       	ldi	r24, 0x01	; 1
    2b40:	89 83       	std	Y+1, r24	; 0x01
	if (Loc_u8PortID <= PortD && Loc_u8PinID <= Num_Of_Pins
    2b42:	8a 81       	ldd	r24, Y+2	; 0x02
    2b44:	84 30       	cpi	r24, 0x04	; 4
    2b46:	08 f0       	brcs	.+2      	; 0x2b4a <MCAL_DIO_u8SetPinDirection+0x1e>
    2b48:	d4 c0       	rjmp	.+424    	; 0x2cf2 <MCAL_DIO_u8SetPinDirection+0x1c6>
    2b4a:	8b 81       	ldd	r24, Y+3	; 0x03
    2b4c:	88 30       	cpi	r24, 0x08	; 8
    2b4e:	08 f0       	brcs	.+2      	; 0x2b52 <MCAL_DIO_u8SetPinDirection+0x26>
    2b50:	d0 c0       	rjmp	.+416    	; 0x2cf2 <MCAL_DIO_u8SetPinDirection+0x1c6>
    2b52:	8c 81       	ldd	r24, Y+4	; 0x04
    2b54:	82 30       	cpi	r24, 0x02	; 2
    2b56:	08 f0       	brcs	.+2      	; 0x2b5a <MCAL_DIO_u8SetPinDirection+0x2e>
    2b58:	cc c0       	rjmp	.+408    	; 0x2cf2 <MCAL_DIO_u8SetPinDirection+0x1c6>
			&& Loc_u8PinDirection <= Pin_High) {
		if (Loc_u8PinDirection == Pin_High) {
    2b5a:	8c 81       	ldd	r24, Y+4	; 0x04
    2b5c:	81 30       	cpi	r24, 0x01	; 1
    2b5e:	09 f0       	breq	.+2      	; 0x2b62 <MCAL_DIO_u8SetPinDirection+0x36>
    2b60:	61 c0       	rjmp	.+194    	; 0x2c24 <MCAL_DIO_u8SetPinDirection+0xf8>
			if (Loc_u8PortID == PortA) {
    2b62:	8a 81       	ldd	r24, Y+2	; 0x02
    2b64:	88 23       	and	r24, r24
    2b66:	a9 f4       	brne	.+42     	; 0x2b92 <MCAL_DIO_u8SetPinDirection+0x66>
				SET_BIT(DDRA, Loc_u8PinID);
    2b68:	aa e3       	ldi	r26, 0x3A	; 58
    2b6a:	b0 e0       	ldi	r27, 0x00	; 0
    2b6c:	ea e3       	ldi	r30, 0x3A	; 58
    2b6e:	f0 e0       	ldi	r31, 0x00	; 0
    2b70:	80 81       	ld	r24, Z
    2b72:	48 2f       	mov	r20, r24
    2b74:	8b 81       	ldd	r24, Y+3	; 0x03
    2b76:	28 2f       	mov	r18, r24
    2b78:	30 e0       	ldi	r19, 0x00	; 0
    2b7a:	81 e0       	ldi	r24, 0x01	; 1
    2b7c:	90 e0       	ldi	r25, 0x00	; 0
    2b7e:	02 2e       	mov	r0, r18
    2b80:	02 c0       	rjmp	.+4      	; 0x2b86 <MCAL_DIO_u8SetPinDirection+0x5a>
    2b82:	88 0f       	add	r24, r24
    2b84:	99 1f       	adc	r25, r25
    2b86:	0a 94       	dec	r0
    2b88:	e2 f7       	brpl	.-8      	; 0x2b82 <MCAL_DIO_u8SetPinDirection+0x56>
    2b8a:	84 2b       	or	r24, r20
    2b8c:	8c 93       	st	X, r24
				Loc_u8Return_Value = E_OK;
    2b8e:	19 82       	std	Y+1, r1	; 0x01
    2b90:	b0 c0       	rjmp	.+352    	; 0x2cf2 <MCAL_DIO_u8SetPinDirection+0x1c6>
			} else if (Loc_u8PortID == PortB) {
    2b92:	8a 81       	ldd	r24, Y+2	; 0x02
    2b94:	81 30       	cpi	r24, 0x01	; 1
    2b96:	a9 f4       	brne	.+42     	; 0x2bc2 <MCAL_DIO_u8SetPinDirection+0x96>
				SET_BIT(DDRB, Loc_u8PinID);
    2b98:	a7 e3       	ldi	r26, 0x37	; 55
    2b9a:	b0 e0       	ldi	r27, 0x00	; 0
    2b9c:	e7 e3       	ldi	r30, 0x37	; 55
    2b9e:	f0 e0       	ldi	r31, 0x00	; 0
    2ba0:	80 81       	ld	r24, Z
    2ba2:	48 2f       	mov	r20, r24
    2ba4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ba6:	28 2f       	mov	r18, r24
    2ba8:	30 e0       	ldi	r19, 0x00	; 0
    2baa:	81 e0       	ldi	r24, 0x01	; 1
    2bac:	90 e0       	ldi	r25, 0x00	; 0
    2bae:	02 2e       	mov	r0, r18
    2bb0:	02 c0       	rjmp	.+4      	; 0x2bb6 <MCAL_DIO_u8SetPinDirection+0x8a>
    2bb2:	88 0f       	add	r24, r24
    2bb4:	99 1f       	adc	r25, r25
    2bb6:	0a 94       	dec	r0
    2bb8:	e2 f7       	brpl	.-8      	; 0x2bb2 <MCAL_DIO_u8SetPinDirection+0x86>
    2bba:	84 2b       	or	r24, r20
    2bbc:	8c 93       	st	X, r24
				Loc_u8Return_Value = E_OK;
    2bbe:	19 82       	std	Y+1, r1	; 0x01
    2bc0:	98 c0       	rjmp	.+304    	; 0x2cf2 <MCAL_DIO_u8SetPinDirection+0x1c6>
			} else if (Loc_u8PortID == PortC) {
    2bc2:	8a 81       	ldd	r24, Y+2	; 0x02
    2bc4:	82 30       	cpi	r24, 0x02	; 2
    2bc6:	a9 f4       	brne	.+42     	; 0x2bf2 <MCAL_DIO_u8SetPinDirection+0xc6>
				SET_BIT(DDRC, Loc_u8PinID);
    2bc8:	a4 e3       	ldi	r26, 0x34	; 52
    2bca:	b0 e0       	ldi	r27, 0x00	; 0
    2bcc:	e4 e3       	ldi	r30, 0x34	; 52
    2bce:	f0 e0       	ldi	r31, 0x00	; 0
    2bd0:	80 81       	ld	r24, Z
    2bd2:	48 2f       	mov	r20, r24
    2bd4:	8b 81       	ldd	r24, Y+3	; 0x03
    2bd6:	28 2f       	mov	r18, r24
    2bd8:	30 e0       	ldi	r19, 0x00	; 0
    2bda:	81 e0       	ldi	r24, 0x01	; 1
    2bdc:	90 e0       	ldi	r25, 0x00	; 0
    2bde:	02 2e       	mov	r0, r18
    2be0:	02 c0       	rjmp	.+4      	; 0x2be6 <MCAL_DIO_u8SetPinDirection+0xba>
    2be2:	88 0f       	add	r24, r24
    2be4:	99 1f       	adc	r25, r25
    2be6:	0a 94       	dec	r0
    2be8:	e2 f7       	brpl	.-8      	; 0x2be2 <MCAL_DIO_u8SetPinDirection+0xb6>
    2bea:	84 2b       	or	r24, r20
    2bec:	8c 93       	st	X, r24
				Loc_u8Return_Value = E_OK;
    2bee:	19 82       	std	Y+1, r1	; 0x01
    2bf0:	80 c0       	rjmp	.+256    	; 0x2cf2 <MCAL_DIO_u8SetPinDirection+0x1c6>
			} else if (Loc_u8PortID == PortD) {
    2bf2:	8a 81       	ldd	r24, Y+2	; 0x02
    2bf4:	83 30       	cpi	r24, 0x03	; 3
    2bf6:	09 f0       	breq	.+2      	; 0x2bfa <MCAL_DIO_u8SetPinDirection+0xce>
    2bf8:	7c c0       	rjmp	.+248    	; 0x2cf2 <MCAL_DIO_u8SetPinDirection+0x1c6>
				SET_BIT(DDRD, Loc_u8PinID);
    2bfa:	a1 e3       	ldi	r26, 0x31	; 49
    2bfc:	b0 e0       	ldi	r27, 0x00	; 0
    2bfe:	e1 e3       	ldi	r30, 0x31	; 49
    2c00:	f0 e0       	ldi	r31, 0x00	; 0
    2c02:	80 81       	ld	r24, Z
    2c04:	48 2f       	mov	r20, r24
    2c06:	8b 81       	ldd	r24, Y+3	; 0x03
    2c08:	28 2f       	mov	r18, r24
    2c0a:	30 e0       	ldi	r19, 0x00	; 0
    2c0c:	81 e0       	ldi	r24, 0x01	; 1
    2c0e:	90 e0       	ldi	r25, 0x00	; 0
    2c10:	02 2e       	mov	r0, r18
    2c12:	02 c0       	rjmp	.+4      	; 0x2c18 <MCAL_DIO_u8SetPinDirection+0xec>
    2c14:	88 0f       	add	r24, r24
    2c16:	99 1f       	adc	r25, r25
    2c18:	0a 94       	dec	r0
    2c1a:	e2 f7       	brpl	.-8      	; 0x2c14 <MCAL_DIO_u8SetPinDirection+0xe8>
    2c1c:	84 2b       	or	r24, r20
    2c1e:	8c 93       	st	X, r24
				Loc_u8Return_Value = E_OK;
    2c20:	19 82       	std	Y+1, r1	; 0x01
    2c22:	67 c0       	rjmp	.+206    	; 0x2cf2 <MCAL_DIO_u8SetPinDirection+0x1c6>
			} else {
				//Do Nothing
			}
		} else if (Loc_u8PinDirection == Pin_Low) {
    2c24:	8c 81       	ldd	r24, Y+4	; 0x04
    2c26:	88 23       	and	r24, r24
    2c28:	09 f0       	breq	.+2      	; 0x2c2c <MCAL_DIO_u8SetPinDirection+0x100>
    2c2a:	63 c0       	rjmp	.+198    	; 0x2cf2 <MCAL_DIO_u8SetPinDirection+0x1c6>
			if (Loc_u8PortID == PortA) {
    2c2c:	8a 81       	ldd	r24, Y+2	; 0x02
    2c2e:	88 23       	and	r24, r24
    2c30:	b1 f4       	brne	.+44     	; 0x2c5e <MCAL_DIO_u8SetPinDirection+0x132>
				CLR_BIT(DDRA, Loc_u8PinID);
    2c32:	aa e3       	ldi	r26, 0x3A	; 58
    2c34:	b0 e0       	ldi	r27, 0x00	; 0
    2c36:	ea e3       	ldi	r30, 0x3A	; 58
    2c38:	f0 e0       	ldi	r31, 0x00	; 0
    2c3a:	80 81       	ld	r24, Z
    2c3c:	48 2f       	mov	r20, r24
    2c3e:	8b 81       	ldd	r24, Y+3	; 0x03
    2c40:	28 2f       	mov	r18, r24
    2c42:	30 e0       	ldi	r19, 0x00	; 0
    2c44:	81 e0       	ldi	r24, 0x01	; 1
    2c46:	90 e0       	ldi	r25, 0x00	; 0
    2c48:	02 2e       	mov	r0, r18
    2c4a:	02 c0       	rjmp	.+4      	; 0x2c50 <MCAL_DIO_u8SetPinDirection+0x124>
    2c4c:	88 0f       	add	r24, r24
    2c4e:	99 1f       	adc	r25, r25
    2c50:	0a 94       	dec	r0
    2c52:	e2 f7       	brpl	.-8      	; 0x2c4c <MCAL_DIO_u8SetPinDirection+0x120>
    2c54:	80 95       	com	r24
    2c56:	84 23       	and	r24, r20
    2c58:	8c 93       	st	X, r24
				Loc_u8Return_Value = E_OK;
    2c5a:	19 82       	std	Y+1, r1	; 0x01
    2c5c:	4a c0       	rjmp	.+148    	; 0x2cf2 <MCAL_DIO_u8SetPinDirection+0x1c6>
			} else if (Loc_u8PortID == PortB) {
    2c5e:	8a 81       	ldd	r24, Y+2	; 0x02
    2c60:	81 30       	cpi	r24, 0x01	; 1
    2c62:	b1 f4       	brne	.+44     	; 0x2c90 <MCAL_DIO_u8SetPinDirection+0x164>
				CLR_BIT(DDRB, Loc_u8PinID);
    2c64:	a7 e3       	ldi	r26, 0x37	; 55
    2c66:	b0 e0       	ldi	r27, 0x00	; 0
    2c68:	e7 e3       	ldi	r30, 0x37	; 55
    2c6a:	f0 e0       	ldi	r31, 0x00	; 0
    2c6c:	80 81       	ld	r24, Z
    2c6e:	48 2f       	mov	r20, r24
    2c70:	8b 81       	ldd	r24, Y+3	; 0x03
    2c72:	28 2f       	mov	r18, r24
    2c74:	30 e0       	ldi	r19, 0x00	; 0
    2c76:	81 e0       	ldi	r24, 0x01	; 1
    2c78:	90 e0       	ldi	r25, 0x00	; 0
    2c7a:	02 2e       	mov	r0, r18
    2c7c:	02 c0       	rjmp	.+4      	; 0x2c82 <MCAL_DIO_u8SetPinDirection+0x156>
    2c7e:	88 0f       	add	r24, r24
    2c80:	99 1f       	adc	r25, r25
    2c82:	0a 94       	dec	r0
    2c84:	e2 f7       	brpl	.-8      	; 0x2c7e <MCAL_DIO_u8SetPinDirection+0x152>
    2c86:	80 95       	com	r24
    2c88:	84 23       	and	r24, r20
    2c8a:	8c 93       	st	X, r24
				Loc_u8Return_Value = E_OK;
    2c8c:	19 82       	std	Y+1, r1	; 0x01
    2c8e:	31 c0       	rjmp	.+98     	; 0x2cf2 <MCAL_DIO_u8SetPinDirection+0x1c6>
			} else if (Loc_u8PortID == PortC) {
    2c90:	8a 81       	ldd	r24, Y+2	; 0x02
    2c92:	82 30       	cpi	r24, 0x02	; 2
    2c94:	b1 f4       	brne	.+44     	; 0x2cc2 <MCAL_DIO_u8SetPinDirection+0x196>
				CLR_BIT(DDRC, Loc_u8PinID);
    2c96:	a4 e3       	ldi	r26, 0x34	; 52
    2c98:	b0 e0       	ldi	r27, 0x00	; 0
    2c9a:	e4 e3       	ldi	r30, 0x34	; 52
    2c9c:	f0 e0       	ldi	r31, 0x00	; 0
    2c9e:	80 81       	ld	r24, Z
    2ca0:	48 2f       	mov	r20, r24
    2ca2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ca4:	28 2f       	mov	r18, r24
    2ca6:	30 e0       	ldi	r19, 0x00	; 0
    2ca8:	81 e0       	ldi	r24, 0x01	; 1
    2caa:	90 e0       	ldi	r25, 0x00	; 0
    2cac:	02 2e       	mov	r0, r18
    2cae:	02 c0       	rjmp	.+4      	; 0x2cb4 <MCAL_DIO_u8SetPinDirection+0x188>
    2cb0:	88 0f       	add	r24, r24
    2cb2:	99 1f       	adc	r25, r25
    2cb4:	0a 94       	dec	r0
    2cb6:	e2 f7       	brpl	.-8      	; 0x2cb0 <MCAL_DIO_u8SetPinDirection+0x184>
    2cb8:	80 95       	com	r24
    2cba:	84 23       	and	r24, r20
    2cbc:	8c 93       	st	X, r24
				Loc_u8Return_Value = E_OK;
    2cbe:	19 82       	std	Y+1, r1	; 0x01
    2cc0:	18 c0       	rjmp	.+48     	; 0x2cf2 <MCAL_DIO_u8SetPinDirection+0x1c6>
			} else if (Loc_u8PortID == PortD) {
    2cc2:	8a 81       	ldd	r24, Y+2	; 0x02
    2cc4:	83 30       	cpi	r24, 0x03	; 3
    2cc6:	a9 f4       	brne	.+42     	; 0x2cf2 <MCAL_DIO_u8SetPinDirection+0x1c6>
				CLR_BIT(DDRD, Loc_u8PinID);
    2cc8:	a1 e3       	ldi	r26, 0x31	; 49
    2cca:	b0 e0       	ldi	r27, 0x00	; 0
    2ccc:	e1 e3       	ldi	r30, 0x31	; 49
    2cce:	f0 e0       	ldi	r31, 0x00	; 0
    2cd0:	80 81       	ld	r24, Z
    2cd2:	48 2f       	mov	r20, r24
    2cd4:	8b 81       	ldd	r24, Y+3	; 0x03
    2cd6:	28 2f       	mov	r18, r24
    2cd8:	30 e0       	ldi	r19, 0x00	; 0
    2cda:	81 e0       	ldi	r24, 0x01	; 1
    2cdc:	90 e0       	ldi	r25, 0x00	; 0
    2cde:	02 2e       	mov	r0, r18
    2ce0:	02 c0       	rjmp	.+4      	; 0x2ce6 <MCAL_DIO_u8SetPinDirection+0x1ba>
    2ce2:	88 0f       	add	r24, r24
    2ce4:	99 1f       	adc	r25, r25
    2ce6:	0a 94       	dec	r0
    2ce8:	e2 f7       	brpl	.-8      	; 0x2ce2 <MCAL_DIO_u8SetPinDirection+0x1b6>
    2cea:	80 95       	com	r24
    2cec:	84 23       	and	r24, r20
    2cee:	8c 93       	st	X, r24
				Loc_u8Return_Value = E_OK;
    2cf0:	19 82       	std	Y+1, r1	; 0x01
			//Do Nothing
		}
	} else {
		//Do Nothing
	}
	return Loc_u8Return_Value;
    2cf2:	89 81       	ldd	r24, Y+1	; 0x01

}
    2cf4:	0f 90       	pop	r0
    2cf6:	0f 90       	pop	r0
    2cf8:	0f 90       	pop	r0
    2cfa:	0f 90       	pop	r0
    2cfc:	cf 91       	pop	r28
    2cfe:	df 91       	pop	r29
    2d00:	08 95       	ret

00002d02 <MCAL_DIO_u8SetPortValue>:

STD_Type MCAL_DIO_u8SetPortValue(u8 Loc_u8PortID, u8 Loc_u8PortValue) {
    2d02:	df 93       	push	r29
    2d04:	cf 93       	push	r28
    2d06:	00 d0       	rcall	.+0      	; 0x2d08 <MCAL_DIO_u8SetPortValue+0x6>
    2d08:	0f 92       	push	r0
    2d0a:	cd b7       	in	r28, 0x3d	; 61
    2d0c:	de b7       	in	r29, 0x3e	; 62
    2d0e:	8a 83       	std	Y+2, r24	; 0x02
    2d10:	6b 83       	std	Y+3, r22	; 0x03
	u8 Loc_u8Return_Value = E_NOT_OK;
    2d12:	81 e0       	ldi	r24, 0x01	; 1
    2d14:	89 83       	std	Y+1, r24	; 0x01
	if (Loc_u8PortID <= PortD && Loc_u8PortValue <= PORT_OUTPUT) {
    2d16:	8a 81       	ldd	r24, Y+2	; 0x02
    2d18:	84 30       	cpi	r24, 0x04	; 4
    2d1a:	08 f0       	brcs	.+2      	; 0x2d1e <MCAL_DIO_u8SetPortValue+0x1c>
    2d1c:	6e c0       	rjmp	.+220    	; 0x2dfa <MCAL_DIO_u8SetPortValue+0xf8>
		if (Loc_u8PortValue == PORT_OUTPUT) {
    2d1e:	8b 81       	ldd	r24, Y+3	; 0x03
    2d20:	8f 3f       	cpi	r24, 0xFF	; 255
    2d22:	29 f5       	brne	.+74     	; 0x2d6e <MCAL_DIO_u8SetPortValue+0x6c>
			if (Loc_u8PortID == PortA) {
    2d24:	8a 81       	ldd	r24, Y+2	; 0x02
    2d26:	88 23       	and	r24, r24
    2d28:	31 f4       	brne	.+12     	; 0x2d36 <MCAL_DIO_u8SetPortValue+0x34>
				PORTA = PORT_OUTPUT;
    2d2a:	eb e3       	ldi	r30, 0x3B	; 59
    2d2c:	f0 e0       	ldi	r31, 0x00	; 0
    2d2e:	8f ef       	ldi	r24, 0xFF	; 255
    2d30:	80 83       	st	Z, r24
				Loc_u8Return_Value = E_OK;
    2d32:	19 82       	std	Y+1, r1	; 0x01
    2d34:	62 c0       	rjmp	.+196    	; 0x2dfa <MCAL_DIO_u8SetPortValue+0xf8>
			} else if (Loc_u8PortID == PortB) {
    2d36:	8a 81       	ldd	r24, Y+2	; 0x02
    2d38:	81 30       	cpi	r24, 0x01	; 1
    2d3a:	31 f4       	brne	.+12     	; 0x2d48 <MCAL_DIO_u8SetPortValue+0x46>
				PORTB = PORT_OUTPUT;
    2d3c:	e8 e3       	ldi	r30, 0x38	; 56
    2d3e:	f0 e0       	ldi	r31, 0x00	; 0
    2d40:	8f ef       	ldi	r24, 0xFF	; 255
    2d42:	80 83       	st	Z, r24
				Loc_u8Return_Value = E_OK;
    2d44:	19 82       	std	Y+1, r1	; 0x01
    2d46:	59 c0       	rjmp	.+178    	; 0x2dfa <MCAL_DIO_u8SetPortValue+0xf8>
			} else if (Loc_u8PortID == PortC) {
    2d48:	8a 81       	ldd	r24, Y+2	; 0x02
    2d4a:	82 30       	cpi	r24, 0x02	; 2
    2d4c:	31 f4       	brne	.+12     	; 0x2d5a <MCAL_DIO_u8SetPortValue+0x58>
				PORTC = PORT_OUTPUT;
    2d4e:	e5 e3       	ldi	r30, 0x35	; 53
    2d50:	f0 e0       	ldi	r31, 0x00	; 0
    2d52:	8f ef       	ldi	r24, 0xFF	; 255
    2d54:	80 83       	st	Z, r24
				Loc_u8Return_Value = E_OK;
    2d56:	19 82       	std	Y+1, r1	; 0x01
    2d58:	50 c0       	rjmp	.+160    	; 0x2dfa <MCAL_DIO_u8SetPortValue+0xf8>
			} else if (Loc_u8PortID == PortD) {
    2d5a:	8a 81       	ldd	r24, Y+2	; 0x02
    2d5c:	83 30       	cpi	r24, 0x03	; 3
    2d5e:	09 f0       	breq	.+2      	; 0x2d62 <MCAL_DIO_u8SetPortValue+0x60>
    2d60:	4c c0       	rjmp	.+152    	; 0x2dfa <MCAL_DIO_u8SetPortValue+0xf8>
				PORTD = PORT_OUTPUT;
    2d62:	e2 e3       	ldi	r30, 0x32	; 50
    2d64:	f0 e0       	ldi	r31, 0x00	; 0
    2d66:	8f ef       	ldi	r24, 0xFF	; 255
    2d68:	80 83       	st	Z, r24
				Loc_u8Return_Value = E_OK;
    2d6a:	19 82       	std	Y+1, r1	; 0x01
    2d6c:	46 c0       	rjmp	.+140    	; 0x2dfa <MCAL_DIO_u8SetPortValue+0xf8>
			} else {
				//Do Nothing
			}
		} else if (Loc_u8PortValue == PORT_INPUT) {
    2d6e:	8b 81       	ldd	r24, Y+3	; 0x03
    2d70:	88 23       	and	r24, r24
    2d72:	01 f5       	brne	.+64     	; 0x2db4 <MCAL_DIO_u8SetPortValue+0xb2>
			if (Loc_u8PortID == PortA) {
    2d74:	8a 81       	ldd	r24, Y+2	; 0x02
    2d76:	88 23       	and	r24, r24
    2d78:	29 f4       	brne	.+10     	; 0x2d84 <MCAL_DIO_u8SetPortValue+0x82>
				PORTA = PORT_INPUT;
    2d7a:	eb e3       	ldi	r30, 0x3B	; 59
    2d7c:	f0 e0       	ldi	r31, 0x00	; 0
    2d7e:	10 82       	st	Z, r1
				Loc_u8Return_Value = E_OK;
    2d80:	19 82       	std	Y+1, r1	; 0x01
    2d82:	3b c0       	rjmp	.+118    	; 0x2dfa <MCAL_DIO_u8SetPortValue+0xf8>
			} else if (Loc_u8PortID == PortB) {
    2d84:	8a 81       	ldd	r24, Y+2	; 0x02
    2d86:	81 30       	cpi	r24, 0x01	; 1
    2d88:	29 f4       	brne	.+10     	; 0x2d94 <MCAL_DIO_u8SetPortValue+0x92>
				PORTB = PORT_INPUT;
    2d8a:	e8 e3       	ldi	r30, 0x38	; 56
    2d8c:	f0 e0       	ldi	r31, 0x00	; 0
    2d8e:	10 82       	st	Z, r1
				Loc_u8Return_Value = E_OK;
    2d90:	19 82       	std	Y+1, r1	; 0x01
    2d92:	33 c0       	rjmp	.+102    	; 0x2dfa <MCAL_DIO_u8SetPortValue+0xf8>
			} else if (Loc_u8PortID == PortC) {
    2d94:	8a 81       	ldd	r24, Y+2	; 0x02
    2d96:	82 30       	cpi	r24, 0x02	; 2
    2d98:	29 f4       	brne	.+10     	; 0x2da4 <MCAL_DIO_u8SetPortValue+0xa2>
				PORTC = PORT_INPUT;
    2d9a:	e5 e3       	ldi	r30, 0x35	; 53
    2d9c:	f0 e0       	ldi	r31, 0x00	; 0
    2d9e:	10 82       	st	Z, r1
				Loc_u8Return_Value = E_OK;
    2da0:	19 82       	std	Y+1, r1	; 0x01
    2da2:	2b c0       	rjmp	.+86     	; 0x2dfa <MCAL_DIO_u8SetPortValue+0xf8>
			} else if (Loc_u8PortID == PortD) {
    2da4:	8a 81       	ldd	r24, Y+2	; 0x02
    2da6:	83 30       	cpi	r24, 0x03	; 3
    2da8:	41 f5       	brne	.+80     	; 0x2dfa <MCAL_DIO_u8SetPortValue+0xf8>
				PORTD = PORT_INPUT;
    2daa:	e2 e3       	ldi	r30, 0x32	; 50
    2dac:	f0 e0       	ldi	r31, 0x00	; 0
    2dae:	10 82       	st	Z, r1
				Loc_u8Return_Value = E_OK;
    2db0:	19 82       	std	Y+1, r1	; 0x01
    2db2:	23 c0       	rjmp	.+70     	; 0x2dfa <MCAL_DIO_u8SetPortValue+0xf8>
			} else {
				//Do Nothing
			}
		} else {
			if (Loc_u8PortID == PortA) {
    2db4:	8a 81       	ldd	r24, Y+2	; 0x02
    2db6:	88 23       	and	r24, r24
    2db8:	31 f4       	brne	.+12     	; 0x2dc6 <MCAL_DIO_u8SetPortValue+0xc4>
				PORTA = Loc_u8PortValue;
    2dba:	eb e3       	ldi	r30, 0x3B	; 59
    2dbc:	f0 e0       	ldi	r31, 0x00	; 0
    2dbe:	8b 81       	ldd	r24, Y+3	; 0x03
    2dc0:	80 83       	st	Z, r24
				Loc_u8Return_Value = E_OK;
    2dc2:	19 82       	std	Y+1, r1	; 0x01
    2dc4:	1a c0       	rjmp	.+52     	; 0x2dfa <MCAL_DIO_u8SetPortValue+0xf8>
			} else if (Loc_u8PortID == PortB) {
    2dc6:	8a 81       	ldd	r24, Y+2	; 0x02
    2dc8:	81 30       	cpi	r24, 0x01	; 1
    2dca:	31 f4       	brne	.+12     	; 0x2dd8 <MCAL_DIO_u8SetPortValue+0xd6>
				PORTB = Loc_u8PortValue;
    2dcc:	e8 e3       	ldi	r30, 0x38	; 56
    2dce:	f0 e0       	ldi	r31, 0x00	; 0
    2dd0:	8b 81       	ldd	r24, Y+3	; 0x03
    2dd2:	80 83       	st	Z, r24
				Loc_u8Return_Value = E_OK;
    2dd4:	19 82       	std	Y+1, r1	; 0x01
    2dd6:	11 c0       	rjmp	.+34     	; 0x2dfa <MCAL_DIO_u8SetPortValue+0xf8>
			} else if (Loc_u8PortID == PortC) {
    2dd8:	8a 81       	ldd	r24, Y+2	; 0x02
    2dda:	82 30       	cpi	r24, 0x02	; 2
    2ddc:	31 f4       	brne	.+12     	; 0x2dea <MCAL_DIO_u8SetPortValue+0xe8>
				PORTC = Loc_u8PortValue;
    2dde:	e5 e3       	ldi	r30, 0x35	; 53
    2de0:	f0 e0       	ldi	r31, 0x00	; 0
    2de2:	8b 81       	ldd	r24, Y+3	; 0x03
    2de4:	80 83       	st	Z, r24
				Loc_u8Return_Value = E_OK;
    2de6:	19 82       	std	Y+1, r1	; 0x01
    2de8:	08 c0       	rjmp	.+16     	; 0x2dfa <MCAL_DIO_u8SetPortValue+0xf8>
			} else if (Loc_u8PortID == PortD) {
    2dea:	8a 81       	ldd	r24, Y+2	; 0x02
    2dec:	83 30       	cpi	r24, 0x03	; 3
    2dee:	29 f4       	brne	.+10     	; 0x2dfa <MCAL_DIO_u8SetPortValue+0xf8>
				PORTD = Loc_u8PortValue;
    2df0:	e2 e3       	ldi	r30, 0x32	; 50
    2df2:	f0 e0       	ldi	r31, 0x00	; 0
    2df4:	8b 81       	ldd	r24, Y+3	; 0x03
    2df6:	80 83       	st	Z, r24
				Loc_u8Return_Value = E_OK;
    2df8:	19 82       	std	Y+1, r1	; 0x01
			}
		}
	} else {
		//Do Nothing
	}
	return Loc_u8Return_Value;
    2dfa:	89 81       	ldd	r24, Y+1	; 0x01
}
    2dfc:	0f 90       	pop	r0
    2dfe:	0f 90       	pop	r0
    2e00:	0f 90       	pop	r0
    2e02:	cf 91       	pop	r28
    2e04:	df 91       	pop	r29
    2e06:	08 95       	ret

00002e08 <MCAL_DIO_u8SetPinValue>:

STD_Type MCAL_DIO_u8SetPinValue(u8 Loc_u8PortID, u8 Loc_u8PinID,
		u8 Loc_u8PinValue) {
    2e08:	df 93       	push	r29
    2e0a:	cf 93       	push	r28
    2e0c:	00 d0       	rcall	.+0      	; 0x2e0e <MCAL_DIO_u8SetPinValue+0x6>
    2e0e:	00 d0       	rcall	.+0      	; 0x2e10 <MCAL_DIO_u8SetPinValue+0x8>
    2e10:	cd b7       	in	r28, 0x3d	; 61
    2e12:	de b7       	in	r29, 0x3e	; 62
    2e14:	8a 83       	std	Y+2, r24	; 0x02
    2e16:	6b 83       	std	Y+3, r22	; 0x03
    2e18:	4c 83       	std	Y+4, r20	; 0x04
	u8 Loc_u8Return_Value = E_NOT_OK;
    2e1a:	81 e0       	ldi	r24, 0x01	; 1
    2e1c:	89 83       	std	Y+1, r24	; 0x01
	if (Loc_u8PortID <= PortD && Loc_u8PinID <= Num_Of_Pins
    2e1e:	8a 81       	ldd	r24, Y+2	; 0x02
    2e20:	84 30       	cpi	r24, 0x04	; 4
    2e22:	08 f0       	brcs	.+2      	; 0x2e26 <MCAL_DIO_u8SetPinValue+0x1e>
    2e24:	d4 c0       	rjmp	.+424    	; 0x2fce <MCAL_DIO_u8SetPinValue+0x1c6>
    2e26:	8b 81       	ldd	r24, Y+3	; 0x03
    2e28:	88 30       	cpi	r24, 0x08	; 8
    2e2a:	08 f0       	brcs	.+2      	; 0x2e2e <MCAL_DIO_u8SetPinValue+0x26>
    2e2c:	d0 c0       	rjmp	.+416    	; 0x2fce <MCAL_DIO_u8SetPinValue+0x1c6>
    2e2e:	8c 81       	ldd	r24, Y+4	; 0x04
    2e30:	82 30       	cpi	r24, 0x02	; 2
    2e32:	08 f0       	brcs	.+2      	; 0x2e36 <MCAL_DIO_u8SetPinValue+0x2e>
    2e34:	cc c0       	rjmp	.+408    	; 0x2fce <MCAL_DIO_u8SetPinValue+0x1c6>
			&& Loc_u8PinValue <= Pin_High) {
		if (Loc_u8PinValue == Pin_High) {
    2e36:	8c 81       	ldd	r24, Y+4	; 0x04
    2e38:	81 30       	cpi	r24, 0x01	; 1
    2e3a:	09 f0       	breq	.+2      	; 0x2e3e <MCAL_DIO_u8SetPinValue+0x36>
    2e3c:	61 c0       	rjmp	.+194    	; 0x2f00 <MCAL_DIO_u8SetPinValue+0xf8>
			if (Loc_u8PortID == PortA) {
    2e3e:	8a 81       	ldd	r24, Y+2	; 0x02
    2e40:	88 23       	and	r24, r24
    2e42:	a9 f4       	brne	.+42     	; 0x2e6e <MCAL_DIO_u8SetPinValue+0x66>
				SET_BIT(PORTA, Loc_u8PinID);
    2e44:	ab e3       	ldi	r26, 0x3B	; 59
    2e46:	b0 e0       	ldi	r27, 0x00	; 0
    2e48:	eb e3       	ldi	r30, 0x3B	; 59
    2e4a:	f0 e0       	ldi	r31, 0x00	; 0
    2e4c:	80 81       	ld	r24, Z
    2e4e:	48 2f       	mov	r20, r24
    2e50:	8b 81       	ldd	r24, Y+3	; 0x03
    2e52:	28 2f       	mov	r18, r24
    2e54:	30 e0       	ldi	r19, 0x00	; 0
    2e56:	81 e0       	ldi	r24, 0x01	; 1
    2e58:	90 e0       	ldi	r25, 0x00	; 0
    2e5a:	02 2e       	mov	r0, r18
    2e5c:	02 c0       	rjmp	.+4      	; 0x2e62 <MCAL_DIO_u8SetPinValue+0x5a>
    2e5e:	88 0f       	add	r24, r24
    2e60:	99 1f       	adc	r25, r25
    2e62:	0a 94       	dec	r0
    2e64:	e2 f7       	brpl	.-8      	; 0x2e5e <MCAL_DIO_u8SetPinValue+0x56>
    2e66:	84 2b       	or	r24, r20
    2e68:	8c 93       	st	X, r24
				Loc_u8Return_Value = E_OK;
    2e6a:	19 82       	std	Y+1, r1	; 0x01
    2e6c:	b0 c0       	rjmp	.+352    	; 0x2fce <MCAL_DIO_u8SetPinValue+0x1c6>
			} else if (Loc_u8PortID == PortB) {
    2e6e:	8a 81       	ldd	r24, Y+2	; 0x02
    2e70:	81 30       	cpi	r24, 0x01	; 1
    2e72:	a9 f4       	brne	.+42     	; 0x2e9e <MCAL_DIO_u8SetPinValue+0x96>
				SET_BIT(PORTB, Loc_u8PinID);
    2e74:	a8 e3       	ldi	r26, 0x38	; 56
    2e76:	b0 e0       	ldi	r27, 0x00	; 0
    2e78:	e8 e3       	ldi	r30, 0x38	; 56
    2e7a:	f0 e0       	ldi	r31, 0x00	; 0
    2e7c:	80 81       	ld	r24, Z
    2e7e:	48 2f       	mov	r20, r24
    2e80:	8b 81       	ldd	r24, Y+3	; 0x03
    2e82:	28 2f       	mov	r18, r24
    2e84:	30 e0       	ldi	r19, 0x00	; 0
    2e86:	81 e0       	ldi	r24, 0x01	; 1
    2e88:	90 e0       	ldi	r25, 0x00	; 0
    2e8a:	02 2e       	mov	r0, r18
    2e8c:	02 c0       	rjmp	.+4      	; 0x2e92 <MCAL_DIO_u8SetPinValue+0x8a>
    2e8e:	88 0f       	add	r24, r24
    2e90:	99 1f       	adc	r25, r25
    2e92:	0a 94       	dec	r0
    2e94:	e2 f7       	brpl	.-8      	; 0x2e8e <MCAL_DIO_u8SetPinValue+0x86>
    2e96:	84 2b       	or	r24, r20
    2e98:	8c 93       	st	X, r24
				Loc_u8Return_Value = E_OK;
    2e9a:	19 82       	std	Y+1, r1	; 0x01
    2e9c:	98 c0       	rjmp	.+304    	; 0x2fce <MCAL_DIO_u8SetPinValue+0x1c6>
			} else if (Loc_u8PortID == PortC) {
    2e9e:	8a 81       	ldd	r24, Y+2	; 0x02
    2ea0:	82 30       	cpi	r24, 0x02	; 2
    2ea2:	a9 f4       	brne	.+42     	; 0x2ece <MCAL_DIO_u8SetPinValue+0xc6>
				SET_BIT(PORTC, Loc_u8PinID);
    2ea4:	a5 e3       	ldi	r26, 0x35	; 53
    2ea6:	b0 e0       	ldi	r27, 0x00	; 0
    2ea8:	e5 e3       	ldi	r30, 0x35	; 53
    2eaa:	f0 e0       	ldi	r31, 0x00	; 0
    2eac:	80 81       	ld	r24, Z
    2eae:	48 2f       	mov	r20, r24
    2eb0:	8b 81       	ldd	r24, Y+3	; 0x03
    2eb2:	28 2f       	mov	r18, r24
    2eb4:	30 e0       	ldi	r19, 0x00	; 0
    2eb6:	81 e0       	ldi	r24, 0x01	; 1
    2eb8:	90 e0       	ldi	r25, 0x00	; 0
    2eba:	02 2e       	mov	r0, r18
    2ebc:	02 c0       	rjmp	.+4      	; 0x2ec2 <MCAL_DIO_u8SetPinValue+0xba>
    2ebe:	88 0f       	add	r24, r24
    2ec0:	99 1f       	adc	r25, r25
    2ec2:	0a 94       	dec	r0
    2ec4:	e2 f7       	brpl	.-8      	; 0x2ebe <MCAL_DIO_u8SetPinValue+0xb6>
    2ec6:	84 2b       	or	r24, r20
    2ec8:	8c 93       	st	X, r24
				Loc_u8Return_Value = E_OK;
    2eca:	19 82       	std	Y+1, r1	; 0x01
    2ecc:	80 c0       	rjmp	.+256    	; 0x2fce <MCAL_DIO_u8SetPinValue+0x1c6>
			} else if (Loc_u8PortID == PortD) {
    2ece:	8a 81       	ldd	r24, Y+2	; 0x02
    2ed0:	83 30       	cpi	r24, 0x03	; 3
    2ed2:	09 f0       	breq	.+2      	; 0x2ed6 <MCAL_DIO_u8SetPinValue+0xce>
    2ed4:	7c c0       	rjmp	.+248    	; 0x2fce <MCAL_DIO_u8SetPinValue+0x1c6>
				SET_BIT(PORTD, Loc_u8PinID);
    2ed6:	a2 e3       	ldi	r26, 0x32	; 50
    2ed8:	b0 e0       	ldi	r27, 0x00	; 0
    2eda:	e2 e3       	ldi	r30, 0x32	; 50
    2edc:	f0 e0       	ldi	r31, 0x00	; 0
    2ede:	80 81       	ld	r24, Z
    2ee0:	48 2f       	mov	r20, r24
    2ee2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ee4:	28 2f       	mov	r18, r24
    2ee6:	30 e0       	ldi	r19, 0x00	; 0
    2ee8:	81 e0       	ldi	r24, 0x01	; 1
    2eea:	90 e0       	ldi	r25, 0x00	; 0
    2eec:	02 2e       	mov	r0, r18
    2eee:	02 c0       	rjmp	.+4      	; 0x2ef4 <MCAL_DIO_u8SetPinValue+0xec>
    2ef0:	88 0f       	add	r24, r24
    2ef2:	99 1f       	adc	r25, r25
    2ef4:	0a 94       	dec	r0
    2ef6:	e2 f7       	brpl	.-8      	; 0x2ef0 <MCAL_DIO_u8SetPinValue+0xe8>
    2ef8:	84 2b       	or	r24, r20
    2efa:	8c 93       	st	X, r24
				Loc_u8Return_Value = E_OK;
    2efc:	19 82       	std	Y+1, r1	; 0x01
    2efe:	67 c0       	rjmp	.+206    	; 0x2fce <MCAL_DIO_u8SetPinValue+0x1c6>
			} else {
				//Do Nothing
			}
		} else if (Loc_u8PinValue == Pin_Low) {
    2f00:	8c 81       	ldd	r24, Y+4	; 0x04
    2f02:	88 23       	and	r24, r24
    2f04:	09 f0       	breq	.+2      	; 0x2f08 <MCAL_DIO_u8SetPinValue+0x100>
    2f06:	63 c0       	rjmp	.+198    	; 0x2fce <MCAL_DIO_u8SetPinValue+0x1c6>
			if (Loc_u8PortID == PortA) {
    2f08:	8a 81       	ldd	r24, Y+2	; 0x02
    2f0a:	88 23       	and	r24, r24
    2f0c:	b1 f4       	brne	.+44     	; 0x2f3a <MCAL_DIO_u8SetPinValue+0x132>
				CLR_BIT(PORTA, Loc_u8PinID);
    2f0e:	ab e3       	ldi	r26, 0x3B	; 59
    2f10:	b0 e0       	ldi	r27, 0x00	; 0
    2f12:	eb e3       	ldi	r30, 0x3B	; 59
    2f14:	f0 e0       	ldi	r31, 0x00	; 0
    2f16:	80 81       	ld	r24, Z
    2f18:	48 2f       	mov	r20, r24
    2f1a:	8b 81       	ldd	r24, Y+3	; 0x03
    2f1c:	28 2f       	mov	r18, r24
    2f1e:	30 e0       	ldi	r19, 0x00	; 0
    2f20:	81 e0       	ldi	r24, 0x01	; 1
    2f22:	90 e0       	ldi	r25, 0x00	; 0
    2f24:	02 2e       	mov	r0, r18
    2f26:	02 c0       	rjmp	.+4      	; 0x2f2c <MCAL_DIO_u8SetPinValue+0x124>
    2f28:	88 0f       	add	r24, r24
    2f2a:	99 1f       	adc	r25, r25
    2f2c:	0a 94       	dec	r0
    2f2e:	e2 f7       	brpl	.-8      	; 0x2f28 <MCAL_DIO_u8SetPinValue+0x120>
    2f30:	80 95       	com	r24
    2f32:	84 23       	and	r24, r20
    2f34:	8c 93       	st	X, r24
				Loc_u8Return_Value = E_OK;
    2f36:	19 82       	std	Y+1, r1	; 0x01
    2f38:	4a c0       	rjmp	.+148    	; 0x2fce <MCAL_DIO_u8SetPinValue+0x1c6>
			} else if (Loc_u8PortID == PortB) {
    2f3a:	8a 81       	ldd	r24, Y+2	; 0x02
    2f3c:	81 30       	cpi	r24, 0x01	; 1
    2f3e:	b1 f4       	brne	.+44     	; 0x2f6c <MCAL_DIO_u8SetPinValue+0x164>
				CLR_BIT(PORTB, Loc_u8PinID);
    2f40:	a8 e3       	ldi	r26, 0x38	; 56
    2f42:	b0 e0       	ldi	r27, 0x00	; 0
    2f44:	e8 e3       	ldi	r30, 0x38	; 56
    2f46:	f0 e0       	ldi	r31, 0x00	; 0
    2f48:	80 81       	ld	r24, Z
    2f4a:	48 2f       	mov	r20, r24
    2f4c:	8b 81       	ldd	r24, Y+3	; 0x03
    2f4e:	28 2f       	mov	r18, r24
    2f50:	30 e0       	ldi	r19, 0x00	; 0
    2f52:	81 e0       	ldi	r24, 0x01	; 1
    2f54:	90 e0       	ldi	r25, 0x00	; 0
    2f56:	02 2e       	mov	r0, r18
    2f58:	02 c0       	rjmp	.+4      	; 0x2f5e <MCAL_DIO_u8SetPinValue+0x156>
    2f5a:	88 0f       	add	r24, r24
    2f5c:	99 1f       	adc	r25, r25
    2f5e:	0a 94       	dec	r0
    2f60:	e2 f7       	brpl	.-8      	; 0x2f5a <MCAL_DIO_u8SetPinValue+0x152>
    2f62:	80 95       	com	r24
    2f64:	84 23       	and	r24, r20
    2f66:	8c 93       	st	X, r24
				Loc_u8Return_Value = E_OK;
    2f68:	19 82       	std	Y+1, r1	; 0x01
    2f6a:	31 c0       	rjmp	.+98     	; 0x2fce <MCAL_DIO_u8SetPinValue+0x1c6>
			} else if (Loc_u8PortID == PortC) {
    2f6c:	8a 81       	ldd	r24, Y+2	; 0x02
    2f6e:	82 30       	cpi	r24, 0x02	; 2
    2f70:	b1 f4       	brne	.+44     	; 0x2f9e <MCAL_DIO_u8SetPinValue+0x196>
				CLR_BIT(PORTC, Loc_u8PinID);
    2f72:	a5 e3       	ldi	r26, 0x35	; 53
    2f74:	b0 e0       	ldi	r27, 0x00	; 0
    2f76:	e5 e3       	ldi	r30, 0x35	; 53
    2f78:	f0 e0       	ldi	r31, 0x00	; 0
    2f7a:	80 81       	ld	r24, Z
    2f7c:	48 2f       	mov	r20, r24
    2f7e:	8b 81       	ldd	r24, Y+3	; 0x03
    2f80:	28 2f       	mov	r18, r24
    2f82:	30 e0       	ldi	r19, 0x00	; 0
    2f84:	81 e0       	ldi	r24, 0x01	; 1
    2f86:	90 e0       	ldi	r25, 0x00	; 0
    2f88:	02 2e       	mov	r0, r18
    2f8a:	02 c0       	rjmp	.+4      	; 0x2f90 <MCAL_DIO_u8SetPinValue+0x188>
    2f8c:	88 0f       	add	r24, r24
    2f8e:	99 1f       	adc	r25, r25
    2f90:	0a 94       	dec	r0
    2f92:	e2 f7       	brpl	.-8      	; 0x2f8c <MCAL_DIO_u8SetPinValue+0x184>
    2f94:	80 95       	com	r24
    2f96:	84 23       	and	r24, r20
    2f98:	8c 93       	st	X, r24
				Loc_u8Return_Value = E_OK;
    2f9a:	19 82       	std	Y+1, r1	; 0x01
    2f9c:	18 c0       	rjmp	.+48     	; 0x2fce <MCAL_DIO_u8SetPinValue+0x1c6>
			} else if (Loc_u8PortID == PortD) {
    2f9e:	8a 81       	ldd	r24, Y+2	; 0x02
    2fa0:	83 30       	cpi	r24, 0x03	; 3
    2fa2:	a9 f4       	brne	.+42     	; 0x2fce <MCAL_DIO_u8SetPinValue+0x1c6>
				CLR_BIT(PORTD, Loc_u8PinID);
    2fa4:	a2 e3       	ldi	r26, 0x32	; 50
    2fa6:	b0 e0       	ldi	r27, 0x00	; 0
    2fa8:	e2 e3       	ldi	r30, 0x32	; 50
    2faa:	f0 e0       	ldi	r31, 0x00	; 0
    2fac:	80 81       	ld	r24, Z
    2fae:	48 2f       	mov	r20, r24
    2fb0:	8b 81       	ldd	r24, Y+3	; 0x03
    2fb2:	28 2f       	mov	r18, r24
    2fb4:	30 e0       	ldi	r19, 0x00	; 0
    2fb6:	81 e0       	ldi	r24, 0x01	; 1
    2fb8:	90 e0       	ldi	r25, 0x00	; 0
    2fba:	02 2e       	mov	r0, r18
    2fbc:	02 c0       	rjmp	.+4      	; 0x2fc2 <MCAL_DIO_u8SetPinValue+0x1ba>
    2fbe:	88 0f       	add	r24, r24
    2fc0:	99 1f       	adc	r25, r25
    2fc2:	0a 94       	dec	r0
    2fc4:	e2 f7       	brpl	.-8      	; 0x2fbe <MCAL_DIO_u8SetPinValue+0x1b6>
    2fc6:	80 95       	com	r24
    2fc8:	84 23       	and	r24, r20
    2fca:	8c 93       	st	X, r24
				Loc_u8Return_Value = E_OK;
    2fcc:	19 82       	std	Y+1, r1	; 0x01
			//Do Nothing
		}
	} else {
		//Do Nothing
	}
	return Loc_u8Return_Value;
    2fce:	89 81       	ldd	r24, Y+1	; 0x01

}
    2fd0:	0f 90       	pop	r0
    2fd2:	0f 90       	pop	r0
    2fd4:	0f 90       	pop	r0
    2fd6:	0f 90       	pop	r0
    2fd8:	cf 91       	pop	r28
    2fda:	df 91       	pop	r29
    2fdc:	08 95       	ret

00002fde <MCAL_DIO_u8SGetPortValue>:

STD_Type MCAL_DIO_u8SGetPortValue(u8 Loc_u8PortID, u8* Loc_u8PortValue) {
    2fde:	df 93       	push	r29
    2fe0:	cf 93       	push	r28
    2fe2:	00 d0       	rcall	.+0      	; 0x2fe4 <MCAL_DIO_u8SGetPortValue+0x6>
    2fe4:	00 d0       	rcall	.+0      	; 0x2fe6 <MCAL_DIO_u8SGetPortValue+0x8>
    2fe6:	cd b7       	in	r28, 0x3d	; 61
    2fe8:	de b7       	in	r29, 0x3e	; 62
    2fea:	8a 83       	std	Y+2, r24	; 0x02
    2fec:	7c 83       	std	Y+4, r23	; 0x04
    2fee:	6b 83       	std	Y+3, r22	; 0x03
	u8 Loc_u8Return_Value = E_NOT_OK;
    2ff0:	81 e0       	ldi	r24, 0x01	; 1
    2ff2:	89 83       	std	Y+1, r24	; 0x01
	if (Loc_u8PortID <= PortD) {
    2ff4:	8a 81       	ldd	r24, Y+2	; 0x02
    2ff6:	84 30       	cpi	r24, 0x04	; 4
    2ff8:	58 f5       	brcc	.+86     	; 0x3050 <MCAL_DIO_u8SGetPortValue+0x72>
		if (Loc_u8PortID == PortA) {
    2ffa:	8a 81       	ldd	r24, Y+2	; 0x02
    2ffc:	88 23       	and	r24, r24
    2ffe:	41 f4       	brne	.+16     	; 0x3010 <MCAL_DIO_u8SGetPortValue+0x32>
			*Loc_u8PortValue = PORTA;
    3000:	eb e3       	ldi	r30, 0x3B	; 59
    3002:	f0 e0       	ldi	r31, 0x00	; 0
    3004:	80 81       	ld	r24, Z
    3006:	eb 81       	ldd	r30, Y+3	; 0x03
    3008:	fc 81       	ldd	r31, Y+4	; 0x04
    300a:	80 83       	st	Z, r24
			Loc_u8Return_Value = E_OK;
    300c:	19 82       	std	Y+1, r1	; 0x01
    300e:	20 c0       	rjmp	.+64     	; 0x3050 <MCAL_DIO_u8SGetPortValue+0x72>
		} else if (Loc_u8PortID == PortB) {
    3010:	8a 81       	ldd	r24, Y+2	; 0x02
    3012:	81 30       	cpi	r24, 0x01	; 1
    3014:	41 f4       	brne	.+16     	; 0x3026 <MCAL_DIO_u8SGetPortValue+0x48>
			*Loc_u8PortValue = PORTB;
    3016:	e8 e3       	ldi	r30, 0x38	; 56
    3018:	f0 e0       	ldi	r31, 0x00	; 0
    301a:	80 81       	ld	r24, Z
    301c:	eb 81       	ldd	r30, Y+3	; 0x03
    301e:	fc 81       	ldd	r31, Y+4	; 0x04
    3020:	80 83       	st	Z, r24
			Loc_u8Return_Value = E_OK;
    3022:	19 82       	std	Y+1, r1	; 0x01
    3024:	15 c0       	rjmp	.+42     	; 0x3050 <MCAL_DIO_u8SGetPortValue+0x72>
		} else if (Loc_u8PortID == PortC) {
    3026:	8a 81       	ldd	r24, Y+2	; 0x02
    3028:	82 30       	cpi	r24, 0x02	; 2
    302a:	41 f4       	brne	.+16     	; 0x303c <MCAL_DIO_u8SGetPortValue+0x5e>
			*Loc_u8PortValue = PORTC;
    302c:	e5 e3       	ldi	r30, 0x35	; 53
    302e:	f0 e0       	ldi	r31, 0x00	; 0
    3030:	80 81       	ld	r24, Z
    3032:	eb 81       	ldd	r30, Y+3	; 0x03
    3034:	fc 81       	ldd	r31, Y+4	; 0x04
    3036:	80 83       	st	Z, r24
			Loc_u8Return_Value = E_OK;
    3038:	19 82       	std	Y+1, r1	; 0x01
    303a:	0a c0       	rjmp	.+20     	; 0x3050 <MCAL_DIO_u8SGetPortValue+0x72>
		} else if (Loc_u8PortID == PortD) {
    303c:	8a 81       	ldd	r24, Y+2	; 0x02
    303e:	83 30       	cpi	r24, 0x03	; 3
    3040:	39 f4       	brne	.+14     	; 0x3050 <MCAL_DIO_u8SGetPortValue+0x72>
			*Loc_u8PortValue = PORTD;
    3042:	e2 e3       	ldi	r30, 0x32	; 50
    3044:	f0 e0       	ldi	r31, 0x00	; 0
    3046:	80 81       	ld	r24, Z
    3048:	eb 81       	ldd	r30, Y+3	; 0x03
    304a:	fc 81       	ldd	r31, Y+4	; 0x04
    304c:	80 83       	st	Z, r24
			Loc_u8Return_Value = E_OK;
    304e:	19 82       	std	Y+1, r1	; 0x01
			//Do Nothing
		}
	} else {
		//Do Nothing
	}
	return Loc_u8Return_Value;
    3050:	89 81       	ldd	r24, Y+1	; 0x01
}
    3052:	0f 90       	pop	r0
    3054:	0f 90       	pop	r0
    3056:	0f 90       	pop	r0
    3058:	0f 90       	pop	r0
    305a:	cf 91       	pop	r28
    305c:	df 91       	pop	r29
    305e:	08 95       	ret

00003060 <MCAL_DIO_u8GetPinValue>:

STD_Type MCAL_DIO_u8GetPinValue(u8 Loc_u8PortID, u8 Loc_u8PinID,
		u8* Loc_u8PinValue) {
    3060:	df 93       	push	r29
    3062:	cf 93       	push	r28
    3064:	00 d0       	rcall	.+0      	; 0x3066 <MCAL_DIO_u8GetPinValue+0x6>
    3066:	00 d0       	rcall	.+0      	; 0x3068 <MCAL_DIO_u8GetPinValue+0x8>
    3068:	0f 92       	push	r0
    306a:	cd b7       	in	r28, 0x3d	; 61
    306c:	de b7       	in	r29, 0x3e	; 62
    306e:	8a 83       	std	Y+2, r24	; 0x02
    3070:	6b 83       	std	Y+3, r22	; 0x03
    3072:	5d 83       	std	Y+5, r21	; 0x05
    3074:	4c 83       	std	Y+4, r20	; 0x04
	u8 Loc_u8Return_Value = E_NOT_OK;
    3076:	81 e0       	ldi	r24, 0x01	; 1
    3078:	89 83       	std	Y+1, r24	; 0x01
	if (Loc_u8PortID <= PortD && Loc_u8PinID <= Num_Of_Pins) {
    307a:	8a 81       	ldd	r24, Y+2	; 0x02
    307c:	84 30       	cpi	r24, 0x04	; 4
    307e:	08 f0       	brcs	.+2      	; 0x3082 <MCAL_DIO_u8GetPinValue+0x22>
    3080:	63 c0       	rjmp	.+198    	; 0x3148 <MCAL_DIO_u8GetPinValue+0xe8>
    3082:	8b 81       	ldd	r24, Y+3	; 0x03
    3084:	88 30       	cpi	r24, 0x08	; 8
    3086:	08 f0       	brcs	.+2      	; 0x308a <MCAL_DIO_u8GetPinValue+0x2a>
    3088:	5f c0       	rjmp	.+190    	; 0x3148 <MCAL_DIO_u8GetPinValue+0xe8>
		if (Loc_u8PortID == PortA) {
    308a:	8a 81       	ldd	r24, Y+2	; 0x02
    308c:	88 23       	and	r24, r24
    308e:	a9 f4       	brne	.+42     	; 0x30ba <MCAL_DIO_u8GetPinValue+0x5a>
			*Loc_u8PinValue = GET_BIT(PINA, Loc_u8PinID);
    3090:	e9 e3       	ldi	r30, 0x39	; 57
    3092:	f0 e0       	ldi	r31, 0x00	; 0
    3094:	80 81       	ld	r24, Z
    3096:	28 2f       	mov	r18, r24
    3098:	30 e0       	ldi	r19, 0x00	; 0
    309a:	8b 81       	ldd	r24, Y+3	; 0x03
    309c:	88 2f       	mov	r24, r24
    309e:	90 e0       	ldi	r25, 0x00	; 0
    30a0:	a9 01       	movw	r20, r18
    30a2:	02 c0       	rjmp	.+4      	; 0x30a8 <MCAL_DIO_u8GetPinValue+0x48>
    30a4:	55 95       	asr	r21
    30a6:	47 95       	ror	r20
    30a8:	8a 95       	dec	r24
    30aa:	e2 f7       	brpl	.-8      	; 0x30a4 <MCAL_DIO_u8GetPinValue+0x44>
    30ac:	ca 01       	movw	r24, r20
    30ae:	81 70       	andi	r24, 0x01	; 1
    30b0:	ec 81       	ldd	r30, Y+4	; 0x04
    30b2:	fd 81       	ldd	r31, Y+5	; 0x05
    30b4:	80 83       	st	Z, r24
			Loc_u8Return_Value = E_OK;
    30b6:	19 82       	std	Y+1, r1	; 0x01
    30b8:	47 c0       	rjmp	.+142    	; 0x3148 <MCAL_DIO_u8GetPinValue+0xe8>
		} else if (Loc_u8PortID == PortB) {
    30ba:	8a 81       	ldd	r24, Y+2	; 0x02
    30bc:	81 30       	cpi	r24, 0x01	; 1
    30be:	a9 f4       	brne	.+42     	; 0x30ea <MCAL_DIO_u8GetPinValue+0x8a>
			*Loc_u8PinValue = GET_BIT(PINB, Loc_u8PinID);
    30c0:	e6 e3       	ldi	r30, 0x36	; 54
    30c2:	f0 e0       	ldi	r31, 0x00	; 0
    30c4:	80 81       	ld	r24, Z
    30c6:	28 2f       	mov	r18, r24
    30c8:	30 e0       	ldi	r19, 0x00	; 0
    30ca:	8b 81       	ldd	r24, Y+3	; 0x03
    30cc:	88 2f       	mov	r24, r24
    30ce:	90 e0       	ldi	r25, 0x00	; 0
    30d0:	a9 01       	movw	r20, r18
    30d2:	02 c0       	rjmp	.+4      	; 0x30d8 <MCAL_DIO_u8GetPinValue+0x78>
    30d4:	55 95       	asr	r21
    30d6:	47 95       	ror	r20
    30d8:	8a 95       	dec	r24
    30da:	e2 f7       	brpl	.-8      	; 0x30d4 <MCAL_DIO_u8GetPinValue+0x74>
    30dc:	ca 01       	movw	r24, r20
    30de:	81 70       	andi	r24, 0x01	; 1
    30e0:	ec 81       	ldd	r30, Y+4	; 0x04
    30e2:	fd 81       	ldd	r31, Y+5	; 0x05
    30e4:	80 83       	st	Z, r24
			Loc_u8Return_Value = E_OK;
    30e6:	19 82       	std	Y+1, r1	; 0x01
    30e8:	2f c0       	rjmp	.+94     	; 0x3148 <MCAL_DIO_u8GetPinValue+0xe8>
		} else if (Loc_u8PortID == PortC) {
    30ea:	8a 81       	ldd	r24, Y+2	; 0x02
    30ec:	82 30       	cpi	r24, 0x02	; 2
    30ee:	a9 f4       	brne	.+42     	; 0x311a <MCAL_DIO_u8GetPinValue+0xba>
			*Loc_u8PinValue = GET_BIT(PINC, Loc_u8PinID);
    30f0:	e3 e3       	ldi	r30, 0x33	; 51
    30f2:	f0 e0       	ldi	r31, 0x00	; 0
    30f4:	80 81       	ld	r24, Z
    30f6:	28 2f       	mov	r18, r24
    30f8:	30 e0       	ldi	r19, 0x00	; 0
    30fa:	8b 81       	ldd	r24, Y+3	; 0x03
    30fc:	88 2f       	mov	r24, r24
    30fe:	90 e0       	ldi	r25, 0x00	; 0
    3100:	a9 01       	movw	r20, r18
    3102:	02 c0       	rjmp	.+4      	; 0x3108 <MCAL_DIO_u8GetPinValue+0xa8>
    3104:	55 95       	asr	r21
    3106:	47 95       	ror	r20
    3108:	8a 95       	dec	r24
    310a:	e2 f7       	brpl	.-8      	; 0x3104 <MCAL_DIO_u8GetPinValue+0xa4>
    310c:	ca 01       	movw	r24, r20
    310e:	81 70       	andi	r24, 0x01	; 1
    3110:	ec 81       	ldd	r30, Y+4	; 0x04
    3112:	fd 81       	ldd	r31, Y+5	; 0x05
    3114:	80 83       	st	Z, r24
			Loc_u8Return_Value = E_OK;
    3116:	19 82       	std	Y+1, r1	; 0x01
    3118:	17 c0       	rjmp	.+46     	; 0x3148 <MCAL_DIO_u8GetPinValue+0xe8>
		} else if (Loc_u8PortID == PortD) {
    311a:	8a 81       	ldd	r24, Y+2	; 0x02
    311c:	83 30       	cpi	r24, 0x03	; 3
    311e:	a1 f4       	brne	.+40     	; 0x3148 <MCAL_DIO_u8GetPinValue+0xe8>
			*Loc_u8PinValue = GET_BIT(PIND, Loc_u8PinID);
    3120:	e0 e3       	ldi	r30, 0x30	; 48
    3122:	f0 e0       	ldi	r31, 0x00	; 0
    3124:	80 81       	ld	r24, Z
    3126:	28 2f       	mov	r18, r24
    3128:	30 e0       	ldi	r19, 0x00	; 0
    312a:	8b 81       	ldd	r24, Y+3	; 0x03
    312c:	88 2f       	mov	r24, r24
    312e:	90 e0       	ldi	r25, 0x00	; 0
    3130:	a9 01       	movw	r20, r18
    3132:	02 c0       	rjmp	.+4      	; 0x3138 <MCAL_DIO_u8GetPinValue+0xd8>
    3134:	55 95       	asr	r21
    3136:	47 95       	ror	r20
    3138:	8a 95       	dec	r24
    313a:	e2 f7       	brpl	.-8      	; 0x3134 <MCAL_DIO_u8GetPinValue+0xd4>
    313c:	ca 01       	movw	r24, r20
    313e:	81 70       	andi	r24, 0x01	; 1
    3140:	ec 81       	ldd	r30, Y+4	; 0x04
    3142:	fd 81       	ldd	r31, Y+5	; 0x05
    3144:	80 83       	st	Z, r24
			Loc_u8Return_Value = E_OK;
    3146:	19 82       	std	Y+1, r1	; 0x01
			//Do Nothing
		}
	} else {
		//Do Nothing
	}
	return Loc_u8Return_Value;
    3148:	89 81       	ldd	r24, Y+1	; 0x01
}
    314a:	0f 90       	pop	r0
    314c:	0f 90       	pop	r0
    314e:	0f 90       	pop	r0
    3150:	0f 90       	pop	r0
    3152:	0f 90       	pop	r0
    3154:	cf 91       	pop	r28
    3156:	df 91       	pop	r29
    3158:	08 95       	ret

0000315a <MCAL_DIO_u8TogglePortValue>:

STD_Type MCAL_DIO_u8TogglePortValue(u8 Loc_u8PortID) {
    315a:	df 93       	push	r29
    315c:	cf 93       	push	r28
    315e:	00 d0       	rcall	.+0      	; 0x3160 <MCAL_DIO_u8TogglePortValue+0x6>
    3160:	cd b7       	in	r28, 0x3d	; 61
    3162:	de b7       	in	r29, 0x3e	; 62
    3164:	8a 83       	std	Y+2, r24	; 0x02
	u8 Loc_u8Return_Value = E_NOT_OK;
    3166:	81 e0       	ldi	r24, 0x01	; 1
    3168:	89 83       	std	Y+1, r24	; 0x01
	if (Loc_u8PortID <= PortD) {
    316a:	8a 81       	ldd	r24, Y+2	; 0x02
    316c:	84 30       	cpi	r24, 0x04	; 4
    316e:	78 f5       	brcc	.+94     	; 0x31ce <MCAL_DIO_u8TogglePortValue+0x74>
		if (Loc_u8PortID == PortA) {
    3170:	8a 81       	ldd	r24, Y+2	; 0x02
    3172:	88 23       	and	r24, r24
    3174:	49 f4       	brne	.+18     	; 0x3188 <MCAL_DIO_u8TogglePortValue+0x2e>
			PORTA = ~PORTA;
    3176:	ab e3       	ldi	r26, 0x3B	; 59
    3178:	b0 e0       	ldi	r27, 0x00	; 0
    317a:	eb e3       	ldi	r30, 0x3B	; 59
    317c:	f0 e0       	ldi	r31, 0x00	; 0
    317e:	80 81       	ld	r24, Z
    3180:	80 95       	com	r24
    3182:	8c 93       	st	X, r24
			Loc_u8Return_Value = E_OK;
    3184:	19 82       	std	Y+1, r1	; 0x01
    3186:	23 c0       	rjmp	.+70     	; 0x31ce <MCAL_DIO_u8TogglePortValue+0x74>
		} else if (Loc_u8PortID == PortB) {
    3188:	8a 81       	ldd	r24, Y+2	; 0x02
    318a:	81 30       	cpi	r24, 0x01	; 1
    318c:	49 f4       	brne	.+18     	; 0x31a0 <MCAL_DIO_u8TogglePortValue+0x46>
			PORTB = ~PORTB;
    318e:	a8 e3       	ldi	r26, 0x38	; 56
    3190:	b0 e0       	ldi	r27, 0x00	; 0
    3192:	e8 e3       	ldi	r30, 0x38	; 56
    3194:	f0 e0       	ldi	r31, 0x00	; 0
    3196:	80 81       	ld	r24, Z
    3198:	80 95       	com	r24
    319a:	8c 93       	st	X, r24
			Loc_u8Return_Value = E_OK;
    319c:	19 82       	std	Y+1, r1	; 0x01
    319e:	17 c0       	rjmp	.+46     	; 0x31ce <MCAL_DIO_u8TogglePortValue+0x74>
		} else if (Loc_u8PortID == PortC) {
    31a0:	8a 81       	ldd	r24, Y+2	; 0x02
    31a2:	82 30       	cpi	r24, 0x02	; 2
    31a4:	49 f4       	brne	.+18     	; 0x31b8 <MCAL_DIO_u8TogglePortValue+0x5e>
			PORTC = ~PORTC;
    31a6:	a5 e3       	ldi	r26, 0x35	; 53
    31a8:	b0 e0       	ldi	r27, 0x00	; 0
    31aa:	e5 e3       	ldi	r30, 0x35	; 53
    31ac:	f0 e0       	ldi	r31, 0x00	; 0
    31ae:	80 81       	ld	r24, Z
    31b0:	80 95       	com	r24
    31b2:	8c 93       	st	X, r24
			Loc_u8Return_Value = E_OK;
    31b4:	19 82       	std	Y+1, r1	; 0x01
    31b6:	0b c0       	rjmp	.+22     	; 0x31ce <MCAL_DIO_u8TogglePortValue+0x74>
		} else if (Loc_u8PortID == PortD) {
    31b8:	8a 81       	ldd	r24, Y+2	; 0x02
    31ba:	83 30       	cpi	r24, 0x03	; 3
    31bc:	41 f4       	brne	.+16     	; 0x31ce <MCAL_DIO_u8TogglePortValue+0x74>
			PORTD = ~PORTD;
    31be:	a2 e3       	ldi	r26, 0x32	; 50
    31c0:	b0 e0       	ldi	r27, 0x00	; 0
    31c2:	e2 e3       	ldi	r30, 0x32	; 50
    31c4:	f0 e0       	ldi	r31, 0x00	; 0
    31c6:	80 81       	ld	r24, Z
    31c8:	80 95       	com	r24
    31ca:	8c 93       	st	X, r24
			Loc_u8Return_Value = E_OK;
    31cc:	19 82       	std	Y+1, r1	; 0x01
			//Do Nothing
		}
	} else {
		//Do Nothing
	}
	return Loc_u8Return_Value;
    31ce:	89 81       	ldd	r24, Y+1	; 0x01
}
    31d0:	0f 90       	pop	r0
    31d2:	0f 90       	pop	r0
    31d4:	cf 91       	pop	r28
    31d6:	df 91       	pop	r29
    31d8:	08 95       	ret

000031da <MCAL_DIO_u8TogglePinValue>:

STD_Type MCAL_DIO_u8TogglePinValue(u8 Loc_u8PortID, u8 Loc_u8PinID) {
    31da:	df 93       	push	r29
    31dc:	cf 93       	push	r28
    31de:	00 d0       	rcall	.+0      	; 0x31e0 <MCAL_DIO_u8TogglePinValue+0x6>
    31e0:	0f 92       	push	r0
    31e2:	cd b7       	in	r28, 0x3d	; 61
    31e4:	de b7       	in	r29, 0x3e	; 62
    31e6:	8a 83       	std	Y+2, r24	; 0x02
    31e8:	6b 83       	std	Y+3, r22	; 0x03
	u8 Loc_u8Return_Value = E_NOT_OK;
    31ea:	81 e0       	ldi	r24, 0x01	; 1
    31ec:	89 83       	std	Y+1, r24	; 0x01
	if (Loc_u8PortID <= PortD && Loc_u8PinID <= Num_Of_Pins) {
    31ee:	8a 81       	ldd	r24, Y+2	; 0x02
    31f0:	84 30       	cpi	r24, 0x04	; 4
    31f2:	08 f0       	brcs	.+2      	; 0x31f6 <MCAL_DIO_u8TogglePinValue+0x1c>
    31f4:	63 c0       	rjmp	.+198    	; 0x32bc <MCAL_DIO_u8TogglePinValue+0xe2>
    31f6:	8b 81       	ldd	r24, Y+3	; 0x03
    31f8:	88 30       	cpi	r24, 0x08	; 8
    31fa:	08 f0       	brcs	.+2      	; 0x31fe <MCAL_DIO_u8TogglePinValue+0x24>
    31fc:	5f c0       	rjmp	.+190    	; 0x32bc <MCAL_DIO_u8TogglePinValue+0xe2>
		if (Loc_u8PortID == PortA) {
    31fe:	8a 81       	ldd	r24, Y+2	; 0x02
    3200:	88 23       	and	r24, r24
    3202:	a9 f4       	brne	.+42     	; 0x322e <MCAL_DIO_u8TogglePinValue+0x54>
			TOGGLE_BIT(PORTA, Loc_u8PinID);
    3204:	ab e3       	ldi	r26, 0x3B	; 59
    3206:	b0 e0       	ldi	r27, 0x00	; 0
    3208:	eb e3       	ldi	r30, 0x3B	; 59
    320a:	f0 e0       	ldi	r31, 0x00	; 0
    320c:	80 81       	ld	r24, Z
    320e:	48 2f       	mov	r20, r24
    3210:	8b 81       	ldd	r24, Y+3	; 0x03
    3212:	28 2f       	mov	r18, r24
    3214:	30 e0       	ldi	r19, 0x00	; 0
    3216:	81 e0       	ldi	r24, 0x01	; 1
    3218:	90 e0       	ldi	r25, 0x00	; 0
    321a:	02 2e       	mov	r0, r18
    321c:	02 c0       	rjmp	.+4      	; 0x3222 <MCAL_DIO_u8TogglePinValue+0x48>
    321e:	88 0f       	add	r24, r24
    3220:	99 1f       	adc	r25, r25
    3222:	0a 94       	dec	r0
    3224:	e2 f7       	brpl	.-8      	; 0x321e <MCAL_DIO_u8TogglePinValue+0x44>
    3226:	84 27       	eor	r24, r20
    3228:	8c 93       	st	X, r24
			Loc_u8Return_Value = E_OK;
    322a:	19 82       	std	Y+1, r1	; 0x01
    322c:	47 c0       	rjmp	.+142    	; 0x32bc <MCAL_DIO_u8TogglePinValue+0xe2>
		} else if (Loc_u8PortID == PortB) {
    322e:	8a 81       	ldd	r24, Y+2	; 0x02
    3230:	81 30       	cpi	r24, 0x01	; 1
    3232:	a9 f4       	brne	.+42     	; 0x325e <MCAL_DIO_u8TogglePinValue+0x84>
			TOGGLE_BIT(PORTB, Loc_u8PinID);
    3234:	a8 e3       	ldi	r26, 0x38	; 56
    3236:	b0 e0       	ldi	r27, 0x00	; 0
    3238:	e8 e3       	ldi	r30, 0x38	; 56
    323a:	f0 e0       	ldi	r31, 0x00	; 0
    323c:	80 81       	ld	r24, Z
    323e:	48 2f       	mov	r20, r24
    3240:	8b 81       	ldd	r24, Y+3	; 0x03
    3242:	28 2f       	mov	r18, r24
    3244:	30 e0       	ldi	r19, 0x00	; 0
    3246:	81 e0       	ldi	r24, 0x01	; 1
    3248:	90 e0       	ldi	r25, 0x00	; 0
    324a:	02 2e       	mov	r0, r18
    324c:	02 c0       	rjmp	.+4      	; 0x3252 <MCAL_DIO_u8TogglePinValue+0x78>
    324e:	88 0f       	add	r24, r24
    3250:	99 1f       	adc	r25, r25
    3252:	0a 94       	dec	r0
    3254:	e2 f7       	brpl	.-8      	; 0x324e <MCAL_DIO_u8TogglePinValue+0x74>
    3256:	84 27       	eor	r24, r20
    3258:	8c 93       	st	X, r24
			Loc_u8Return_Value = E_OK;
    325a:	19 82       	std	Y+1, r1	; 0x01
    325c:	2f c0       	rjmp	.+94     	; 0x32bc <MCAL_DIO_u8TogglePinValue+0xe2>
		} else if (Loc_u8PortID == PortC) {
    325e:	8a 81       	ldd	r24, Y+2	; 0x02
    3260:	82 30       	cpi	r24, 0x02	; 2
    3262:	a9 f4       	brne	.+42     	; 0x328e <MCAL_DIO_u8TogglePinValue+0xb4>
			TOGGLE_BIT(PORTC, Loc_u8PinID);
    3264:	a5 e3       	ldi	r26, 0x35	; 53
    3266:	b0 e0       	ldi	r27, 0x00	; 0
    3268:	e5 e3       	ldi	r30, 0x35	; 53
    326a:	f0 e0       	ldi	r31, 0x00	; 0
    326c:	80 81       	ld	r24, Z
    326e:	48 2f       	mov	r20, r24
    3270:	8b 81       	ldd	r24, Y+3	; 0x03
    3272:	28 2f       	mov	r18, r24
    3274:	30 e0       	ldi	r19, 0x00	; 0
    3276:	81 e0       	ldi	r24, 0x01	; 1
    3278:	90 e0       	ldi	r25, 0x00	; 0
    327a:	02 2e       	mov	r0, r18
    327c:	02 c0       	rjmp	.+4      	; 0x3282 <MCAL_DIO_u8TogglePinValue+0xa8>
    327e:	88 0f       	add	r24, r24
    3280:	99 1f       	adc	r25, r25
    3282:	0a 94       	dec	r0
    3284:	e2 f7       	brpl	.-8      	; 0x327e <MCAL_DIO_u8TogglePinValue+0xa4>
    3286:	84 27       	eor	r24, r20
    3288:	8c 93       	st	X, r24
			Loc_u8Return_Value = E_OK;
    328a:	19 82       	std	Y+1, r1	; 0x01
    328c:	17 c0       	rjmp	.+46     	; 0x32bc <MCAL_DIO_u8TogglePinValue+0xe2>
		} else if (Loc_u8PortID == PortD) {
    328e:	8a 81       	ldd	r24, Y+2	; 0x02
    3290:	83 30       	cpi	r24, 0x03	; 3
    3292:	a1 f4       	brne	.+40     	; 0x32bc <MCAL_DIO_u8TogglePinValue+0xe2>
			TOGGLE_BIT(PORTD, Loc_u8PinID);
    3294:	a2 e3       	ldi	r26, 0x32	; 50
    3296:	b0 e0       	ldi	r27, 0x00	; 0
    3298:	e2 e3       	ldi	r30, 0x32	; 50
    329a:	f0 e0       	ldi	r31, 0x00	; 0
    329c:	80 81       	ld	r24, Z
    329e:	48 2f       	mov	r20, r24
    32a0:	8b 81       	ldd	r24, Y+3	; 0x03
    32a2:	28 2f       	mov	r18, r24
    32a4:	30 e0       	ldi	r19, 0x00	; 0
    32a6:	81 e0       	ldi	r24, 0x01	; 1
    32a8:	90 e0       	ldi	r25, 0x00	; 0
    32aa:	02 2e       	mov	r0, r18
    32ac:	02 c0       	rjmp	.+4      	; 0x32b2 <MCAL_DIO_u8TogglePinValue+0xd8>
    32ae:	88 0f       	add	r24, r24
    32b0:	99 1f       	adc	r25, r25
    32b2:	0a 94       	dec	r0
    32b4:	e2 f7       	brpl	.-8      	; 0x32ae <MCAL_DIO_u8TogglePinValue+0xd4>
    32b6:	84 27       	eor	r24, r20
    32b8:	8c 93       	st	X, r24
			Loc_u8Return_Value = E_OK;
    32ba:	19 82       	std	Y+1, r1	; 0x01
			//Do Nothing
		}
	} else {
		//Do Nothing
	}
	return Loc_u8Return_Value;
    32bc:	89 81       	ldd	r24, Y+1	; 0x01
}
    32be:	0f 90       	pop	r0
    32c0:	0f 90       	pop	r0
    32c2:	0f 90       	pop	r0
    32c4:	cf 91       	pop	r28
    32c6:	df 91       	pop	r29
    32c8:	08 95       	ret

000032ca <HAL_Ultrasonic_Sensor_voidInit>:
volatile f32 Glob_f32Distance = NUM0;
volatile u16 Glob_u16StartTime = NUM0, Glob_u16EndTime = NUM0, Glob_u16TimeDiff = NUM0;
volatile u16 Glob_u16OvfCounterStart, Glob_16OvfCounterEnd;
extern volatile u16 Glob_u16OvfCounter;

void HAL_Ultrasonic_Sensor_voidInit(void) {
    32ca:	df 93       	push	r29
    32cc:	cf 93       	push	r28
    32ce:	cd b7       	in	r28, 0x3d	; 61
    32d0:	de b7       	in	r29, 0x3e	; 62
	MCAL_DIO_u8SetPinDirection(ECHO_PORT, ECHO_PIN, Pin_Low);      //
    32d2:	83 e0       	ldi	r24, 0x03	; 3
    32d4:	62 e0       	ldi	r22, 0x02	; 2
    32d6:	40 e0       	ldi	r20, 0x00	; 0
    32d8:	0e 94 96 15 	call	0x2b2c	; 0x2b2c <MCAL_DIO_u8SetPinDirection>
	MCAL_DIO_u8SetPinDirection(TRIG_PORT, TRIG_PIN, Pin_High);  //  trigger
    32dc:	83 e0       	ldi	r24, 0x03	; 3
    32de:	66 e0       	ldi	r22, 0x06	; 6
    32e0:	41 e0       	ldi	r20, 0x01	; 1
    32e2:	0e 94 96 15 	call	0x2b2c	; 0x2b2c <MCAL_DIO_u8SetPinDirection>
	MCAL_Interrupt_EXIT_CallBack_0(HAL_Ultrasonic_Sensor_voidInterrupt); // external interrupt call back
    32e6:	8d ef       	ldi	r24, 0xFD	; 253
    32e8:	9a e1       	ldi	r25, 0x1A	; 26
    32ea:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <MCAL_Interrupt_EXIT_CallBack_0>
	SET_BIT(SREG,Pin7);
    32ee:	af e5       	ldi	r26, 0x5F	; 95
    32f0:	b0 e0       	ldi	r27, 0x00	; 0
    32f2:	ef e5       	ldi	r30, 0x5F	; 95
    32f4:	f0 e0       	ldi	r31, 0x00	; 0
    32f6:	80 81       	ld	r24, Z
    32f8:	80 68       	ori	r24, 0x80	; 128
    32fa:	8c 93       	st	X, r24
	MCAL_Timer0_Init(Normal_Mode,Prescaller_64,'\0');
    32fc:	80 e0       	ldi	r24, 0x00	; 0
    32fe:	63 e0       	ldi	r22, 0x03	; 3
    3300:	40 e0       	ldi	r20, 0x00	; 0
    3302:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <MCAL_Timer0_Init>
	MCAL_Timer0_SetPreloadValue(113);
    3306:	81 e7       	ldi	r24, 0x71	; 113
    3308:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <MCAL_Timer0_SetPreloadValue>
}
    330c:	cf 91       	pop	r28
    330e:	df 91       	pop	r29
    3310:	08 95       	ret

00003312 <HAL_Ultrasonic_Sensor_voidTrigger>:

void HAL_Ultrasonic_Sensor_voidTrigger(void) {
    3312:	df 93       	push	r29
    3314:	cf 93       	push	r28
    3316:	cd b7       	in	r28, 0x3d	; 61
    3318:	de b7       	in	r29, 0x3e	; 62
    331a:	68 97       	sbiw	r28, 0x18	; 24
    331c:	0f b6       	in	r0, 0x3f	; 63
    331e:	f8 94       	cli
    3320:	de bf       	out	0x3e, r29	; 62
    3322:	0f be       	out	0x3f, r0	; 63
    3324:	cd bf       	out	0x3d, r28	; 61
	MCAL_DIO_u8SetPinValue(TRIG_PORT, TRIG_PIN, Pin_High);    // high
    3326:	83 e0       	ldi	r24, 0x03	; 3
    3328:	66 e0       	ldi	r22, 0x06	; 6
    332a:	41 e0       	ldi	r20, 0x01	; 1
    332c:	0e 94 04 17 	call	0x2e08	; 0x2e08 <MCAL_DIO_u8SetPinValue>
    3330:	80 e0       	ldi	r24, 0x00	; 0
    3332:	90 e0       	ldi	r25, 0x00	; 0
    3334:	a0 e2       	ldi	r26, 0x20	; 32
    3336:	b1 e4       	ldi	r27, 0x41	; 65
    3338:	8d 8b       	std	Y+21, r24	; 0x15
    333a:	9e 8b       	std	Y+22, r25	; 0x16
    333c:	af 8b       	std	Y+23, r26	; 0x17
    333e:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3340:	6d 89       	ldd	r22, Y+21	; 0x15
    3342:	7e 89       	ldd	r23, Y+22	; 0x16
    3344:	8f 89       	ldd	r24, Y+23	; 0x17
    3346:	98 8d       	ldd	r25, Y+24	; 0x18
    3348:	2b ea       	ldi	r18, 0xAB	; 171
    334a:	3a ea       	ldi	r19, 0xAA	; 170
    334c:	4a ea       	ldi	r20, 0xAA	; 170
    334e:	50 e4       	ldi	r21, 0x40	; 64
    3350:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3354:	dc 01       	movw	r26, r24
    3356:	cb 01       	movw	r24, r22
    3358:	89 8b       	std	Y+17, r24	; 0x11
    335a:	9a 8b       	std	Y+18, r25	; 0x12
    335c:	ab 8b       	std	Y+19, r26	; 0x13
    335e:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    3360:	69 89       	ldd	r22, Y+17	; 0x11
    3362:	7a 89       	ldd	r23, Y+18	; 0x12
    3364:	8b 89       	ldd	r24, Y+19	; 0x13
    3366:	9c 89       	ldd	r25, Y+20	; 0x14
    3368:	20 e0       	ldi	r18, 0x00	; 0
    336a:	30 e0       	ldi	r19, 0x00	; 0
    336c:	40 e8       	ldi	r20, 0x80	; 128
    336e:	5f e3       	ldi	r21, 0x3F	; 63
    3370:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3374:	88 23       	and	r24, r24
    3376:	1c f4       	brge	.+6      	; 0x337e <HAL_Ultrasonic_Sensor_voidTrigger+0x6c>
		__ticks = 1;
    3378:	81 e0       	ldi	r24, 0x01	; 1
    337a:	88 8b       	std	Y+16, r24	; 0x10
    337c:	91 c0       	rjmp	.+290    	; 0x34a0 <HAL_Ultrasonic_Sensor_voidTrigger+0x18e>
	else if (__tmp > 255)
    337e:	69 89       	ldd	r22, Y+17	; 0x11
    3380:	7a 89       	ldd	r23, Y+18	; 0x12
    3382:	8b 89       	ldd	r24, Y+19	; 0x13
    3384:	9c 89       	ldd	r25, Y+20	; 0x14
    3386:	20 e0       	ldi	r18, 0x00	; 0
    3388:	30 e0       	ldi	r19, 0x00	; 0
    338a:	4f e7       	ldi	r20, 0x7F	; 127
    338c:	53 e4       	ldi	r21, 0x43	; 67
    338e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3392:	18 16       	cp	r1, r24
    3394:	0c f0       	brlt	.+2      	; 0x3398 <HAL_Ultrasonic_Sensor_voidTrigger+0x86>
    3396:	7b c0       	rjmp	.+246    	; 0x348e <HAL_Ultrasonic_Sensor_voidTrigger+0x17c>
	{
		_delay_ms(__us / 1000.0);
    3398:	6d 89       	ldd	r22, Y+21	; 0x15
    339a:	7e 89       	ldd	r23, Y+22	; 0x16
    339c:	8f 89       	ldd	r24, Y+23	; 0x17
    339e:	98 8d       	ldd	r25, Y+24	; 0x18
    33a0:	20 e0       	ldi	r18, 0x00	; 0
    33a2:	30 e0       	ldi	r19, 0x00	; 0
    33a4:	4a e7       	ldi	r20, 0x7A	; 122
    33a6:	54 e4       	ldi	r21, 0x44	; 68
    33a8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    33ac:	dc 01       	movw	r26, r24
    33ae:	cb 01       	movw	r24, r22
    33b0:	8c 87       	std	Y+12, r24	; 0x0c
    33b2:	9d 87       	std	Y+13, r25	; 0x0d
    33b4:	ae 87       	std	Y+14, r26	; 0x0e
    33b6:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33b8:	6c 85       	ldd	r22, Y+12	; 0x0c
    33ba:	7d 85       	ldd	r23, Y+13	; 0x0d
    33bc:	8e 85       	ldd	r24, Y+14	; 0x0e
    33be:	9f 85       	ldd	r25, Y+15	; 0x0f
    33c0:	20 e0       	ldi	r18, 0x00	; 0
    33c2:	30 e0       	ldi	r19, 0x00	; 0
    33c4:	4a e7       	ldi	r20, 0x7A	; 122
    33c6:	55 e4       	ldi	r21, 0x45	; 69
    33c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33cc:	dc 01       	movw	r26, r24
    33ce:	cb 01       	movw	r24, r22
    33d0:	88 87       	std	Y+8, r24	; 0x08
    33d2:	99 87       	std	Y+9, r25	; 0x09
    33d4:	aa 87       	std	Y+10, r26	; 0x0a
    33d6:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    33d8:	68 85       	ldd	r22, Y+8	; 0x08
    33da:	79 85       	ldd	r23, Y+9	; 0x09
    33dc:	8a 85       	ldd	r24, Y+10	; 0x0a
    33de:	9b 85       	ldd	r25, Y+11	; 0x0b
    33e0:	20 e0       	ldi	r18, 0x00	; 0
    33e2:	30 e0       	ldi	r19, 0x00	; 0
    33e4:	40 e8       	ldi	r20, 0x80	; 128
    33e6:	5f e3       	ldi	r21, 0x3F	; 63
    33e8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    33ec:	88 23       	and	r24, r24
    33ee:	2c f4       	brge	.+10     	; 0x33fa <HAL_Ultrasonic_Sensor_voidTrigger+0xe8>
		__ticks = 1;
    33f0:	81 e0       	ldi	r24, 0x01	; 1
    33f2:	90 e0       	ldi	r25, 0x00	; 0
    33f4:	9f 83       	std	Y+7, r25	; 0x07
    33f6:	8e 83       	std	Y+6, r24	; 0x06
    33f8:	3f c0       	rjmp	.+126    	; 0x3478 <HAL_Ultrasonic_Sensor_voidTrigger+0x166>
	else if (__tmp > 65535)
    33fa:	68 85       	ldd	r22, Y+8	; 0x08
    33fc:	79 85       	ldd	r23, Y+9	; 0x09
    33fe:	8a 85       	ldd	r24, Y+10	; 0x0a
    3400:	9b 85       	ldd	r25, Y+11	; 0x0b
    3402:	20 e0       	ldi	r18, 0x00	; 0
    3404:	3f ef       	ldi	r19, 0xFF	; 255
    3406:	4f e7       	ldi	r20, 0x7F	; 127
    3408:	57 e4       	ldi	r21, 0x47	; 71
    340a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    340e:	18 16       	cp	r1, r24
    3410:	4c f5       	brge	.+82     	; 0x3464 <HAL_Ultrasonic_Sensor_voidTrigger+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3412:	6c 85       	ldd	r22, Y+12	; 0x0c
    3414:	7d 85       	ldd	r23, Y+13	; 0x0d
    3416:	8e 85       	ldd	r24, Y+14	; 0x0e
    3418:	9f 85       	ldd	r25, Y+15	; 0x0f
    341a:	20 e0       	ldi	r18, 0x00	; 0
    341c:	30 e0       	ldi	r19, 0x00	; 0
    341e:	40 e2       	ldi	r20, 0x20	; 32
    3420:	51 e4       	ldi	r21, 0x41	; 65
    3422:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3426:	dc 01       	movw	r26, r24
    3428:	cb 01       	movw	r24, r22
    342a:	bc 01       	movw	r22, r24
    342c:	cd 01       	movw	r24, r26
    342e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3432:	dc 01       	movw	r26, r24
    3434:	cb 01       	movw	r24, r22
    3436:	9f 83       	std	Y+7, r25	; 0x07
    3438:	8e 83       	std	Y+6, r24	; 0x06
    343a:	0f c0       	rjmp	.+30     	; 0x345a <HAL_Ultrasonic_Sensor_voidTrigger+0x148>
    343c:	80 e9       	ldi	r24, 0x90	; 144
    343e:	91 e0       	ldi	r25, 0x01	; 1
    3440:	9d 83       	std	Y+5, r25	; 0x05
    3442:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3444:	8c 81       	ldd	r24, Y+4	; 0x04
    3446:	9d 81       	ldd	r25, Y+5	; 0x05
    3448:	01 97       	sbiw	r24, 0x01	; 1
    344a:	f1 f7       	brne	.-4      	; 0x3448 <HAL_Ultrasonic_Sensor_voidTrigger+0x136>
    344c:	9d 83       	std	Y+5, r25	; 0x05
    344e:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3450:	8e 81       	ldd	r24, Y+6	; 0x06
    3452:	9f 81       	ldd	r25, Y+7	; 0x07
    3454:	01 97       	sbiw	r24, 0x01	; 1
    3456:	9f 83       	std	Y+7, r25	; 0x07
    3458:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    345a:	8e 81       	ldd	r24, Y+6	; 0x06
    345c:	9f 81       	ldd	r25, Y+7	; 0x07
    345e:	00 97       	sbiw	r24, 0x00	; 0
    3460:	69 f7       	brne	.-38     	; 0x343c <HAL_Ultrasonic_Sensor_voidTrigger+0x12a>
    3462:	24 c0       	rjmp	.+72     	; 0x34ac <HAL_Ultrasonic_Sensor_voidTrigger+0x19a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3464:	68 85       	ldd	r22, Y+8	; 0x08
    3466:	79 85       	ldd	r23, Y+9	; 0x09
    3468:	8a 85       	ldd	r24, Y+10	; 0x0a
    346a:	9b 85       	ldd	r25, Y+11	; 0x0b
    346c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3470:	dc 01       	movw	r26, r24
    3472:	cb 01       	movw	r24, r22
    3474:	9f 83       	std	Y+7, r25	; 0x07
    3476:	8e 83       	std	Y+6, r24	; 0x06
    3478:	8e 81       	ldd	r24, Y+6	; 0x06
    347a:	9f 81       	ldd	r25, Y+7	; 0x07
    347c:	9b 83       	std	Y+3, r25	; 0x03
    347e:	8a 83       	std	Y+2, r24	; 0x02
    3480:	8a 81       	ldd	r24, Y+2	; 0x02
    3482:	9b 81       	ldd	r25, Y+3	; 0x03
    3484:	01 97       	sbiw	r24, 0x01	; 1
    3486:	f1 f7       	brne	.-4      	; 0x3484 <HAL_Ultrasonic_Sensor_voidTrigger+0x172>
    3488:	9b 83       	std	Y+3, r25	; 0x03
    348a:	8a 83       	std	Y+2, r24	; 0x02
    348c:	0f c0       	rjmp	.+30     	; 0x34ac <HAL_Ultrasonic_Sensor_voidTrigger+0x19a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    348e:	69 89       	ldd	r22, Y+17	; 0x11
    3490:	7a 89       	ldd	r23, Y+18	; 0x12
    3492:	8b 89       	ldd	r24, Y+19	; 0x13
    3494:	9c 89       	ldd	r25, Y+20	; 0x14
    3496:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    349a:	dc 01       	movw	r26, r24
    349c:	cb 01       	movw	r24, r22
    349e:	88 8b       	std	Y+16, r24	; 0x10
    34a0:	88 89       	ldd	r24, Y+16	; 0x10
    34a2:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    34a4:	89 81       	ldd	r24, Y+1	; 0x01
    34a6:	8a 95       	dec	r24
    34a8:	f1 f7       	brne	.-4      	; 0x34a6 <HAL_Ultrasonic_Sensor_voidTrigger+0x194>
    34aa:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(10);                                            // 10 micro seconds delay
	MCAL_DIO_u8SetPinValue(TRIG_PORT, TRIG_PIN, Pin_Low);     // low
    34ac:	83 e0       	ldi	r24, 0x03	; 3
    34ae:	66 e0       	ldi	r22, 0x06	; 6
    34b0:	40 e0       	ldi	r20, 0x00	; 0
    34b2:	0e 94 04 17 	call	0x2e08	; 0x2e08 <MCAL_DIO_u8SetPinValue>
}
    34b6:	68 96       	adiw	r28, 0x18	; 24
    34b8:	0f b6       	in	r0, 0x3f	; 63
    34ba:	f8 94       	cli
    34bc:	de bf       	out	0x3e, r29	; 62
    34be:	0f be       	out	0x3f, r0	; 63
    34c0:	cd bf       	out	0x3d, r28	; 61
    34c2:	cf 91       	pop	r28
    34c4:	df 91       	pop	r29
    34c6:	08 95       	ret

000034c8 <HAL_Ultrasonic_Sensor_voidCalcDistancse>:

void HAL_Ultrasonic_Sensor_voidCalcDistancse(f32* returned_distance) {
    34c8:	df 93       	push	r29
    34ca:	cf 93       	push	r28
    34cc:	cd b7       	in	r28, 0x3d	; 61
    34ce:	de b7       	in	r29, 0x3e	; 62
    34d0:	60 97       	sbiw	r28, 0x10	; 16
    34d2:	0f b6       	in	r0, 0x3f	; 63
    34d4:	f8 94       	cli
    34d6:	de bf       	out	0x3e, r29	; 62
    34d8:	0f be       	out	0x3f, r0	; 63
    34da:	cd bf       	out	0x3d, r28	; 61
    34dc:	98 8b       	std	Y+16, r25	; 0x10
    34de:	8f 87       	std	Y+15, r24	; 0x0f
	HAL_Ultrasonic_Sensor_voidTrigger();                                  // send trigger
    34e0:	0e 94 89 19 	call	0x3312	; 0x3312 <HAL_Ultrasonic_Sensor_voidTrigger>
	MCAL_Interrupt_InterruptRisingInit();
    34e4:	0e 94 4e 14 	call	0x289c	; 0x289c <MCAL_Interrupt_InterruptRisingInit>
    34e8:	80 e0       	ldi	r24, 0x00	; 0
    34ea:	90 e0       	ldi	r25, 0x00	; 0
    34ec:	a8 e4       	ldi	r26, 0x48	; 72
    34ee:	b2 e4       	ldi	r27, 0x42	; 66
    34f0:	8b 87       	std	Y+11, r24	; 0x0b
    34f2:	9c 87       	std	Y+12, r25	; 0x0c
    34f4:	ad 87       	std	Y+13, r26	; 0x0d
    34f6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34f8:	6b 85       	ldd	r22, Y+11	; 0x0b
    34fa:	7c 85       	ldd	r23, Y+12	; 0x0c
    34fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    34fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    3500:	20 e0       	ldi	r18, 0x00	; 0
    3502:	30 e0       	ldi	r19, 0x00	; 0
    3504:	4a e7       	ldi	r20, 0x7A	; 122
    3506:	55 e4       	ldi	r21, 0x45	; 69
    3508:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    350c:	dc 01       	movw	r26, r24
    350e:	cb 01       	movw	r24, r22
    3510:	8f 83       	std	Y+7, r24	; 0x07
    3512:	98 87       	std	Y+8, r25	; 0x08
    3514:	a9 87       	std	Y+9, r26	; 0x09
    3516:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3518:	6f 81       	ldd	r22, Y+7	; 0x07
    351a:	78 85       	ldd	r23, Y+8	; 0x08
    351c:	89 85       	ldd	r24, Y+9	; 0x09
    351e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3520:	20 e0       	ldi	r18, 0x00	; 0
    3522:	30 e0       	ldi	r19, 0x00	; 0
    3524:	40 e8       	ldi	r20, 0x80	; 128
    3526:	5f e3       	ldi	r21, 0x3F	; 63
    3528:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    352c:	88 23       	and	r24, r24
    352e:	2c f4       	brge	.+10     	; 0x353a <HAL_Ultrasonic_Sensor_voidCalcDistancse+0x72>
		__ticks = 1;
    3530:	81 e0       	ldi	r24, 0x01	; 1
    3532:	90 e0       	ldi	r25, 0x00	; 0
    3534:	9e 83       	std	Y+6, r25	; 0x06
    3536:	8d 83       	std	Y+5, r24	; 0x05
    3538:	3f c0       	rjmp	.+126    	; 0x35b8 <HAL_Ultrasonic_Sensor_voidCalcDistancse+0xf0>
	else if (__tmp > 65535)
    353a:	6f 81       	ldd	r22, Y+7	; 0x07
    353c:	78 85       	ldd	r23, Y+8	; 0x08
    353e:	89 85       	ldd	r24, Y+9	; 0x09
    3540:	9a 85       	ldd	r25, Y+10	; 0x0a
    3542:	20 e0       	ldi	r18, 0x00	; 0
    3544:	3f ef       	ldi	r19, 0xFF	; 255
    3546:	4f e7       	ldi	r20, 0x7F	; 127
    3548:	57 e4       	ldi	r21, 0x47	; 71
    354a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    354e:	18 16       	cp	r1, r24
    3550:	4c f5       	brge	.+82     	; 0x35a4 <HAL_Ultrasonic_Sensor_voidCalcDistancse+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3552:	6b 85       	ldd	r22, Y+11	; 0x0b
    3554:	7c 85       	ldd	r23, Y+12	; 0x0c
    3556:	8d 85       	ldd	r24, Y+13	; 0x0d
    3558:	9e 85       	ldd	r25, Y+14	; 0x0e
    355a:	20 e0       	ldi	r18, 0x00	; 0
    355c:	30 e0       	ldi	r19, 0x00	; 0
    355e:	40 e2       	ldi	r20, 0x20	; 32
    3560:	51 e4       	ldi	r21, 0x41	; 65
    3562:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3566:	dc 01       	movw	r26, r24
    3568:	cb 01       	movw	r24, r22
    356a:	bc 01       	movw	r22, r24
    356c:	cd 01       	movw	r24, r26
    356e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3572:	dc 01       	movw	r26, r24
    3574:	cb 01       	movw	r24, r22
    3576:	9e 83       	std	Y+6, r25	; 0x06
    3578:	8d 83       	std	Y+5, r24	; 0x05
    357a:	0f c0       	rjmp	.+30     	; 0x359a <HAL_Ultrasonic_Sensor_voidCalcDistancse+0xd2>
    357c:	80 e9       	ldi	r24, 0x90	; 144
    357e:	91 e0       	ldi	r25, 0x01	; 1
    3580:	9c 83       	std	Y+4, r25	; 0x04
    3582:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3584:	8b 81       	ldd	r24, Y+3	; 0x03
    3586:	9c 81       	ldd	r25, Y+4	; 0x04
    3588:	01 97       	sbiw	r24, 0x01	; 1
    358a:	f1 f7       	brne	.-4      	; 0x3588 <HAL_Ultrasonic_Sensor_voidCalcDistancse+0xc0>
    358c:	9c 83       	std	Y+4, r25	; 0x04
    358e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3590:	8d 81       	ldd	r24, Y+5	; 0x05
    3592:	9e 81       	ldd	r25, Y+6	; 0x06
    3594:	01 97       	sbiw	r24, 0x01	; 1
    3596:	9e 83       	std	Y+6, r25	; 0x06
    3598:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    359a:	8d 81       	ldd	r24, Y+5	; 0x05
    359c:	9e 81       	ldd	r25, Y+6	; 0x06
    359e:	00 97       	sbiw	r24, 0x00	; 0
    35a0:	69 f7       	brne	.-38     	; 0x357c <HAL_Ultrasonic_Sensor_voidCalcDistancse+0xb4>
    35a2:	14 c0       	rjmp	.+40     	; 0x35cc <HAL_Ultrasonic_Sensor_voidCalcDistancse+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35a4:	6f 81       	ldd	r22, Y+7	; 0x07
    35a6:	78 85       	ldd	r23, Y+8	; 0x08
    35a8:	89 85       	ldd	r24, Y+9	; 0x09
    35aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    35ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35b0:	dc 01       	movw	r26, r24
    35b2:	cb 01       	movw	r24, r22
    35b4:	9e 83       	std	Y+6, r25	; 0x06
    35b6:	8d 83       	std	Y+5, r24	; 0x05
    35b8:	8d 81       	ldd	r24, Y+5	; 0x05
    35ba:	9e 81       	ldd	r25, Y+6	; 0x06
    35bc:	9a 83       	std	Y+2, r25	; 0x02
    35be:	89 83       	std	Y+1, r24	; 0x01
    35c0:	89 81       	ldd	r24, Y+1	; 0x01
    35c2:	9a 81       	ldd	r25, Y+2	; 0x02
    35c4:	01 97       	sbiw	r24, 0x01	; 1
    35c6:	f1 f7       	brne	.-4      	; 0x35c4 <HAL_Ultrasonic_Sensor_voidCalcDistancse+0xfc>
    35c8:	9a 83       	std	Y+2, r25	; 0x02
    35ca:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(50);                                            // stability delay
	*returned_distance = Glob_f32Distance;                           // get the distance
    35cc:	80 91 da 01 	lds	r24, 0x01DA
    35d0:	90 91 db 01 	lds	r25, 0x01DB
    35d4:	a0 91 dc 01 	lds	r26, 0x01DC
    35d8:	b0 91 dd 01 	lds	r27, 0x01DD
    35dc:	ef 85       	ldd	r30, Y+15	; 0x0f
    35de:	f8 89       	ldd	r31, Y+16	; 0x10
    35e0:	80 83       	st	Z, r24
    35e2:	91 83       	std	Z+1, r25	; 0x01
    35e4:	a2 83       	std	Z+2, r26	; 0x02
    35e6:	b3 83       	std	Z+3, r27	; 0x03
}
    35e8:	60 96       	adiw	r28, 0x10	; 16
    35ea:	0f b6       	in	r0, 0x3f	; 63
    35ec:	f8 94       	cli
    35ee:	de bf       	out	0x3e, r29	; 62
    35f0:	0f be       	out	0x3f, r0	; 63
    35f2:	cd bf       	out	0x3d, r28	; 61
    35f4:	cf 91       	pop	r28
    35f6:	df 91       	pop	r29
    35f8:	08 95       	ret

000035fa <HAL_Ultrasonic_Sensor_voidInterrupt>:
void HAL_Ultrasonic_Sensor_voidInterrupt(void)                                     // call back function
{
    35fa:	df 93       	push	r29
    35fc:	cf 93       	push	r28
    35fe:	cd b7       	in	r28, 0x3d	; 61
    3600:	de b7       	in	r29, 0x3e	; 62

	if (Glob_u8Counter <= 2)          // check for counter status
    3602:	80 91 c8 01 	lds	r24, 0x01C8
    3606:	83 30       	cpi	r24, 0x03	; 3
    3608:	08 f0       	brcs	.+2      	; 0x360c <HAL_Ultrasonic_Sensor_voidInterrupt+0x12>
    360a:	75 c0       	rjmp	.+234    	; 0x36f6 <HAL_Ultrasonic_Sensor_voidInterrupt+0xfc>
			{
		if (Glob_u8Counter == NUM1)      // check if it is the first entry
    360c:	80 91 c8 01 	lds	r24, 0x01C8
    3610:	81 30       	cpi	r24, 0x01	; 1
    3612:	a1 f4       	brne	.+40     	; 0x363c <HAL_Ultrasonic_Sensor_voidInterrupt+0x42>
		{
			// store the start time value
			Glob_u16StartTime = TCNT0;
    3614:	e2 e5       	ldi	r30, 0x52	; 82
    3616:	f0 e0       	ldi	r31, 0x00	; 0
    3618:	80 81       	ld	r24, Z
    361a:	88 2f       	mov	r24, r24
    361c:	90 e0       	ldi	r25, 0x00	; 0
    361e:	90 93 df 01 	sts	0x01DF, r25
    3622:	80 93 de 01 	sts	0x01DE, r24

			// store number of OVFs at the start of the signal
			Glob_u16OvfCounterStart = Glob_u16OvfCounter;
    3626:	80 91 cc 01 	lds	r24, 0x01CC
    362a:	90 91 cd 01 	lds	r25, 0x01CD
    362e:	90 93 f1 01 	sts	0x01F1, r25
    3632:	80 93 f0 01 	sts	0x01F0, r24

			// at the first entry  we change the capture edge to falling edge to capture echo signal
			MCAL_Interrupt_InterruptFallingInit();
    3636:	0e 94 64 14 	call	0x28c8	; 0x28c8 <MCAL_Interrupt_InterruptFallingInit>
    363a:	58 c0       	rjmp	.+176    	; 0x36ec <HAL_Ultrasonic_Sensor_voidInterrupt+0xf2>
		}

		else if (Glob_u8Counter == 2) // check if it's the second entry
    363c:	80 91 c8 01 	lds	r24, 0x01C8
    3640:	82 30       	cpi	r24, 0x02	; 2
    3642:	09 f0       	breq	.+2      	; 0x3646 <HAL_Ultrasonic_Sensor_voidInterrupt+0x4c>
    3644:	53 c0       	rjmp	.+166    	; 0x36ec <HAL_Ultrasonic_Sensor_voidInterrupt+0xf2>
				{
			//store end time value
			Glob_u16EndTime = TCNT0;
    3646:	e2 e5       	ldi	r30, 0x52	; 82
    3648:	f0 e0       	ldi	r31, 0x00	; 0
    364a:	80 81       	ld	r24, Z
    364c:	88 2f       	mov	r24, r24
    364e:	90 e0       	ldi	r25, 0x00	; 0
    3650:	90 93 e1 01 	sts	0x01E1, r25
    3654:	80 93 e0 01 	sts	0x01E0, r24

			//store number of OVFs at the end of signal
			Glob_16OvfCounterEnd = Glob_u16OvfCounter;
    3658:	80 91 cc 01 	lds	r24, 0x01CC
    365c:	90 91 cd 01 	lds	r25, 0x01CD
    3660:	90 93 ef 01 	sts	0x01EF, r25
    3664:	80 93 ee 01 	sts	0x01EE, r24

			//calculate the time difference between start and end
			Glob_u16TimeDiff = (Glob_u16EndTime + (256 * Glob_16OvfCounterEnd))
    3668:	80 91 ee 01 	lds	r24, 0x01EE
    366c:	90 91 ef 01 	lds	r25, 0x01EF
    3670:	38 2f       	mov	r19, r24
    3672:	22 27       	eor	r18, r18
    3674:	80 91 e0 01 	lds	r24, 0x01E0
    3678:	90 91 e1 01 	lds	r25, 0x01E1
    367c:	a9 01       	movw	r20, r18
    367e:	48 0f       	add	r20, r24
    3680:	59 1f       	adc	r21, r25
    3682:	80 91 f0 01 	lds	r24, 0x01F0
    3686:	90 91 f1 01 	lds	r25, 0x01F1
    368a:	38 2f       	mov	r19, r24
    368c:	22 27       	eor	r18, r18
    368e:	80 91 de 01 	lds	r24, 0x01DE
    3692:	90 91 df 01 	lds	r25, 0x01DF
    3696:	82 0f       	add	r24, r18
    3698:	93 1f       	adc	r25, r19
    369a:	9a 01       	movw	r18, r20
    369c:	28 1b       	sub	r18, r24
    369e:	39 0b       	sbc	r19, r25
    36a0:	c9 01       	movw	r24, r18
    36a2:	90 93 e3 01 	sts	0x01E3, r25
    36a6:	80 93 e2 01 	sts	0x01E2, r24
					- (Glob_u16StartTime + (256 * Glob_u16OvfCounterStart));

			//calculate the distance
			Glob_f32Distance = Glob_u16TimeDiff * 0.068; //     f32 ton=(h(64/16000000))/2 >>     distance=ton34000;
    36aa:	80 91 e2 01 	lds	r24, 0x01E2
    36ae:	90 91 e3 01 	lds	r25, 0x01E3
    36b2:	cc 01       	movw	r24, r24
    36b4:	a0 e0       	ldi	r26, 0x00	; 0
    36b6:	b0 e0       	ldi	r27, 0x00	; 0
    36b8:	bc 01       	movw	r22, r24
    36ba:	cd 01       	movw	r24, r26
    36bc:	0e 94 37 05 	call	0xa6e	; 0xa6e <__floatunsisf>
    36c0:	dc 01       	movw	r26, r24
    36c2:	cb 01       	movw	r24, r22
    36c4:	bc 01       	movw	r22, r24
    36c6:	cd 01       	movw	r24, r26
    36c8:	26 e9       	ldi	r18, 0x96	; 150
    36ca:	33 e4       	ldi	r19, 0x43	; 67
    36cc:	4b e8       	ldi	r20, 0x8B	; 139
    36ce:	5d e3       	ldi	r21, 0x3D	; 61
    36d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36d4:	dc 01       	movw	r26, r24
    36d6:	cb 01       	movw	r24, r22
    36d8:	80 93 da 01 	sts	0x01DA, r24
    36dc:	90 93 db 01 	sts	0x01DB, r25
    36e0:	a0 93 dc 01 	sts	0x01DC, r26
    36e4:	b0 93 dd 01 	sts	0x01DD, r27

			//reset the counter to calculate new signal
			Glob_u8Counter = NUM0;
    36e8:	10 92 c8 01 	sts	0x01C8, r1

		}

		//increase the counter to sync with the entry state
		Glob_u8Counter++;
    36ec:	80 91 c8 01 	lds	r24, 0x01C8
    36f0:	8f 5f       	subi	r24, 0xFF	; 255
    36f2:	80 93 c8 01 	sts	0x01C8, r24
	}

}
    36f6:	cf 91       	pop	r28
    36f8:	df 91       	pop	r29
    36fa:	08 95       	ret

000036fc <HAL_SM_voidSMInit>:
 *
 *  Created on: Oct 29, 2023
 *      Author: TOP_WORLD
 */
#include "Servo_Motor.h"
void HAL_SM_voidSMInit(void) {
    36fc:	df 93       	push	r29
    36fe:	cf 93       	push	r28
    3700:	cd b7       	in	r28, 0x3d	; 61
    3702:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(DDRD,Pin7);
    3704:	a1 e3       	ldi	r26, 0x31	; 49
    3706:	b0 e0       	ldi	r27, 0x00	; 0
    3708:	e1 e3       	ldi	r30, 0x31	; 49
    370a:	f0 e0       	ldi	r31, 0x00	; 0
    370c:	80 81       	ld	r24, Z
    370e:	80 68       	ori	r24, 0x80	; 128
    3710:	8c 93       	st	X, r24
}
    3712:	cf 91       	pop	r28
    3714:	df 91       	pop	r29
    3716:	08 95       	ret

00003718 <HAL_SM_voidSMSetAngle>:
void HAL_SM_voidSMSetAngle(u8 LOC_u8Angle) {
    3718:	df 93       	push	r29
    371a:	cf 93       	push	r28
    371c:	cd b7       	in	r28, 0x3d	; 61
    371e:	de b7       	in	r29, 0x3e	; 62
    3720:	e5 97       	sbiw	r28, 0x35	; 53
    3722:	0f b6       	in	r0, 0x3f	; 63
    3724:	f8 94       	cli
    3726:	de bf       	out	0x3e, r29	; 62
    3728:	0f be       	out	0x3f, r0	; 63
    372a:	cd bf       	out	0x3d, r28	; 61
    372c:	8d ab       	std	Y+53, r24	; 0x35
	u16 LOC_u16Time=(32.0/3)*(LOC_u8Angle-90)+1100;
    372e:	8d a9       	ldd	r24, Y+53	; 0x35
    3730:	88 2f       	mov	r24, r24
    3732:	90 e0       	ldi	r25, 0x00	; 0
    3734:	8a 55       	subi	r24, 0x5A	; 90
    3736:	90 40       	sbci	r25, 0x00	; 0
    3738:	aa 27       	eor	r26, r26
    373a:	97 fd       	sbrc	r25, 7
    373c:	a0 95       	com	r26
    373e:	ba 2f       	mov	r27, r26
    3740:	bc 01       	movw	r22, r24
    3742:	cd 01       	movw	r24, r26
    3744:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    3748:	dc 01       	movw	r26, r24
    374a:	cb 01       	movw	r24, r22
    374c:	bc 01       	movw	r22, r24
    374e:	cd 01       	movw	r24, r26
    3750:	2b ea       	ldi	r18, 0xAB	; 171
    3752:	3a ea       	ldi	r19, 0xAA	; 170
    3754:	4a e2       	ldi	r20, 0x2A	; 42
    3756:	51 e4       	ldi	r21, 0x41	; 65
    3758:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    375c:	dc 01       	movw	r26, r24
    375e:	cb 01       	movw	r24, r22
    3760:	bc 01       	movw	r22, r24
    3762:	cd 01       	movw	r24, r26
    3764:	20 e0       	ldi	r18, 0x00	; 0
    3766:	30 e8       	ldi	r19, 0x80	; 128
    3768:	49 e8       	ldi	r20, 0x89	; 137
    376a:	54 e4       	ldi	r21, 0x44	; 68
    376c:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    3770:	dc 01       	movw	r26, r24
    3772:	cb 01       	movw	r24, r22
    3774:	bc 01       	movw	r22, r24
    3776:	cd 01       	movw	r24, r26
    3778:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    377c:	dc 01       	movw	r26, r24
    377e:	cb 01       	movw	r24, r22
    3780:	9c ab       	std	Y+52, r25	; 0x34
    3782:	8b ab       	std	Y+51, r24	; 0x33
	u16 LOC_u16OffTime=(20000-LOC_u16Time);
    3784:	20 e2       	ldi	r18, 0x20	; 32
    3786:	3e e4       	ldi	r19, 0x4E	; 78
    3788:	8b a9       	ldd	r24, Y+51	; 0x33
    378a:	9c a9       	ldd	r25, Y+52	; 0x34
    378c:	a9 01       	movw	r20, r18
    378e:	48 1b       	sub	r20, r24
    3790:	59 0b       	sbc	r21, r25
    3792:	ca 01       	movw	r24, r20
    3794:	9a ab       	std	Y+50, r25	; 0x32
    3796:	89 ab       	std	Y+49, r24	; 0x31
	if (LOC_u8Angle <= MAX_ANGLE && LOC_u8Angle >= MIN_ANGLE) {
    3798:	8d a9       	ldd	r24, Y+53	; 0x35
    379a:	88 2f       	mov	r24, r24
    379c:	90 e0       	ldi	r25, 0x00	; 0
    379e:	aa 27       	eor	r26, r26
    37a0:	97 fd       	sbrc	r25, 7
    37a2:	a0 95       	com	r26
    37a4:	ba 2f       	mov	r27, r26
    37a6:	bc 01       	movw	r22, r24
    37a8:	cd 01       	movw	r24, r26
    37aa:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    37ae:	dc 01       	movw	r26, r24
    37b0:	cb 01       	movw	r24, r22
    37b2:	bc 01       	movw	r22, r24
    37b4:	cd 01       	movw	r24, r26
    37b6:	20 e0       	ldi	r18, 0x00	; 0
    37b8:	30 e0       	ldi	r19, 0x00	; 0
    37ba:	44 e3       	ldi	r20, 0x34	; 52
    37bc:	53 e4       	ldi	r21, 0x43	; 67
    37be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__lesf2>
    37c2:	18 16       	cp	r1, r24
    37c4:	0c f4       	brge	.+2      	; 0x37c8 <HAL_SM_voidSMSetAngle+0xb0>
    37c6:	98 c1       	rjmp	.+816    	; 0x3af8 <HAL_SM_voidSMSetAngle+0x3e0>
		SET_BIT(PORTD,Pin7);
    37c8:	a2 e3       	ldi	r26, 0x32	; 50
    37ca:	b0 e0       	ldi	r27, 0x00	; 0
    37cc:	e2 e3       	ldi	r30, 0x32	; 50
    37ce:	f0 e0       	ldi	r31, 0x00	; 0
    37d0:	80 81       	ld	r24, Z
    37d2:	80 68       	ori	r24, 0x80	; 128
    37d4:	8c 93       	st	X, r24
		_delay_us(LOC_u16Time);
    37d6:	8b a9       	ldd	r24, Y+51	; 0x33
    37d8:	9c a9       	ldd	r25, Y+52	; 0x34
    37da:	cc 01       	movw	r24, r24
    37dc:	a0 e0       	ldi	r26, 0x00	; 0
    37de:	b0 e0       	ldi	r27, 0x00	; 0
    37e0:	bc 01       	movw	r22, r24
    37e2:	cd 01       	movw	r24, r26
    37e4:	0e 94 37 05 	call	0xa6e	; 0xa6e <__floatunsisf>
    37e8:	dc 01       	movw	r26, r24
    37ea:	cb 01       	movw	r24, r22
    37ec:	8d a7       	std	Y+45, r24	; 0x2d
    37ee:	9e a7       	std	Y+46, r25	; 0x2e
    37f0:	af a7       	std	Y+47, r26	; 0x2f
    37f2:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    37f4:	6d a5       	ldd	r22, Y+45	; 0x2d
    37f6:	7e a5       	ldd	r23, Y+46	; 0x2e
    37f8:	8f a5       	ldd	r24, Y+47	; 0x2f
    37fa:	98 a9       	ldd	r25, Y+48	; 0x30
    37fc:	2b ea       	ldi	r18, 0xAB	; 171
    37fe:	3a ea       	ldi	r19, 0xAA	; 170
    3800:	4a ea       	ldi	r20, 0xAA	; 170
    3802:	50 e4       	ldi	r21, 0x40	; 64
    3804:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3808:	dc 01       	movw	r26, r24
    380a:	cb 01       	movw	r24, r22
    380c:	89 a7       	std	Y+41, r24	; 0x29
    380e:	9a a7       	std	Y+42, r25	; 0x2a
    3810:	ab a7       	std	Y+43, r26	; 0x2b
    3812:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    3814:	69 a5       	ldd	r22, Y+41	; 0x29
    3816:	7a a5       	ldd	r23, Y+42	; 0x2a
    3818:	8b a5       	ldd	r24, Y+43	; 0x2b
    381a:	9c a5       	ldd	r25, Y+44	; 0x2c
    381c:	20 e0       	ldi	r18, 0x00	; 0
    381e:	30 e0       	ldi	r19, 0x00	; 0
    3820:	40 e8       	ldi	r20, 0x80	; 128
    3822:	5f e3       	ldi	r21, 0x3F	; 63
    3824:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3828:	88 23       	and	r24, r24
    382a:	1c f4       	brge	.+6      	; 0x3832 <HAL_SM_voidSMSetAngle+0x11a>
		__ticks = 1;
    382c:	81 e0       	ldi	r24, 0x01	; 1
    382e:	88 a7       	std	Y+40, r24	; 0x28
    3830:	91 c0       	rjmp	.+290    	; 0x3954 <HAL_SM_voidSMSetAngle+0x23c>
	else if (__tmp > 255)
    3832:	69 a5       	ldd	r22, Y+41	; 0x29
    3834:	7a a5       	ldd	r23, Y+42	; 0x2a
    3836:	8b a5       	ldd	r24, Y+43	; 0x2b
    3838:	9c a5       	ldd	r25, Y+44	; 0x2c
    383a:	20 e0       	ldi	r18, 0x00	; 0
    383c:	30 e0       	ldi	r19, 0x00	; 0
    383e:	4f e7       	ldi	r20, 0x7F	; 127
    3840:	53 e4       	ldi	r21, 0x43	; 67
    3842:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3846:	18 16       	cp	r1, r24
    3848:	0c f0       	brlt	.+2      	; 0x384c <HAL_SM_voidSMSetAngle+0x134>
    384a:	7b c0       	rjmp	.+246    	; 0x3942 <HAL_SM_voidSMSetAngle+0x22a>
	{
		_delay_ms(__us / 1000.0);
    384c:	6d a5       	ldd	r22, Y+45	; 0x2d
    384e:	7e a5       	ldd	r23, Y+46	; 0x2e
    3850:	8f a5       	ldd	r24, Y+47	; 0x2f
    3852:	98 a9       	ldd	r25, Y+48	; 0x30
    3854:	20 e0       	ldi	r18, 0x00	; 0
    3856:	30 e0       	ldi	r19, 0x00	; 0
    3858:	4a e7       	ldi	r20, 0x7A	; 122
    385a:	54 e4       	ldi	r21, 0x44	; 68
    385c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3860:	dc 01       	movw	r26, r24
    3862:	cb 01       	movw	r24, r22
    3864:	8c a3       	std	Y+36, r24	; 0x24
    3866:	9d a3       	std	Y+37, r25	; 0x25
    3868:	ae a3       	std	Y+38, r26	; 0x26
    386a:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    386c:	6c a1       	ldd	r22, Y+36	; 0x24
    386e:	7d a1       	ldd	r23, Y+37	; 0x25
    3870:	8e a1       	ldd	r24, Y+38	; 0x26
    3872:	9f a1       	ldd	r25, Y+39	; 0x27
    3874:	20 e0       	ldi	r18, 0x00	; 0
    3876:	30 e0       	ldi	r19, 0x00	; 0
    3878:	4a e7       	ldi	r20, 0x7A	; 122
    387a:	55 e4       	ldi	r21, 0x45	; 69
    387c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3880:	dc 01       	movw	r26, r24
    3882:	cb 01       	movw	r24, r22
    3884:	88 a3       	std	Y+32, r24	; 0x20
    3886:	99 a3       	std	Y+33, r25	; 0x21
    3888:	aa a3       	std	Y+34, r26	; 0x22
    388a:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    388c:	68 a1       	ldd	r22, Y+32	; 0x20
    388e:	79 a1       	ldd	r23, Y+33	; 0x21
    3890:	8a a1       	ldd	r24, Y+34	; 0x22
    3892:	9b a1       	ldd	r25, Y+35	; 0x23
    3894:	20 e0       	ldi	r18, 0x00	; 0
    3896:	30 e0       	ldi	r19, 0x00	; 0
    3898:	40 e8       	ldi	r20, 0x80	; 128
    389a:	5f e3       	ldi	r21, 0x3F	; 63
    389c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    38a0:	88 23       	and	r24, r24
    38a2:	2c f4       	brge	.+10     	; 0x38ae <HAL_SM_voidSMSetAngle+0x196>
		__ticks = 1;
    38a4:	81 e0       	ldi	r24, 0x01	; 1
    38a6:	90 e0       	ldi	r25, 0x00	; 0
    38a8:	9f 8f       	std	Y+31, r25	; 0x1f
    38aa:	8e 8f       	std	Y+30, r24	; 0x1e
    38ac:	3f c0       	rjmp	.+126    	; 0x392c <HAL_SM_voidSMSetAngle+0x214>
	else if (__tmp > 65535)
    38ae:	68 a1       	ldd	r22, Y+32	; 0x20
    38b0:	79 a1       	ldd	r23, Y+33	; 0x21
    38b2:	8a a1       	ldd	r24, Y+34	; 0x22
    38b4:	9b a1       	ldd	r25, Y+35	; 0x23
    38b6:	20 e0       	ldi	r18, 0x00	; 0
    38b8:	3f ef       	ldi	r19, 0xFF	; 255
    38ba:	4f e7       	ldi	r20, 0x7F	; 127
    38bc:	57 e4       	ldi	r21, 0x47	; 71
    38be:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    38c2:	18 16       	cp	r1, r24
    38c4:	4c f5       	brge	.+82     	; 0x3918 <HAL_SM_voidSMSetAngle+0x200>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    38c6:	6c a1       	ldd	r22, Y+36	; 0x24
    38c8:	7d a1       	ldd	r23, Y+37	; 0x25
    38ca:	8e a1       	ldd	r24, Y+38	; 0x26
    38cc:	9f a1       	ldd	r25, Y+39	; 0x27
    38ce:	20 e0       	ldi	r18, 0x00	; 0
    38d0:	30 e0       	ldi	r19, 0x00	; 0
    38d2:	40 e2       	ldi	r20, 0x20	; 32
    38d4:	51 e4       	ldi	r21, 0x41	; 65
    38d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38da:	dc 01       	movw	r26, r24
    38dc:	cb 01       	movw	r24, r22
    38de:	bc 01       	movw	r22, r24
    38e0:	cd 01       	movw	r24, r26
    38e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38e6:	dc 01       	movw	r26, r24
    38e8:	cb 01       	movw	r24, r22
    38ea:	9f 8f       	std	Y+31, r25	; 0x1f
    38ec:	8e 8f       	std	Y+30, r24	; 0x1e
    38ee:	0f c0       	rjmp	.+30     	; 0x390e <HAL_SM_voidSMSetAngle+0x1f6>
    38f0:	80 e9       	ldi	r24, 0x90	; 144
    38f2:	91 e0       	ldi	r25, 0x01	; 1
    38f4:	9d 8f       	std	Y+29, r25	; 0x1d
    38f6:	8c 8f       	std	Y+28, r24	; 0x1c
    38f8:	8c 8d       	ldd	r24, Y+28	; 0x1c
    38fa:	9d 8d       	ldd	r25, Y+29	; 0x1d
    38fc:	01 97       	sbiw	r24, 0x01	; 1
    38fe:	f1 f7       	brne	.-4      	; 0x38fc <HAL_SM_voidSMSetAngle+0x1e4>
    3900:	9d 8f       	std	Y+29, r25	; 0x1d
    3902:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3904:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3906:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3908:	01 97       	sbiw	r24, 0x01	; 1
    390a:	9f 8f       	std	Y+31, r25	; 0x1f
    390c:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    390e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3910:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3912:	00 97       	sbiw	r24, 0x00	; 0
    3914:	69 f7       	brne	.-38     	; 0x38f0 <HAL_SM_voidSMSetAngle+0x1d8>
    3916:	24 c0       	rjmp	.+72     	; 0x3960 <HAL_SM_voidSMSetAngle+0x248>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3918:	68 a1       	ldd	r22, Y+32	; 0x20
    391a:	79 a1       	ldd	r23, Y+33	; 0x21
    391c:	8a a1       	ldd	r24, Y+34	; 0x22
    391e:	9b a1       	ldd	r25, Y+35	; 0x23
    3920:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3924:	dc 01       	movw	r26, r24
    3926:	cb 01       	movw	r24, r22
    3928:	9f 8f       	std	Y+31, r25	; 0x1f
    392a:	8e 8f       	std	Y+30, r24	; 0x1e
    392c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    392e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3930:	9b 8f       	std	Y+27, r25	; 0x1b
    3932:	8a 8f       	std	Y+26, r24	; 0x1a
    3934:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3936:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3938:	01 97       	sbiw	r24, 0x01	; 1
    393a:	f1 f7       	brne	.-4      	; 0x3938 <HAL_SM_voidSMSetAngle+0x220>
    393c:	9b 8f       	std	Y+27, r25	; 0x1b
    393e:	8a 8f       	std	Y+26, r24	; 0x1a
    3940:	0f c0       	rjmp	.+30     	; 0x3960 <HAL_SM_voidSMSetAngle+0x248>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3942:	69 a5       	ldd	r22, Y+41	; 0x29
    3944:	7a a5       	ldd	r23, Y+42	; 0x2a
    3946:	8b a5       	ldd	r24, Y+43	; 0x2b
    3948:	9c a5       	ldd	r25, Y+44	; 0x2c
    394a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    394e:	dc 01       	movw	r26, r24
    3950:	cb 01       	movw	r24, r22
    3952:	88 a7       	std	Y+40, r24	; 0x28
    3954:	88 a5       	ldd	r24, Y+40	; 0x28
    3956:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3958:	89 8d       	ldd	r24, Y+25	; 0x19
    395a:	8a 95       	dec	r24
    395c:	f1 f7       	brne	.-4      	; 0x395a <HAL_SM_voidSMSetAngle+0x242>
    395e:	89 8f       	std	Y+25, r24	; 0x19
		CLR_BIT(PORTD,Pin7);
    3960:	a2 e3       	ldi	r26, 0x32	; 50
    3962:	b0 e0       	ldi	r27, 0x00	; 0
    3964:	e2 e3       	ldi	r30, 0x32	; 50
    3966:	f0 e0       	ldi	r31, 0x00	; 0
    3968:	80 81       	ld	r24, Z
    396a:	8f 77       	andi	r24, 0x7F	; 127
    396c:	8c 93       	st	X, r24
		_delay_us(LOC_u16OffTime);
    396e:	89 a9       	ldd	r24, Y+49	; 0x31
    3970:	9a a9       	ldd	r25, Y+50	; 0x32
    3972:	cc 01       	movw	r24, r24
    3974:	a0 e0       	ldi	r26, 0x00	; 0
    3976:	b0 e0       	ldi	r27, 0x00	; 0
    3978:	bc 01       	movw	r22, r24
    397a:	cd 01       	movw	r24, r26
    397c:	0e 94 37 05 	call	0xa6e	; 0xa6e <__floatunsisf>
    3980:	dc 01       	movw	r26, r24
    3982:	cb 01       	movw	r24, r22
    3984:	8d 8b       	std	Y+21, r24	; 0x15
    3986:	9e 8b       	std	Y+22, r25	; 0x16
    3988:	af 8b       	std	Y+23, r26	; 0x17
    398a:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    398c:	6d 89       	ldd	r22, Y+21	; 0x15
    398e:	7e 89       	ldd	r23, Y+22	; 0x16
    3990:	8f 89       	ldd	r24, Y+23	; 0x17
    3992:	98 8d       	ldd	r25, Y+24	; 0x18
    3994:	2b ea       	ldi	r18, 0xAB	; 171
    3996:	3a ea       	ldi	r19, 0xAA	; 170
    3998:	4a ea       	ldi	r20, 0xAA	; 170
    399a:	50 e4       	ldi	r21, 0x40	; 64
    399c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39a0:	dc 01       	movw	r26, r24
    39a2:	cb 01       	movw	r24, r22
    39a4:	89 8b       	std	Y+17, r24	; 0x11
    39a6:	9a 8b       	std	Y+18, r25	; 0x12
    39a8:	ab 8b       	std	Y+19, r26	; 0x13
    39aa:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    39ac:	69 89       	ldd	r22, Y+17	; 0x11
    39ae:	7a 89       	ldd	r23, Y+18	; 0x12
    39b0:	8b 89       	ldd	r24, Y+19	; 0x13
    39b2:	9c 89       	ldd	r25, Y+20	; 0x14
    39b4:	20 e0       	ldi	r18, 0x00	; 0
    39b6:	30 e0       	ldi	r19, 0x00	; 0
    39b8:	40 e8       	ldi	r20, 0x80	; 128
    39ba:	5f e3       	ldi	r21, 0x3F	; 63
    39bc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    39c0:	88 23       	and	r24, r24
    39c2:	1c f4       	brge	.+6      	; 0x39ca <HAL_SM_voidSMSetAngle+0x2b2>
		__ticks = 1;
    39c4:	81 e0       	ldi	r24, 0x01	; 1
    39c6:	88 8b       	std	Y+16, r24	; 0x10
    39c8:	91 c0       	rjmp	.+290    	; 0x3aec <HAL_SM_voidSMSetAngle+0x3d4>
	else if (__tmp > 255)
    39ca:	69 89       	ldd	r22, Y+17	; 0x11
    39cc:	7a 89       	ldd	r23, Y+18	; 0x12
    39ce:	8b 89       	ldd	r24, Y+19	; 0x13
    39d0:	9c 89       	ldd	r25, Y+20	; 0x14
    39d2:	20 e0       	ldi	r18, 0x00	; 0
    39d4:	30 e0       	ldi	r19, 0x00	; 0
    39d6:	4f e7       	ldi	r20, 0x7F	; 127
    39d8:	53 e4       	ldi	r21, 0x43	; 67
    39da:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    39de:	18 16       	cp	r1, r24
    39e0:	0c f0       	brlt	.+2      	; 0x39e4 <HAL_SM_voidSMSetAngle+0x2cc>
    39e2:	7b c0       	rjmp	.+246    	; 0x3ada <HAL_SM_voidSMSetAngle+0x3c2>
	{
		_delay_ms(__us / 1000.0);
    39e4:	6d 89       	ldd	r22, Y+21	; 0x15
    39e6:	7e 89       	ldd	r23, Y+22	; 0x16
    39e8:	8f 89       	ldd	r24, Y+23	; 0x17
    39ea:	98 8d       	ldd	r25, Y+24	; 0x18
    39ec:	20 e0       	ldi	r18, 0x00	; 0
    39ee:	30 e0       	ldi	r19, 0x00	; 0
    39f0:	4a e7       	ldi	r20, 0x7A	; 122
    39f2:	54 e4       	ldi	r21, 0x44	; 68
    39f4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    39f8:	dc 01       	movw	r26, r24
    39fa:	cb 01       	movw	r24, r22
    39fc:	8c 87       	std	Y+12, r24	; 0x0c
    39fe:	9d 87       	std	Y+13, r25	; 0x0d
    3a00:	ae 87       	std	Y+14, r26	; 0x0e
    3a02:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a04:	6c 85       	ldd	r22, Y+12	; 0x0c
    3a06:	7d 85       	ldd	r23, Y+13	; 0x0d
    3a08:	8e 85       	ldd	r24, Y+14	; 0x0e
    3a0a:	9f 85       	ldd	r25, Y+15	; 0x0f
    3a0c:	20 e0       	ldi	r18, 0x00	; 0
    3a0e:	30 e0       	ldi	r19, 0x00	; 0
    3a10:	4a e7       	ldi	r20, 0x7A	; 122
    3a12:	55 e4       	ldi	r21, 0x45	; 69
    3a14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a18:	dc 01       	movw	r26, r24
    3a1a:	cb 01       	movw	r24, r22
    3a1c:	88 87       	std	Y+8, r24	; 0x08
    3a1e:	99 87       	std	Y+9, r25	; 0x09
    3a20:	aa 87       	std	Y+10, r26	; 0x0a
    3a22:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    3a24:	68 85       	ldd	r22, Y+8	; 0x08
    3a26:	79 85       	ldd	r23, Y+9	; 0x09
    3a28:	8a 85       	ldd	r24, Y+10	; 0x0a
    3a2a:	9b 85       	ldd	r25, Y+11	; 0x0b
    3a2c:	20 e0       	ldi	r18, 0x00	; 0
    3a2e:	30 e0       	ldi	r19, 0x00	; 0
    3a30:	40 e8       	ldi	r20, 0x80	; 128
    3a32:	5f e3       	ldi	r21, 0x3F	; 63
    3a34:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3a38:	88 23       	and	r24, r24
    3a3a:	2c f4       	brge	.+10     	; 0x3a46 <HAL_SM_voidSMSetAngle+0x32e>
		__ticks = 1;
    3a3c:	81 e0       	ldi	r24, 0x01	; 1
    3a3e:	90 e0       	ldi	r25, 0x00	; 0
    3a40:	9f 83       	std	Y+7, r25	; 0x07
    3a42:	8e 83       	std	Y+6, r24	; 0x06
    3a44:	3f c0       	rjmp	.+126    	; 0x3ac4 <HAL_SM_voidSMSetAngle+0x3ac>
	else if (__tmp > 65535)
    3a46:	68 85       	ldd	r22, Y+8	; 0x08
    3a48:	79 85       	ldd	r23, Y+9	; 0x09
    3a4a:	8a 85       	ldd	r24, Y+10	; 0x0a
    3a4c:	9b 85       	ldd	r25, Y+11	; 0x0b
    3a4e:	20 e0       	ldi	r18, 0x00	; 0
    3a50:	3f ef       	ldi	r19, 0xFF	; 255
    3a52:	4f e7       	ldi	r20, 0x7F	; 127
    3a54:	57 e4       	ldi	r21, 0x47	; 71
    3a56:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3a5a:	18 16       	cp	r1, r24
    3a5c:	4c f5       	brge	.+82     	; 0x3ab0 <HAL_SM_voidSMSetAngle+0x398>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a5e:	6c 85       	ldd	r22, Y+12	; 0x0c
    3a60:	7d 85       	ldd	r23, Y+13	; 0x0d
    3a62:	8e 85       	ldd	r24, Y+14	; 0x0e
    3a64:	9f 85       	ldd	r25, Y+15	; 0x0f
    3a66:	20 e0       	ldi	r18, 0x00	; 0
    3a68:	30 e0       	ldi	r19, 0x00	; 0
    3a6a:	40 e2       	ldi	r20, 0x20	; 32
    3a6c:	51 e4       	ldi	r21, 0x41	; 65
    3a6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a72:	dc 01       	movw	r26, r24
    3a74:	cb 01       	movw	r24, r22
    3a76:	bc 01       	movw	r22, r24
    3a78:	cd 01       	movw	r24, r26
    3a7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a7e:	dc 01       	movw	r26, r24
    3a80:	cb 01       	movw	r24, r22
    3a82:	9f 83       	std	Y+7, r25	; 0x07
    3a84:	8e 83       	std	Y+6, r24	; 0x06
    3a86:	0f c0       	rjmp	.+30     	; 0x3aa6 <HAL_SM_voidSMSetAngle+0x38e>
    3a88:	80 e9       	ldi	r24, 0x90	; 144
    3a8a:	91 e0       	ldi	r25, 0x01	; 1
    3a8c:	9d 83       	std	Y+5, r25	; 0x05
    3a8e:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3a90:	8c 81       	ldd	r24, Y+4	; 0x04
    3a92:	9d 81       	ldd	r25, Y+5	; 0x05
    3a94:	01 97       	sbiw	r24, 0x01	; 1
    3a96:	f1 f7       	brne	.-4      	; 0x3a94 <HAL_SM_voidSMSetAngle+0x37c>
    3a98:	9d 83       	std	Y+5, r25	; 0x05
    3a9a:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a9c:	8e 81       	ldd	r24, Y+6	; 0x06
    3a9e:	9f 81       	ldd	r25, Y+7	; 0x07
    3aa0:	01 97       	sbiw	r24, 0x01	; 1
    3aa2:	9f 83       	std	Y+7, r25	; 0x07
    3aa4:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3aa6:	8e 81       	ldd	r24, Y+6	; 0x06
    3aa8:	9f 81       	ldd	r25, Y+7	; 0x07
    3aaa:	00 97       	sbiw	r24, 0x00	; 0
    3aac:	69 f7       	brne	.-38     	; 0x3a88 <HAL_SM_voidSMSetAngle+0x370>
    3aae:	24 c0       	rjmp	.+72     	; 0x3af8 <HAL_SM_voidSMSetAngle+0x3e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ab0:	68 85       	ldd	r22, Y+8	; 0x08
    3ab2:	79 85       	ldd	r23, Y+9	; 0x09
    3ab4:	8a 85       	ldd	r24, Y+10	; 0x0a
    3ab6:	9b 85       	ldd	r25, Y+11	; 0x0b
    3ab8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3abc:	dc 01       	movw	r26, r24
    3abe:	cb 01       	movw	r24, r22
    3ac0:	9f 83       	std	Y+7, r25	; 0x07
    3ac2:	8e 83       	std	Y+6, r24	; 0x06
    3ac4:	8e 81       	ldd	r24, Y+6	; 0x06
    3ac6:	9f 81       	ldd	r25, Y+7	; 0x07
    3ac8:	9b 83       	std	Y+3, r25	; 0x03
    3aca:	8a 83       	std	Y+2, r24	; 0x02
    3acc:	8a 81       	ldd	r24, Y+2	; 0x02
    3ace:	9b 81       	ldd	r25, Y+3	; 0x03
    3ad0:	01 97       	sbiw	r24, 0x01	; 1
    3ad2:	f1 f7       	brne	.-4      	; 0x3ad0 <HAL_SM_voidSMSetAngle+0x3b8>
    3ad4:	9b 83       	std	Y+3, r25	; 0x03
    3ad6:	8a 83       	std	Y+2, r24	; 0x02
    3ad8:	0f c0       	rjmp	.+30     	; 0x3af8 <HAL_SM_voidSMSetAngle+0x3e0>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3ada:	69 89       	ldd	r22, Y+17	; 0x11
    3adc:	7a 89       	ldd	r23, Y+18	; 0x12
    3ade:	8b 89       	ldd	r24, Y+19	; 0x13
    3ae0:	9c 89       	ldd	r25, Y+20	; 0x14
    3ae2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ae6:	dc 01       	movw	r26, r24
    3ae8:	cb 01       	movw	r24, r22
    3aea:	88 8b       	std	Y+16, r24	; 0x10
    3aec:	88 89       	ldd	r24, Y+16	; 0x10
    3aee:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3af0:	89 81       	ldd	r24, Y+1	; 0x01
    3af2:	8a 95       	dec	r24
    3af4:	f1 f7       	brne	.-4      	; 0x3af2 <HAL_SM_voidSMSetAngle+0x3da>
    3af6:	89 83       	std	Y+1, r24	; 0x01
	} else {
		//NOTHING
	}
}
    3af8:	e5 96       	adiw	r28, 0x35	; 53
    3afa:	0f b6       	in	r0, 0x3f	; 63
    3afc:	f8 94       	cli
    3afe:	de bf       	out	0x3e, r29	; 62
    3b00:	0f be       	out	0x3f, r0	; 63
    3b02:	cd bf       	out	0x3d, r28	; 61
    3b04:	cf 91       	pop	r28
    3b06:	df 91       	pop	r29
    3b08:	08 95       	ret

00003b0a <HAL_LED_u8LedInit>:
 *  Created on: Sep 25, 2023
 *      Author: Mohamed
 */
#include "LED.h"

STD_Type HAL_LED_u8LedInit(u8 Loc_u8LEDPortID, u8 Loc_u8LEDPinID) {
    3b0a:	df 93       	push	r29
    3b0c:	cf 93       	push	r28
    3b0e:	00 d0       	rcall	.+0      	; 0x3b10 <HAL_LED_u8LedInit+0x6>
    3b10:	0f 92       	push	r0
    3b12:	cd b7       	in	r28, 0x3d	; 61
    3b14:	de b7       	in	r29, 0x3e	; 62
    3b16:	8a 83       	std	Y+2, r24	; 0x02
    3b18:	6b 83       	std	Y+3, r22	; 0x03
	u8 Loc_u8Return_Value = E_NOT_OK;
    3b1a:	81 e0       	ldi	r24, 0x01	; 1
    3b1c:	89 83       	std	Y+1, r24	; 0x01
	if (Loc_u8LEDPortID <= PortD && Loc_u8LEDPinID <= Num_Of_Pins) {
    3b1e:	8a 81       	ldd	r24, Y+2	; 0x02
    3b20:	84 30       	cpi	r24, 0x04	; 4
    3b22:	48 f4       	brcc	.+18     	; 0x3b36 <HAL_LED_u8LedInit+0x2c>
    3b24:	8b 81       	ldd	r24, Y+3	; 0x03
    3b26:	88 30       	cpi	r24, 0x08	; 8
    3b28:	30 f4       	brcc	.+12     	; 0x3b36 <HAL_LED_u8LedInit+0x2c>
		Loc_u8Return_Value = MCAL_DIO_u8SetPinDirection(Loc_u8LEDPortID,
    3b2a:	8a 81       	ldd	r24, Y+2	; 0x02
    3b2c:	6b 81       	ldd	r22, Y+3	; 0x03
    3b2e:	41 e0       	ldi	r20, 0x01	; 1
    3b30:	0e 94 96 15 	call	0x2b2c	; 0x2b2c <MCAL_DIO_u8SetPinDirection>
    3b34:	89 83       	std	Y+1, r24	; 0x01
				Loc_u8LEDPinID, Pin_High);
	} else {
		//Do Nothing
	}
	return Loc_u8Return_Value;
    3b36:	89 81       	ldd	r24, Y+1	; 0x01
}
    3b38:	0f 90       	pop	r0
    3b3a:	0f 90       	pop	r0
    3b3c:	0f 90       	pop	r0
    3b3e:	cf 91       	pop	r28
    3b40:	df 91       	pop	r29
    3b42:	08 95       	ret

00003b44 <HAL_LED_u8LedMode>:

STD_Type HAL_LED_u8LedMode(u8 Loc_u8LEDPortID, u8 Loc_u8LEDPinID,
		u8 Loc_u8LEDMode) {
    3b44:	df 93       	push	r29
    3b46:	cf 93       	push	r28
    3b48:	00 d0       	rcall	.+0      	; 0x3b4a <HAL_LED_u8LedMode+0x6>
    3b4a:	00 d0       	rcall	.+0      	; 0x3b4c <HAL_LED_u8LedMode+0x8>
    3b4c:	cd b7       	in	r28, 0x3d	; 61
    3b4e:	de b7       	in	r29, 0x3e	; 62
    3b50:	8a 83       	std	Y+2, r24	; 0x02
    3b52:	6b 83       	std	Y+3, r22	; 0x03
    3b54:	4c 83       	std	Y+4, r20	; 0x04
	u8 Loc_u8Return_Value = E_NOT_OK;
    3b56:	81 e0       	ldi	r24, 0x01	; 1
    3b58:	89 83       	std	Y+1, r24	; 0x01
	if (Loc_u8LEDPortID <= PortD && Loc_u8LEDPinID <= Num_Of_Pins
    3b5a:	8a 81       	ldd	r24, Y+2	; 0x02
    3b5c:	84 30       	cpi	r24, 0x04	; 4
    3b5e:	10 f5       	brcc	.+68     	; 0x3ba4 <HAL_LED_u8LedMode+0x60>
    3b60:	8b 81       	ldd	r24, Y+3	; 0x03
    3b62:	88 30       	cpi	r24, 0x08	; 8
    3b64:	f8 f4       	brcc	.+62     	; 0x3ba4 <HAL_LED_u8LedMode+0x60>
    3b66:	8c 81       	ldd	r24, Y+4	; 0x04
    3b68:	83 30       	cpi	r24, 0x03	; 3
    3b6a:	e0 f4       	brcc	.+56     	; 0x3ba4 <HAL_LED_u8LedMode+0x60>
			&& Loc_u8LEDMode <= LED_TOG) {
		if (Loc_u8LEDMode == LED_ON) {
    3b6c:	8c 81       	ldd	r24, Y+4	; 0x04
    3b6e:	81 30       	cpi	r24, 0x01	; 1
    3b70:	39 f4       	brne	.+14     	; 0x3b80 <HAL_LED_u8LedMode+0x3c>
			Loc_u8Return_Value = MCAL_DIO_u8SetPinValue(Loc_u8LEDPortID,
    3b72:	8a 81       	ldd	r24, Y+2	; 0x02
    3b74:	6b 81       	ldd	r22, Y+3	; 0x03
    3b76:	41 e0       	ldi	r20, 0x01	; 1
    3b78:	0e 94 04 17 	call	0x2e08	; 0x2e08 <MCAL_DIO_u8SetPinValue>
    3b7c:	89 83       	std	Y+1, r24	; 0x01
    3b7e:	12 c0       	rjmp	.+36     	; 0x3ba4 <HAL_LED_u8LedMode+0x60>
					Loc_u8LEDPinID, Pin_High);
		} else if (Loc_u8LEDMode == LED_OFF) {
    3b80:	8c 81       	ldd	r24, Y+4	; 0x04
    3b82:	88 23       	and	r24, r24
    3b84:	39 f4       	brne	.+14     	; 0x3b94 <HAL_LED_u8LedMode+0x50>
			Loc_u8Return_Value = MCAL_DIO_u8SetPinValue(Loc_u8LEDPortID,
    3b86:	8a 81       	ldd	r24, Y+2	; 0x02
    3b88:	6b 81       	ldd	r22, Y+3	; 0x03
    3b8a:	40 e0       	ldi	r20, 0x00	; 0
    3b8c:	0e 94 04 17 	call	0x2e08	; 0x2e08 <MCAL_DIO_u8SetPinValue>
    3b90:	89 83       	std	Y+1, r24	; 0x01
    3b92:	08 c0       	rjmp	.+16     	; 0x3ba4 <HAL_LED_u8LedMode+0x60>
					Loc_u8LEDPinID, Pin_Low);
		} else if (Loc_u8LEDMode == LED_TOG) {
    3b94:	8c 81       	ldd	r24, Y+4	; 0x04
    3b96:	82 30       	cpi	r24, 0x02	; 2
    3b98:	29 f4       	brne	.+10     	; 0x3ba4 <HAL_LED_u8LedMode+0x60>
			Loc_u8Return_Value = MCAL_DIO_u8TogglePinValue(Loc_u8LEDPortID,
    3b9a:	8a 81       	ldd	r24, Y+2	; 0x02
    3b9c:	6b 81       	ldd	r22, Y+3	; 0x03
    3b9e:	0e 94 ed 18 	call	0x31da	; 0x31da <MCAL_DIO_u8TogglePinValue>
    3ba2:	89 83       	std	Y+1, r24	; 0x01
			//Do Nothing
		}
	} else {
		//Do Nothing
	}
	return Loc_u8Return_Value;
    3ba4:	89 81       	ldd	r24, Y+1	; 0x01
}
    3ba6:	0f 90       	pop	r0
    3ba8:	0f 90       	pop	r0
    3baa:	0f 90       	pop	r0
    3bac:	0f 90       	pop	r0
    3bae:	cf 91       	pop	r28
    3bb0:	df 91       	pop	r29
    3bb2:	08 95       	ret

00003bb4 <HAL_LCD_u8LCDInit>:

#include "LCD.h"

//static u32 Counter = 0;

void HAL_LCD_u8LCDInit() {
    3bb4:	0f 93       	push	r16
    3bb6:	1f 93       	push	r17
    3bb8:	df 93       	push	r29
    3bba:	cf 93       	push	r28
    3bbc:	cd b7       	in	r28, 0x3d	; 61
    3bbe:	de b7       	in	r29, 0x3e	; 62
    3bc0:	c4 55       	subi	r28, 0x54	; 84
    3bc2:	d0 40       	sbci	r29, 0x00	; 0
    3bc4:	0f b6       	in	r0, 0x3f	; 63
    3bc6:	f8 94       	cli
    3bc8:	de bf       	out	0x3e, r29	; 62
    3bca:	0f be       	out	0x3f, r0	; 63
    3bcc:	cd bf       	out	0x3d, r28	; 61
	MCAL_DIO_u8SetPinDirection(LCD_D_PORT, LCD_D7_PIN, Pin_High);
    3bce:	80 e0       	ldi	r24, 0x00	; 0
    3bd0:	67 e0       	ldi	r22, 0x07	; 7
    3bd2:	41 e0       	ldi	r20, 0x01	; 1
    3bd4:	0e 94 96 15 	call	0x2b2c	; 0x2b2c <MCAL_DIO_u8SetPinDirection>
	MCAL_DIO_u8SetPinDirection(LCD_D_PORT, LCD_D6_PIN, Pin_High);
    3bd8:	80 e0       	ldi	r24, 0x00	; 0
    3bda:	66 e0       	ldi	r22, 0x06	; 6
    3bdc:	41 e0       	ldi	r20, 0x01	; 1
    3bde:	0e 94 96 15 	call	0x2b2c	; 0x2b2c <MCAL_DIO_u8SetPinDirection>
	MCAL_DIO_u8SetPinDirection(LCD_D_PORT, LCD_D5_PIN, Pin_High);
    3be2:	80 e0       	ldi	r24, 0x00	; 0
    3be4:	65 e0       	ldi	r22, 0x05	; 5
    3be6:	41 e0       	ldi	r20, 0x01	; 1
    3be8:	0e 94 96 15 	call	0x2b2c	; 0x2b2c <MCAL_DIO_u8SetPinDirection>
	MCAL_DIO_u8SetPinDirection(LCD_D_PORT, LCD_D4_PIN, Pin_High);
    3bec:	80 e0       	ldi	r24, 0x00	; 0
    3bee:	64 e0       	ldi	r22, 0x04	; 4
    3bf0:	41 e0       	ldi	r20, 0x01	; 1
    3bf2:	0e 94 96 15 	call	0x2b2c	; 0x2b2c <MCAL_DIO_u8SetPinDirection>
	MCAL_DIO_u8SetPinDirection(RS_Port, RS_Pin, Pin_High);
    3bf6:	81 e0       	ldi	r24, 0x01	; 1
    3bf8:	61 e0       	ldi	r22, 0x01	; 1
    3bfa:	41 e0       	ldi	r20, 0x01	; 1
    3bfc:	0e 94 96 15 	call	0x2b2c	; 0x2b2c <MCAL_DIO_u8SetPinDirection>
	MCAL_DIO_u8SetPinDirection(RW_Port, RW_Pin, Pin_High);
    3c00:	81 e0       	ldi	r24, 0x01	; 1
    3c02:	62 e0       	ldi	r22, 0x02	; 2
    3c04:	41 e0       	ldi	r20, 0x01	; 1
    3c06:	0e 94 96 15 	call	0x2b2c	; 0x2b2c <MCAL_DIO_u8SetPinDirection>
	MCAL_DIO_u8SetPinDirection(Enable_PORT, Enable_PIN, Pin_High);
    3c0a:	81 e0       	ldi	r24, 0x01	; 1
    3c0c:	63 e0       	ldi	r22, 0x03	; 3
    3c0e:	41 e0       	ldi	r20, 0x01	; 1
    3c10:	0e 94 96 15 	call	0x2b2c	; 0x2b2c <MCAL_DIO_u8SetPinDirection>
    3c14:	fe 01       	movw	r30, r28
    3c16:	ef 5a       	subi	r30, 0xAF	; 175
    3c18:	ff 4f       	sbci	r31, 0xFF	; 255
    3c1a:	80 e0       	ldi	r24, 0x00	; 0
    3c1c:	90 e0       	ldi	r25, 0x00	; 0
    3c1e:	a0 e0       	ldi	r26, 0x00	; 0
    3c20:	b0 e4       	ldi	r27, 0x40	; 64
    3c22:	80 83       	st	Z, r24
    3c24:	91 83       	std	Z+1, r25	; 0x01
    3c26:	a2 83       	std	Z+2, r26	; 0x02
    3c28:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c2a:	8e 01       	movw	r16, r28
    3c2c:	03 5b       	subi	r16, 0xB3	; 179
    3c2e:	1f 4f       	sbci	r17, 0xFF	; 255
    3c30:	fe 01       	movw	r30, r28
    3c32:	ef 5a       	subi	r30, 0xAF	; 175
    3c34:	ff 4f       	sbci	r31, 0xFF	; 255
    3c36:	60 81       	ld	r22, Z
    3c38:	71 81       	ldd	r23, Z+1	; 0x01
    3c3a:	82 81       	ldd	r24, Z+2	; 0x02
    3c3c:	93 81       	ldd	r25, Z+3	; 0x03
    3c3e:	20 e0       	ldi	r18, 0x00	; 0
    3c40:	30 e0       	ldi	r19, 0x00	; 0
    3c42:	4a e7       	ldi	r20, 0x7A	; 122
    3c44:	55 e4       	ldi	r21, 0x45	; 69
    3c46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c4a:	dc 01       	movw	r26, r24
    3c4c:	cb 01       	movw	r24, r22
    3c4e:	f8 01       	movw	r30, r16
    3c50:	80 83       	st	Z, r24
    3c52:	91 83       	std	Z+1, r25	; 0x01
    3c54:	a2 83       	std	Z+2, r26	; 0x02
    3c56:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3c58:	fe 01       	movw	r30, r28
    3c5a:	e3 5b       	subi	r30, 0xB3	; 179
    3c5c:	ff 4f       	sbci	r31, 0xFF	; 255
    3c5e:	60 81       	ld	r22, Z
    3c60:	71 81       	ldd	r23, Z+1	; 0x01
    3c62:	82 81       	ldd	r24, Z+2	; 0x02
    3c64:	93 81       	ldd	r25, Z+3	; 0x03
    3c66:	20 e0       	ldi	r18, 0x00	; 0
    3c68:	30 e0       	ldi	r19, 0x00	; 0
    3c6a:	40 e8       	ldi	r20, 0x80	; 128
    3c6c:	5f e3       	ldi	r21, 0x3F	; 63
    3c6e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3c72:	88 23       	and	r24, r24
    3c74:	44 f4       	brge	.+16     	; 0x3c86 <HAL_LCD_u8LCDInit+0xd2>
		__ticks = 1;
    3c76:	fe 01       	movw	r30, r28
    3c78:	e5 5b       	subi	r30, 0xB5	; 181
    3c7a:	ff 4f       	sbci	r31, 0xFF	; 255
    3c7c:	81 e0       	ldi	r24, 0x01	; 1
    3c7e:	90 e0       	ldi	r25, 0x00	; 0
    3c80:	91 83       	std	Z+1, r25	; 0x01
    3c82:	80 83       	st	Z, r24
    3c84:	64 c0       	rjmp	.+200    	; 0x3d4e <HAL_LCD_u8LCDInit+0x19a>
	else if (__tmp > 65535)
    3c86:	fe 01       	movw	r30, r28
    3c88:	e3 5b       	subi	r30, 0xB3	; 179
    3c8a:	ff 4f       	sbci	r31, 0xFF	; 255
    3c8c:	60 81       	ld	r22, Z
    3c8e:	71 81       	ldd	r23, Z+1	; 0x01
    3c90:	82 81       	ldd	r24, Z+2	; 0x02
    3c92:	93 81       	ldd	r25, Z+3	; 0x03
    3c94:	20 e0       	ldi	r18, 0x00	; 0
    3c96:	3f ef       	ldi	r19, 0xFF	; 255
    3c98:	4f e7       	ldi	r20, 0x7F	; 127
    3c9a:	57 e4       	ldi	r21, 0x47	; 71
    3c9c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3ca0:	18 16       	cp	r1, r24
    3ca2:	0c f0       	brlt	.+2      	; 0x3ca6 <HAL_LCD_u8LCDInit+0xf2>
    3ca4:	43 c0       	rjmp	.+134    	; 0x3d2c <HAL_LCD_u8LCDInit+0x178>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ca6:	fe 01       	movw	r30, r28
    3ca8:	ef 5a       	subi	r30, 0xAF	; 175
    3caa:	ff 4f       	sbci	r31, 0xFF	; 255
    3cac:	60 81       	ld	r22, Z
    3cae:	71 81       	ldd	r23, Z+1	; 0x01
    3cb0:	82 81       	ldd	r24, Z+2	; 0x02
    3cb2:	93 81       	ldd	r25, Z+3	; 0x03
    3cb4:	20 e0       	ldi	r18, 0x00	; 0
    3cb6:	30 e0       	ldi	r19, 0x00	; 0
    3cb8:	40 e2       	ldi	r20, 0x20	; 32
    3cba:	51 e4       	ldi	r21, 0x41	; 65
    3cbc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cc0:	dc 01       	movw	r26, r24
    3cc2:	cb 01       	movw	r24, r22
    3cc4:	8e 01       	movw	r16, r28
    3cc6:	05 5b       	subi	r16, 0xB5	; 181
    3cc8:	1f 4f       	sbci	r17, 0xFF	; 255
    3cca:	bc 01       	movw	r22, r24
    3ccc:	cd 01       	movw	r24, r26
    3cce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3cd2:	dc 01       	movw	r26, r24
    3cd4:	cb 01       	movw	r24, r22
    3cd6:	f8 01       	movw	r30, r16
    3cd8:	91 83       	std	Z+1, r25	; 0x01
    3cda:	80 83       	st	Z, r24
    3cdc:	1f c0       	rjmp	.+62     	; 0x3d1c <HAL_LCD_u8LCDInit+0x168>
    3cde:	fe 01       	movw	r30, r28
    3ce0:	e7 5b       	subi	r30, 0xB7	; 183
    3ce2:	ff 4f       	sbci	r31, 0xFF	; 255
    3ce4:	80 e9       	ldi	r24, 0x90	; 144
    3ce6:	91 e0       	ldi	r25, 0x01	; 1
    3ce8:	91 83       	std	Z+1, r25	; 0x01
    3cea:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3cec:	fe 01       	movw	r30, r28
    3cee:	e7 5b       	subi	r30, 0xB7	; 183
    3cf0:	ff 4f       	sbci	r31, 0xFF	; 255
    3cf2:	80 81       	ld	r24, Z
    3cf4:	91 81       	ldd	r25, Z+1	; 0x01
    3cf6:	01 97       	sbiw	r24, 0x01	; 1
    3cf8:	f1 f7       	brne	.-4      	; 0x3cf6 <HAL_LCD_u8LCDInit+0x142>
    3cfa:	fe 01       	movw	r30, r28
    3cfc:	e7 5b       	subi	r30, 0xB7	; 183
    3cfe:	ff 4f       	sbci	r31, 0xFF	; 255
    3d00:	91 83       	std	Z+1, r25	; 0x01
    3d02:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d04:	de 01       	movw	r26, r28
    3d06:	a5 5b       	subi	r26, 0xB5	; 181
    3d08:	bf 4f       	sbci	r27, 0xFF	; 255
    3d0a:	fe 01       	movw	r30, r28
    3d0c:	e5 5b       	subi	r30, 0xB5	; 181
    3d0e:	ff 4f       	sbci	r31, 0xFF	; 255
    3d10:	80 81       	ld	r24, Z
    3d12:	91 81       	ldd	r25, Z+1	; 0x01
    3d14:	01 97       	sbiw	r24, 0x01	; 1
    3d16:	11 96       	adiw	r26, 0x01	; 1
    3d18:	9c 93       	st	X, r25
    3d1a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d1c:	fe 01       	movw	r30, r28
    3d1e:	e5 5b       	subi	r30, 0xB5	; 181
    3d20:	ff 4f       	sbci	r31, 0xFF	; 255
    3d22:	80 81       	ld	r24, Z
    3d24:	91 81       	ldd	r25, Z+1	; 0x01
    3d26:	00 97       	sbiw	r24, 0x00	; 0
    3d28:	d1 f6       	brne	.-76     	; 0x3cde <HAL_LCD_u8LCDInit+0x12a>
    3d2a:	27 c0       	rjmp	.+78     	; 0x3d7a <HAL_LCD_u8LCDInit+0x1c6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d2c:	8e 01       	movw	r16, r28
    3d2e:	05 5b       	subi	r16, 0xB5	; 181
    3d30:	1f 4f       	sbci	r17, 0xFF	; 255
    3d32:	fe 01       	movw	r30, r28
    3d34:	e3 5b       	subi	r30, 0xB3	; 179
    3d36:	ff 4f       	sbci	r31, 0xFF	; 255
    3d38:	60 81       	ld	r22, Z
    3d3a:	71 81       	ldd	r23, Z+1	; 0x01
    3d3c:	82 81       	ldd	r24, Z+2	; 0x02
    3d3e:	93 81       	ldd	r25, Z+3	; 0x03
    3d40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d44:	dc 01       	movw	r26, r24
    3d46:	cb 01       	movw	r24, r22
    3d48:	f8 01       	movw	r30, r16
    3d4a:	91 83       	std	Z+1, r25	; 0x01
    3d4c:	80 83       	st	Z, r24
    3d4e:	de 01       	movw	r26, r28
    3d50:	a9 5b       	subi	r26, 0xB9	; 185
    3d52:	bf 4f       	sbci	r27, 0xFF	; 255
    3d54:	fe 01       	movw	r30, r28
    3d56:	e5 5b       	subi	r30, 0xB5	; 181
    3d58:	ff 4f       	sbci	r31, 0xFF	; 255
    3d5a:	80 81       	ld	r24, Z
    3d5c:	91 81       	ldd	r25, Z+1	; 0x01
    3d5e:	8d 93       	st	X+, r24
    3d60:	9c 93       	st	X, r25
    3d62:	fe 01       	movw	r30, r28
    3d64:	e9 5b       	subi	r30, 0xB9	; 185
    3d66:	ff 4f       	sbci	r31, 0xFF	; 255
    3d68:	80 81       	ld	r24, Z
    3d6a:	91 81       	ldd	r25, Z+1	; 0x01
    3d6c:	01 97       	sbiw	r24, 0x01	; 1
    3d6e:	f1 f7       	brne	.-4      	; 0x3d6c <HAL_LCD_u8LCDInit+0x1b8>
    3d70:	fe 01       	movw	r30, r28
    3d72:	e9 5b       	subi	r30, 0xB9	; 185
    3d74:	ff 4f       	sbci	r31, 0xFF	; 255
    3d76:	91 83       	std	Z+1, r25	; 0x01
    3d78:	80 83       	st	Z, r24
	_delay_ms(2);
	HAL_LCD_u8SendCommands(Reset);
    3d7a:	82 e0       	ldi	r24, 0x02	; 2
    3d7c:	0e 94 28 21 	call	0x4250	; 0x4250 <HAL_LCD_u8SendCommands>
    3d80:	fe 01       	movw	r30, r28
    3d82:	ed 5b       	subi	r30, 0xBD	; 189
    3d84:	ff 4f       	sbci	r31, 0xFF	; 255
    3d86:	80 e0       	ldi	r24, 0x00	; 0
    3d88:	90 e0       	ldi	r25, 0x00	; 0
    3d8a:	a0 e0       	ldi	r26, 0x00	; 0
    3d8c:	b0 e4       	ldi	r27, 0x40	; 64
    3d8e:	80 83       	st	Z, r24
    3d90:	91 83       	std	Z+1, r25	; 0x01
    3d92:	a2 83       	std	Z+2, r26	; 0x02
    3d94:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d96:	8e 01       	movw	r16, r28
    3d98:	01 5c       	subi	r16, 0xC1	; 193
    3d9a:	1f 4f       	sbci	r17, 0xFF	; 255
    3d9c:	fe 01       	movw	r30, r28
    3d9e:	ed 5b       	subi	r30, 0xBD	; 189
    3da0:	ff 4f       	sbci	r31, 0xFF	; 255
    3da2:	60 81       	ld	r22, Z
    3da4:	71 81       	ldd	r23, Z+1	; 0x01
    3da6:	82 81       	ldd	r24, Z+2	; 0x02
    3da8:	93 81       	ldd	r25, Z+3	; 0x03
    3daa:	20 e0       	ldi	r18, 0x00	; 0
    3dac:	30 e0       	ldi	r19, 0x00	; 0
    3dae:	4a e7       	ldi	r20, 0x7A	; 122
    3db0:	55 e4       	ldi	r21, 0x45	; 69
    3db2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3db6:	dc 01       	movw	r26, r24
    3db8:	cb 01       	movw	r24, r22
    3dba:	f8 01       	movw	r30, r16
    3dbc:	80 83       	st	Z, r24
    3dbe:	91 83       	std	Z+1, r25	; 0x01
    3dc0:	a2 83       	std	Z+2, r26	; 0x02
    3dc2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3dc4:	fe 01       	movw	r30, r28
    3dc6:	ff 96       	adiw	r30, 0x3f	; 63
    3dc8:	60 81       	ld	r22, Z
    3dca:	71 81       	ldd	r23, Z+1	; 0x01
    3dcc:	82 81       	ldd	r24, Z+2	; 0x02
    3dce:	93 81       	ldd	r25, Z+3	; 0x03
    3dd0:	20 e0       	ldi	r18, 0x00	; 0
    3dd2:	30 e0       	ldi	r19, 0x00	; 0
    3dd4:	40 e8       	ldi	r20, 0x80	; 128
    3dd6:	5f e3       	ldi	r21, 0x3F	; 63
    3dd8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3ddc:	88 23       	and	r24, r24
    3dde:	2c f4       	brge	.+10     	; 0x3dea <HAL_LCD_u8LCDInit+0x236>
		__ticks = 1;
    3de0:	81 e0       	ldi	r24, 0x01	; 1
    3de2:	90 e0       	ldi	r25, 0x00	; 0
    3de4:	9e af       	std	Y+62, r25	; 0x3e
    3de6:	8d af       	std	Y+61, r24	; 0x3d
    3de8:	46 c0       	rjmp	.+140    	; 0x3e76 <HAL_LCD_u8LCDInit+0x2c2>
	else if (__tmp > 65535)
    3dea:	fe 01       	movw	r30, r28
    3dec:	ff 96       	adiw	r30, 0x3f	; 63
    3dee:	60 81       	ld	r22, Z
    3df0:	71 81       	ldd	r23, Z+1	; 0x01
    3df2:	82 81       	ldd	r24, Z+2	; 0x02
    3df4:	93 81       	ldd	r25, Z+3	; 0x03
    3df6:	20 e0       	ldi	r18, 0x00	; 0
    3df8:	3f ef       	ldi	r19, 0xFF	; 255
    3dfa:	4f e7       	ldi	r20, 0x7F	; 127
    3dfc:	57 e4       	ldi	r21, 0x47	; 71
    3dfe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3e02:	18 16       	cp	r1, r24
    3e04:	64 f5       	brge	.+88     	; 0x3e5e <HAL_LCD_u8LCDInit+0x2aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e06:	fe 01       	movw	r30, r28
    3e08:	ed 5b       	subi	r30, 0xBD	; 189
    3e0a:	ff 4f       	sbci	r31, 0xFF	; 255
    3e0c:	60 81       	ld	r22, Z
    3e0e:	71 81       	ldd	r23, Z+1	; 0x01
    3e10:	82 81       	ldd	r24, Z+2	; 0x02
    3e12:	93 81       	ldd	r25, Z+3	; 0x03
    3e14:	20 e0       	ldi	r18, 0x00	; 0
    3e16:	30 e0       	ldi	r19, 0x00	; 0
    3e18:	40 e2       	ldi	r20, 0x20	; 32
    3e1a:	51 e4       	ldi	r21, 0x41	; 65
    3e1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e20:	dc 01       	movw	r26, r24
    3e22:	cb 01       	movw	r24, r22
    3e24:	bc 01       	movw	r22, r24
    3e26:	cd 01       	movw	r24, r26
    3e28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e2c:	dc 01       	movw	r26, r24
    3e2e:	cb 01       	movw	r24, r22
    3e30:	9e af       	std	Y+62, r25	; 0x3e
    3e32:	8d af       	std	Y+61, r24	; 0x3d
    3e34:	0f c0       	rjmp	.+30     	; 0x3e54 <HAL_LCD_u8LCDInit+0x2a0>
    3e36:	80 e9       	ldi	r24, 0x90	; 144
    3e38:	91 e0       	ldi	r25, 0x01	; 1
    3e3a:	9c af       	std	Y+60, r25	; 0x3c
    3e3c:	8b af       	std	Y+59, r24	; 0x3b
    3e3e:	8b ad       	ldd	r24, Y+59	; 0x3b
    3e40:	9c ad       	ldd	r25, Y+60	; 0x3c
    3e42:	01 97       	sbiw	r24, 0x01	; 1
    3e44:	f1 f7       	brne	.-4      	; 0x3e42 <HAL_LCD_u8LCDInit+0x28e>
    3e46:	9c af       	std	Y+60, r25	; 0x3c
    3e48:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e4a:	8d ad       	ldd	r24, Y+61	; 0x3d
    3e4c:	9e ad       	ldd	r25, Y+62	; 0x3e
    3e4e:	01 97       	sbiw	r24, 0x01	; 1
    3e50:	9e af       	std	Y+62, r25	; 0x3e
    3e52:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e54:	8d ad       	ldd	r24, Y+61	; 0x3d
    3e56:	9e ad       	ldd	r25, Y+62	; 0x3e
    3e58:	00 97       	sbiw	r24, 0x00	; 0
    3e5a:	69 f7       	brne	.-38     	; 0x3e36 <HAL_LCD_u8LCDInit+0x282>
    3e5c:	16 c0       	rjmp	.+44     	; 0x3e8a <HAL_LCD_u8LCDInit+0x2d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e5e:	fe 01       	movw	r30, r28
    3e60:	ff 96       	adiw	r30, 0x3f	; 63
    3e62:	60 81       	ld	r22, Z
    3e64:	71 81       	ldd	r23, Z+1	; 0x01
    3e66:	82 81       	ldd	r24, Z+2	; 0x02
    3e68:	93 81       	ldd	r25, Z+3	; 0x03
    3e6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e6e:	dc 01       	movw	r26, r24
    3e70:	cb 01       	movw	r24, r22
    3e72:	9e af       	std	Y+62, r25	; 0x3e
    3e74:	8d af       	std	Y+61, r24	; 0x3d
    3e76:	8d ad       	ldd	r24, Y+61	; 0x3d
    3e78:	9e ad       	ldd	r25, Y+62	; 0x3e
    3e7a:	9a af       	std	Y+58, r25	; 0x3a
    3e7c:	89 af       	std	Y+57, r24	; 0x39
    3e7e:	89 ad       	ldd	r24, Y+57	; 0x39
    3e80:	9a ad       	ldd	r25, Y+58	; 0x3a
    3e82:	01 97       	sbiw	r24, 0x01	; 1
    3e84:	f1 f7       	brne	.-4      	; 0x3e82 <HAL_LCD_u8LCDInit+0x2ce>
    3e86:	9a af       	std	Y+58, r25	; 0x3a
    3e88:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(2);
	HAL_LCD_u8SendCommands(Function_Set);
    3e8a:	88 e2       	ldi	r24, 0x28	; 40
    3e8c:	0e 94 28 21 	call	0x4250	; 0x4250 <HAL_LCD_u8SendCommands>
    3e90:	80 e0       	ldi	r24, 0x00	; 0
    3e92:	90 e0       	ldi	r25, 0x00	; 0
    3e94:	a0 e0       	ldi	r26, 0x00	; 0
    3e96:	b0 e4       	ldi	r27, 0x40	; 64
    3e98:	8d ab       	std	Y+53, r24	; 0x35
    3e9a:	9e ab       	std	Y+54, r25	; 0x36
    3e9c:	af ab       	std	Y+55, r26	; 0x37
    3e9e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ea0:	6d a9       	ldd	r22, Y+53	; 0x35
    3ea2:	7e a9       	ldd	r23, Y+54	; 0x36
    3ea4:	8f a9       	ldd	r24, Y+55	; 0x37
    3ea6:	98 ad       	ldd	r25, Y+56	; 0x38
    3ea8:	20 e0       	ldi	r18, 0x00	; 0
    3eaa:	30 e0       	ldi	r19, 0x00	; 0
    3eac:	4a e7       	ldi	r20, 0x7A	; 122
    3eae:	55 e4       	ldi	r21, 0x45	; 69
    3eb0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3eb4:	dc 01       	movw	r26, r24
    3eb6:	cb 01       	movw	r24, r22
    3eb8:	89 ab       	std	Y+49, r24	; 0x31
    3eba:	9a ab       	std	Y+50, r25	; 0x32
    3ebc:	ab ab       	std	Y+51, r26	; 0x33
    3ebe:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3ec0:	69 a9       	ldd	r22, Y+49	; 0x31
    3ec2:	7a a9       	ldd	r23, Y+50	; 0x32
    3ec4:	8b a9       	ldd	r24, Y+51	; 0x33
    3ec6:	9c a9       	ldd	r25, Y+52	; 0x34
    3ec8:	20 e0       	ldi	r18, 0x00	; 0
    3eca:	30 e0       	ldi	r19, 0x00	; 0
    3ecc:	40 e8       	ldi	r20, 0x80	; 128
    3ece:	5f e3       	ldi	r21, 0x3F	; 63
    3ed0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3ed4:	88 23       	and	r24, r24
    3ed6:	2c f4       	brge	.+10     	; 0x3ee2 <HAL_LCD_u8LCDInit+0x32e>
		__ticks = 1;
    3ed8:	81 e0       	ldi	r24, 0x01	; 1
    3eda:	90 e0       	ldi	r25, 0x00	; 0
    3edc:	98 ab       	std	Y+48, r25	; 0x30
    3ede:	8f a7       	std	Y+47, r24	; 0x2f
    3ee0:	3f c0       	rjmp	.+126    	; 0x3f60 <HAL_LCD_u8LCDInit+0x3ac>
	else if (__tmp > 65535)
    3ee2:	69 a9       	ldd	r22, Y+49	; 0x31
    3ee4:	7a a9       	ldd	r23, Y+50	; 0x32
    3ee6:	8b a9       	ldd	r24, Y+51	; 0x33
    3ee8:	9c a9       	ldd	r25, Y+52	; 0x34
    3eea:	20 e0       	ldi	r18, 0x00	; 0
    3eec:	3f ef       	ldi	r19, 0xFF	; 255
    3eee:	4f e7       	ldi	r20, 0x7F	; 127
    3ef0:	57 e4       	ldi	r21, 0x47	; 71
    3ef2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3ef6:	18 16       	cp	r1, r24
    3ef8:	4c f5       	brge	.+82     	; 0x3f4c <HAL_LCD_u8LCDInit+0x398>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3efa:	6d a9       	ldd	r22, Y+53	; 0x35
    3efc:	7e a9       	ldd	r23, Y+54	; 0x36
    3efe:	8f a9       	ldd	r24, Y+55	; 0x37
    3f00:	98 ad       	ldd	r25, Y+56	; 0x38
    3f02:	20 e0       	ldi	r18, 0x00	; 0
    3f04:	30 e0       	ldi	r19, 0x00	; 0
    3f06:	40 e2       	ldi	r20, 0x20	; 32
    3f08:	51 e4       	ldi	r21, 0x41	; 65
    3f0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f0e:	dc 01       	movw	r26, r24
    3f10:	cb 01       	movw	r24, r22
    3f12:	bc 01       	movw	r22, r24
    3f14:	cd 01       	movw	r24, r26
    3f16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f1a:	dc 01       	movw	r26, r24
    3f1c:	cb 01       	movw	r24, r22
    3f1e:	98 ab       	std	Y+48, r25	; 0x30
    3f20:	8f a7       	std	Y+47, r24	; 0x2f
    3f22:	0f c0       	rjmp	.+30     	; 0x3f42 <HAL_LCD_u8LCDInit+0x38e>
    3f24:	80 e9       	ldi	r24, 0x90	; 144
    3f26:	91 e0       	ldi	r25, 0x01	; 1
    3f28:	9e a7       	std	Y+46, r25	; 0x2e
    3f2a:	8d a7       	std	Y+45, r24	; 0x2d
    3f2c:	8d a5       	ldd	r24, Y+45	; 0x2d
    3f2e:	9e a5       	ldd	r25, Y+46	; 0x2e
    3f30:	01 97       	sbiw	r24, 0x01	; 1
    3f32:	f1 f7       	brne	.-4      	; 0x3f30 <HAL_LCD_u8LCDInit+0x37c>
    3f34:	9e a7       	std	Y+46, r25	; 0x2e
    3f36:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f38:	8f a5       	ldd	r24, Y+47	; 0x2f
    3f3a:	98 a9       	ldd	r25, Y+48	; 0x30
    3f3c:	01 97       	sbiw	r24, 0x01	; 1
    3f3e:	98 ab       	std	Y+48, r25	; 0x30
    3f40:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f42:	8f a5       	ldd	r24, Y+47	; 0x2f
    3f44:	98 a9       	ldd	r25, Y+48	; 0x30
    3f46:	00 97       	sbiw	r24, 0x00	; 0
    3f48:	69 f7       	brne	.-38     	; 0x3f24 <HAL_LCD_u8LCDInit+0x370>
    3f4a:	14 c0       	rjmp	.+40     	; 0x3f74 <HAL_LCD_u8LCDInit+0x3c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f4c:	69 a9       	ldd	r22, Y+49	; 0x31
    3f4e:	7a a9       	ldd	r23, Y+50	; 0x32
    3f50:	8b a9       	ldd	r24, Y+51	; 0x33
    3f52:	9c a9       	ldd	r25, Y+52	; 0x34
    3f54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f58:	dc 01       	movw	r26, r24
    3f5a:	cb 01       	movw	r24, r22
    3f5c:	98 ab       	std	Y+48, r25	; 0x30
    3f5e:	8f a7       	std	Y+47, r24	; 0x2f
    3f60:	8f a5       	ldd	r24, Y+47	; 0x2f
    3f62:	98 a9       	ldd	r25, Y+48	; 0x30
    3f64:	9c a7       	std	Y+44, r25	; 0x2c
    3f66:	8b a7       	std	Y+43, r24	; 0x2b
    3f68:	8b a5       	ldd	r24, Y+43	; 0x2b
    3f6a:	9c a5       	ldd	r25, Y+44	; 0x2c
    3f6c:	01 97       	sbiw	r24, 0x01	; 1
    3f6e:	f1 f7       	brne	.-4      	; 0x3f6c <HAL_LCD_u8LCDInit+0x3b8>
    3f70:	9c a7       	std	Y+44, r25	; 0x2c
    3f72:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(2);
	HAL_LCD_u8SendCommands(Display_Mode);
    3f74:	8f e0       	ldi	r24, 0x0F	; 15
    3f76:	0e 94 28 21 	call	0x4250	; 0x4250 <HAL_LCD_u8SendCommands>
    3f7a:	80 e0       	ldi	r24, 0x00	; 0
    3f7c:	90 e0       	ldi	r25, 0x00	; 0
    3f7e:	a0 e0       	ldi	r26, 0x00	; 0
    3f80:	b0 e4       	ldi	r27, 0x40	; 64
    3f82:	8f a3       	std	Y+39, r24	; 0x27
    3f84:	98 a7       	std	Y+40, r25	; 0x28
    3f86:	a9 a7       	std	Y+41, r26	; 0x29
    3f88:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f8a:	6f a1       	ldd	r22, Y+39	; 0x27
    3f8c:	78 a5       	ldd	r23, Y+40	; 0x28
    3f8e:	89 a5       	ldd	r24, Y+41	; 0x29
    3f90:	9a a5       	ldd	r25, Y+42	; 0x2a
    3f92:	20 e0       	ldi	r18, 0x00	; 0
    3f94:	30 e0       	ldi	r19, 0x00	; 0
    3f96:	4a e7       	ldi	r20, 0x7A	; 122
    3f98:	55 e4       	ldi	r21, 0x45	; 69
    3f9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f9e:	dc 01       	movw	r26, r24
    3fa0:	cb 01       	movw	r24, r22
    3fa2:	8b a3       	std	Y+35, r24	; 0x23
    3fa4:	9c a3       	std	Y+36, r25	; 0x24
    3fa6:	ad a3       	std	Y+37, r26	; 0x25
    3fa8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3faa:	6b a1       	ldd	r22, Y+35	; 0x23
    3fac:	7c a1       	ldd	r23, Y+36	; 0x24
    3fae:	8d a1       	ldd	r24, Y+37	; 0x25
    3fb0:	9e a1       	ldd	r25, Y+38	; 0x26
    3fb2:	20 e0       	ldi	r18, 0x00	; 0
    3fb4:	30 e0       	ldi	r19, 0x00	; 0
    3fb6:	40 e8       	ldi	r20, 0x80	; 128
    3fb8:	5f e3       	ldi	r21, 0x3F	; 63
    3fba:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3fbe:	88 23       	and	r24, r24
    3fc0:	2c f4       	brge	.+10     	; 0x3fcc <HAL_LCD_u8LCDInit+0x418>
		__ticks = 1;
    3fc2:	81 e0       	ldi	r24, 0x01	; 1
    3fc4:	90 e0       	ldi	r25, 0x00	; 0
    3fc6:	9a a3       	std	Y+34, r25	; 0x22
    3fc8:	89 a3       	std	Y+33, r24	; 0x21
    3fca:	3f c0       	rjmp	.+126    	; 0x404a <HAL_LCD_u8LCDInit+0x496>
	else if (__tmp > 65535)
    3fcc:	6b a1       	ldd	r22, Y+35	; 0x23
    3fce:	7c a1       	ldd	r23, Y+36	; 0x24
    3fd0:	8d a1       	ldd	r24, Y+37	; 0x25
    3fd2:	9e a1       	ldd	r25, Y+38	; 0x26
    3fd4:	20 e0       	ldi	r18, 0x00	; 0
    3fd6:	3f ef       	ldi	r19, 0xFF	; 255
    3fd8:	4f e7       	ldi	r20, 0x7F	; 127
    3fda:	57 e4       	ldi	r21, 0x47	; 71
    3fdc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3fe0:	18 16       	cp	r1, r24
    3fe2:	4c f5       	brge	.+82     	; 0x4036 <HAL_LCD_u8LCDInit+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3fe4:	6f a1       	ldd	r22, Y+39	; 0x27
    3fe6:	78 a5       	ldd	r23, Y+40	; 0x28
    3fe8:	89 a5       	ldd	r24, Y+41	; 0x29
    3fea:	9a a5       	ldd	r25, Y+42	; 0x2a
    3fec:	20 e0       	ldi	r18, 0x00	; 0
    3fee:	30 e0       	ldi	r19, 0x00	; 0
    3ff0:	40 e2       	ldi	r20, 0x20	; 32
    3ff2:	51 e4       	ldi	r21, 0x41	; 65
    3ff4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ff8:	dc 01       	movw	r26, r24
    3ffa:	cb 01       	movw	r24, r22
    3ffc:	bc 01       	movw	r22, r24
    3ffe:	cd 01       	movw	r24, r26
    4000:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4004:	dc 01       	movw	r26, r24
    4006:	cb 01       	movw	r24, r22
    4008:	9a a3       	std	Y+34, r25	; 0x22
    400a:	89 a3       	std	Y+33, r24	; 0x21
    400c:	0f c0       	rjmp	.+30     	; 0x402c <HAL_LCD_u8LCDInit+0x478>
    400e:	80 e9       	ldi	r24, 0x90	; 144
    4010:	91 e0       	ldi	r25, 0x01	; 1
    4012:	98 a3       	std	Y+32, r25	; 0x20
    4014:	8f 8f       	std	Y+31, r24	; 0x1f
    4016:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4018:	98 a1       	ldd	r25, Y+32	; 0x20
    401a:	01 97       	sbiw	r24, 0x01	; 1
    401c:	f1 f7       	brne	.-4      	; 0x401a <HAL_LCD_u8LCDInit+0x466>
    401e:	98 a3       	std	Y+32, r25	; 0x20
    4020:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4022:	89 a1       	ldd	r24, Y+33	; 0x21
    4024:	9a a1       	ldd	r25, Y+34	; 0x22
    4026:	01 97       	sbiw	r24, 0x01	; 1
    4028:	9a a3       	std	Y+34, r25	; 0x22
    402a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    402c:	89 a1       	ldd	r24, Y+33	; 0x21
    402e:	9a a1       	ldd	r25, Y+34	; 0x22
    4030:	00 97       	sbiw	r24, 0x00	; 0
    4032:	69 f7       	brne	.-38     	; 0x400e <HAL_LCD_u8LCDInit+0x45a>
    4034:	14 c0       	rjmp	.+40     	; 0x405e <HAL_LCD_u8LCDInit+0x4aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4036:	6b a1       	ldd	r22, Y+35	; 0x23
    4038:	7c a1       	ldd	r23, Y+36	; 0x24
    403a:	8d a1       	ldd	r24, Y+37	; 0x25
    403c:	9e a1       	ldd	r25, Y+38	; 0x26
    403e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4042:	dc 01       	movw	r26, r24
    4044:	cb 01       	movw	r24, r22
    4046:	9a a3       	std	Y+34, r25	; 0x22
    4048:	89 a3       	std	Y+33, r24	; 0x21
    404a:	89 a1       	ldd	r24, Y+33	; 0x21
    404c:	9a a1       	ldd	r25, Y+34	; 0x22
    404e:	9e 8f       	std	Y+30, r25	; 0x1e
    4050:	8d 8f       	std	Y+29, r24	; 0x1d
    4052:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4054:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4056:	01 97       	sbiw	r24, 0x01	; 1
    4058:	f1 f7       	brne	.-4      	; 0x4056 <HAL_LCD_u8LCDInit+0x4a2>
    405a:	9e 8f       	std	Y+30, r25	; 0x1e
    405c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(2);
	HAL_LCD_u8SendCommands(Display_Clear);
    405e:	81 e0       	ldi	r24, 0x01	; 1
    4060:	0e 94 28 21 	call	0x4250	; 0x4250 <HAL_LCD_u8SendCommands>
    4064:	80 e0       	ldi	r24, 0x00	; 0
    4066:	90 e0       	ldi	r25, 0x00	; 0
    4068:	a0 e0       	ldi	r26, 0x00	; 0
    406a:	b0 e4       	ldi	r27, 0x40	; 64
    406c:	89 8f       	std	Y+25, r24	; 0x19
    406e:	9a 8f       	std	Y+26, r25	; 0x1a
    4070:	ab 8f       	std	Y+27, r26	; 0x1b
    4072:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4074:	69 8d       	ldd	r22, Y+25	; 0x19
    4076:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4078:	8b 8d       	ldd	r24, Y+27	; 0x1b
    407a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    407c:	20 e0       	ldi	r18, 0x00	; 0
    407e:	30 e0       	ldi	r19, 0x00	; 0
    4080:	4a e7       	ldi	r20, 0x7A	; 122
    4082:	55 e4       	ldi	r21, 0x45	; 69
    4084:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4088:	dc 01       	movw	r26, r24
    408a:	cb 01       	movw	r24, r22
    408c:	8d 8b       	std	Y+21, r24	; 0x15
    408e:	9e 8b       	std	Y+22, r25	; 0x16
    4090:	af 8b       	std	Y+23, r26	; 0x17
    4092:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4094:	6d 89       	ldd	r22, Y+21	; 0x15
    4096:	7e 89       	ldd	r23, Y+22	; 0x16
    4098:	8f 89       	ldd	r24, Y+23	; 0x17
    409a:	98 8d       	ldd	r25, Y+24	; 0x18
    409c:	20 e0       	ldi	r18, 0x00	; 0
    409e:	30 e0       	ldi	r19, 0x00	; 0
    40a0:	40 e8       	ldi	r20, 0x80	; 128
    40a2:	5f e3       	ldi	r21, 0x3F	; 63
    40a4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    40a8:	88 23       	and	r24, r24
    40aa:	2c f4       	brge	.+10     	; 0x40b6 <HAL_LCD_u8LCDInit+0x502>
		__ticks = 1;
    40ac:	81 e0       	ldi	r24, 0x01	; 1
    40ae:	90 e0       	ldi	r25, 0x00	; 0
    40b0:	9c 8b       	std	Y+20, r25	; 0x14
    40b2:	8b 8b       	std	Y+19, r24	; 0x13
    40b4:	3f c0       	rjmp	.+126    	; 0x4134 <HAL_LCD_u8LCDInit+0x580>
	else if (__tmp > 65535)
    40b6:	6d 89       	ldd	r22, Y+21	; 0x15
    40b8:	7e 89       	ldd	r23, Y+22	; 0x16
    40ba:	8f 89       	ldd	r24, Y+23	; 0x17
    40bc:	98 8d       	ldd	r25, Y+24	; 0x18
    40be:	20 e0       	ldi	r18, 0x00	; 0
    40c0:	3f ef       	ldi	r19, 0xFF	; 255
    40c2:	4f e7       	ldi	r20, 0x7F	; 127
    40c4:	57 e4       	ldi	r21, 0x47	; 71
    40c6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    40ca:	18 16       	cp	r1, r24
    40cc:	4c f5       	brge	.+82     	; 0x4120 <HAL_LCD_u8LCDInit+0x56c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    40ce:	69 8d       	ldd	r22, Y+25	; 0x19
    40d0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    40d2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    40d4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    40d6:	20 e0       	ldi	r18, 0x00	; 0
    40d8:	30 e0       	ldi	r19, 0x00	; 0
    40da:	40 e2       	ldi	r20, 0x20	; 32
    40dc:	51 e4       	ldi	r21, 0x41	; 65
    40de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40e2:	dc 01       	movw	r26, r24
    40e4:	cb 01       	movw	r24, r22
    40e6:	bc 01       	movw	r22, r24
    40e8:	cd 01       	movw	r24, r26
    40ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40ee:	dc 01       	movw	r26, r24
    40f0:	cb 01       	movw	r24, r22
    40f2:	9c 8b       	std	Y+20, r25	; 0x14
    40f4:	8b 8b       	std	Y+19, r24	; 0x13
    40f6:	0f c0       	rjmp	.+30     	; 0x4116 <HAL_LCD_u8LCDInit+0x562>
    40f8:	80 e9       	ldi	r24, 0x90	; 144
    40fa:	91 e0       	ldi	r25, 0x01	; 1
    40fc:	9a 8b       	std	Y+18, r25	; 0x12
    40fe:	89 8b       	std	Y+17, r24	; 0x11
    4100:	89 89       	ldd	r24, Y+17	; 0x11
    4102:	9a 89       	ldd	r25, Y+18	; 0x12
    4104:	01 97       	sbiw	r24, 0x01	; 1
    4106:	f1 f7       	brne	.-4      	; 0x4104 <HAL_LCD_u8LCDInit+0x550>
    4108:	9a 8b       	std	Y+18, r25	; 0x12
    410a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    410c:	8b 89       	ldd	r24, Y+19	; 0x13
    410e:	9c 89       	ldd	r25, Y+20	; 0x14
    4110:	01 97       	sbiw	r24, 0x01	; 1
    4112:	9c 8b       	std	Y+20, r25	; 0x14
    4114:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4116:	8b 89       	ldd	r24, Y+19	; 0x13
    4118:	9c 89       	ldd	r25, Y+20	; 0x14
    411a:	00 97       	sbiw	r24, 0x00	; 0
    411c:	69 f7       	brne	.-38     	; 0x40f8 <HAL_LCD_u8LCDInit+0x544>
    411e:	14 c0       	rjmp	.+40     	; 0x4148 <HAL_LCD_u8LCDInit+0x594>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4120:	6d 89       	ldd	r22, Y+21	; 0x15
    4122:	7e 89       	ldd	r23, Y+22	; 0x16
    4124:	8f 89       	ldd	r24, Y+23	; 0x17
    4126:	98 8d       	ldd	r25, Y+24	; 0x18
    4128:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    412c:	dc 01       	movw	r26, r24
    412e:	cb 01       	movw	r24, r22
    4130:	9c 8b       	std	Y+20, r25	; 0x14
    4132:	8b 8b       	std	Y+19, r24	; 0x13
    4134:	8b 89       	ldd	r24, Y+19	; 0x13
    4136:	9c 89       	ldd	r25, Y+20	; 0x14
    4138:	98 8b       	std	Y+16, r25	; 0x10
    413a:	8f 87       	std	Y+15, r24	; 0x0f
    413c:	8f 85       	ldd	r24, Y+15	; 0x0f
    413e:	98 89       	ldd	r25, Y+16	; 0x10
    4140:	01 97       	sbiw	r24, 0x01	; 1
    4142:	f1 f7       	brne	.-4      	; 0x4140 <HAL_LCD_u8LCDInit+0x58c>
    4144:	98 8b       	std	Y+16, r25	; 0x10
    4146:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	HAL_LCD_u8SendCommands(Entry_Mode);
    4148:	86 e0       	ldi	r24, 0x06	; 6
    414a:	0e 94 28 21 	call	0x4250	; 0x4250 <HAL_LCD_u8SendCommands>
    414e:	80 e0       	ldi	r24, 0x00	; 0
    4150:	90 e0       	ldi	r25, 0x00	; 0
    4152:	a0 e0       	ldi	r26, 0x00	; 0
    4154:	b0 e4       	ldi	r27, 0x40	; 64
    4156:	8b 87       	std	Y+11, r24	; 0x0b
    4158:	9c 87       	std	Y+12, r25	; 0x0c
    415a:	ad 87       	std	Y+13, r26	; 0x0d
    415c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    415e:	6b 85       	ldd	r22, Y+11	; 0x0b
    4160:	7c 85       	ldd	r23, Y+12	; 0x0c
    4162:	8d 85       	ldd	r24, Y+13	; 0x0d
    4164:	9e 85       	ldd	r25, Y+14	; 0x0e
    4166:	20 e0       	ldi	r18, 0x00	; 0
    4168:	30 e0       	ldi	r19, 0x00	; 0
    416a:	4a e7       	ldi	r20, 0x7A	; 122
    416c:	55 e4       	ldi	r21, 0x45	; 69
    416e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4172:	dc 01       	movw	r26, r24
    4174:	cb 01       	movw	r24, r22
    4176:	8f 83       	std	Y+7, r24	; 0x07
    4178:	98 87       	std	Y+8, r25	; 0x08
    417a:	a9 87       	std	Y+9, r26	; 0x09
    417c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    417e:	6f 81       	ldd	r22, Y+7	; 0x07
    4180:	78 85       	ldd	r23, Y+8	; 0x08
    4182:	89 85       	ldd	r24, Y+9	; 0x09
    4184:	9a 85       	ldd	r25, Y+10	; 0x0a
    4186:	20 e0       	ldi	r18, 0x00	; 0
    4188:	30 e0       	ldi	r19, 0x00	; 0
    418a:	40 e8       	ldi	r20, 0x80	; 128
    418c:	5f e3       	ldi	r21, 0x3F	; 63
    418e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4192:	88 23       	and	r24, r24
    4194:	2c f4       	brge	.+10     	; 0x41a0 <HAL_LCD_u8LCDInit+0x5ec>
		__ticks = 1;
    4196:	81 e0       	ldi	r24, 0x01	; 1
    4198:	90 e0       	ldi	r25, 0x00	; 0
    419a:	9e 83       	std	Y+6, r25	; 0x06
    419c:	8d 83       	std	Y+5, r24	; 0x05
    419e:	3f c0       	rjmp	.+126    	; 0x421e <HAL_LCD_u8LCDInit+0x66a>
	else if (__tmp > 65535)
    41a0:	6f 81       	ldd	r22, Y+7	; 0x07
    41a2:	78 85       	ldd	r23, Y+8	; 0x08
    41a4:	89 85       	ldd	r24, Y+9	; 0x09
    41a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    41a8:	20 e0       	ldi	r18, 0x00	; 0
    41aa:	3f ef       	ldi	r19, 0xFF	; 255
    41ac:	4f e7       	ldi	r20, 0x7F	; 127
    41ae:	57 e4       	ldi	r21, 0x47	; 71
    41b0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    41b4:	18 16       	cp	r1, r24
    41b6:	4c f5       	brge	.+82     	; 0x420a <HAL_LCD_u8LCDInit+0x656>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    41b8:	6b 85       	ldd	r22, Y+11	; 0x0b
    41ba:	7c 85       	ldd	r23, Y+12	; 0x0c
    41bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    41be:	9e 85       	ldd	r25, Y+14	; 0x0e
    41c0:	20 e0       	ldi	r18, 0x00	; 0
    41c2:	30 e0       	ldi	r19, 0x00	; 0
    41c4:	40 e2       	ldi	r20, 0x20	; 32
    41c6:	51 e4       	ldi	r21, 0x41	; 65
    41c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    41cc:	dc 01       	movw	r26, r24
    41ce:	cb 01       	movw	r24, r22
    41d0:	bc 01       	movw	r22, r24
    41d2:	cd 01       	movw	r24, r26
    41d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41d8:	dc 01       	movw	r26, r24
    41da:	cb 01       	movw	r24, r22
    41dc:	9e 83       	std	Y+6, r25	; 0x06
    41de:	8d 83       	std	Y+5, r24	; 0x05
    41e0:	0f c0       	rjmp	.+30     	; 0x4200 <HAL_LCD_u8LCDInit+0x64c>
    41e2:	80 e9       	ldi	r24, 0x90	; 144
    41e4:	91 e0       	ldi	r25, 0x01	; 1
    41e6:	9c 83       	std	Y+4, r25	; 0x04
    41e8:	8b 83       	std	Y+3, r24	; 0x03
    41ea:	8b 81       	ldd	r24, Y+3	; 0x03
    41ec:	9c 81       	ldd	r25, Y+4	; 0x04
    41ee:	01 97       	sbiw	r24, 0x01	; 1
    41f0:	f1 f7       	brne	.-4      	; 0x41ee <HAL_LCD_u8LCDInit+0x63a>
    41f2:	9c 83       	std	Y+4, r25	; 0x04
    41f4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    41f6:	8d 81       	ldd	r24, Y+5	; 0x05
    41f8:	9e 81       	ldd	r25, Y+6	; 0x06
    41fa:	01 97       	sbiw	r24, 0x01	; 1
    41fc:	9e 83       	std	Y+6, r25	; 0x06
    41fe:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4200:	8d 81       	ldd	r24, Y+5	; 0x05
    4202:	9e 81       	ldd	r25, Y+6	; 0x06
    4204:	00 97       	sbiw	r24, 0x00	; 0
    4206:	69 f7       	brne	.-38     	; 0x41e2 <HAL_LCD_u8LCDInit+0x62e>
    4208:	14 c0       	rjmp	.+40     	; 0x4232 <HAL_LCD_u8LCDInit+0x67e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    420a:	6f 81       	ldd	r22, Y+7	; 0x07
    420c:	78 85       	ldd	r23, Y+8	; 0x08
    420e:	89 85       	ldd	r24, Y+9	; 0x09
    4210:	9a 85       	ldd	r25, Y+10	; 0x0a
    4212:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4216:	dc 01       	movw	r26, r24
    4218:	cb 01       	movw	r24, r22
    421a:	9e 83       	std	Y+6, r25	; 0x06
    421c:	8d 83       	std	Y+5, r24	; 0x05
    421e:	8d 81       	ldd	r24, Y+5	; 0x05
    4220:	9e 81       	ldd	r25, Y+6	; 0x06
    4222:	9a 83       	std	Y+2, r25	; 0x02
    4224:	89 83       	std	Y+1, r24	; 0x01
    4226:	89 81       	ldd	r24, Y+1	; 0x01
    4228:	9a 81       	ldd	r25, Y+2	; 0x02
    422a:	01 97       	sbiw	r24, 0x01	; 1
    422c:	f1 f7       	brne	.-4      	; 0x422a <HAL_LCD_u8LCDInit+0x676>
    422e:	9a 83       	std	Y+2, r25	; 0x02
    4230:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	HAL_LCD_u8SendCommands(CURSOR_OFF);
    4232:	8c e0       	ldi	r24, 0x0C	; 12
    4234:	0e 94 28 21 	call	0x4250	; 0x4250 <HAL_LCD_u8SendCommands>
}
    4238:	cc 5a       	subi	r28, 0xAC	; 172
    423a:	df 4f       	sbci	r29, 0xFF	; 255
    423c:	0f b6       	in	r0, 0x3f	; 63
    423e:	f8 94       	cli
    4240:	de bf       	out	0x3e, r29	; 62
    4242:	0f be       	out	0x3f, r0	; 63
    4244:	cd bf       	out	0x3d, r28	; 61
    4246:	cf 91       	pop	r28
    4248:	df 91       	pop	r29
    424a:	1f 91       	pop	r17
    424c:	0f 91       	pop	r16
    424e:	08 95       	ret

00004250 <HAL_LCD_u8SendCommands>:

void HAL_LCD_u8SendCommands(u8 Loc_u8LCD_Command) {
    4250:	df 93       	push	r29
    4252:	cf 93       	push	r28
    4254:	cd b7       	in	r28, 0x3d	; 61
    4256:	de b7       	in	r29, 0x3e	; 62
    4258:	6d 97       	sbiw	r28, 0x1d	; 29
    425a:	0f b6       	in	r0, 0x3f	; 63
    425c:	f8 94       	cli
    425e:	de bf       	out	0x3e, r29	; 62
    4260:	0f be       	out	0x3f, r0	; 63
    4262:	cd bf       	out	0x3d, r28	; 61
    4264:	8d 8f       	std	Y+29, r24	; 0x1d
	MCAL_DIO_u8SetPinValue(RS_Port, RS_Pin, RS_Low);
    4266:	81 e0       	ldi	r24, 0x01	; 1
    4268:	61 e0       	ldi	r22, 0x01	; 1
    426a:	40 e0       	ldi	r20, 0x00	; 0
    426c:	0e 94 04 17 	call	0x2e08	; 0x2e08 <MCAL_DIO_u8SetPinValue>
	MCAL_DIO_u8SetPinValue(RW_Port, RW_Pin, RW_Low);
    4270:	81 e0       	ldi	r24, 0x01	; 1
    4272:	62 e0       	ldi	r22, 0x02	; 2
    4274:	40 e0       	ldi	r20, 0x00	; 0
    4276:	0e 94 04 17 	call	0x2e08	; 0x2e08 <MCAL_DIO_u8SetPinValue>
	   HAL_LCD_voidData( Loc_u8LCD_Command>>4);
    427a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    427c:	82 95       	swap	r24
    427e:	8f 70       	andi	r24, 0x0F	; 15
    4280:	0e 94 d6 26 	call	0x4dac	; 0x4dac <HAL_LCD_voidData>
	MCAL_DIO_u8SetPinValue(Enable_PORT, Enable_PIN, Enable_High);
    4284:	81 e0       	ldi	r24, 0x01	; 1
    4286:	63 e0       	ldi	r22, 0x03	; 3
    4288:	41 e0       	ldi	r20, 0x01	; 1
    428a:	0e 94 04 17 	call	0x2e08	; 0x2e08 <MCAL_DIO_u8SetPinValue>
    428e:	80 e0       	ldi	r24, 0x00	; 0
    4290:	90 e0       	ldi	r25, 0x00	; 0
    4292:	a0 e0       	ldi	r26, 0x00	; 0
    4294:	b0 e4       	ldi	r27, 0x40	; 64
    4296:	89 8f       	std	Y+25, r24	; 0x19
    4298:	9a 8f       	std	Y+26, r25	; 0x1a
    429a:	ab 8f       	std	Y+27, r26	; 0x1b
    429c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    429e:	69 8d       	ldd	r22, Y+25	; 0x19
    42a0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    42a2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    42a4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    42a6:	20 e0       	ldi	r18, 0x00	; 0
    42a8:	30 e0       	ldi	r19, 0x00	; 0
    42aa:	4a e7       	ldi	r20, 0x7A	; 122
    42ac:	55 e4       	ldi	r21, 0x45	; 69
    42ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    42b2:	dc 01       	movw	r26, r24
    42b4:	cb 01       	movw	r24, r22
    42b6:	8d 8b       	std	Y+21, r24	; 0x15
    42b8:	9e 8b       	std	Y+22, r25	; 0x16
    42ba:	af 8b       	std	Y+23, r26	; 0x17
    42bc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    42be:	6d 89       	ldd	r22, Y+21	; 0x15
    42c0:	7e 89       	ldd	r23, Y+22	; 0x16
    42c2:	8f 89       	ldd	r24, Y+23	; 0x17
    42c4:	98 8d       	ldd	r25, Y+24	; 0x18
    42c6:	20 e0       	ldi	r18, 0x00	; 0
    42c8:	30 e0       	ldi	r19, 0x00	; 0
    42ca:	40 e8       	ldi	r20, 0x80	; 128
    42cc:	5f e3       	ldi	r21, 0x3F	; 63
    42ce:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    42d2:	88 23       	and	r24, r24
    42d4:	2c f4       	brge	.+10     	; 0x42e0 <HAL_LCD_u8SendCommands+0x90>
		__ticks = 1;
    42d6:	81 e0       	ldi	r24, 0x01	; 1
    42d8:	90 e0       	ldi	r25, 0x00	; 0
    42da:	9c 8b       	std	Y+20, r25	; 0x14
    42dc:	8b 8b       	std	Y+19, r24	; 0x13
    42de:	3f c0       	rjmp	.+126    	; 0x435e <HAL_LCD_u8SendCommands+0x10e>
	else if (__tmp > 65535)
    42e0:	6d 89       	ldd	r22, Y+21	; 0x15
    42e2:	7e 89       	ldd	r23, Y+22	; 0x16
    42e4:	8f 89       	ldd	r24, Y+23	; 0x17
    42e6:	98 8d       	ldd	r25, Y+24	; 0x18
    42e8:	20 e0       	ldi	r18, 0x00	; 0
    42ea:	3f ef       	ldi	r19, 0xFF	; 255
    42ec:	4f e7       	ldi	r20, 0x7F	; 127
    42ee:	57 e4       	ldi	r21, 0x47	; 71
    42f0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    42f4:	18 16       	cp	r1, r24
    42f6:	4c f5       	brge	.+82     	; 0x434a <HAL_LCD_u8SendCommands+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    42f8:	69 8d       	ldd	r22, Y+25	; 0x19
    42fa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    42fc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    42fe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4300:	20 e0       	ldi	r18, 0x00	; 0
    4302:	30 e0       	ldi	r19, 0x00	; 0
    4304:	40 e2       	ldi	r20, 0x20	; 32
    4306:	51 e4       	ldi	r21, 0x41	; 65
    4308:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    430c:	dc 01       	movw	r26, r24
    430e:	cb 01       	movw	r24, r22
    4310:	bc 01       	movw	r22, r24
    4312:	cd 01       	movw	r24, r26
    4314:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4318:	dc 01       	movw	r26, r24
    431a:	cb 01       	movw	r24, r22
    431c:	9c 8b       	std	Y+20, r25	; 0x14
    431e:	8b 8b       	std	Y+19, r24	; 0x13
    4320:	0f c0       	rjmp	.+30     	; 0x4340 <HAL_LCD_u8SendCommands+0xf0>
    4322:	80 e9       	ldi	r24, 0x90	; 144
    4324:	91 e0       	ldi	r25, 0x01	; 1
    4326:	9a 8b       	std	Y+18, r25	; 0x12
    4328:	89 8b       	std	Y+17, r24	; 0x11
    432a:	89 89       	ldd	r24, Y+17	; 0x11
    432c:	9a 89       	ldd	r25, Y+18	; 0x12
    432e:	01 97       	sbiw	r24, 0x01	; 1
    4330:	f1 f7       	brne	.-4      	; 0x432e <HAL_LCD_u8SendCommands+0xde>
    4332:	9a 8b       	std	Y+18, r25	; 0x12
    4334:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4336:	8b 89       	ldd	r24, Y+19	; 0x13
    4338:	9c 89       	ldd	r25, Y+20	; 0x14
    433a:	01 97       	sbiw	r24, 0x01	; 1
    433c:	9c 8b       	std	Y+20, r25	; 0x14
    433e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4340:	8b 89       	ldd	r24, Y+19	; 0x13
    4342:	9c 89       	ldd	r25, Y+20	; 0x14
    4344:	00 97       	sbiw	r24, 0x00	; 0
    4346:	69 f7       	brne	.-38     	; 0x4322 <HAL_LCD_u8SendCommands+0xd2>
    4348:	14 c0       	rjmp	.+40     	; 0x4372 <HAL_LCD_u8SendCommands+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    434a:	6d 89       	ldd	r22, Y+21	; 0x15
    434c:	7e 89       	ldd	r23, Y+22	; 0x16
    434e:	8f 89       	ldd	r24, Y+23	; 0x17
    4350:	98 8d       	ldd	r25, Y+24	; 0x18
    4352:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4356:	dc 01       	movw	r26, r24
    4358:	cb 01       	movw	r24, r22
    435a:	9c 8b       	std	Y+20, r25	; 0x14
    435c:	8b 8b       	std	Y+19, r24	; 0x13
    435e:	8b 89       	ldd	r24, Y+19	; 0x13
    4360:	9c 89       	ldd	r25, Y+20	; 0x14
    4362:	98 8b       	std	Y+16, r25	; 0x10
    4364:	8f 87       	std	Y+15, r24	; 0x0f
    4366:	8f 85       	ldd	r24, Y+15	; 0x0f
    4368:	98 89       	ldd	r25, Y+16	; 0x10
    436a:	01 97       	sbiw	r24, 0x01	; 1
    436c:	f1 f7       	brne	.-4      	; 0x436a <HAL_LCD_u8SendCommands+0x11a>
    436e:	98 8b       	std	Y+16, r25	; 0x10
    4370:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	MCAL_DIO_u8SetPinValue(Enable_PORT, Enable_PIN, Enable_Low);
    4372:	81 e0       	ldi	r24, 0x01	; 1
    4374:	63 e0       	ldi	r22, 0x03	; 3
    4376:	40 e0       	ldi	r20, 0x00	; 0
    4378:	0e 94 04 17 	call	0x2e08	; 0x2e08 <MCAL_DIO_u8SetPinValue>
	   HAL_LCD_voidData( Loc_u8LCD_Command);
    437c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    437e:	0e 94 d6 26 	call	0x4dac	; 0x4dac <HAL_LCD_voidData>
	MCAL_DIO_u8SetPinValue(Enable_PORT, Enable_PIN, Enable_High);
    4382:	81 e0       	ldi	r24, 0x01	; 1
    4384:	63 e0       	ldi	r22, 0x03	; 3
    4386:	41 e0       	ldi	r20, 0x01	; 1
    4388:	0e 94 04 17 	call	0x2e08	; 0x2e08 <MCAL_DIO_u8SetPinValue>
    438c:	80 e0       	ldi	r24, 0x00	; 0
    438e:	90 e0       	ldi	r25, 0x00	; 0
    4390:	a0 e0       	ldi	r26, 0x00	; 0
    4392:	b0 e4       	ldi	r27, 0x40	; 64
    4394:	8b 87       	std	Y+11, r24	; 0x0b
    4396:	9c 87       	std	Y+12, r25	; 0x0c
    4398:	ad 87       	std	Y+13, r26	; 0x0d
    439a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    439c:	6b 85       	ldd	r22, Y+11	; 0x0b
    439e:	7c 85       	ldd	r23, Y+12	; 0x0c
    43a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    43a2:	9e 85       	ldd	r25, Y+14	; 0x0e
    43a4:	20 e0       	ldi	r18, 0x00	; 0
    43a6:	30 e0       	ldi	r19, 0x00	; 0
    43a8:	4a e7       	ldi	r20, 0x7A	; 122
    43aa:	55 e4       	ldi	r21, 0x45	; 69
    43ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    43b0:	dc 01       	movw	r26, r24
    43b2:	cb 01       	movw	r24, r22
    43b4:	8f 83       	std	Y+7, r24	; 0x07
    43b6:	98 87       	std	Y+8, r25	; 0x08
    43b8:	a9 87       	std	Y+9, r26	; 0x09
    43ba:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    43bc:	6f 81       	ldd	r22, Y+7	; 0x07
    43be:	78 85       	ldd	r23, Y+8	; 0x08
    43c0:	89 85       	ldd	r24, Y+9	; 0x09
    43c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    43c4:	20 e0       	ldi	r18, 0x00	; 0
    43c6:	30 e0       	ldi	r19, 0x00	; 0
    43c8:	40 e8       	ldi	r20, 0x80	; 128
    43ca:	5f e3       	ldi	r21, 0x3F	; 63
    43cc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    43d0:	88 23       	and	r24, r24
    43d2:	2c f4       	brge	.+10     	; 0x43de <HAL_LCD_u8SendCommands+0x18e>
		__ticks = 1;
    43d4:	81 e0       	ldi	r24, 0x01	; 1
    43d6:	90 e0       	ldi	r25, 0x00	; 0
    43d8:	9e 83       	std	Y+6, r25	; 0x06
    43da:	8d 83       	std	Y+5, r24	; 0x05
    43dc:	3f c0       	rjmp	.+126    	; 0x445c <HAL_LCD_u8SendCommands+0x20c>
	else if (__tmp > 65535)
    43de:	6f 81       	ldd	r22, Y+7	; 0x07
    43e0:	78 85       	ldd	r23, Y+8	; 0x08
    43e2:	89 85       	ldd	r24, Y+9	; 0x09
    43e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    43e6:	20 e0       	ldi	r18, 0x00	; 0
    43e8:	3f ef       	ldi	r19, 0xFF	; 255
    43ea:	4f e7       	ldi	r20, 0x7F	; 127
    43ec:	57 e4       	ldi	r21, 0x47	; 71
    43ee:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    43f2:	18 16       	cp	r1, r24
    43f4:	4c f5       	brge	.+82     	; 0x4448 <HAL_LCD_u8SendCommands+0x1f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    43f6:	6b 85       	ldd	r22, Y+11	; 0x0b
    43f8:	7c 85       	ldd	r23, Y+12	; 0x0c
    43fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    43fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    43fe:	20 e0       	ldi	r18, 0x00	; 0
    4400:	30 e0       	ldi	r19, 0x00	; 0
    4402:	40 e2       	ldi	r20, 0x20	; 32
    4404:	51 e4       	ldi	r21, 0x41	; 65
    4406:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    440a:	dc 01       	movw	r26, r24
    440c:	cb 01       	movw	r24, r22
    440e:	bc 01       	movw	r22, r24
    4410:	cd 01       	movw	r24, r26
    4412:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4416:	dc 01       	movw	r26, r24
    4418:	cb 01       	movw	r24, r22
    441a:	9e 83       	std	Y+6, r25	; 0x06
    441c:	8d 83       	std	Y+5, r24	; 0x05
    441e:	0f c0       	rjmp	.+30     	; 0x443e <HAL_LCD_u8SendCommands+0x1ee>
    4420:	80 e9       	ldi	r24, 0x90	; 144
    4422:	91 e0       	ldi	r25, 0x01	; 1
    4424:	9c 83       	std	Y+4, r25	; 0x04
    4426:	8b 83       	std	Y+3, r24	; 0x03
    4428:	8b 81       	ldd	r24, Y+3	; 0x03
    442a:	9c 81       	ldd	r25, Y+4	; 0x04
    442c:	01 97       	sbiw	r24, 0x01	; 1
    442e:	f1 f7       	brne	.-4      	; 0x442c <HAL_LCD_u8SendCommands+0x1dc>
    4430:	9c 83       	std	Y+4, r25	; 0x04
    4432:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4434:	8d 81       	ldd	r24, Y+5	; 0x05
    4436:	9e 81       	ldd	r25, Y+6	; 0x06
    4438:	01 97       	sbiw	r24, 0x01	; 1
    443a:	9e 83       	std	Y+6, r25	; 0x06
    443c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    443e:	8d 81       	ldd	r24, Y+5	; 0x05
    4440:	9e 81       	ldd	r25, Y+6	; 0x06
    4442:	00 97       	sbiw	r24, 0x00	; 0
    4444:	69 f7       	brne	.-38     	; 0x4420 <HAL_LCD_u8SendCommands+0x1d0>
    4446:	14 c0       	rjmp	.+40     	; 0x4470 <HAL_LCD_u8SendCommands+0x220>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4448:	6f 81       	ldd	r22, Y+7	; 0x07
    444a:	78 85       	ldd	r23, Y+8	; 0x08
    444c:	89 85       	ldd	r24, Y+9	; 0x09
    444e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4450:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4454:	dc 01       	movw	r26, r24
    4456:	cb 01       	movw	r24, r22
    4458:	9e 83       	std	Y+6, r25	; 0x06
    445a:	8d 83       	std	Y+5, r24	; 0x05
    445c:	8d 81       	ldd	r24, Y+5	; 0x05
    445e:	9e 81       	ldd	r25, Y+6	; 0x06
    4460:	9a 83       	std	Y+2, r25	; 0x02
    4462:	89 83       	std	Y+1, r24	; 0x01
    4464:	89 81       	ldd	r24, Y+1	; 0x01
    4466:	9a 81       	ldd	r25, Y+2	; 0x02
    4468:	01 97       	sbiw	r24, 0x01	; 1
    446a:	f1 f7       	brne	.-4      	; 0x4468 <HAL_LCD_u8SendCommands+0x218>
    446c:	9a 83       	std	Y+2, r25	; 0x02
    446e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	MCAL_DIO_u8SetPinValue(Enable_PORT, Enable_PIN, Enable_Low);
    4470:	81 e0       	ldi	r24, 0x01	; 1
    4472:	63 e0       	ldi	r22, 0x03	; 3
    4474:	40 e0       	ldi	r20, 0x00	; 0
    4476:	0e 94 04 17 	call	0x2e08	; 0x2e08 <MCAL_DIO_u8SetPinValue>
}
    447a:	6d 96       	adiw	r28, 0x1d	; 29
    447c:	0f b6       	in	r0, 0x3f	; 63
    447e:	f8 94       	cli
    4480:	de bf       	out	0x3e, r29	; 62
    4482:	0f be       	out	0x3f, r0	; 63
    4484:	cd bf       	out	0x3d, r28	; 61
    4486:	cf 91       	pop	r28
    4488:	df 91       	pop	r29
    448a:	08 95       	ret

0000448c <HAL_LCD_u8SendChar>:

void HAL_LCD_u8SendChar(u8 Loc_u8LCD_Char) {
    448c:	df 93       	push	r29
    448e:	cf 93       	push	r28
    4490:	cd b7       	in	r28, 0x3d	; 61
    4492:	de b7       	in	r29, 0x3e	; 62
    4494:	6d 97       	sbiw	r28, 0x1d	; 29
    4496:	0f b6       	in	r0, 0x3f	; 63
    4498:	f8 94       	cli
    449a:	de bf       	out	0x3e, r29	; 62
    449c:	0f be       	out	0x3f, r0	; 63
    449e:	cd bf       	out	0x3d, r28	; 61
    44a0:	8d 8f       	std	Y+29, r24	; 0x1d
	MCAL_DIO_u8SetPinValue(RS_Port, RS_Pin, RS_High);
    44a2:	81 e0       	ldi	r24, 0x01	; 1
    44a4:	61 e0       	ldi	r22, 0x01	; 1
    44a6:	41 e0       	ldi	r20, 0x01	; 1
    44a8:	0e 94 04 17 	call	0x2e08	; 0x2e08 <MCAL_DIO_u8SetPinValue>
	MCAL_DIO_u8SetPinValue(RW_Port, RW_Pin, RW_Low);
    44ac:	81 e0       	ldi	r24, 0x01	; 1
    44ae:	62 e0       	ldi	r22, 0x02	; 2
    44b0:	40 e0       	ldi	r20, 0x00	; 0
    44b2:	0e 94 04 17 	call	0x2e08	; 0x2e08 <MCAL_DIO_u8SetPinValue>
	   HAL_LCD_voidData( Loc_u8LCD_Char>>4);
    44b6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    44b8:	82 95       	swap	r24
    44ba:	8f 70       	andi	r24, 0x0F	; 15
    44bc:	0e 94 d6 26 	call	0x4dac	; 0x4dac <HAL_LCD_voidData>
	MCAL_DIO_u8SetPinValue(Enable_PORT, Enable_PIN, Enable_High);
    44c0:	81 e0       	ldi	r24, 0x01	; 1
    44c2:	63 e0       	ldi	r22, 0x03	; 3
    44c4:	41 e0       	ldi	r20, 0x01	; 1
    44c6:	0e 94 04 17 	call	0x2e08	; 0x2e08 <MCAL_DIO_u8SetPinValue>
    44ca:	80 e0       	ldi	r24, 0x00	; 0
    44cc:	90 e0       	ldi	r25, 0x00	; 0
    44ce:	a0 e0       	ldi	r26, 0x00	; 0
    44d0:	b0 e4       	ldi	r27, 0x40	; 64
    44d2:	89 8f       	std	Y+25, r24	; 0x19
    44d4:	9a 8f       	std	Y+26, r25	; 0x1a
    44d6:	ab 8f       	std	Y+27, r26	; 0x1b
    44d8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    44da:	69 8d       	ldd	r22, Y+25	; 0x19
    44dc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    44de:	8b 8d       	ldd	r24, Y+27	; 0x1b
    44e0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    44e2:	20 e0       	ldi	r18, 0x00	; 0
    44e4:	30 e0       	ldi	r19, 0x00	; 0
    44e6:	4a e7       	ldi	r20, 0x7A	; 122
    44e8:	55 e4       	ldi	r21, 0x45	; 69
    44ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    44ee:	dc 01       	movw	r26, r24
    44f0:	cb 01       	movw	r24, r22
    44f2:	8d 8b       	std	Y+21, r24	; 0x15
    44f4:	9e 8b       	std	Y+22, r25	; 0x16
    44f6:	af 8b       	std	Y+23, r26	; 0x17
    44f8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    44fa:	6d 89       	ldd	r22, Y+21	; 0x15
    44fc:	7e 89       	ldd	r23, Y+22	; 0x16
    44fe:	8f 89       	ldd	r24, Y+23	; 0x17
    4500:	98 8d       	ldd	r25, Y+24	; 0x18
    4502:	20 e0       	ldi	r18, 0x00	; 0
    4504:	30 e0       	ldi	r19, 0x00	; 0
    4506:	40 e8       	ldi	r20, 0x80	; 128
    4508:	5f e3       	ldi	r21, 0x3F	; 63
    450a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    450e:	88 23       	and	r24, r24
    4510:	2c f4       	brge	.+10     	; 0x451c <HAL_LCD_u8SendChar+0x90>
		__ticks = 1;
    4512:	81 e0       	ldi	r24, 0x01	; 1
    4514:	90 e0       	ldi	r25, 0x00	; 0
    4516:	9c 8b       	std	Y+20, r25	; 0x14
    4518:	8b 8b       	std	Y+19, r24	; 0x13
    451a:	3f c0       	rjmp	.+126    	; 0x459a <HAL_LCD_u8SendChar+0x10e>
	else if (__tmp > 65535)
    451c:	6d 89       	ldd	r22, Y+21	; 0x15
    451e:	7e 89       	ldd	r23, Y+22	; 0x16
    4520:	8f 89       	ldd	r24, Y+23	; 0x17
    4522:	98 8d       	ldd	r25, Y+24	; 0x18
    4524:	20 e0       	ldi	r18, 0x00	; 0
    4526:	3f ef       	ldi	r19, 0xFF	; 255
    4528:	4f e7       	ldi	r20, 0x7F	; 127
    452a:	57 e4       	ldi	r21, 0x47	; 71
    452c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4530:	18 16       	cp	r1, r24
    4532:	4c f5       	brge	.+82     	; 0x4586 <HAL_LCD_u8SendChar+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4534:	69 8d       	ldd	r22, Y+25	; 0x19
    4536:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4538:	8b 8d       	ldd	r24, Y+27	; 0x1b
    453a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    453c:	20 e0       	ldi	r18, 0x00	; 0
    453e:	30 e0       	ldi	r19, 0x00	; 0
    4540:	40 e2       	ldi	r20, 0x20	; 32
    4542:	51 e4       	ldi	r21, 0x41	; 65
    4544:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4548:	dc 01       	movw	r26, r24
    454a:	cb 01       	movw	r24, r22
    454c:	bc 01       	movw	r22, r24
    454e:	cd 01       	movw	r24, r26
    4550:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4554:	dc 01       	movw	r26, r24
    4556:	cb 01       	movw	r24, r22
    4558:	9c 8b       	std	Y+20, r25	; 0x14
    455a:	8b 8b       	std	Y+19, r24	; 0x13
    455c:	0f c0       	rjmp	.+30     	; 0x457c <HAL_LCD_u8SendChar+0xf0>
    455e:	80 e9       	ldi	r24, 0x90	; 144
    4560:	91 e0       	ldi	r25, 0x01	; 1
    4562:	9a 8b       	std	Y+18, r25	; 0x12
    4564:	89 8b       	std	Y+17, r24	; 0x11
    4566:	89 89       	ldd	r24, Y+17	; 0x11
    4568:	9a 89       	ldd	r25, Y+18	; 0x12
    456a:	01 97       	sbiw	r24, 0x01	; 1
    456c:	f1 f7       	brne	.-4      	; 0x456a <HAL_LCD_u8SendChar+0xde>
    456e:	9a 8b       	std	Y+18, r25	; 0x12
    4570:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4572:	8b 89       	ldd	r24, Y+19	; 0x13
    4574:	9c 89       	ldd	r25, Y+20	; 0x14
    4576:	01 97       	sbiw	r24, 0x01	; 1
    4578:	9c 8b       	std	Y+20, r25	; 0x14
    457a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    457c:	8b 89       	ldd	r24, Y+19	; 0x13
    457e:	9c 89       	ldd	r25, Y+20	; 0x14
    4580:	00 97       	sbiw	r24, 0x00	; 0
    4582:	69 f7       	brne	.-38     	; 0x455e <HAL_LCD_u8SendChar+0xd2>
    4584:	14 c0       	rjmp	.+40     	; 0x45ae <HAL_LCD_u8SendChar+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4586:	6d 89       	ldd	r22, Y+21	; 0x15
    4588:	7e 89       	ldd	r23, Y+22	; 0x16
    458a:	8f 89       	ldd	r24, Y+23	; 0x17
    458c:	98 8d       	ldd	r25, Y+24	; 0x18
    458e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4592:	dc 01       	movw	r26, r24
    4594:	cb 01       	movw	r24, r22
    4596:	9c 8b       	std	Y+20, r25	; 0x14
    4598:	8b 8b       	std	Y+19, r24	; 0x13
    459a:	8b 89       	ldd	r24, Y+19	; 0x13
    459c:	9c 89       	ldd	r25, Y+20	; 0x14
    459e:	98 8b       	std	Y+16, r25	; 0x10
    45a0:	8f 87       	std	Y+15, r24	; 0x0f
    45a2:	8f 85       	ldd	r24, Y+15	; 0x0f
    45a4:	98 89       	ldd	r25, Y+16	; 0x10
    45a6:	01 97       	sbiw	r24, 0x01	; 1
    45a8:	f1 f7       	brne	.-4      	; 0x45a6 <HAL_LCD_u8SendChar+0x11a>
    45aa:	98 8b       	std	Y+16, r25	; 0x10
    45ac:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	MCAL_DIO_u8SetPinValue(Enable_PORT, Enable_PIN, Enable_Low);
    45ae:	81 e0       	ldi	r24, 0x01	; 1
    45b0:	63 e0       	ldi	r22, 0x03	; 3
    45b2:	40 e0       	ldi	r20, 0x00	; 0
    45b4:	0e 94 04 17 	call	0x2e08	; 0x2e08 <MCAL_DIO_u8SetPinValue>
	   HAL_LCD_voidData( Loc_u8LCD_Char);
    45b8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    45ba:	0e 94 d6 26 	call	0x4dac	; 0x4dac <HAL_LCD_voidData>
	MCAL_DIO_u8SetPinValue(Enable_PORT, Enable_PIN, Enable_High);
    45be:	81 e0       	ldi	r24, 0x01	; 1
    45c0:	63 e0       	ldi	r22, 0x03	; 3
    45c2:	41 e0       	ldi	r20, 0x01	; 1
    45c4:	0e 94 04 17 	call	0x2e08	; 0x2e08 <MCAL_DIO_u8SetPinValue>
    45c8:	80 e0       	ldi	r24, 0x00	; 0
    45ca:	90 e0       	ldi	r25, 0x00	; 0
    45cc:	a0 e0       	ldi	r26, 0x00	; 0
    45ce:	b0 e4       	ldi	r27, 0x40	; 64
    45d0:	8b 87       	std	Y+11, r24	; 0x0b
    45d2:	9c 87       	std	Y+12, r25	; 0x0c
    45d4:	ad 87       	std	Y+13, r26	; 0x0d
    45d6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    45d8:	6b 85       	ldd	r22, Y+11	; 0x0b
    45da:	7c 85       	ldd	r23, Y+12	; 0x0c
    45dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    45de:	9e 85       	ldd	r25, Y+14	; 0x0e
    45e0:	20 e0       	ldi	r18, 0x00	; 0
    45e2:	30 e0       	ldi	r19, 0x00	; 0
    45e4:	4a e7       	ldi	r20, 0x7A	; 122
    45e6:	55 e4       	ldi	r21, 0x45	; 69
    45e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    45ec:	dc 01       	movw	r26, r24
    45ee:	cb 01       	movw	r24, r22
    45f0:	8f 83       	std	Y+7, r24	; 0x07
    45f2:	98 87       	std	Y+8, r25	; 0x08
    45f4:	a9 87       	std	Y+9, r26	; 0x09
    45f6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    45f8:	6f 81       	ldd	r22, Y+7	; 0x07
    45fa:	78 85       	ldd	r23, Y+8	; 0x08
    45fc:	89 85       	ldd	r24, Y+9	; 0x09
    45fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    4600:	20 e0       	ldi	r18, 0x00	; 0
    4602:	30 e0       	ldi	r19, 0x00	; 0
    4604:	40 e8       	ldi	r20, 0x80	; 128
    4606:	5f e3       	ldi	r21, 0x3F	; 63
    4608:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    460c:	88 23       	and	r24, r24
    460e:	2c f4       	brge	.+10     	; 0x461a <HAL_LCD_u8SendChar+0x18e>
		__ticks = 1;
    4610:	81 e0       	ldi	r24, 0x01	; 1
    4612:	90 e0       	ldi	r25, 0x00	; 0
    4614:	9e 83       	std	Y+6, r25	; 0x06
    4616:	8d 83       	std	Y+5, r24	; 0x05
    4618:	3f c0       	rjmp	.+126    	; 0x4698 <HAL_LCD_u8SendChar+0x20c>
	else if (__tmp > 65535)
    461a:	6f 81       	ldd	r22, Y+7	; 0x07
    461c:	78 85       	ldd	r23, Y+8	; 0x08
    461e:	89 85       	ldd	r24, Y+9	; 0x09
    4620:	9a 85       	ldd	r25, Y+10	; 0x0a
    4622:	20 e0       	ldi	r18, 0x00	; 0
    4624:	3f ef       	ldi	r19, 0xFF	; 255
    4626:	4f e7       	ldi	r20, 0x7F	; 127
    4628:	57 e4       	ldi	r21, 0x47	; 71
    462a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    462e:	18 16       	cp	r1, r24
    4630:	4c f5       	brge	.+82     	; 0x4684 <HAL_LCD_u8SendChar+0x1f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4632:	6b 85       	ldd	r22, Y+11	; 0x0b
    4634:	7c 85       	ldd	r23, Y+12	; 0x0c
    4636:	8d 85       	ldd	r24, Y+13	; 0x0d
    4638:	9e 85       	ldd	r25, Y+14	; 0x0e
    463a:	20 e0       	ldi	r18, 0x00	; 0
    463c:	30 e0       	ldi	r19, 0x00	; 0
    463e:	40 e2       	ldi	r20, 0x20	; 32
    4640:	51 e4       	ldi	r21, 0x41	; 65
    4642:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4646:	dc 01       	movw	r26, r24
    4648:	cb 01       	movw	r24, r22
    464a:	bc 01       	movw	r22, r24
    464c:	cd 01       	movw	r24, r26
    464e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4652:	dc 01       	movw	r26, r24
    4654:	cb 01       	movw	r24, r22
    4656:	9e 83       	std	Y+6, r25	; 0x06
    4658:	8d 83       	std	Y+5, r24	; 0x05
    465a:	0f c0       	rjmp	.+30     	; 0x467a <HAL_LCD_u8SendChar+0x1ee>
    465c:	80 e9       	ldi	r24, 0x90	; 144
    465e:	91 e0       	ldi	r25, 0x01	; 1
    4660:	9c 83       	std	Y+4, r25	; 0x04
    4662:	8b 83       	std	Y+3, r24	; 0x03
    4664:	8b 81       	ldd	r24, Y+3	; 0x03
    4666:	9c 81       	ldd	r25, Y+4	; 0x04
    4668:	01 97       	sbiw	r24, 0x01	; 1
    466a:	f1 f7       	brne	.-4      	; 0x4668 <HAL_LCD_u8SendChar+0x1dc>
    466c:	9c 83       	std	Y+4, r25	; 0x04
    466e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4670:	8d 81       	ldd	r24, Y+5	; 0x05
    4672:	9e 81       	ldd	r25, Y+6	; 0x06
    4674:	01 97       	sbiw	r24, 0x01	; 1
    4676:	9e 83       	std	Y+6, r25	; 0x06
    4678:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    467a:	8d 81       	ldd	r24, Y+5	; 0x05
    467c:	9e 81       	ldd	r25, Y+6	; 0x06
    467e:	00 97       	sbiw	r24, 0x00	; 0
    4680:	69 f7       	brne	.-38     	; 0x465c <HAL_LCD_u8SendChar+0x1d0>
    4682:	14 c0       	rjmp	.+40     	; 0x46ac <HAL_LCD_u8SendChar+0x220>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4684:	6f 81       	ldd	r22, Y+7	; 0x07
    4686:	78 85       	ldd	r23, Y+8	; 0x08
    4688:	89 85       	ldd	r24, Y+9	; 0x09
    468a:	9a 85       	ldd	r25, Y+10	; 0x0a
    468c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4690:	dc 01       	movw	r26, r24
    4692:	cb 01       	movw	r24, r22
    4694:	9e 83       	std	Y+6, r25	; 0x06
    4696:	8d 83       	std	Y+5, r24	; 0x05
    4698:	8d 81       	ldd	r24, Y+5	; 0x05
    469a:	9e 81       	ldd	r25, Y+6	; 0x06
    469c:	9a 83       	std	Y+2, r25	; 0x02
    469e:	89 83       	std	Y+1, r24	; 0x01
    46a0:	89 81       	ldd	r24, Y+1	; 0x01
    46a2:	9a 81       	ldd	r25, Y+2	; 0x02
    46a4:	01 97       	sbiw	r24, 0x01	; 1
    46a6:	f1 f7       	brne	.-4      	; 0x46a4 <HAL_LCD_u8SendChar+0x218>
    46a8:	9a 83       	std	Y+2, r25	; 0x02
    46aa:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	MCAL_DIO_u8SetPinValue(Enable_PORT, Enable_PIN, Enable_Low);
    46ac:	81 e0       	ldi	r24, 0x01	; 1
    46ae:	63 e0       	ldi	r22, 0x03	; 3
    46b0:	40 e0       	ldi	r20, 0x00	; 0
    46b2:	0e 94 04 17 	call	0x2e08	; 0x2e08 <MCAL_DIO_u8SetPinValue>
}
    46b6:	6d 96       	adiw	r28, 0x1d	; 29
    46b8:	0f b6       	in	r0, 0x3f	; 63
    46ba:	f8 94       	cli
    46bc:	de bf       	out	0x3e, r29	; 62
    46be:	0f be       	out	0x3f, r0	; 63
    46c0:	cd bf       	out	0x3d, r28	; 61
    46c2:	cf 91       	pop	r28
    46c4:	df 91       	pop	r29
    46c6:	08 95       	ret

000046c8 <HAL_LCD_u8SendString>:

void HAL_LCD_u8SendString(u8 * Loc_u8LCD_String) {
    46c8:	df 93       	push	r29
    46ca:	cf 93       	push	r28
    46cc:	00 d0       	rcall	.+0      	; 0x46ce <HAL_LCD_u8SendString+0x6>
    46ce:	00 d0       	rcall	.+0      	; 0x46d0 <HAL_LCD_u8SendString+0x8>
    46d0:	00 d0       	rcall	.+0      	; 0x46d2 <HAL_LCD_u8SendString+0xa>
    46d2:	cd b7       	in	r28, 0x3d	; 61
    46d4:	de b7       	in	r29, 0x3e	; 62
    46d6:	9e 83       	std	Y+6, r25	; 0x06
    46d8:	8d 83       	std	Y+5, r24	; 0x05
	for (u32 count = 0; Loc_u8LCD_String[count] != '\0'; count++) {
    46da:	19 82       	std	Y+1, r1	; 0x01
    46dc:	1a 82       	std	Y+2, r1	; 0x02
    46de:	1b 82       	std	Y+3, r1	; 0x03
    46e0:	1c 82       	std	Y+4, r1	; 0x04
    46e2:	15 c0       	rjmp	.+42     	; 0x470e <HAL_LCD_u8SendString+0x46>
		HAL_LCD_u8SendChar(Loc_u8LCD_String[count]);
    46e4:	29 81       	ldd	r18, Y+1	; 0x01
    46e6:	3a 81       	ldd	r19, Y+2	; 0x02
    46e8:	8d 81       	ldd	r24, Y+5	; 0x05
    46ea:	9e 81       	ldd	r25, Y+6	; 0x06
    46ec:	fc 01       	movw	r30, r24
    46ee:	e2 0f       	add	r30, r18
    46f0:	f3 1f       	adc	r31, r19
    46f2:	80 81       	ld	r24, Z
    46f4:	0e 94 46 22 	call	0x448c	; 0x448c <HAL_LCD_u8SendChar>
	_delay_ms(2);
	MCAL_DIO_u8SetPinValue(Enable_PORT, Enable_PIN, Enable_Low);
}

void HAL_LCD_u8SendString(u8 * Loc_u8LCD_String) {
	for (u32 count = 0; Loc_u8LCD_String[count] != '\0'; count++) {
    46f8:	89 81       	ldd	r24, Y+1	; 0x01
    46fa:	9a 81       	ldd	r25, Y+2	; 0x02
    46fc:	ab 81       	ldd	r26, Y+3	; 0x03
    46fe:	bc 81       	ldd	r27, Y+4	; 0x04
    4700:	01 96       	adiw	r24, 0x01	; 1
    4702:	a1 1d       	adc	r26, r1
    4704:	b1 1d       	adc	r27, r1
    4706:	89 83       	std	Y+1, r24	; 0x01
    4708:	9a 83       	std	Y+2, r25	; 0x02
    470a:	ab 83       	std	Y+3, r26	; 0x03
    470c:	bc 83       	std	Y+4, r27	; 0x04
    470e:	29 81       	ldd	r18, Y+1	; 0x01
    4710:	3a 81       	ldd	r19, Y+2	; 0x02
    4712:	8d 81       	ldd	r24, Y+5	; 0x05
    4714:	9e 81       	ldd	r25, Y+6	; 0x06
    4716:	fc 01       	movw	r30, r24
    4718:	e2 0f       	add	r30, r18
    471a:	f3 1f       	adc	r31, r19
    471c:	80 81       	ld	r24, Z
    471e:	88 23       	and	r24, r24
    4720:	09 f7       	brne	.-62     	; 0x46e4 <HAL_LCD_u8SendString+0x1c>
		HAL_LCD_u8SendChar(Loc_u8LCD_String[count]);
	}
}
    4722:	26 96       	adiw	r28, 0x06	; 6
    4724:	0f b6       	in	r0, 0x3f	; 63
    4726:	f8 94       	cli
    4728:	de bf       	out	0x3e, r29	; 62
    472a:	0f be       	out	0x3f, r0	; 63
    472c:	cd bf       	out	0x3d, r28	; 61
    472e:	cf 91       	pop	r28
    4730:	df 91       	pop	r29
    4732:	08 95       	ret

00004734 <HAL_LCD_u8SendNumber>:

void HAL_LCD_u8SendNumber(u16 Loc_u8LCD_Number) {
    4734:	df 93       	push	r29
    4736:	cf 93       	push	r28
    4738:	cd b7       	in	r28, 0x3d	; 61
    473a:	de b7       	in	r29, 0x3e	; 62
    473c:	2c 97       	sbiw	r28, 0x0c	; 12
    473e:	0f b6       	in	r0, 0x3f	; 63
    4740:	f8 94       	cli
    4742:	de bf       	out	0x3e, r29	; 62
    4744:	0f be       	out	0x3f, r0	; 63
    4746:	cd bf       	out	0x3d, r28	; 61
    4748:	9c 87       	std	Y+12, r25	; 0x0c
    474a:	8b 87       	std	Y+11, r24	; 0x0b
	u8 str[10];
	itoa(Loc_u8LCD_Number, str, 10);
    474c:	8b 85       	ldd	r24, Y+11	; 0x0b
    474e:	9c 85       	ldd	r25, Y+12	; 0x0c
    4750:	9e 01       	movw	r18, r28
    4752:	2f 5f       	subi	r18, 0xFF	; 255
    4754:	3f 4f       	sbci	r19, 0xFF	; 255
    4756:	b9 01       	movw	r22, r18
    4758:	4a e0       	ldi	r20, 0x0A	; 10
    475a:	50 e0       	ldi	r21, 0x00	; 0
    475c:	0e 94 fa 2e 	call	0x5df4	; 0x5df4 <itoa>
	HAL_LCD_u8SendString(str);
    4760:	ce 01       	movw	r24, r28
    4762:	01 96       	adiw	r24, 0x01	; 1
    4764:	0e 94 64 23 	call	0x46c8	; 0x46c8 <HAL_LCD_u8SendString>
}
    4768:	2c 96       	adiw	r28, 0x0c	; 12
    476a:	0f b6       	in	r0, 0x3f	; 63
    476c:	f8 94       	cli
    476e:	de bf       	out	0x3e, r29	; 62
    4770:	0f be       	out	0x3f, r0	; 63
    4772:	cd bf       	out	0x3d, r28	; 61
    4774:	cf 91       	pop	r28
    4776:	df 91       	pop	r29
    4778:	08 95       	ret

0000477a <HAL_LCD_u8GoTo>:

void HAL_LCD_u8GoTo(u8 Loc_u8TypeOfShift, u8 Loc_u8NumOfShift) {
    477a:	df 93       	push	r29
    477c:	cf 93       	push	r28
    477e:	cd b7       	in	r28, 0x3d	; 61
    4780:	de b7       	in	r29, 0x3e	; 62
    4782:	c2 54       	subi	r28, 0x42	; 66
    4784:	d0 40       	sbci	r29, 0x00	; 0
    4786:	0f b6       	in	r0, 0x3f	; 63
    4788:	f8 94       	cli
    478a:	de bf       	out	0x3e, r29	; 62
    478c:	0f be       	out	0x3f, r0	; 63
    478e:	cd bf       	out	0x3d, r28	; 61
    4790:	fe 01       	movw	r30, r28
    4792:	ef 5b       	subi	r30, 0xBF	; 191
    4794:	ff 4f       	sbci	r31, 0xFF	; 255
    4796:	80 83       	st	Z, r24
    4798:	fe 01       	movw	r30, r28
    479a:	ee 5b       	subi	r30, 0xBE	; 190
    479c:	ff 4f       	sbci	r31, 0xFF	; 255
    479e:	60 83       	st	Z, r22
	if (Loc_u8TypeOfShift == Right_Shift) {
    47a0:	fe 01       	movw	r30, r28
    47a2:	ef 5b       	subi	r30, 0xBF	; 191
    47a4:	ff 4f       	sbci	r31, 0xFF	; 255
    47a6:	80 81       	ld	r24, Z
    47a8:	81 30       	cpi	r24, 0x01	; 1
    47aa:	09 f0       	breq	.+2      	; 0x47ae <HAL_LCD_u8GoTo+0x34>
    47ac:	a0 c0       	rjmp	.+320    	; 0x48ee <HAL_LCD_u8GoTo+0x174>
		for (u32 count = 0; count < Loc_u8NumOfShift; count++) {
    47ae:	fe 01       	movw	r30, r28
    47b0:	fd 96       	adiw	r30, 0x3d	; 61
    47b2:	10 82       	st	Z, r1
    47b4:	11 82       	std	Z+1, r1	; 0x01
    47b6:	12 82       	std	Z+2, r1	; 0x02
    47b8:	13 82       	std	Z+3, r1	; 0x03
    47ba:	84 c0       	rjmp	.+264    	; 0x48c4 <HAL_LCD_u8GoTo+0x14a>
    47bc:	80 e0       	ldi	r24, 0x00	; 0
    47be:	90 e0       	ldi	r25, 0x00	; 0
    47c0:	a0 e0       	ldi	r26, 0x00	; 0
    47c2:	b0 e4       	ldi	r27, 0x40	; 64
    47c4:	8d ab       	std	Y+53, r24	; 0x35
    47c6:	9e ab       	std	Y+54, r25	; 0x36
    47c8:	af ab       	std	Y+55, r26	; 0x37
    47ca:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    47cc:	6d a9       	ldd	r22, Y+53	; 0x35
    47ce:	7e a9       	ldd	r23, Y+54	; 0x36
    47d0:	8f a9       	ldd	r24, Y+55	; 0x37
    47d2:	98 ad       	ldd	r25, Y+56	; 0x38
    47d4:	20 e0       	ldi	r18, 0x00	; 0
    47d6:	30 e0       	ldi	r19, 0x00	; 0
    47d8:	4a e7       	ldi	r20, 0x7A	; 122
    47da:	55 e4       	ldi	r21, 0x45	; 69
    47dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    47e0:	dc 01       	movw	r26, r24
    47e2:	cb 01       	movw	r24, r22
    47e4:	89 ab       	std	Y+49, r24	; 0x31
    47e6:	9a ab       	std	Y+50, r25	; 0x32
    47e8:	ab ab       	std	Y+51, r26	; 0x33
    47ea:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    47ec:	69 a9       	ldd	r22, Y+49	; 0x31
    47ee:	7a a9       	ldd	r23, Y+50	; 0x32
    47f0:	8b a9       	ldd	r24, Y+51	; 0x33
    47f2:	9c a9       	ldd	r25, Y+52	; 0x34
    47f4:	20 e0       	ldi	r18, 0x00	; 0
    47f6:	30 e0       	ldi	r19, 0x00	; 0
    47f8:	40 e8       	ldi	r20, 0x80	; 128
    47fa:	5f e3       	ldi	r21, 0x3F	; 63
    47fc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4800:	88 23       	and	r24, r24
    4802:	2c f4       	brge	.+10     	; 0x480e <HAL_LCD_u8GoTo+0x94>
		__ticks = 1;
    4804:	81 e0       	ldi	r24, 0x01	; 1
    4806:	90 e0       	ldi	r25, 0x00	; 0
    4808:	98 ab       	std	Y+48, r25	; 0x30
    480a:	8f a7       	std	Y+47, r24	; 0x2f
    480c:	3f c0       	rjmp	.+126    	; 0x488c <HAL_LCD_u8GoTo+0x112>
	else if (__tmp > 65535)
    480e:	69 a9       	ldd	r22, Y+49	; 0x31
    4810:	7a a9       	ldd	r23, Y+50	; 0x32
    4812:	8b a9       	ldd	r24, Y+51	; 0x33
    4814:	9c a9       	ldd	r25, Y+52	; 0x34
    4816:	20 e0       	ldi	r18, 0x00	; 0
    4818:	3f ef       	ldi	r19, 0xFF	; 255
    481a:	4f e7       	ldi	r20, 0x7F	; 127
    481c:	57 e4       	ldi	r21, 0x47	; 71
    481e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4822:	18 16       	cp	r1, r24
    4824:	4c f5       	brge	.+82     	; 0x4878 <HAL_LCD_u8GoTo+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4826:	6d a9       	ldd	r22, Y+53	; 0x35
    4828:	7e a9       	ldd	r23, Y+54	; 0x36
    482a:	8f a9       	ldd	r24, Y+55	; 0x37
    482c:	98 ad       	ldd	r25, Y+56	; 0x38
    482e:	20 e0       	ldi	r18, 0x00	; 0
    4830:	30 e0       	ldi	r19, 0x00	; 0
    4832:	40 e2       	ldi	r20, 0x20	; 32
    4834:	51 e4       	ldi	r21, 0x41	; 65
    4836:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    483a:	dc 01       	movw	r26, r24
    483c:	cb 01       	movw	r24, r22
    483e:	bc 01       	movw	r22, r24
    4840:	cd 01       	movw	r24, r26
    4842:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4846:	dc 01       	movw	r26, r24
    4848:	cb 01       	movw	r24, r22
    484a:	98 ab       	std	Y+48, r25	; 0x30
    484c:	8f a7       	std	Y+47, r24	; 0x2f
    484e:	0f c0       	rjmp	.+30     	; 0x486e <HAL_LCD_u8GoTo+0xf4>
    4850:	80 e9       	ldi	r24, 0x90	; 144
    4852:	91 e0       	ldi	r25, 0x01	; 1
    4854:	9e a7       	std	Y+46, r25	; 0x2e
    4856:	8d a7       	std	Y+45, r24	; 0x2d
    4858:	8d a5       	ldd	r24, Y+45	; 0x2d
    485a:	9e a5       	ldd	r25, Y+46	; 0x2e
    485c:	01 97       	sbiw	r24, 0x01	; 1
    485e:	f1 f7       	brne	.-4      	; 0x485c <HAL_LCD_u8GoTo+0xe2>
    4860:	9e a7       	std	Y+46, r25	; 0x2e
    4862:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4864:	8f a5       	ldd	r24, Y+47	; 0x2f
    4866:	98 a9       	ldd	r25, Y+48	; 0x30
    4868:	01 97       	sbiw	r24, 0x01	; 1
    486a:	98 ab       	std	Y+48, r25	; 0x30
    486c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    486e:	8f a5       	ldd	r24, Y+47	; 0x2f
    4870:	98 a9       	ldd	r25, Y+48	; 0x30
    4872:	00 97       	sbiw	r24, 0x00	; 0
    4874:	69 f7       	brne	.-38     	; 0x4850 <HAL_LCD_u8GoTo+0xd6>
    4876:	14 c0       	rjmp	.+40     	; 0x48a0 <HAL_LCD_u8GoTo+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4878:	69 a9       	ldd	r22, Y+49	; 0x31
    487a:	7a a9       	ldd	r23, Y+50	; 0x32
    487c:	8b a9       	ldd	r24, Y+51	; 0x33
    487e:	9c a9       	ldd	r25, Y+52	; 0x34
    4880:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4884:	dc 01       	movw	r26, r24
    4886:	cb 01       	movw	r24, r22
    4888:	98 ab       	std	Y+48, r25	; 0x30
    488a:	8f a7       	std	Y+47, r24	; 0x2f
    488c:	8f a5       	ldd	r24, Y+47	; 0x2f
    488e:	98 a9       	ldd	r25, Y+48	; 0x30
    4890:	9c a7       	std	Y+44, r25	; 0x2c
    4892:	8b a7       	std	Y+43, r24	; 0x2b
    4894:	8b a5       	ldd	r24, Y+43	; 0x2b
    4896:	9c a5       	ldd	r25, Y+44	; 0x2c
    4898:	01 97       	sbiw	r24, 0x01	; 1
    489a:	f1 f7       	brne	.-4      	; 0x4898 <HAL_LCD_u8GoTo+0x11e>
    489c:	9c a7       	std	Y+44, r25	; 0x2c
    489e:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(2);
			HAL_LCD_u8SendCommands(Right_Shift_Command);
    48a0:	8c e1       	ldi	r24, 0x1C	; 28
    48a2:	0e 94 28 21 	call	0x4250	; 0x4250 <HAL_LCD_u8SendCommands>
	HAL_LCD_u8SendString(str);
}

void HAL_LCD_u8GoTo(u8 Loc_u8TypeOfShift, u8 Loc_u8NumOfShift) {
	if (Loc_u8TypeOfShift == Right_Shift) {
		for (u32 count = 0; count < Loc_u8NumOfShift; count++) {
    48a6:	fe 01       	movw	r30, r28
    48a8:	fd 96       	adiw	r30, 0x3d	; 61
    48aa:	80 81       	ld	r24, Z
    48ac:	91 81       	ldd	r25, Z+1	; 0x01
    48ae:	a2 81       	ldd	r26, Z+2	; 0x02
    48b0:	b3 81       	ldd	r27, Z+3	; 0x03
    48b2:	01 96       	adiw	r24, 0x01	; 1
    48b4:	a1 1d       	adc	r26, r1
    48b6:	b1 1d       	adc	r27, r1
    48b8:	fe 01       	movw	r30, r28
    48ba:	fd 96       	adiw	r30, 0x3d	; 61
    48bc:	80 83       	st	Z, r24
    48be:	91 83       	std	Z+1, r25	; 0x01
    48c0:	a2 83       	std	Z+2, r26	; 0x02
    48c2:	b3 83       	std	Z+3, r27	; 0x03
    48c4:	fe 01       	movw	r30, r28
    48c6:	ee 5b       	subi	r30, 0xBE	; 190
    48c8:	ff 4f       	sbci	r31, 0xFF	; 255
    48ca:	80 81       	ld	r24, Z
    48cc:	28 2f       	mov	r18, r24
    48ce:	30 e0       	ldi	r19, 0x00	; 0
    48d0:	40 e0       	ldi	r20, 0x00	; 0
    48d2:	50 e0       	ldi	r21, 0x00	; 0
    48d4:	fe 01       	movw	r30, r28
    48d6:	fd 96       	adiw	r30, 0x3d	; 61
    48d8:	80 81       	ld	r24, Z
    48da:	91 81       	ldd	r25, Z+1	; 0x01
    48dc:	a2 81       	ldd	r26, Z+2	; 0x02
    48de:	b3 81       	ldd	r27, Z+3	; 0x03
    48e0:	82 17       	cp	r24, r18
    48e2:	93 07       	cpc	r25, r19
    48e4:	a4 07       	cpc	r26, r20
    48e6:	b5 07       	cpc	r27, r21
    48e8:	08 f4       	brcc	.+2      	; 0x48ec <HAL_LCD_u8GoTo+0x172>
    48ea:	68 cf       	rjmp	.-304    	; 0x47bc <HAL_LCD_u8GoTo+0x42>
    48ec:	98 c1       	rjmp	.+816    	; 0x4c1e <HAL_LCD_u8GoTo+0x4a4>
			_delay_ms(2);
			HAL_LCD_u8SendCommands(Right_Shift_Command);
		}
	} else if (Loc_u8TypeOfShift == Left_Shift) {
    48ee:	fe 01       	movw	r30, r28
    48f0:	ef 5b       	subi	r30, 0xBF	; 191
    48f2:	ff 4f       	sbci	r31, 0xFF	; 255
    48f4:	80 81       	ld	r24, Z
    48f6:	88 23       	and	r24, r24
    48f8:	09 f0       	breq	.+2      	; 0x48fc <HAL_LCD_u8GoTo+0x182>
    48fa:	98 c0       	rjmp	.+304    	; 0x4a2c <HAL_LCD_u8GoTo+0x2b2>
		for (u32 count = 0; count < Loc_u8NumOfShift; count++) {
    48fc:	19 ae       	std	Y+57, r1	; 0x39
    48fe:	1a ae       	std	Y+58, r1	; 0x3a
    4900:	1b ae       	std	Y+59, r1	; 0x3b
    4902:	1c ae       	std	Y+60, r1	; 0x3c
    4904:	80 c0       	rjmp	.+256    	; 0x4a06 <HAL_LCD_u8GoTo+0x28c>
    4906:	80 e0       	ldi	r24, 0x00	; 0
    4908:	90 e0       	ldi	r25, 0x00	; 0
    490a:	a0 e0       	ldi	r26, 0x00	; 0
    490c:	b0 e4       	ldi	r27, 0x40	; 64
    490e:	8f a3       	std	Y+39, r24	; 0x27
    4910:	98 a7       	std	Y+40, r25	; 0x28
    4912:	a9 a7       	std	Y+41, r26	; 0x29
    4914:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4916:	6f a1       	ldd	r22, Y+39	; 0x27
    4918:	78 a5       	ldd	r23, Y+40	; 0x28
    491a:	89 a5       	ldd	r24, Y+41	; 0x29
    491c:	9a a5       	ldd	r25, Y+42	; 0x2a
    491e:	20 e0       	ldi	r18, 0x00	; 0
    4920:	30 e0       	ldi	r19, 0x00	; 0
    4922:	4a e7       	ldi	r20, 0x7A	; 122
    4924:	55 e4       	ldi	r21, 0x45	; 69
    4926:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    492a:	dc 01       	movw	r26, r24
    492c:	cb 01       	movw	r24, r22
    492e:	8b a3       	std	Y+35, r24	; 0x23
    4930:	9c a3       	std	Y+36, r25	; 0x24
    4932:	ad a3       	std	Y+37, r26	; 0x25
    4934:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4936:	6b a1       	ldd	r22, Y+35	; 0x23
    4938:	7c a1       	ldd	r23, Y+36	; 0x24
    493a:	8d a1       	ldd	r24, Y+37	; 0x25
    493c:	9e a1       	ldd	r25, Y+38	; 0x26
    493e:	20 e0       	ldi	r18, 0x00	; 0
    4940:	30 e0       	ldi	r19, 0x00	; 0
    4942:	40 e8       	ldi	r20, 0x80	; 128
    4944:	5f e3       	ldi	r21, 0x3F	; 63
    4946:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    494a:	88 23       	and	r24, r24
    494c:	2c f4       	brge	.+10     	; 0x4958 <HAL_LCD_u8GoTo+0x1de>
		__ticks = 1;
    494e:	81 e0       	ldi	r24, 0x01	; 1
    4950:	90 e0       	ldi	r25, 0x00	; 0
    4952:	9a a3       	std	Y+34, r25	; 0x22
    4954:	89 a3       	std	Y+33, r24	; 0x21
    4956:	3f c0       	rjmp	.+126    	; 0x49d6 <HAL_LCD_u8GoTo+0x25c>
	else if (__tmp > 65535)
    4958:	6b a1       	ldd	r22, Y+35	; 0x23
    495a:	7c a1       	ldd	r23, Y+36	; 0x24
    495c:	8d a1       	ldd	r24, Y+37	; 0x25
    495e:	9e a1       	ldd	r25, Y+38	; 0x26
    4960:	20 e0       	ldi	r18, 0x00	; 0
    4962:	3f ef       	ldi	r19, 0xFF	; 255
    4964:	4f e7       	ldi	r20, 0x7F	; 127
    4966:	57 e4       	ldi	r21, 0x47	; 71
    4968:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    496c:	18 16       	cp	r1, r24
    496e:	4c f5       	brge	.+82     	; 0x49c2 <HAL_LCD_u8GoTo+0x248>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4970:	6f a1       	ldd	r22, Y+39	; 0x27
    4972:	78 a5       	ldd	r23, Y+40	; 0x28
    4974:	89 a5       	ldd	r24, Y+41	; 0x29
    4976:	9a a5       	ldd	r25, Y+42	; 0x2a
    4978:	20 e0       	ldi	r18, 0x00	; 0
    497a:	30 e0       	ldi	r19, 0x00	; 0
    497c:	40 e2       	ldi	r20, 0x20	; 32
    497e:	51 e4       	ldi	r21, 0x41	; 65
    4980:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4984:	dc 01       	movw	r26, r24
    4986:	cb 01       	movw	r24, r22
    4988:	bc 01       	movw	r22, r24
    498a:	cd 01       	movw	r24, r26
    498c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4990:	dc 01       	movw	r26, r24
    4992:	cb 01       	movw	r24, r22
    4994:	9a a3       	std	Y+34, r25	; 0x22
    4996:	89 a3       	std	Y+33, r24	; 0x21
    4998:	0f c0       	rjmp	.+30     	; 0x49b8 <HAL_LCD_u8GoTo+0x23e>
    499a:	80 e9       	ldi	r24, 0x90	; 144
    499c:	91 e0       	ldi	r25, 0x01	; 1
    499e:	98 a3       	std	Y+32, r25	; 0x20
    49a0:	8f 8f       	std	Y+31, r24	; 0x1f
    49a2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    49a4:	98 a1       	ldd	r25, Y+32	; 0x20
    49a6:	01 97       	sbiw	r24, 0x01	; 1
    49a8:	f1 f7       	brne	.-4      	; 0x49a6 <HAL_LCD_u8GoTo+0x22c>
    49aa:	98 a3       	std	Y+32, r25	; 0x20
    49ac:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    49ae:	89 a1       	ldd	r24, Y+33	; 0x21
    49b0:	9a a1       	ldd	r25, Y+34	; 0x22
    49b2:	01 97       	sbiw	r24, 0x01	; 1
    49b4:	9a a3       	std	Y+34, r25	; 0x22
    49b6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    49b8:	89 a1       	ldd	r24, Y+33	; 0x21
    49ba:	9a a1       	ldd	r25, Y+34	; 0x22
    49bc:	00 97       	sbiw	r24, 0x00	; 0
    49be:	69 f7       	brne	.-38     	; 0x499a <HAL_LCD_u8GoTo+0x220>
    49c0:	14 c0       	rjmp	.+40     	; 0x49ea <HAL_LCD_u8GoTo+0x270>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    49c2:	6b a1       	ldd	r22, Y+35	; 0x23
    49c4:	7c a1       	ldd	r23, Y+36	; 0x24
    49c6:	8d a1       	ldd	r24, Y+37	; 0x25
    49c8:	9e a1       	ldd	r25, Y+38	; 0x26
    49ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    49ce:	dc 01       	movw	r26, r24
    49d0:	cb 01       	movw	r24, r22
    49d2:	9a a3       	std	Y+34, r25	; 0x22
    49d4:	89 a3       	std	Y+33, r24	; 0x21
    49d6:	89 a1       	ldd	r24, Y+33	; 0x21
    49d8:	9a a1       	ldd	r25, Y+34	; 0x22
    49da:	9e 8f       	std	Y+30, r25	; 0x1e
    49dc:	8d 8f       	std	Y+29, r24	; 0x1d
    49de:	8d 8d       	ldd	r24, Y+29	; 0x1d
    49e0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    49e2:	01 97       	sbiw	r24, 0x01	; 1
    49e4:	f1 f7       	brne	.-4      	; 0x49e2 <HAL_LCD_u8GoTo+0x268>
    49e6:	9e 8f       	std	Y+30, r25	; 0x1e
    49e8:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(2);
			HAL_LCD_u8SendCommands(Left_Shift_Command);
    49ea:	88 e1       	ldi	r24, 0x18	; 24
    49ec:	0e 94 28 21 	call	0x4250	; 0x4250 <HAL_LCD_u8SendCommands>
		for (u32 count = 0; count < Loc_u8NumOfShift; count++) {
			_delay_ms(2);
			HAL_LCD_u8SendCommands(Right_Shift_Command);
		}
	} else if (Loc_u8TypeOfShift == Left_Shift) {
		for (u32 count = 0; count < Loc_u8NumOfShift; count++) {
    49f0:	89 ad       	ldd	r24, Y+57	; 0x39
    49f2:	9a ad       	ldd	r25, Y+58	; 0x3a
    49f4:	ab ad       	ldd	r26, Y+59	; 0x3b
    49f6:	bc ad       	ldd	r27, Y+60	; 0x3c
    49f8:	01 96       	adiw	r24, 0x01	; 1
    49fa:	a1 1d       	adc	r26, r1
    49fc:	b1 1d       	adc	r27, r1
    49fe:	89 af       	std	Y+57, r24	; 0x39
    4a00:	9a af       	std	Y+58, r25	; 0x3a
    4a02:	ab af       	std	Y+59, r26	; 0x3b
    4a04:	bc af       	std	Y+60, r27	; 0x3c
    4a06:	fe 01       	movw	r30, r28
    4a08:	ee 5b       	subi	r30, 0xBE	; 190
    4a0a:	ff 4f       	sbci	r31, 0xFF	; 255
    4a0c:	80 81       	ld	r24, Z
    4a0e:	28 2f       	mov	r18, r24
    4a10:	30 e0       	ldi	r19, 0x00	; 0
    4a12:	40 e0       	ldi	r20, 0x00	; 0
    4a14:	50 e0       	ldi	r21, 0x00	; 0
    4a16:	89 ad       	ldd	r24, Y+57	; 0x39
    4a18:	9a ad       	ldd	r25, Y+58	; 0x3a
    4a1a:	ab ad       	ldd	r26, Y+59	; 0x3b
    4a1c:	bc ad       	ldd	r27, Y+60	; 0x3c
    4a1e:	82 17       	cp	r24, r18
    4a20:	93 07       	cpc	r25, r19
    4a22:	a4 07       	cpc	r26, r20
    4a24:	b5 07       	cpc	r27, r21
    4a26:	08 f4       	brcc	.+2      	; 0x4a2a <HAL_LCD_u8GoTo+0x2b0>
    4a28:	6e cf       	rjmp	.-292    	; 0x4906 <HAL_LCD_u8GoTo+0x18c>
    4a2a:	f9 c0       	rjmp	.+498    	; 0x4c1e <HAL_LCD_u8GoTo+0x4a4>
			_delay_ms(2);
			HAL_LCD_u8SendCommands(Left_Shift_Command);
		}
	} else if (Loc_u8TypeOfShift == First_Line) {
    4a2c:	fe 01       	movw	r30, r28
    4a2e:	ef 5b       	subi	r30, 0xBF	; 191
    4a30:	ff 4f       	sbci	r31, 0xFF	; 255
    4a32:	80 81       	ld	r24, Z
    4a34:	82 30       	cpi	r24, 0x02	; 2
    4a36:	09 f0       	breq	.+2      	; 0x4a3a <HAL_LCD_u8GoTo+0x2c0>
    4a38:	76 c0       	rjmp	.+236    	; 0x4b26 <HAL_LCD_u8GoTo+0x3ac>
    4a3a:	80 e0       	ldi	r24, 0x00	; 0
    4a3c:	90 e0       	ldi	r25, 0x00	; 0
    4a3e:	a0 e0       	ldi	r26, 0x00	; 0
    4a40:	b0 e4       	ldi	r27, 0x40	; 64
    4a42:	89 8f       	std	Y+25, r24	; 0x19
    4a44:	9a 8f       	std	Y+26, r25	; 0x1a
    4a46:	ab 8f       	std	Y+27, r26	; 0x1b
    4a48:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4a4a:	69 8d       	ldd	r22, Y+25	; 0x19
    4a4c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4a4e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4a50:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4a52:	20 e0       	ldi	r18, 0x00	; 0
    4a54:	30 e0       	ldi	r19, 0x00	; 0
    4a56:	4a e7       	ldi	r20, 0x7A	; 122
    4a58:	55 e4       	ldi	r21, 0x45	; 69
    4a5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a5e:	dc 01       	movw	r26, r24
    4a60:	cb 01       	movw	r24, r22
    4a62:	8d 8b       	std	Y+21, r24	; 0x15
    4a64:	9e 8b       	std	Y+22, r25	; 0x16
    4a66:	af 8b       	std	Y+23, r26	; 0x17
    4a68:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4a6a:	6d 89       	ldd	r22, Y+21	; 0x15
    4a6c:	7e 89       	ldd	r23, Y+22	; 0x16
    4a6e:	8f 89       	ldd	r24, Y+23	; 0x17
    4a70:	98 8d       	ldd	r25, Y+24	; 0x18
    4a72:	20 e0       	ldi	r18, 0x00	; 0
    4a74:	30 e0       	ldi	r19, 0x00	; 0
    4a76:	40 e8       	ldi	r20, 0x80	; 128
    4a78:	5f e3       	ldi	r21, 0x3F	; 63
    4a7a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4a7e:	88 23       	and	r24, r24
    4a80:	2c f4       	brge	.+10     	; 0x4a8c <HAL_LCD_u8GoTo+0x312>
		__ticks = 1;
    4a82:	81 e0       	ldi	r24, 0x01	; 1
    4a84:	90 e0       	ldi	r25, 0x00	; 0
    4a86:	9c 8b       	std	Y+20, r25	; 0x14
    4a88:	8b 8b       	std	Y+19, r24	; 0x13
    4a8a:	3f c0       	rjmp	.+126    	; 0x4b0a <HAL_LCD_u8GoTo+0x390>
	else if (__tmp > 65535)
    4a8c:	6d 89       	ldd	r22, Y+21	; 0x15
    4a8e:	7e 89       	ldd	r23, Y+22	; 0x16
    4a90:	8f 89       	ldd	r24, Y+23	; 0x17
    4a92:	98 8d       	ldd	r25, Y+24	; 0x18
    4a94:	20 e0       	ldi	r18, 0x00	; 0
    4a96:	3f ef       	ldi	r19, 0xFF	; 255
    4a98:	4f e7       	ldi	r20, 0x7F	; 127
    4a9a:	57 e4       	ldi	r21, 0x47	; 71
    4a9c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4aa0:	18 16       	cp	r1, r24
    4aa2:	4c f5       	brge	.+82     	; 0x4af6 <HAL_LCD_u8GoTo+0x37c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4aa4:	69 8d       	ldd	r22, Y+25	; 0x19
    4aa6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4aa8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4aaa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4aac:	20 e0       	ldi	r18, 0x00	; 0
    4aae:	30 e0       	ldi	r19, 0x00	; 0
    4ab0:	40 e2       	ldi	r20, 0x20	; 32
    4ab2:	51 e4       	ldi	r21, 0x41	; 65
    4ab4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4ab8:	dc 01       	movw	r26, r24
    4aba:	cb 01       	movw	r24, r22
    4abc:	bc 01       	movw	r22, r24
    4abe:	cd 01       	movw	r24, r26
    4ac0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ac4:	dc 01       	movw	r26, r24
    4ac6:	cb 01       	movw	r24, r22
    4ac8:	9c 8b       	std	Y+20, r25	; 0x14
    4aca:	8b 8b       	std	Y+19, r24	; 0x13
    4acc:	0f c0       	rjmp	.+30     	; 0x4aec <HAL_LCD_u8GoTo+0x372>
    4ace:	80 e9       	ldi	r24, 0x90	; 144
    4ad0:	91 e0       	ldi	r25, 0x01	; 1
    4ad2:	9a 8b       	std	Y+18, r25	; 0x12
    4ad4:	89 8b       	std	Y+17, r24	; 0x11
    4ad6:	89 89       	ldd	r24, Y+17	; 0x11
    4ad8:	9a 89       	ldd	r25, Y+18	; 0x12
    4ada:	01 97       	sbiw	r24, 0x01	; 1
    4adc:	f1 f7       	brne	.-4      	; 0x4ada <HAL_LCD_u8GoTo+0x360>
    4ade:	9a 8b       	std	Y+18, r25	; 0x12
    4ae0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4ae2:	8b 89       	ldd	r24, Y+19	; 0x13
    4ae4:	9c 89       	ldd	r25, Y+20	; 0x14
    4ae6:	01 97       	sbiw	r24, 0x01	; 1
    4ae8:	9c 8b       	std	Y+20, r25	; 0x14
    4aea:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4aec:	8b 89       	ldd	r24, Y+19	; 0x13
    4aee:	9c 89       	ldd	r25, Y+20	; 0x14
    4af0:	00 97       	sbiw	r24, 0x00	; 0
    4af2:	69 f7       	brne	.-38     	; 0x4ace <HAL_LCD_u8GoTo+0x354>
    4af4:	14 c0       	rjmp	.+40     	; 0x4b1e <HAL_LCD_u8GoTo+0x3a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4af6:	6d 89       	ldd	r22, Y+21	; 0x15
    4af8:	7e 89       	ldd	r23, Y+22	; 0x16
    4afa:	8f 89       	ldd	r24, Y+23	; 0x17
    4afc:	98 8d       	ldd	r25, Y+24	; 0x18
    4afe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b02:	dc 01       	movw	r26, r24
    4b04:	cb 01       	movw	r24, r22
    4b06:	9c 8b       	std	Y+20, r25	; 0x14
    4b08:	8b 8b       	std	Y+19, r24	; 0x13
    4b0a:	8b 89       	ldd	r24, Y+19	; 0x13
    4b0c:	9c 89       	ldd	r25, Y+20	; 0x14
    4b0e:	98 8b       	std	Y+16, r25	; 0x10
    4b10:	8f 87       	std	Y+15, r24	; 0x0f
    4b12:	8f 85       	ldd	r24, Y+15	; 0x0f
    4b14:	98 89       	ldd	r25, Y+16	; 0x10
    4b16:	01 97       	sbiw	r24, 0x01	; 1
    4b18:	f1 f7       	brne	.-4      	; 0x4b16 <HAL_LCD_u8GoTo+0x39c>
    4b1a:	98 8b       	std	Y+16, r25	; 0x10
    4b1c:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(2);
		HAL_LCD_u8SendCommands(beginning_1stLine);
    4b1e:	80 e8       	ldi	r24, 0x80	; 128
    4b20:	0e 94 28 21 	call	0x4250	; 0x4250 <HAL_LCD_u8SendCommands>
    4b24:	7c c0       	rjmp	.+248    	; 0x4c1e <HAL_LCD_u8GoTo+0x4a4>
	} else if (Loc_u8TypeOfShift == Second_Line) {
    4b26:	fe 01       	movw	r30, r28
    4b28:	ef 5b       	subi	r30, 0xBF	; 191
    4b2a:	ff 4f       	sbci	r31, 0xFF	; 255
    4b2c:	80 81       	ld	r24, Z
    4b2e:	83 30       	cpi	r24, 0x03	; 3
    4b30:	09 f0       	breq	.+2      	; 0x4b34 <HAL_LCD_u8GoTo+0x3ba>
    4b32:	75 c0       	rjmp	.+234    	; 0x4c1e <HAL_LCD_u8GoTo+0x4a4>
    4b34:	80 e0       	ldi	r24, 0x00	; 0
    4b36:	90 e0       	ldi	r25, 0x00	; 0
    4b38:	a0 e0       	ldi	r26, 0x00	; 0
    4b3a:	b0 e4       	ldi	r27, 0x40	; 64
    4b3c:	8b 87       	std	Y+11, r24	; 0x0b
    4b3e:	9c 87       	std	Y+12, r25	; 0x0c
    4b40:	ad 87       	std	Y+13, r26	; 0x0d
    4b42:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4b44:	6b 85       	ldd	r22, Y+11	; 0x0b
    4b46:	7c 85       	ldd	r23, Y+12	; 0x0c
    4b48:	8d 85       	ldd	r24, Y+13	; 0x0d
    4b4a:	9e 85       	ldd	r25, Y+14	; 0x0e
    4b4c:	20 e0       	ldi	r18, 0x00	; 0
    4b4e:	30 e0       	ldi	r19, 0x00	; 0
    4b50:	4a e7       	ldi	r20, 0x7A	; 122
    4b52:	55 e4       	ldi	r21, 0x45	; 69
    4b54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b58:	dc 01       	movw	r26, r24
    4b5a:	cb 01       	movw	r24, r22
    4b5c:	8f 83       	std	Y+7, r24	; 0x07
    4b5e:	98 87       	std	Y+8, r25	; 0x08
    4b60:	a9 87       	std	Y+9, r26	; 0x09
    4b62:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4b64:	6f 81       	ldd	r22, Y+7	; 0x07
    4b66:	78 85       	ldd	r23, Y+8	; 0x08
    4b68:	89 85       	ldd	r24, Y+9	; 0x09
    4b6a:	9a 85       	ldd	r25, Y+10	; 0x0a
    4b6c:	20 e0       	ldi	r18, 0x00	; 0
    4b6e:	30 e0       	ldi	r19, 0x00	; 0
    4b70:	40 e8       	ldi	r20, 0x80	; 128
    4b72:	5f e3       	ldi	r21, 0x3F	; 63
    4b74:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4b78:	88 23       	and	r24, r24
    4b7a:	2c f4       	brge	.+10     	; 0x4b86 <HAL_LCD_u8GoTo+0x40c>
		__ticks = 1;
    4b7c:	81 e0       	ldi	r24, 0x01	; 1
    4b7e:	90 e0       	ldi	r25, 0x00	; 0
    4b80:	9e 83       	std	Y+6, r25	; 0x06
    4b82:	8d 83       	std	Y+5, r24	; 0x05
    4b84:	3f c0       	rjmp	.+126    	; 0x4c04 <HAL_LCD_u8GoTo+0x48a>
	else if (__tmp > 65535)
    4b86:	6f 81       	ldd	r22, Y+7	; 0x07
    4b88:	78 85       	ldd	r23, Y+8	; 0x08
    4b8a:	89 85       	ldd	r24, Y+9	; 0x09
    4b8c:	9a 85       	ldd	r25, Y+10	; 0x0a
    4b8e:	20 e0       	ldi	r18, 0x00	; 0
    4b90:	3f ef       	ldi	r19, 0xFF	; 255
    4b92:	4f e7       	ldi	r20, 0x7F	; 127
    4b94:	57 e4       	ldi	r21, 0x47	; 71
    4b96:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4b9a:	18 16       	cp	r1, r24
    4b9c:	4c f5       	brge	.+82     	; 0x4bf0 <HAL_LCD_u8GoTo+0x476>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4b9e:	6b 85       	ldd	r22, Y+11	; 0x0b
    4ba0:	7c 85       	ldd	r23, Y+12	; 0x0c
    4ba2:	8d 85       	ldd	r24, Y+13	; 0x0d
    4ba4:	9e 85       	ldd	r25, Y+14	; 0x0e
    4ba6:	20 e0       	ldi	r18, 0x00	; 0
    4ba8:	30 e0       	ldi	r19, 0x00	; 0
    4baa:	40 e2       	ldi	r20, 0x20	; 32
    4bac:	51 e4       	ldi	r21, 0x41	; 65
    4bae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4bb2:	dc 01       	movw	r26, r24
    4bb4:	cb 01       	movw	r24, r22
    4bb6:	bc 01       	movw	r22, r24
    4bb8:	cd 01       	movw	r24, r26
    4bba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4bbe:	dc 01       	movw	r26, r24
    4bc0:	cb 01       	movw	r24, r22
    4bc2:	9e 83       	std	Y+6, r25	; 0x06
    4bc4:	8d 83       	std	Y+5, r24	; 0x05
    4bc6:	0f c0       	rjmp	.+30     	; 0x4be6 <HAL_LCD_u8GoTo+0x46c>
    4bc8:	80 e9       	ldi	r24, 0x90	; 144
    4bca:	91 e0       	ldi	r25, 0x01	; 1
    4bcc:	9c 83       	std	Y+4, r25	; 0x04
    4bce:	8b 83       	std	Y+3, r24	; 0x03
    4bd0:	8b 81       	ldd	r24, Y+3	; 0x03
    4bd2:	9c 81       	ldd	r25, Y+4	; 0x04
    4bd4:	01 97       	sbiw	r24, 0x01	; 1
    4bd6:	f1 f7       	brne	.-4      	; 0x4bd4 <HAL_LCD_u8GoTo+0x45a>
    4bd8:	9c 83       	std	Y+4, r25	; 0x04
    4bda:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4bdc:	8d 81       	ldd	r24, Y+5	; 0x05
    4bde:	9e 81       	ldd	r25, Y+6	; 0x06
    4be0:	01 97       	sbiw	r24, 0x01	; 1
    4be2:	9e 83       	std	Y+6, r25	; 0x06
    4be4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4be6:	8d 81       	ldd	r24, Y+5	; 0x05
    4be8:	9e 81       	ldd	r25, Y+6	; 0x06
    4bea:	00 97       	sbiw	r24, 0x00	; 0
    4bec:	69 f7       	brne	.-38     	; 0x4bc8 <HAL_LCD_u8GoTo+0x44e>
    4bee:	14 c0       	rjmp	.+40     	; 0x4c18 <HAL_LCD_u8GoTo+0x49e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4bf0:	6f 81       	ldd	r22, Y+7	; 0x07
    4bf2:	78 85       	ldd	r23, Y+8	; 0x08
    4bf4:	89 85       	ldd	r24, Y+9	; 0x09
    4bf6:	9a 85       	ldd	r25, Y+10	; 0x0a
    4bf8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4bfc:	dc 01       	movw	r26, r24
    4bfe:	cb 01       	movw	r24, r22
    4c00:	9e 83       	std	Y+6, r25	; 0x06
    4c02:	8d 83       	std	Y+5, r24	; 0x05
    4c04:	8d 81       	ldd	r24, Y+5	; 0x05
    4c06:	9e 81       	ldd	r25, Y+6	; 0x06
    4c08:	9a 83       	std	Y+2, r25	; 0x02
    4c0a:	89 83       	std	Y+1, r24	; 0x01
    4c0c:	89 81       	ldd	r24, Y+1	; 0x01
    4c0e:	9a 81       	ldd	r25, Y+2	; 0x02
    4c10:	01 97       	sbiw	r24, 0x01	; 1
    4c12:	f1 f7       	brne	.-4      	; 0x4c10 <HAL_LCD_u8GoTo+0x496>
    4c14:	9a 83       	std	Y+2, r25	; 0x02
    4c16:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2);
		HAL_LCD_u8SendCommands(beginning_2stLine);
    4c18:	80 ec       	ldi	r24, 0xC0	; 192
    4c1a:	0e 94 28 21 	call	0x4250	; 0x4250 <HAL_LCD_u8SendCommands>
	}
}
    4c1e:	ce 5b       	subi	r28, 0xBE	; 190
    4c20:	df 4f       	sbci	r29, 0xFF	; 255
    4c22:	0f b6       	in	r0, 0x3f	; 63
    4c24:	f8 94       	cli
    4c26:	de bf       	out	0x3e, r29	; 62
    4c28:	0f be       	out	0x3f, r0	; 63
    4c2a:	cd bf       	out	0x3d, r28	; 61
    4c2c:	cf 91       	pop	r28
    4c2e:	df 91       	pop	r29
    4c30:	08 95       	ret

00004c32 <HAL_LCD_u8Clear>:

void HAL_LCD_u8Clear() {
    4c32:	df 93       	push	r29
    4c34:	cf 93       	push	r28
    4c36:	cd b7       	in	r28, 0x3d	; 61
    4c38:	de b7       	in	r29, 0x3e	; 62
    4c3a:	2e 97       	sbiw	r28, 0x0e	; 14
    4c3c:	0f b6       	in	r0, 0x3f	; 63
    4c3e:	f8 94       	cli
    4c40:	de bf       	out	0x3e, r29	; 62
    4c42:	0f be       	out	0x3f, r0	; 63
    4c44:	cd bf       	out	0x3d, r28	; 61
    4c46:	80 e0       	ldi	r24, 0x00	; 0
    4c48:	90 e0       	ldi	r25, 0x00	; 0
    4c4a:	a0 e0       	ldi	r26, 0x00	; 0
    4c4c:	b0 e4       	ldi	r27, 0x40	; 64
    4c4e:	8b 87       	std	Y+11, r24	; 0x0b
    4c50:	9c 87       	std	Y+12, r25	; 0x0c
    4c52:	ad 87       	std	Y+13, r26	; 0x0d
    4c54:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4c56:	6b 85       	ldd	r22, Y+11	; 0x0b
    4c58:	7c 85       	ldd	r23, Y+12	; 0x0c
    4c5a:	8d 85       	ldd	r24, Y+13	; 0x0d
    4c5c:	9e 85       	ldd	r25, Y+14	; 0x0e
    4c5e:	20 e0       	ldi	r18, 0x00	; 0
    4c60:	30 e0       	ldi	r19, 0x00	; 0
    4c62:	4a e7       	ldi	r20, 0x7A	; 122
    4c64:	55 e4       	ldi	r21, 0x45	; 69
    4c66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4c6a:	dc 01       	movw	r26, r24
    4c6c:	cb 01       	movw	r24, r22
    4c6e:	8f 83       	std	Y+7, r24	; 0x07
    4c70:	98 87       	std	Y+8, r25	; 0x08
    4c72:	a9 87       	std	Y+9, r26	; 0x09
    4c74:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4c76:	6f 81       	ldd	r22, Y+7	; 0x07
    4c78:	78 85       	ldd	r23, Y+8	; 0x08
    4c7a:	89 85       	ldd	r24, Y+9	; 0x09
    4c7c:	9a 85       	ldd	r25, Y+10	; 0x0a
    4c7e:	20 e0       	ldi	r18, 0x00	; 0
    4c80:	30 e0       	ldi	r19, 0x00	; 0
    4c82:	40 e8       	ldi	r20, 0x80	; 128
    4c84:	5f e3       	ldi	r21, 0x3F	; 63
    4c86:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4c8a:	88 23       	and	r24, r24
    4c8c:	2c f4       	brge	.+10     	; 0x4c98 <HAL_LCD_u8Clear+0x66>
		__ticks = 1;
    4c8e:	81 e0       	ldi	r24, 0x01	; 1
    4c90:	90 e0       	ldi	r25, 0x00	; 0
    4c92:	9e 83       	std	Y+6, r25	; 0x06
    4c94:	8d 83       	std	Y+5, r24	; 0x05
    4c96:	3f c0       	rjmp	.+126    	; 0x4d16 <HAL_LCD_u8Clear+0xe4>
	else if (__tmp > 65535)
    4c98:	6f 81       	ldd	r22, Y+7	; 0x07
    4c9a:	78 85       	ldd	r23, Y+8	; 0x08
    4c9c:	89 85       	ldd	r24, Y+9	; 0x09
    4c9e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4ca0:	20 e0       	ldi	r18, 0x00	; 0
    4ca2:	3f ef       	ldi	r19, 0xFF	; 255
    4ca4:	4f e7       	ldi	r20, 0x7F	; 127
    4ca6:	57 e4       	ldi	r21, 0x47	; 71
    4ca8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4cac:	18 16       	cp	r1, r24
    4cae:	4c f5       	brge	.+82     	; 0x4d02 <HAL_LCD_u8Clear+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4cb0:	6b 85       	ldd	r22, Y+11	; 0x0b
    4cb2:	7c 85       	ldd	r23, Y+12	; 0x0c
    4cb4:	8d 85       	ldd	r24, Y+13	; 0x0d
    4cb6:	9e 85       	ldd	r25, Y+14	; 0x0e
    4cb8:	20 e0       	ldi	r18, 0x00	; 0
    4cba:	30 e0       	ldi	r19, 0x00	; 0
    4cbc:	40 e2       	ldi	r20, 0x20	; 32
    4cbe:	51 e4       	ldi	r21, 0x41	; 65
    4cc0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4cc4:	dc 01       	movw	r26, r24
    4cc6:	cb 01       	movw	r24, r22
    4cc8:	bc 01       	movw	r22, r24
    4cca:	cd 01       	movw	r24, r26
    4ccc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4cd0:	dc 01       	movw	r26, r24
    4cd2:	cb 01       	movw	r24, r22
    4cd4:	9e 83       	std	Y+6, r25	; 0x06
    4cd6:	8d 83       	std	Y+5, r24	; 0x05
    4cd8:	0f c0       	rjmp	.+30     	; 0x4cf8 <HAL_LCD_u8Clear+0xc6>
    4cda:	80 e9       	ldi	r24, 0x90	; 144
    4cdc:	91 e0       	ldi	r25, 0x01	; 1
    4cde:	9c 83       	std	Y+4, r25	; 0x04
    4ce0:	8b 83       	std	Y+3, r24	; 0x03
    4ce2:	8b 81       	ldd	r24, Y+3	; 0x03
    4ce4:	9c 81       	ldd	r25, Y+4	; 0x04
    4ce6:	01 97       	sbiw	r24, 0x01	; 1
    4ce8:	f1 f7       	brne	.-4      	; 0x4ce6 <HAL_LCD_u8Clear+0xb4>
    4cea:	9c 83       	std	Y+4, r25	; 0x04
    4cec:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4cee:	8d 81       	ldd	r24, Y+5	; 0x05
    4cf0:	9e 81       	ldd	r25, Y+6	; 0x06
    4cf2:	01 97       	sbiw	r24, 0x01	; 1
    4cf4:	9e 83       	std	Y+6, r25	; 0x06
    4cf6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4cf8:	8d 81       	ldd	r24, Y+5	; 0x05
    4cfa:	9e 81       	ldd	r25, Y+6	; 0x06
    4cfc:	00 97       	sbiw	r24, 0x00	; 0
    4cfe:	69 f7       	brne	.-38     	; 0x4cda <HAL_LCD_u8Clear+0xa8>
    4d00:	14 c0       	rjmp	.+40     	; 0x4d2a <HAL_LCD_u8Clear+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4d02:	6f 81       	ldd	r22, Y+7	; 0x07
    4d04:	78 85       	ldd	r23, Y+8	; 0x08
    4d06:	89 85       	ldd	r24, Y+9	; 0x09
    4d08:	9a 85       	ldd	r25, Y+10	; 0x0a
    4d0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4d0e:	dc 01       	movw	r26, r24
    4d10:	cb 01       	movw	r24, r22
    4d12:	9e 83       	std	Y+6, r25	; 0x06
    4d14:	8d 83       	std	Y+5, r24	; 0x05
    4d16:	8d 81       	ldd	r24, Y+5	; 0x05
    4d18:	9e 81       	ldd	r25, Y+6	; 0x06
    4d1a:	9a 83       	std	Y+2, r25	; 0x02
    4d1c:	89 83       	std	Y+1, r24	; 0x01
    4d1e:	89 81       	ldd	r24, Y+1	; 0x01
    4d20:	9a 81       	ldd	r25, Y+2	; 0x02
    4d22:	01 97       	sbiw	r24, 0x01	; 1
    4d24:	f1 f7       	brne	.-4      	; 0x4d22 <HAL_LCD_u8Clear+0xf0>
    4d26:	9a 83       	std	Y+2, r25	; 0x02
    4d28:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	HAL_LCD_u8SendCommands(Display_Clear);
    4d2a:	81 e0       	ldi	r24, 0x01	; 1
    4d2c:	0e 94 28 21 	call	0x4250	; 0x4250 <HAL_LCD_u8SendCommands>
}
    4d30:	2e 96       	adiw	r28, 0x0e	; 14
    4d32:	0f b6       	in	r0, 0x3f	; 63
    4d34:	f8 94       	cli
    4d36:	de bf       	out	0x3e, r29	; 62
    4d38:	0f be       	out	0x3f, r0	; 63
    4d3a:	cd bf       	out	0x3d, r28	; 61
    4d3c:	cf 91       	pop	r28
    4d3e:	df 91       	pop	r29
    4d40:	08 95       	ret

00004d42 <HAL_LCD_u8CustomChar>:

void HAL_LCD_u8CustomChar(u8 Loc_u8Location, u8* Loc_u8msg) {
    4d42:	df 93       	push	r29
    4d44:	cf 93       	push	r28
    4d46:	00 d0       	rcall	.+0      	; 0x4d48 <HAL_LCD_u8CustomChar+0x6>
    4d48:	00 d0       	rcall	.+0      	; 0x4d4a <HAL_LCD_u8CustomChar+0x8>
    4d4a:	cd b7       	in	r28, 0x3d	; 61
    4d4c:	de b7       	in	r29, 0x3e	; 62
    4d4e:	8a 83       	std	Y+2, r24	; 0x02
    4d50:	7c 83       	std	Y+4, r23	; 0x04
    4d52:	6b 83       	std	Y+3, r22	; 0x03
	if (Loc_u8Location < 8) {
    4d54:	8a 81       	ldd	r24, Y+2	; 0x02
    4d56:	88 30       	cpi	r24, 0x08	; 8
    4d58:	f8 f4       	brcc	.+62     	; 0x4d98 <HAL_LCD_u8CustomChar+0x56>
		HAL_LCD_u8SendCommands(0x40 + (Loc_u8Location*8));
    4d5a:	8a 81       	ldd	r24, Y+2	; 0x02
    4d5c:	88 2f       	mov	r24, r24
    4d5e:	90 e0       	ldi	r25, 0x00	; 0
    4d60:	08 96       	adiw	r24, 0x08	; 8
    4d62:	88 0f       	add	r24, r24
    4d64:	99 1f       	adc	r25, r25
    4d66:	88 0f       	add	r24, r24
    4d68:	99 1f       	adc	r25, r25
    4d6a:	88 0f       	add	r24, r24
    4d6c:	99 1f       	adc	r25, r25
    4d6e:	0e 94 28 21 	call	0x4250	; 0x4250 <HAL_LCD_u8SendCommands>
		for( u8 count = 0; count < 8; count++)
    4d72:	19 82       	std	Y+1, r1	; 0x01
    4d74:	0e c0       	rjmp	.+28     	; 0x4d92 <HAL_LCD_u8CustomChar+0x50>
			HAL_LCD_u8SendChar(Loc_u8msg[count]);
    4d76:	89 81       	ldd	r24, Y+1	; 0x01
    4d78:	28 2f       	mov	r18, r24
    4d7a:	30 e0       	ldi	r19, 0x00	; 0
    4d7c:	8b 81       	ldd	r24, Y+3	; 0x03
    4d7e:	9c 81       	ldd	r25, Y+4	; 0x04
    4d80:	fc 01       	movw	r30, r24
    4d82:	e2 0f       	add	r30, r18
    4d84:	f3 1f       	adc	r31, r19
    4d86:	80 81       	ld	r24, Z
    4d88:	0e 94 46 22 	call	0x448c	; 0x448c <HAL_LCD_u8SendChar>
}

void HAL_LCD_u8CustomChar(u8 Loc_u8Location, u8* Loc_u8msg) {
	if (Loc_u8Location < 8) {
		HAL_LCD_u8SendCommands(0x40 + (Loc_u8Location*8));
		for( u8 count = 0; count < 8; count++)
    4d8c:	89 81       	ldd	r24, Y+1	; 0x01
    4d8e:	8f 5f       	subi	r24, 0xFF	; 255
    4d90:	89 83       	std	Y+1, r24	; 0x01
    4d92:	89 81       	ldd	r24, Y+1	; 0x01
    4d94:	88 30       	cpi	r24, 0x08	; 8
    4d96:	78 f3       	brcs	.-34     	; 0x4d76 <HAL_LCD_u8CustomChar+0x34>
			HAL_LCD_u8SendChar(Loc_u8msg[count]);
	}
	HAL_LCD_u8SendCommands(0x02);
    4d98:	82 e0       	ldi	r24, 0x02	; 2
    4d9a:	0e 94 28 21 	call	0x4250	; 0x4250 <HAL_LCD_u8SendCommands>
}
    4d9e:	0f 90       	pop	r0
    4da0:	0f 90       	pop	r0
    4da2:	0f 90       	pop	r0
    4da4:	0f 90       	pop	r0
    4da6:	cf 91       	pop	r28
    4da8:	df 91       	pop	r29
    4daa:	08 95       	ret

00004dac <HAL_LCD_voidData>:

 void  HAL_LCD_voidData(u8 Data)
{
    4dac:	df 93       	push	r29
    4dae:	cf 93       	push	r28
    4db0:	0f 92       	push	r0
    4db2:	cd b7       	in	r28, 0x3d	; 61
    4db4:	de b7       	in	r29, 0x3e	; 62
    4db6:	89 83       	std	Y+1, r24	; 0x01

  if (GET_BIT(Data,0)==1)
    4db8:	89 81       	ldd	r24, Y+1	; 0x01
    4dba:	88 2f       	mov	r24, r24
    4dbc:	90 e0       	ldi	r25, 0x00	; 0
    4dbe:	81 70       	andi	r24, 0x01	; 1
    4dc0:	90 70       	andi	r25, 0x00	; 0
    4dc2:	88 23       	and	r24, r24
    4dc4:	31 f0       	breq	.+12     	; 0x4dd2 <HAL_LCD_voidData+0x26>
  {
    MCAL_DIO_u8SetPinValue(LCD_D_PORT,LCD_D4_PIN,Pin_High);
    4dc6:	80 e0       	ldi	r24, 0x00	; 0
    4dc8:	64 e0       	ldi	r22, 0x04	; 4
    4dca:	41 e0       	ldi	r20, 0x01	; 1
    4dcc:	0e 94 04 17 	call	0x2e08	; 0x2e08 <MCAL_DIO_u8SetPinValue>
    4dd0:	05 c0       	rjmp	.+10     	; 0x4ddc <HAL_LCD_voidData+0x30>
  }
  else
  {
	  MCAL_DIO_u8SetPinValue(LCD_D_PORT,LCD_D4_PIN,Pin_Low);
    4dd2:	80 e0       	ldi	r24, 0x00	; 0
    4dd4:	64 e0       	ldi	r22, 0x04	; 4
    4dd6:	40 e0       	ldi	r20, 0x00	; 0
    4dd8:	0e 94 04 17 	call	0x2e08	; 0x2e08 <MCAL_DIO_u8SetPinValue>
  }
  if (GET_BIT(Data,1)==1)
    4ddc:	89 81       	ldd	r24, Y+1	; 0x01
    4dde:	86 95       	lsr	r24
    4de0:	88 2f       	mov	r24, r24
    4de2:	90 e0       	ldi	r25, 0x00	; 0
    4de4:	81 70       	andi	r24, 0x01	; 1
    4de6:	90 70       	andi	r25, 0x00	; 0
    4de8:	88 23       	and	r24, r24
    4dea:	31 f0       	breq	.+12     	; 0x4df8 <HAL_LCD_voidData+0x4c>
  {
	  MCAL_DIO_u8SetPinValue(LCD_D_PORT,LCD_D5_PIN,Pin_High);
    4dec:	80 e0       	ldi	r24, 0x00	; 0
    4dee:	65 e0       	ldi	r22, 0x05	; 5
    4df0:	41 e0       	ldi	r20, 0x01	; 1
    4df2:	0e 94 04 17 	call	0x2e08	; 0x2e08 <MCAL_DIO_u8SetPinValue>
    4df6:	05 c0       	rjmp	.+10     	; 0x4e02 <HAL_LCD_voidData+0x56>
  }
  else
  {
	  MCAL_DIO_u8SetPinValue(LCD_D_PORT,LCD_D5_PIN,Pin_Low);
    4df8:	80 e0       	ldi	r24, 0x00	; 0
    4dfa:	65 e0       	ldi	r22, 0x05	; 5
    4dfc:	40 e0       	ldi	r20, 0x00	; 0
    4dfe:	0e 94 04 17 	call	0x2e08	; 0x2e08 <MCAL_DIO_u8SetPinValue>
  }

  if (GET_BIT(Data,2)==1)
    4e02:	89 81       	ldd	r24, Y+1	; 0x01
    4e04:	86 95       	lsr	r24
    4e06:	86 95       	lsr	r24
    4e08:	88 2f       	mov	r24, r24
    4e0a:	90 e0       	ldi	r25, 0x00	; 0
    4e0c:	81 70       	andi	r24, 0x01	; 1
    4e0e:	90 70       	andi	r25, 0x00	; 0
    4e10:	88 23       	and	r24, r24
    4e12:	31 f0       	breq	.+12     	; 0x4e20 <HAL_LCD_voidData+0x74>
  {
	  MCAL_DIO_u8SetPinValue(LCD_D_PORT,LCD_D6_PIN,Pin_High);
    4e14:	80 e0       	ldi	r24, 0x00	; 0
    4e16:	66 e0       	ldi	r22, 0x06	; 6
    4e18:	41 e0       	ldi	r20, 0x01	; 1
    4e1a:	0e 94 04 17 	call	0x2e08	; 0x2e08 <MCAL_DIO_u8SetPinValue>
    4e1e:	05 c0       	rjmp	.+10     	; 0x4e2a <HAL_LCD_voidData+0x7e>
  }
  else
  {
	  MCAL_DIO_u8SetPinValue(LCD_D_PORT,LCD_D6_PIN,Pin_Low);
    4e20:	80 e0       	ldi	r24, 0x00	; 0
    4e22:	66 e0       	ldi	r22, 0x06	; 6
    4e24:	40 e0       	ldi	r20, 0x00	; 0
    4e26:	0e 94 04 17 	call	0x2e08	; 0x2e08 <MCAL_DIO_u8SetPinValue>
  }

  if (GET_BIT(Data,3)==1)
    4e2a:	89 81       	ldd	r24, Y+1	; 0x01
    4e2c:	86 95       	lsr	r24
    4e2e:	86 95       	lsr	r24
    4e30:	86 95       	lsr	r24
    4e32:	88 2f       	mov	r24, r24
    4e34:	90 e0       	ldi	r25, 0x00	; 0
    4e36:	81 70       	andi	r24, 0x01	; 1
    4e38:	90 70       	andi	r25, 0x00	; 0
    4e3a:	88 23       	and	r24, r24
    4e3c:	31 f0       	breq	.+12     	; 0x4e4a <HAL_LCD_voidData+0x9e>
  {
	  MCAL_DIO_u8SetPinValue(LCD_D_PORT,LCD_D7_PIN,Pin_High);
    4e3e:	80 e0       	ldi	r24, 0x00	; 0
    4e40:	67 e0       	ldi	r22, 0x07	; 7
    4e42:	41 e0       	ldi	r20, 0x01	; 1
    4e44:	0e 94 04 17 	call	0x2e08	; 0x2e08 <MCAL_DIO_u8SetPinValue>
    4e48:	05 c0       	rjmp	.+10     	; 0x4e54 <HAL_LCD_voidData+0xa8>
  }
  else
  {
	  MCAL_DIO_u8SetPinValue(LCD_D_PORT,LCD_D7_PIN,Pin_Low);
    4e4a:	80 e0       	ldi	r24, 0x00	; 0
    4e4c:	67 e0       	ldi	r22, 0x07	; 7
    4e4e:	40 e0       	ldi	r20, 0x00	; 0
    4e50:	0e 94 04 17 	call	0x2e08	; 0x2e08 <MCAL_DIO_u8SetPinValue>
  }


}
    4e54:	0f 90       	pop	r0
    4e56:	cf 91       	pop	r28
    4e58:	df 91       	pop	r29
    4e5a:	08 95       	ret

00004e5c <HAL_void_H_BridgeInit>:
 *      Author: Mohamed
 */

#include "H_Bridge.h"

void HAL_void_H_BridgeInit() {
    4e5c:	df 93       	push	r29
    4e5e:	cf 93       	push	r28
    4e60:	cd b7       	in	r28, 0x3d	; 61
    4e62:	de b7       	in	r29, 0x3e	; 62
//	MCAL_DIO_u8SetPinDirection(PortD, Pin4, Pin_High);
//	MCAL_DIO_u8SetPinDirection(PortD, Pin5, Pin_High);
	MCAL_DIO_u8SetPinDirection(PortC, 3, Pin_High);
    4e64:	82 e0       	ldi	r24, 0x02	; 2
    4e66:	63 e0       	ldi	r22, 0x03	; 3
    4e68:	41 e0       	ldi	r20, 0x01	; 1
    4e6a:	0e 94 96 15 	call	0x2b2c	; 0x2b2c <MCAL_DIO_u8SetPinDirection>
	MCAL_DIO_u8SetPinDirection(PortC, 4, Pin_High);
    4e6e:	82 e0       	ldi	r24, 0x02	; 2
    4e70:	64 e0       	ldi	r22, 0x04	; 4
    4e72:	41 e0       	ldi	r20, 0x01	; 1
    4e74:	0e 94 96 15 	call	0x2b2c	; 0x2b2c <MCAL_DIO_u8SetPinDirection>
	MCAL_DIO_u8SetPinDirection(PortC, 5, Pin_High);
    4e78:	82 e0       	ldi	r24, 0x02	; 2
    4e7a:	65 e0       	ldi	r22, 0x05	; 5
    4e7c:	41 e0       	ldi	r20, 0x01	; 1
    4e7e:	0e 94 96 15 	call	0x2b2c	; 0x2b2c <MCAL_DIO_u8SetPinDirection>
	MCAL_DIO_u8SetPinDirection(PortC, 6, Pin_High);
    4e82:	82 e0       	ldi	r24, 0x02	; 2
    4e84:	66 e0       	ldi	r22, 0x06	; 6
    4e86:	41 e0       	ldi	r20, 0x01	; 1
    4e88:	0e 94 96 15 	call	0x2b2c	; 0x2b2c <MCAL_DIO_u8SetPinDirection>
}
    4e8c:	cf 91       	pop	r28
    4e8e:	df 91       	pop	r29
    4e90:	08 95       	ret

00004e92 <HAL_void_H_BridgeCW>:

void HAL_void_H_BridgeCW(u8 copy_u8_speed) {
    4e92:	df 93       	push	r29
    4e94:	cf 93       	push	r28
    4e96:	0f 92       	push	r0
    4e98:	cd b7       	in	r28, 0x3d	; 61
    4e9a:	de b7       	in	r29, 0x3e	; 62
    4e9c:	89 83       	std	Y+1, r24	; 0x01
	MCAL_T1_FPWM_10bitRES(CHENNEL_B, copy_u8_speed);
    4e9e:	81 e0       	ldi	r24, 0x01	; 1
    4ea0:	69 81       	ldd	r22, Y+1	; 0x01
    4ea2:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <MCAL_T1_FPWM_10bitRES>
	MCAL_T1_FPWM_10bitRES(CHENNEL_A, copy_u8_speed);
    4ea6:	80 e0       	ldi	r24, 0x00	; 0
    4ea8:	69 81       	ldd	r22, Y+1	; 0x01
    4eaa:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <MCAL_T1_FPWM_10bitRES>
	MCAL_DIO_u8SetPinValue(PortC, Pin3, Pin_Low);
    4eae:	82 e0       	ldi	r24, 0x02	; 2
    4eb0:	63 e0       	ldi	r22, 0x03	; 3
    4eb2:	40 e0       	ldi	r20, 0x00	; 0
    4eb4:	0e 94 04 17 	call	0x2e08	; 0x2e08 <MCAL_DIO_u8SetPinValue>
	MCAL_DIO_u8SetPinValue(PortC, Pin4, Pin_Low);
    4eb8:	82 e0       	ldi	r24, 0x02	; 2
    4eba:	64 e0       	ldi	r22, 0x04	; 4
    4ebc:	40 e0       	ldi	r20, 0x00	; 0
    4ebe:	0e 94 04 17 	call	0x2e08	; 0x2e08 <MCAL_DIO_u8SetPinValue>
	MCAL_DIO_u8SetPinValue(PortC, Pin5, Pin_High);
    4ec2:	82 e0       	ldi	r24, 0x02	; 2
    4ec4:	65 e0       	ldi	r22, 0x05	; 5
    4ec6:	41 e0       	ldi	r20, 0x01	; 1
    4ec8:	0e 94 04 17 	call	0x2e08	; 0x2e08 <MCAL_DIO_u8SetPinValue>
	MCAL_DIO_u8SetPinValue(PortC, Pin6, Pin_Low);
    4ecc:	82 e0       	ldi	r24, 0x02	; 2
    4ece:	66 e0       	ldi	r22, 0x06	; 6
    4ed0:	40 e0       	ldi	r20, 0x00	; 0
    4ed2:	0e 94 04 17 	call	0x2e08	; 0x2e08 <MCAL_DIO_u8SetPinValue>
}
    4ed6:	0f 90       	pop	r0
    4ed8:	cf 91       	pop	r28
    4eda:	df 91       	pop	r29
    4edc:	08 95       	ret

00004ede <HAL_void_H_BridgeFront>:
void HAL_void_H_BridgeFront(u8 copy_u8_speed) {
    4ede:	df 93       	push	r29
    4ee0:	cf 93       	push	r28
    4ee2:	0f 92       	push	r0
    4ee4:	cd b7       	in	r28, 0x3d	; 61
    4ee6:	de b7       	in	r29, 0x3e	; 62
    4ee8:	89 83       	std	Y+1, r24	; 0x01
	MCAL_T1_FPWM_10bitRES(CHENNEL_A, copy_u8_speed);
    4eea:	80 e0       	ldi	r24, 0x00	; 0
    4eec:	69 81       	ldd	r22, Y+1	; 0x01
    4eee:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <MCAL_T1_FPWM_10bitRES>
	MCAL_T1_FPWM_10bitRES(CHENNEL_B, copy_u8_speed);
    4ef2:	81 e0       	ldi	r24, 0x01	; 1
    4ef4:	69 81       	ldd	r22, Y+1	; 0x01
    4ef6:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <MCAL_T1_FPWM_10bitRES>
	MCAL_DIO_u8SetPinValue(PortD, Pin4, Pin_High);
    4efa:	83 e0       	ldi	r24, 0x03	; 3
    4efc:	64 e0       	ldi	r22, 0x04	; 4
    4efe:	41 e0       	ldi	r20, 0x01	; 1
    4f00:	0e 94 04 17 	call	0x2e08	; 0x2e08 <MCAL_DIO_u8SetPinValue>
	MCAL_DIO_u8SetPinValue(PortD, Pin5, Pin_High);
    4f04:	83 e0       	ldi	r24, 0x03	; 3
    4f06:	65 e0       	ldi	r22, 0x05	; 5
    4f08:	41 e0       	ldi	r20, 0x01	; 1
    4f0a:	0e 94 04 17 	call	0x2e08	; 0x2e08 <MCAL_DIO_u8SetPinValue>
	MCAL_DIO_u8SetPinValue(PortC, Pin3, Pin_Low);
    4f0e:	82 e0       	ldi	r24, 0x02	; 2
    4f10:	63 e0       	ldi	r22, 0x03	; 3
    4f12:	40 e0       	ldi	r20, 0x00	; 0
    4f14:	0e 94 04 17 	call	0x2e08	; 0x2e08 <MCAL_DIO_u8SetPinValue>
	MCAL_DIO_u8SetPinValue(PortC, Pin4, Pin_High);
    4f18:	82 e0       	ldi	r24, 0x02	; 2
    4f1a:	64 e0       	ldi	r22, 0x04	; 4
    4f1c:	41 e0       	ldi	r20, 0x01	; 1
    4f1e:	0e 94 04 17 	call	0x2e08	; 0x2e08 <MCAL_DIO_u8SetPinValue>
	MCAL_DIO_u8SetPinValue(PortC, Pin5, Pin_High);
    4f22:	82 e0       	ldi	r24, 0x02	; 2
    4f24:	65 e0       	ldi	r22, 0x05	; 5
    4f26:	41 e0       	ldi	r20, 0x01	; 1
    4f28:	0e 94 04 17 	call	0x2e08	; 0x2e08 <MCAL_DIO_u8SetPinValue>
	MCAL_DIO_u8SetPinValue(PortC, Pin6, Pin_Low);
    4f2c:	82 e0       	ldi	r24, 0x02	; 2
    4f2e:	66 e0       	ldi	r22, 0x06	; 6
    4f30:	40 e0       	ldi	r20, 0x00	; 0
    4f32:	0e 94 04 17 	call	0x2e08	; 0x2e08 <MCAL_DIO_u8SetPinValue>
}
    4f36:	0f 90       	pop	r0
    4f38:	cf 91       	pop	r28
    4f3a:	df 91       	pop	r29
    4f3c:	08 95       	ret

00004f3e <HAL_void_H_BridgeBack>:
void HAL_void_H_BridgeBack(u8 copy_u8_speed) {
    4f3e:	df 93       	push	r29
    4f40:	cf 93       	push	r28
    4f42:	0f 92       	push	r0
    4f44:	cd b7       	in	r28, 0x3d	; 61
    4f46:	de b7       	in	r29, 0x3e	; 62
    4f48:	89 83       	std	Y+1, r24	; 0x01
	MCAL_T1_FPWM_10bitRES(CHENNEL_B, copy_u8_speed);
    4f4a:	81 e0       	ldi	r24, 0x01	; 1
    4f4c:	69 81       	ldd	r22, Y+1	; 0x01
    4f4e:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <MCAL_T1_FPWM_10bitRES>
	MCAL_T1_FPWM_10bitRES(CHENNEL_A, copy_u8_speed);
    4f52:	80 e0       	ldi	r24, 0x00	; 0
    4f54:	69 81       	ldd	r22, Y+1	; 0x01
    4f56:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <MCAL_T1_FPWM_10bitRES>
	MCAL_DIO_u8SetPinValue(PortC, Pin3, Pin_High);
    4f5a:	82 e0       	ldi	r24, 0x02	; 2
    4f5c:	63 e0       	ldi	r22, 0x03	; 3
    4f5e:	41 e0       	ldi	r20, 0x01	; 1
    4f60:	0e 94 04 17 	call	0x2e08	; 0x2e08 <MCAL_DIO_u8SetPinValue>
	MCAL_DIO_u8SetPinValue(PortC, Pin4, Pin_Low);
    4f64:	82 e0       	ldi	r24, 0x02	; 2
    4f66:	64 e0       	ldi	r22, 0x04	; 4
    4f68:	40 e0       	ldi	r20, 0x00	; 0
    4f6a:	0e 94 04 17 	call	0x2e08	; 0x2e08 <MCAL_DIO_u8SetPinValue>
	MCAL_DIO_u8SetPinValue(PortC, Pin5, Pin_Low);
    4f6e:	82 e0       	ldi	r24, 0x02	; 2
    4f70:	65 e0       	ldi	r22, 0x05	; 5
    4f72:	40 e0       	ldi	r20, 0x00	; 0
    4f74:	0e 94 04 17 	call	0x2e08	; 0x2e08 <MCAL_DIO_u8SetPinValue>
	MCAL_DIO_u8SetPinValue(PortC, Pin6, Pin_High);
    4f78:	82 e0       	ldi	r24, 0x02	; 2
    4f7a:	66 e0       	ldi	r22, 0x06	; 6
    4f7c:	41 e0       	ldi	r20, 0x01	; 1
    4f7e:	0e 94 04 17 	call	0x2e08	; 0x2e08 <MCAL_DIO_u8SetPinValue>
}
    4f82:	0f 90       	pop	r0
    4f84:	cf 91       	pop	r28
    4f86:	df 91       	pop	r29
    4f88:	08 95       	ret

00004f8a <HAL_void_H_BridgeCCW>:
void HAL_void_H_BridgeCCW(u8 copy_u8_speed) {
    4f8a:	df 93       	push	r29
    4f8c:	cf 93       	push	r28
    4f8e:	0f 92       	push	r0
    4f90:	cd b7       	in	r28, 0x3d	; 61
    4f92:	de b7       	in	r29, 0x3e	; 62
    4f94:	89 83       	std	Y+1, r24	; 0x01
	MCAL_T1_FPWM_10bitRES(CHENNEL_B, copy_u8_speed);
    4f96:	81 e0       	ldi	r24, 0x01	; 1
    4f98:	69 81       	ldd	r22, Y+1	; 0x01
    4f9a:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <MCAL_T1_FPWM_10bitRES>
	MCAL_T1_FPWM_10bitRES(CHENNEL_A, copy_u8_speed);
    4f9e:	80 e0       	ldi	r24, 0x00	; 0
    4fa0:	69 81       	ldd	r22, Y+1	; 0x01
    4fa2:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <MCAL_T1_FPWM_10bitRES>
	MCAL_DIO_u8SetPinValue(PortC, Pin3, Pin_Low);
    4fa6:	82 e0       	ldi	r24, 0x02	; 2
    4fa8:	63 e0       	ldi	r22, 0x03	; 3
    4faa:	40 e0       	ldi	r20, 0x00	; 0
    4fac:	0e 94 04 17 	call	0x2e08	; 0x2e08 <MCAL_DIO_u8SetPinValue>
	MCAL_DIO_u8SetPinValue(PortC, Pin4, Pin_High);
    4fb0:	82 e0       	ldi	r24, 0x02	; 2
    4fb2:	64 e0       	ldi	r22, 0x04	; 4
    4fb4:	41 e0       	ldi	r20, 0x01	; 1
    4fb6:	0e 94 04 17 	call	0x2e08	; 0x2e08 <MCAL_DIO_u8SetPinValue>
	MCAL_DIO_u8SetPinValue(PortC, Pin5, Pin_Low);
    4fba:	82 e0       	ldi	r24, 0x02	; 2
    4fbc:	65 e0       	ldi	r22, 0x05	; 5
    4fbe:	40 e0       	ldi	r20, 0x00	; 0
    4fc0:	0e 94 04 17 	call	0x2e08	; 0x2e08 <MCAL_DIO_u8SetPinValue>
	MCAL_DIO_u8SetPinValue(PortC, Pin6, Pin_Low);
    4fc4:	82 e0       	ldi	r24, 0x02	; 2
    4fc6:	66 e0       	ldi	r22, 0x06	; 6
    4fc8:	40 e0       	ldi	r20, 0x00	; 0
    4fca:	0e 94 04 17 	call	0x2e08	; 0x2e08 <MCAL_DIO_u8SetPinValue>
}
    4fce:	0f 90       	pop	r0
    4fd0:	cf 91       	pop	r28
    4fd2:	df 91       	pop	r29
    4fd4:	08 95       	ret

00004fd6 <HAL_void_H_BridgeStop>:

void HAL_void_H_BridgeStop(u8 copy_u8_speed) {
    4fd6:	df 93       	push	r29
    4fd8:	cf 93       	push	r28
    4fda:	0f 92       	push	r0
    4fdc:	cd b7       	in	r28, 0x3d	; 61
    4fde:	de b7       	in	r29, 0x3e	; 62
    4fe0:	89 83       	std	Y+1, r24	; 0x01
	MCAL_T1_FPWM_10bitRES(CHENNEL_B, copy_u8_speed);
    4fe2:	81 e0       	ldi	r24, 0x01	; 1
    4fe4:	69 81       	ldd	r22, Y+1	; 0x01
    4fe6:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <MCAL_T1_FPWM_10bitRES>
	MCAL_T1_FPWM_10bitRES(CHENNEL_A, copy_u8_speed);
    4fea:	80 e0       	ldi	r24, 0x00	; 0
    4fec:	69 81       	ldd	r22, Y+1	; 0x01
    4fee:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <MCAL_T1_FPWM_10bitRES>
	MCAL_DIO_u8SetPinValue(PortC, Pin3, Pin_Low);
    4ff2:	82 e0       	ldi	r24, 0x02	; 2
    4ff4:	63 e0       	ldi	r22, 0x03	; 3
    4ff6:	40 e0       	ldi	r20, 0x00	; 0
    4ff8:	0e 94 04 17 	call	0x2e08	; 0x2e08 <MCAL_DIO_u8SetPinValue>
	MCAL_DIO_u8SetPinValue(PortC, Pin4, Pin_Low);
    4ffc:	82 e0       	ldi	r24, 0x02	; 2
    4ffe:	64 e0       	ldi	r22, 0x04	; 4
    5000:	40 e0       	ldi	r20, 0x00	; 0
    5002:	0e 94 04 17 	call	0x2e08	; 0x2e08 <MCAL_DIO_u8SetPinValue>
	MCAL_DIO_u8SetPinValue(PortC, Pin5, Pin_Low);
    5006:	82 e0       	ldi	r24, 0x02	; 2
    5008:	65 e0       	ldi	r22, 0x05	; 5
    500a:	40 e0       	ldi	r20, 0x00	; 0
    500c:	0e 94 04 17 	call	0x2e08	; 0x2e08 <MCAL_DIO_u8SetPinValue>
	MCAL_DIO_u8SetPinValue(PortC, Pin6, Pin_Low);
    5010:	82 e0       	ldi	r24, 0x02	; 2
    5012:	66 e0       	ldi	r22, 0x06	; 6
    5014:	40 e0       	ldi	r20, 0x00	; 0
    5016:	0e 94 04 17 	call	0x2e08	; 0x2e08 <MCAL_DIO_u8SetPinValue>
}
    501a:	0f 90       	pop	r0
    501c:	cf 91       	pop	r28
    501e:	df 91       	pop	r29
    5020:	08 95       	ret

00005022 <HAL_Buzzer_u8BuzzerInit>:
 *      Author: Mohamed
 */

#include "Buzzer.h"

STD_Type HAL_Buzzer_u8BuzzerInit(u8 Loc_u8BuzzerPortID, u8 Loc_u8BuzzerPinID) {
    5022:	df 93       	push	r29
    5024:	cf 93       	push	r28
    5026:	00 d0       	rcall	.+0      	; 0x5028 <HAL_Buzzer_u8BuzzerInit+0x6>
    5028:	0f 92       	push	r0
    502a:	cd b7       	in	r28, 0x3d	; 61
    502c:	de b7       	in	r29, 0x3e	; 62
    502e:	8a 83       	std	Y+2, r24	; 0x02
    5030:	6b 83       	std	Y+3, r22	; 0x03
	u8 Loc_u8Return_Value = E_NOT_OK;
    5032:	81 e0       	ldi	r24, 0x01	; 1
    5034:	89 83       	std	Y+1, r24	; 0x01
	if (Loc_u8BuzzerPortID <= PortD && Loc_u8BuzzerPinID <= Num_Of_Pins) {
    5036:	8a 81       	ldd	r24, Y+2	; 0x02
    5038:	84 30       	cpi	r24, 0x04	; 4
    503a:	48 f4       	brcc	.+18     	; 0x504e <HAL_Buzzer_u8BuzzerInit+0x2c>
    503c:	8b 81       	ldd	r24, Y+3	; 0x03
    503e:	88 30       	cpi	r24, 0x08	; 8
    5040:	30 f4       	brcc	.+12     	; 0x504e <HAL_Buzzer_u8BuzzerInit+0x2c>
		Loc_u8Return_Value=Loc_u8Return_Value = MCAL_DIO_u8SetPinDirection(Loc_u8BuzzerPortID,
    5042:	8a 81       	ldd	r24, Y+2	; 0x02
    5044:	6b 81       	ldd	r22, Y+3	; 0x03
    5046:	41 e0       	ldi	r20, 0x01	; 1
    5048:	0e 94 96 15 	call	0x2b2c	; 0x2b2c <MCAL_DIO_u8SetPinDirection>
    504c:	89 83       	std	Y+1, r24	; 0x01
				Loc_u8BuzzerPinID, Pin_High);
	} else {
		//Do Nothing
	}
	return Loc_u8Return_Value;
    504e:	89 81       	ldd	r24, Y+1	; 0x01
}
    5050:	0f 90       	pop	r0
    5052:	0f 90       	pop	r0
    5054:	0f 90       	pop	r0
    5056:	cf 91       	pop	r28
    5058:	df 91       	pop	r29
    505a:	08 95       	ret

0000505c <HAL_Buzzer_u8BuzzerMode>:

STD_Type HAL_Buzzer_u8BuzzerMode(u8 Loc_u8BuzzerPortID, u8 Loc_u8BuzzerPinID,
		u8 Loc_u8BuzzerMode) {
    505c:	df 93       	push	r29
    505e:	cf 93       	push	r28
    5060:	00 d0       	rcall	.+0      	; 0x5062 <HAL_Buzzer_u8BuzzerMode+0x6>
    5062:	00 d0       	rcall	.+0      	; 0x5064 <HAL_Buzzer_u8BuzzerMode+0x8>
    5064:	cd b7       	in	r28, 0x3d	; 61
    5066:	de b7       	in	r29, 0x3e	; 62
    5068:	8a 83       	std	Y+2, r24	; 0x02
    506a:	6b 83       	std	Y+3, r22	; 0x03
    506c:	4c 83       	std	Y+4, r20	; 0x04
	u8 Loc_u8Return_Value = E_NOT_OK;
    506e:	81 e0       	ldi	r24, 0x01	; 1
    5070:	89 83       	std	Y+1, r24	; 0x01
	if (Loc_u8BuzzerPortID <= PortD && Loc_u8BuzzerPinID <= Num_Of_Pins
    5072:	8a 81       	ldd	r24, Y+2	; 0x02
    5074:	84 30       	cpi	r24, 0x04	; 4
    5076:	10 f5       	brcc	.+68     	; 0x50bc <HAL_Buzzer_u8BuzzerMode+0x60>
    5078:	8b 81       	ldd	r24, Y+3	; 0x03
    507a:	88 30       	cpi	r24, 0x08	; 8
    507c:	f8 f4       	brcc	.+62     	; 0x50bc <HAL_Buzzer_u8BuzzerMode+0x60>
    507e:	8c 81       	ldd	r24, Y+4	; 0x04
    5080:	83 30       	cpi	r24, 0x03	; 3
    5082:	e0 f4       	brcc	.+56     	; 0x50bc <HAL_Buzzer_u8BuzzerMode+0x60>
			&& Loc_u8BuzzerMode <= Buzzer_TOG) {
		if (Loc_u8BuzzerMode == Buzzer_ON) {
    5084:	8c 81       	ldd	r24, Y+4	; 0x04
    5086:	81 30       	cpi	r24, 0x01	; 1
    5088:	39 f4       	brne	.+14     	; 0x5098 <HAL_Buzzer_u8BuzzerMode+0x3c>
			Loc_u8Return_Value=MCAL_DIO_u8SetPinValue(Loc_u8BuzzerPortID, Loc_u8BuzzerPinID, Pin_High);
    508a:	8a 81       	ldd	r24, Y+2	; 0x02
    508c:	6b 81       	ldd	r22, Y+3	; 0x03
    508e:	41 e0       	ldi	r20, 0x01	; 1
    5090:	0e 94 04 17 	call	0x2e08	; 0x2e08 <MCAL_DIO_u8SetPinValue>
    5094:	89 83       	std	Y+1, r24	; 0x01
    5096:	12 c0       	rjmp	.+36     	; 0x50bc <HAL_Buzzer_u8BuzzerMode+0x60>
		} else if (Loc_u8BuzzerMode == Buzzer_OFF) {
    5098:	8c 81       	ldd	r24, Y+4	; 0x04
    509a:	88 23       	and	r24, r24
    509c:	39 f4       	brne	.+14     	; 0x50ac <HAL_Buzzer_u8BuzzerMode+0x50>
			Loc_u8Return_Value=MCAL_DIO_u8SetPinValue(Loc_u8BuzzerPortID, Loc_u8BuzzerPinID, Pin_Low);
    509e:	8a 81       	ldd	r24, Y+2	; 0x02
    50a0:	6b 81       	ldd	r22, Y+3	; 0x03
    50a2:	40 e0       	ldi	r20, 0x00	; 0
    50a4:	0e 94 04 17 	call	0x2e08	; 0x2e08 <MCAL_DIO_u8SetPinValue>
    50a8:	89 83       	std	Y+1, r24	; 0x01
    50aa:	08 c0       	rjmp	.+16     	; 0x50bc <HAL_Buzzer_u8BuzzerMode+0x60>
		} else if (Loc_u8BuzzerMode == Buzzer_TOG) {
    50ac:	8c 81       	ldd	r24, Y+4	; 0x04
    50ae:	82 30       	cpi	r24, 0x02	; 2
    50b0:	29 f4       	brne	.+10     	; 0x50bc <HAL_Buzzer_u8BuzzerMode+0x60>
			Loc_u8Return_Value=MCAL_DIO_u8TogglePinValue(Loc_u8BuzzerPortID,Loc_u8BuzzerPinID);
    50b2:	8a 81       	ldd	r24, Y+2	; 0x02
    50b4:	6b 81       	ldd	r22, Y+3	; 0x03
    50b6:	0e 94 ed 18 	call	0x31da	; 0x31da <MCAL_DIO_u8TogglePinValue>
    50ba:	89 83       	std	Y+1, r24	; 0x01
			//Do Nothing
		}
	} else {
		//Do Nothing
	}
	return Loc_u8Return_Value;
    50bc:	89 81       	ldd	r24, Y+1	; 0x01
}
    50be:	0f 90       	pop	r0
    50c0:	0f 90       	pop	r0
    50c2:	0f 90       	pop	r0
    50c4:	0f 90       	pop	r0
    50c6:	cf 91       	pop	r28
    50c8:	df 91       	pop	r29
    50ca:	08 95       	ret

000050cc <APP_Autonomous_Car_voidInit>:

#include "Autonomous_Car.h"
volatile u16 Glob_u16DirLeft = NUM0;
volatile u16 Glob_u16DirRight = NUM0;
volatile u16 Glob_u16DirFront = NUM0;
void APP_Autonomous_Car_voidInit(void) {
    50cc:	df 93       	push	r29
    50ce:	cf 93       	push	r28
    50d0:	cd b7       	in	r28, 0x3d	; 61
    50d2:	de b7       	in	r29, 0x3e	; 62
	//Init Buzzer
	HAL_Buzzer_u8BuzzerInit(PortA, Pin3);
    50d4:	80 e0       	ldi	r24, 0x00	; 0
    50d6:	63 e0       	ldi	r22, 0x03	; 3
    50d8:	0e 94 11 28 	call	0x5022	; 0x5022 <HAL_Buzzer_u8BuzzerInit>
	//Init LCD
	HAL_LCD_u8LCDInit();
    50dc:	0e 94 da 1d 	call	0x3bb4	; 0x3bb4 <HAL_LCD_u8LCDInit>
	//Init Servo Motor
	HAL_SM_voidSMInit();
    50e0:	0e 94 7e 1b 	call	0x36fc	; 0x36fc <HAL_SM_voidSMInit>
	//Init UltraSonic Sensor
	HAL_Ultrasonic_Sensor_voidInit();
    50e4:	0e 94 65 19 	call	0x32ca	; 0x32ca <HAL_Ultrasonic_Sensor_voidInit>
	//Init H_Bridge
	HAL_void_H_BridgeInit();
    50e8:	0e 94 2e 27 	call	0x4e5c	; 0x4e5c <HAL_void_H_BridgeInit>
	//Leds
	HAL_LED_u8LedInit(PortA, Pin0);
    50ec:	80 e0       	ldi	r24, 0x00	; 0
    50ee:	60 e0       	ldi	r22, 0x00	; 0
    50f0:	0e 94 85 1d 	call	0x3b0a	; 0x3b0a <HAL_LED_u8LedInit>
	HAL_LED_u8LedInit(PortA, Pin1);
    50f4:	80 e0       	ldi	r24, 0x00	; 0
    50f6:	61 e0       	ldi	r22, 0x01	; 1
    50f8:	0e 94 85 1d 	call	0x3b0a	; 0x3b0a <HAL_LED_u8LedInit>
}
    50fc:	cf 91       	pop	r28
    50fe:	df 91       	pop	r29
    5100:	08 95       	ret

00005102 <APP_Autonomous_Car_voidApp>:
void APP_Autonomous_Car_voidApp(void) {
    5102:	0f 93       	push	r16
    5104:	1f 93       	push	r17
    5106:	df 93       	push	r29
    5108:	cf 93       	push	r28
    510a:	cd b7       	in	r28, 0x3d	; 61
    510c:	de b7       	in	r29, 0x3e	; 62
    510e:	ca 57       	subi	r28, 0x7A	; 122
    5110:	d0 40       	sbci	r29, 0x00	; 0
    5112:	0f b6       	in	r0, 0x3f	; 63
    5114:	f8 94       	cli
    5116:	de bf       	out	0x3e, r29	; 62
    5118:	0f be       	out	0x3f, r0	; 63
    511a:	cd bf       	out	0x3d, r28	; 61
	f32 LOC_f32Distance = NUM0;
    511c:	fe 01       	movw	r30, r28
    511e:	e9 58       	subi	r30, 0x89	; 137
    5120:	ff 4f       	sbci	r31, 0xFF	; 255
    5122:	80 e0       	ldi	r24, 0x00	; 0
    5124:	90 e0       	ldi	r25, 0x00	; 0
    5126:	a0 e0       	ldi	r26, 0x00	; 0
    5128:	b0 e0       	ldi	r27, 0x00	; 0
    512a:	80 83       	st	Z, r24
    512c:	91 83       	std	Z+1, r25	; 0x01
    512e:	a2 83       	std	Z+2, r26	; 0x02
    5130:	b3 83       	std	Z+3, r27	; 0x03
	//	Initially Set Servo Angle 90
	HAL_SM_voidSMSetAngle(START_ANGLE);
    5132:	8a e5       	ldi	r24, 0x5A	; 90
    5134:	0e 94 8c 1b 	call	0x3718	; 0x3718 <HAL_SM_voidSMSetAngle>
	//Light Front LEDS
	HAL_LED_u8LedMode(PortA, Pin0, LED_ON);
    5138:	80 e0       	ldi	r24, 0x00	; 0
    513a:	60 e0       	ldi	r22, 0x00	; 0
    513c:	41 e0       	ldi	r20, 0x01	; 1
    513e:	0e 94 a2 1d 	call	0x3b44	; 0x3b44 <HAL_LED_u8LedMode>
    5142:	fe 01       	movw	r30, r28
    5144:	e3 59       	subi	r30, 0x93	; 147
    5146:	ff 4f       	sbci	r31, 0xFF	; 255
    5148:	80 e0       	ldi	r24, 0x00	; 0
    514a:	90 e0       	ldi	r25, 0x00	; 0
    514c:	a8 e4       	ldi	r26, 0x48	; 72
    514e:	b2 e4       	ldi	r27, 0x42	; 66
    5150:	80 83       	st	Z, r24
    5152:	91 83       	std	Z+1, r25	; 0x01
    5154:	a2 83       	std	Z+2, r26	; 0x02
    5156:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5158:	8e 01       	movw	r16, r28
    515a:	07 59       	subi	r16, 0x97	; 151
    515c:	1f 4f       	sbci	r17, 0xFF	; 255
    515e:	fe 01       	movw	r30, r28
    5160:	e3 59       	subi	r30, 0x93	; 147
    5162:	ff 4f       	sbci	r31, 0xFF	; 255
    5164:	60 81       	ld	r22, Z
    5166:	71 81       	ldd	r23, Z+1	; 0x01
    5168:	82 81       	ldd	r24, Z+2	; 0x02
    516a:	93 81       	ldd	r25, Z+3	; 0x03
    516c:	20 e0       	ldi	r18, 0x00	; 0
    516e:	30 e0       	ldi	r19, 0x00	; 0
    5170:	4a e7       	ldi	r20, 0x7A	; 122
    5172:	55 e4       	ldi	r21, 0x45	; 69
    5174:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5178:	dc 01       	movw	r26, r24
    517a:	cb 01       	movw	r24, r22
    517c:	f8 01       	movw	r30, r16
    517e:	80 83       	st	Z, r24
    5180:	91 83       	std	Z+1, r25	; 0x01
    5182:	a2 83       	std	Z+2, r26	; 0x02
    5184:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5186:	fe 01       	movw	r30, r28
    5188:	e7 59       	subi	r30, 0x97	; 151
    518a:	ff 4f       	sbci	r31, 0xFF	; 255
    518c:	60 81       	ld	r22, Z
    518e:	71 81       	ldd	r23, Z+1	; 0x01
    5190:	82 81       	ldd	r24, Z+2	; 0x02
    5192:	93 81       	ldd	r25, Z+3	; 0x03
    5194:	20 e0       	ldi	r18, 0x00	; 0
    5196:	30 e0       	ldi	r19, 0x00	; 0
    5198:	40 e8       	ldi	r20, 0x80	; 128
    519a:	5f e3       	ldi	r21, 0x3F	; 63
    519c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    51a0:	88 23       	and	r24, r24
    51a2:	44 f4       	brge	.+16     	; 0x51b4 <APP_Autonomous_Car_voidApp+0xb2>
		__ticks = 1;
    51a4:	fe 01       	movw	r30, r28
    51a6:	e9 59       	subi	r30, 0x99	; 153
    51a8:	ff 4f       	sbci	r31, 0xFF	; 255
    51aa:	81 e0       	ldi	r24, 0x01	; 1
    51ac:	90 e0       	ldi	r25, 0x00	; 0
    51ae:	91 83       	std	Z+1, r25	; 0x01
    51b0:	80 83       	st	Z, r24
    51b2:	64 c0       	rjmp	.+200    	; 0x527c <APP_Autonomous_Car_voidApp+0x17a>
	else if (__tmp > 65535)
    51b4:	fe 01       	movw	r30, r28
    51b6:	e7 59       	subi	r30, 0x97	; 151
    51b8:	ff 4f       	sbci	r31, 0xFF	; 255
    51ba:	60 81       	ld	r22, Z
    51bc:	71 81       	ldd	r23, Z+1	; 0x01
    51be:	82 81       	ldd	r24, Z+2	; 0x02
    51c0:	93 81       	ldd	r25, Z+3	; 0x03
    51c2:	20 e0       	ldi	r18, 0x00	; 0
    51c4:	3f ef       	ldi	r19, 0xFF	; 255
    51c6:	4f e7       	ldi	r20, 0x7F	; 127
    51c8:	57 e4       	ldi	r21, 0x47	; 71
    51ca:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    51ce:	18 16       	cp	r1, r24
    51d0:	0c f0       	brlt	.+2      	; 0x51d4 <APP_Autonomous_Car_voidApp+0xd2>
    51d2:	43 c0       	rjmp	.+134    	; 0x525a <APP_Autonomous_Car_voidApp+0x158>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    51d4:	fe 01       	movw	r30, r28
    51d6:	e3 59       	subi	r30, 0x93	; 147
    51d8:	ff 4f       	sbci	r31, 0xFF	; 255
    51da:	60 81       	ld	r22, Z
    51dc:	71 81       	ldd	r23, Z+1	; 0x01
    51de:	82 81       	ldd	r24, Z+2	; 0x02
    51e0:	93 81       	ldd	r25, Z+3	; 0x03
    51e2:	20 e0       	ldi	r18, 0x00	; 0
    51e4:	30 e0       	ldi	r19, 0x00	; 0
    51e6:	40 e2       	ldi	r20, 0x20	; 32
    51e8:	51 e4       	ldi	r21, 0x41	; 65
    51ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    51ee:	dc 01       	movw	r26, r24
    51f0:	cb 01       	movw	r24, r22
    51f2:	8e 01       	movw	r16, r28
    51f4:	09 59       	subi	r16, 0x99	; 153
    51f6:	1f 4f       	sbci	r17, 0xFF	; 255
    51f8:	bc 01       	movw	r22, r24
    51fa:	cd 01       	movw	r24, r26
    51fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5200:	dc 01       	movw	r26, r24
    5202:	cb 01       	movw	r24, r22
    5204:	f8 01       	movw	r30, r16
    5206:	91 83       	std	Z+1, r25	; 0x01
    5208:	80 83       	st	Z, r24
    520a:	1f c0       	rjmp	.+62     	; 0x524a <APP_Autonomous_Car_voidApp+0x148>
    520c:	fe 01       	movw	r30, r28
    520e:	eb 59       	subi	r30, 0x9B	; 155
    5210:	ff 4f       	sbci	r31, 0xFF	; 255
    5212:	80 e9       	ldi	r24, 0x90	; 144
    5214:	91 e0       	ldi	r25, 0x01	; 1
    5216:	91 83       	std	Z+1, r25	; 0x01
    5218:	80 83       	st	Z, r24
    521a:	fe 01       	movw	r30, r28
    521c:	eb 59       	subi	r30, 0x9B	; 155
    521e:	ff 4f       	sbci	r31, 0xFF	; 255
    5220:	80 81       	ld	r24, Z
    5222:	91 81       	ldd	r25, Z+1	; 0x01
    5224:	01 97       	sbiw	r24, 0x01	; 1
    5226:	f1 f7       	brne	.-4      	; 0x5224 <APP_Autonomous_Car_voidApp+0x122>
    5228:	fe 01       	movw	r30, r28
    522a:	eb 59       	subi	r30, 0x9B	; 155
    522c:	ff 4f       	sbci	r31, 0xFF	; 255
    522e:	91 83       	std	Z+1, r25	; 0x01
    5230:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5232:	de 01       	movw	r26, r28
    5234:	a9 59       	subi	r26, 0x99	; 153
    5236:	bf 4f       	sbci	r27, 0xFF	; 255
    5238:	fe 01       	movw	r30, r28
    523a:	e9 59       	subi	r30, 0x99	; 153
    523c:	ff 4f       	sbci	r31, 0xFF	; 255
    523e:	80 81       	ld	r24, Z
    5240:	91 81       	ldd	r25, Z+1	; 0x01
    5242:	01 97       	sbiw	r24, 0x01	; 1
    5244:	11 96       	adiw	r26, 0x01	; 1
    5246:	9c 93       	st	X, r25
    5248:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    524a:	fe 01       	movw	r30, r28
    524c:	e9 59       	subi	r30, 0x99	; 153
    524e:	ff 4f       	sbci	r31, 0xFF	; 255
    5250:	80 81       	ld	r24, Z
    5252:	91 81       	ldd	r25, Z+1	; 0x01
    5254:	00 97       	sbiw	r24, 0x00	; 0
    5256:	d1 f6       	brne	.-76     	; 0x520c <APP_Autonomous_Car_voidApp+0x10a>
    5258:	27 c0       	rjmp	.+78     	; 0x52a8 <APP_Autonomous_Car_voidApp+0x1a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    525a:	8e 01       	movw	r16, r28
    525c:	09 59       	subi	r16, 0x99	; 153
    525e:	1f 4f       	sbci	r17, 0xFF	; 255
    5260:	fe 01       	movw	r30, r28
    5262:	e7 59       	subi	r30, 0x97	; 151
    5264:	ff 4f       	sbci	r31, 0xFF	; 255
    5266:	60 81       	ld	r22, Z
    5268:	71 81       	ldd	r23, Z+1	; 0x01
    526a:	82 81       	ldd	r24, Z+2	; 0x02
    526c:	93 81       	ldd	r25, Z+3	; 0x03
    526e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5272:	dc 01       	movw	r26, r24
    5274:	cb 01       	movw	r24, r22
    5276:	f8 01       	movw	r30, r16
    5278:	91 83       	std	Z+1, r25	; 0x01
    527a:	80 83       	st	Z, r24
    527c:	de 01       	movw	r26, r28
    527e:	ad 59       	subi	r26, 0x9D	; 157
    5280:	bf 4f       	sbci	r27, 0xFF	; 255
    5282:	fe 01       	movw	r30, r28
    5284:	e9 59       	subi	r30, 0x99	; 153
    5286:	ff 4f       	sbci	r31, 0xFF	; 255
    5288:	80 81       	ld	r24, Z
    528a:	91 81       	ldd	r25, Z+1	; 0x01
    528c:	8d 93       	st	X+, r24
    528e:	9c 93       	st	X, r25
    5290:	fe 01       	movw	r30, r28
    5292:	ed 59       	subi	r30, 0x9D	; 157
    5294:	ff 4f       	sbci	r31, 0xFF	; 255
    5296:	80 81       	ld	r24, Z
    5298:	91 81       	ldd	r25, Z+1	; 0x01
    529a:	01 97       	sbiw	r24, 0x01	; 1
    529c:	f1 f7       	brne	.-4      	; 0x529a <APP_Autonomous_Car_voidApp+0x198>
    529e:	fe 01       	movw	r30, r28
    52a0:	ed 59       	subi	r30, 0x9D	; 157
    52a2:	ff 4f       	sbci	r31, 0xFF	; 255
    52a4:	91 83       	std	Z+1, r25	; 0x01
    52a6:	80 83       	st	Z, r24
	while (NUM1) {
		_delay_ms(50);
		HAL_Ultrasonic_Sensor_voidCalcDistancse(&LOC_f32Distance);
    52a8:	ce 01       	movw	r24, r28
    52aa:	89 58       	subi	r24, 0x89	; 137
    52ac:	9f 4f       	sbci	r25, 0xFF	; 255
    52ae:	0e 94 64 1a 	call	0x34c8	; 0x34c8 <HAL_Ultrasonic_Sensor_voidCalcDistancse>
		if(LOC_f32Distance>DISTANCE_30){
    52b2:	fe 01       	movw	r30, r28
    52b4:	e9 58       	subi	r30, 0x89	; 137
    52b6:	ff 4f       	sbci	r31, 0xFF	; 255
    52b8:	80 81       	ld	r24, Z
    52ba:	91 81       	ldd	r25, Z+1	; 0x01
    52bc:	a2 81       	ldd	r26, Z+2	; 0x02
    52be:	b3 81       	ldd	r27, Z+3	; 0x03
    52c0:	bc 01       	movw	r22, r24
    52c2:	cd 01       	movw	r24, r26
    52c4:	20 e0       	ldi	r18, 0x00	; 0
    52c6:	30 e0       	ldi	r19, 0x00	; 0
    52c8:	40 ef       	ldi	r20, 0xF0	; 240
    52ca:	51 e4       	ldi	r21, 0x41	; 65
    52cc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    52d0:	18 16       	cp	r1, r24
    52d2:	74 f5       	brge	.+92     	; 0x5330 <APP_Autonomous_Car_voidApp+0x22e>
			HAL_LCD_u8Clear();
    52d4:	0e 94 19 26 	call	0x4c32	; 0x4c32 <HAL_LCD_u8Clear>
			HAL_LCD_u8SendString("Moving Front...");
    52d8:	80 e6       	ldi	r24, 0x60	; 96
    52da:	90 e0       	ldi	r25, 0x00	; 0
    52dc:	0e 94 64 23 	call	0x46c8	; 0x46c8 <HAL_LCD_u8SendString>
			HAL_LCD_u8GoTo(Second_Line,NUM0);
    52e0:	83 e0       	ldi	r24, 0x03	; 3
    52e2:	60 e0       	ldi	r22, 0x00	; 0
    52e4:	0e 94 bd 23 	call	0x477a	; 0x477a <HAL_LCD_u8GoTo>
			HAL_LCD_u8SendString("Distance: ");
    52e8:	80 e7       	ldi	r24, 0x70	; 112
    52ea:	90 e0       	ldi	r25, 0x00	; 0
    52ec:	0e 94 64 23 	call	0x46c8	; 0x46c8 <HAL_LCD_u8SendString>
			Glob_u16DirFront=LOC_f32Distance;
    52f0:	fe 01       	movw	r30, r28
    52f2:	e9 58       	subi	r30, 0x89	; 137
    52f4:	ff 4f       	sbci	r31, 0xFF	; 255
    52f6:	80 81       	ld	r24, Z
    52f8:	91 81       	ldd	r25, Z+1	; 0x01
    52fa:	a2 81       	ldd	r26, Z+2	; 0x02
    52fc:	b3 81       	ldd	r27, Z+3	; 0x03
    52fe:	bc 01       	movw	r22, r24
    5300:	cd 01       	movw	r24, r26
    5302:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5306:	dc 01       	movw	r26, r24
    5308:	cb 01       	movw	r24, r22
    530a:	90 93 e9 01 	sts	0x01E9, r25
    530e:	80 93 e8 01 	sts	0x01E8, r24
			HAL_LCD_u8SendNumber(Glob_u16DirFront);
    5312:	80 91 e8 01 	lds	r24, 0x01E8
    5316:	90 91 e9 01 	lds	r25, 0x01E9
    531a:	0e 94 9a 23 	call	0x4734	; 0x4734 <HAL_LCD_u8SendNumber>
			HAL_void_H_BridgeFront(MAX_SPEED);
    531e:	83 e6       	ldi	r24, 0x63	; 99
    5320:	0e 94 6f 27 	call	0x4ede	; 0x4ede <HAL_void_H_BridgeFront>
			HAL_LED_u8LedMode(PortA, Pin1, LED_OFF);
    5324:	80 e0       	ldi	r24, 0x00	; 0
    5326:	61 e0       	ldi	r22, 0x01	; 1
    5328:	40 e0       	ldi	r20, 0x00	; 0
    532a:	0e 94 a2 1d 	call	0x3b44	; 0x3b44 <HAL_LED_u8LedMode>
    532e:	09 cf       	rjmp	.-494    	; 0x5142 <APP_Autonomous_Car_voidApp+0x40>
		}
		else if (LOC_f32Distance <= DISTANCE_30) {
    5330:	fe 01       	movw	r30, r28
    5332:	e9 58       	subi	r30, 0x89	; 137
    5334:	ff 4f       	sbci	r31, 0xFF	; 255
    5336:	80 81       	ld	r24, Z
    5338:	91 81       	ldd	r25, Z+1	; 0x01
    533a:	a2 81       	ldd	r26, Z+2	; 0x02
    533c:	b3 81       	ldd	r27, Z+3	; 0x03
    533e:	bc 01       	movw	r22, r24
    5340:	cd 01       	movw	r24, r26
    5342:	20 e0       	ldi	r18, 0x00	; 0
    5344:	30 e0       	ldi	r19, 0x00	; 0
    5346:	40 ef       	ldi	r20, 0xF0	; 240
    5348:	51 e4       	ldi	r21, 0x41	; 65
    534a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__lesf2>
    534e:	18 16       	cp	r1, r24
    5350:	0c f4       	brge	.+2      	; 0x5354 <APP_Autonomous_Car_voidApp+0x252>
    5352:	f7 ce       	rjmp	.-530    	; 0x5142 <APP_Autonomous_Car_voidApp+0x40>
			if (LOC_f32Distance <= DISTANCE_10) {
    5354:	fe 01       	movw	r30, r28
    5356:	e9 58       	subi	r30, 0x89	; 137
    5358:	ff 4f       	sbci	r31, 0xFF	; 255
    535a:	80 81       	ld	r24, Z
    535c:	91 81       	ldd	r25, Z+1	; 0x01
    535e:	a2 81       	ldd	r26, Z+2	; 0x02
    5360:	b3 81       	ldd	r27, Z+3	; 0x03
    5362:	bc 01       	movw	r22, r24
    5364:	cd 01       	movw	r24, r26
    5366:	20 e0       	ldi	r18, 0x00	; 0
    5368:	30 e0       	ldi	r19, 0x00	; 0
    536a:	40 e2       	ldi	r20, 0x20	; 32
    536c:	51 e4       	ldi	r21, 0x41	; 65
    536e:	0e 94 55 04 	call	0x8aa	; 0x8aa <__lesf2>
    5372:	18 16       	cp	r1, r24
    5374:	0c f4       	brge	.+2      	; 0x5378 <APP_Autonomous_Car_voidApp+0x276>
    5376:	bc c0       	rjmp	.+376    	; 0x54f0 <APP_Autonomous_Car_voidApp+0x3ee>
				HAL_LCD_u8Clear();
    5378:	0e 94 19 26 	call	0x4c32	; 0x4c32 <HAL_LCD_u8Clear>
				HAL_LCD_u8SendString("Moving Back...");
    537c:	8b e7       	ldi	r24, 0x7B	; 123
    537e:	90 e0       	ldi	r25, 0x00	; 0
    5380:	0e 94 64 23 	call	0x46c8	; 0x46c8 <HAL_LCD_u8SendString>
				HAL_void_H_BridgeBack(MAX_SPEED);
    5384:	83 e6       	ldi	r24, 0x63	; 99
    5386:	0e 94 9f 27 	call	0x4f3e	; 0x4f3e <HAL_void_H_BridgeBack>
    538a:	fe 01       	movw	r30, r28
    538c:	e1 5a       	subi	r30, 0xA1	; 161
    538e:	ff 4f       	sbci	r31, 0xFF	; 255
    5390:	80 e0       	ldi	r24, 0x00	; 0
    5392:	90 e0       	ldi	r25, 0x00	; 0
    5394:	aa e7       	ldi	r26, 0x7A	; 122
    5396:	b4 e4       	ldi	r27, 0x44	; 68
    5398:	80 83       	st	Z, r24
    539a:	91 83       	std	Z+1, r25	; 0x01
    539c:	a2 83       	std	Z+2, r26	; 0x02
    539e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    53a0:	8e 01       	movw	r16, r28
    53a2:	05 5a       	subi	r16, 0xA5	; 165
    53a4:	1f 4f       	sbci	r17, 0xFF	; 255
    53a6:	fe 01       	movw	r30, r28
    53a8:	e1 5a       	subi	r30, 0xA1	; 161
    53aa:	ff 4f       	sbci	r31, 0xFF	; 255
    53ac:	60 81       	ld	r22, Z
    53ae:	71 81       	ldd	r23, Z+1	; 0x01
    53b0:	82 81       	ldd	r24, Z+2	; 0x02
    53b2:	93 81       	ldd	r25, Z+3	; 0x03
    53b4:	20 e0       	ldi	r18, 0x00	; 0
    53b6:	30 e0       	ldi	r19, 0x00	; 0
    53b8:	4a e7       	ldi	r20, 0x7A	; 122
    53ba:	55 e4       	ldi	r21, 0x45	; 69
    53bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    53c0:	dc 01       	movw	r26, r24
    53c2:	cb 01       	movw	r24, r22
    53c4:	f8 01       	movw	r30, r16
    53c6:	80 83       	st	Z, r24
    53c8:	91 83       	std	Z+1, r25	; 0x01
    53ca:	a2 83       	std	Z+2, r26	; 0x02
    53cc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    53ce:	fe 01       	movw	r30, r28
    53d0:	e5 5a       	subi	r30, 0xA5	; 165
    53d2:	ff 4f       	sbci	r31, 0xFF	; 255
    53d4:	60 81       	ld	r22, Z
    53d6:	71 81       	ldd	r23, Z+1	; 0x01
    53d8:	82 81       	ldd	r24, Z+2	; 0x02
    53da:	93 81       	ldd	r25, Z+3	; 0x03
    53dc:	20 e0       	ldi	r18, 0x00	; 0
    53de:	30 e0       	ldi	r19, 0x00	; 0
    53e0:	40 e8       	ldi	r20, 0x80	; 128
    53e2:	5f e3       	ldi	r21, 0x3F	; 63
    53e4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    53e8:	88 23       	and	r24, r24
    53ea:	44 f4       	brge	.+16     	; 0x53fc <APP_Autonomous_Car_voidApp+0x2fa>
		__ticks = 1;
    53ec:	fe 01       	movw	r30, r28
    53ee:	e7 5a       	subi	r30, 0xA7	; 167
    53f0:	ff 4f       	sbci	r31, 0xFF	; 255
    53f2:	81 e0       	ldi	r24, 0x01	; 1
    53f4:	90 e0       	ldi	r25, 0x00	; 0
    53f6:	91 83       	std	Z+1, r25	; 0x01
    53f8:	80 83       	st	Z, r24
    53fa:	64 c0       	rjmp	.+200    	; 0x54c4 <APP_Autonomous_Car_voidApp+0x3c2>
	else if (__tmp > 65535)
    53fc:	fe 01       	movw	r30, r28
    53fe:	e5 5a       	subi	r30, 0xA5	; 165
    5400:	ff 4f       	sbci	r31, 0xFF	; 255
    5402:	60 81       	ld	r22, Z
    5404:	71 81       	ldd	r23, Z+1	; 0x01
    5406:	82 81       	ldd	r24, Z+2	; 0x02
    5408:	93 81       	ldd	r25, Z+3	; 0x03
    540a:	20 e0       	ldi	r18, 0x00	; 0
    540c:	3f ef       	ldi	r19, 0xFF	; 255
    540e:	4f e7       	ldi	r20, 0x7F	; 127
    5410:	57 e4       	ldi	r21, 0x47	; 71
    5412:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5416:	18 16       	cp	r1, r24
    5418:	0c f0       	brlt	.+2      	; 0x541c <APP_Autonomous_Car_voidApp+0x31a>
    541a:	43 c0       	rjmp	.+134    	; 0x54a2 <APP_Autonomous_Car_voidApp+0x3a0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    541c:	fe 01       	movw	r30, r28
    541e:	e1 5a       	subi	r30, 0xA1	; 161
    5420:	ff 4f       	sbci	r31, 0xFF	; 255
    5422:	60 81       	ld	r22, Z
    5424:	71 81       	ldd	r23, Z+1	; 0x01
    5426:	82 81       	ldd	r24, Z+2	; 0x02
    5428:	93 81       	ldd	r25, Z+3	; 0x03
    542a:	20 e0       	ldi	r18, 0x00	; 0
    542c:	30 e0       	ldi	r19, 0x00	; 0
    542e:	40 e2       	ldi	r20, 0x20	; 32
    5430:	51 e4       	ldi	r21, 0x41	; 65
    5432:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5436:	dc 01       	movw	r26, r24
    5438:	cb 01       	movw	r24, r22
    543a:	8e 01       	movw	r16, r28
    543c:	07 5a       	subi	r16, 0xA7	; 167
    543e:	1f 4f       	sbci	r17, 0xFF	; 255
    5440:	bc 01       	movw	r22, r24
    5442:	cd 01       	movw	r24, r26
    5444:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5448:	dc 01       	movw	r26, r24
    544a:	cb 01       	movw	r24, r22
    544c:	f8 01       	movw	r30, r16
    544e:	91 83       	std	Z+1, r25	; 0x01
    5450:	80 83       	st	Z, r24
    5452:	1f c0       	rjmp	.+62     	; 0x5492 <APP_Autonomous_Car_voidApp+0x390>
    5454:	fe 01       	movw	r30, r28
    5456:	e9 5a       	subi	r30, 0xA9	; 169
    5458:	ff 4f       	sbci	r31, 0xFF	; 255
    545a:	80 e9       	ldi	r24, 0x90	; 144
    545c:	91 e0       	ldi	r25, 0x01	; 1
    545e:	91 83       	std	Z+1, r25	; 0x01
    5460:	80 83       	st	Z, r24
    5462:	fe 01       	movw	r30, r28
    5464:	e9 5a       	subi	r30, 0xA9	; 169
    5466:	ff 4f       	sbci	r31, 0xFF	; 255
    5468:	80 81       	ld	r24, Z
    546a:	91 81       	ldd	r25, Z+1	; 0x01
    546c:	01 97       	sbiw	r24, 0x01	; 1
    546e:	f1 f7       	brne	.-4      	; 0x546c <APP_Autonomous_Car_voidApp+0x36a>
    5470:	fe 01       	movw	r30, r28
    5472:	e9 5a       	subi	r30, 0xA9	; 169
    5474:	ff 4f       	sbci	r31, 0xFF	; 255
    5476:	91 83       	std	Z+1, r25	; 0x01
    5478:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    547a:	de 01       	movw	r26, r28
    547c:	a7 5a       	subi	r26, 0xA7	; 167
    547e:	bf 4f       	sbci	r27, 0xFF	; 255
    5480:	fe 01       	movw	r30, r28
    5482:	e7 5a       	subi	r30, 0xA7	; 167
    5484:	ff 4f       	sbci	r31, 0xFF	; 255
    5486:	80 81       	ld	r24, Z
    5488:	91 81       	ldd	r25, Z+1	; 0x01
    548a:	01 97       	sbiw	r24, 0x01	; 1
    548c:	11 96       	adiw	r26, 0x01	; 1
    548e:	9c 93       	st	X, r25
    5490:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5492:	fe 01       	movw	r30, r28
    5494:	e7 5a       	subi	r30, 0xA7	; 167
    5496:	ff 4f       	sbci	r31, 0xFF	; 255
    5498:	80 81       	ld	r24, Z
    549a:	91 81       	ldd	r25, Z+1	; 0x01
    549c:	00 97       	sbiw	r24, 0x00	; 0
    549e:	d1 f6       	brne	.-76     	; 0x5454 <APP_Autonomous_Car_voidApp+0x352>
    54a0:	27 c0       	rjmp	.+78     	; 0x54f0 <APP_Autonomous_Car_voidApp+0x3ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    54a2:	8e 01       	movw	r16, r28
    54a4:	07 5a       	subi	r16, 0xA7	; 167
    54a6:	1f 4f       	sbci	r17, 0xFF	; 255
    54a8:	fe 01       	movw	r30, r28
    54aa:	e5 5a       	subi	r30, 0xA5	; 165
    54ac:	ff 4f       	sbci	r31, 0xFF	; 255
    54ae:	60 81       	ld	r22, Z
    54b0:	71 81       	ldd	r23, Z+1	; 0x01
    54b2:	82 81       	ldd	r24, Z+2	; 0x02
    54b4:	93 81       	ldd	r25, Z+3	; 0x03
    54b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    54ba:	dc 01       	movw	r26, r24
    54bc:	cb 01       	movw	r24, r22
    54be:	f8 01       	movw	r30, r16
    54c0:	91 83       	std	Z+1, r25	; 0x01
    54c2:	80 83       	st	Z, r24
    54c4:	de 01       	movw	r26, r28
    54c6:	ab 5a       	subi	r26, 0xAB	; 171
    54c8:	bf 4f       	sbci	r27, 0xFF	; 255
    54ca:	fe 01       	movw	r30, r28
    54cc:	e7 5a       	subi	r30, 0xA7	; 167
    54ce:	ff 4f       	sbci	r31, 0xFF	; 255
    54d0:	80 81       	ld	r24, Z
    54d2:	91 81       	ldd	r25, Z+1	; 0x01
    54d4:	8d 93       	st	X+, r24
    54d6:	9c 93       	st	X, r25
    54d8:	fe 01       	movw	r30, r28
    54da:	eb 5a       	subi	r30, 0xAB	; 171
    54dc:	ff 4f       	sbci	r31, 0xFF	; 255
    54de:	80 81       	ld	r24, Z
    54e0:	91 81       	ldd	r25, Z+1	; 0x01
    54e2:	01 97       	sbiw	r24, 0x01	; 1
    54e4:	f1 f7       	brne	.-4      	; 0x54e2 <APP_Autonomous_Car_voidApp+0x3e0>
    54e6:	fe 01       	movw	r30, r28
    54e8:	eb 5a       	subi	r30, 0xAB	; 171
    54ea:	ff 4f       	sbci	r31, 0xFF	; 255
    54ec:	91 83       	std	Z+1, r25	; 0x01
    54ee:	80 83       	st	Z, r24
				_delay_ms(1000);
			}
			HAL_void_H_BridgeStop(NUM0);
    54f0:	80 e0       	ldi	r24, 0x00	; 0
    54f2:	0e 94 eb 27 	call	0x4fd6	; 0x4fd6 <HAL_void_H_BridgeStop>
			HAL_LED_u8LedMode(PortA, Pin1, LED_ON);
    54f6:	80 e0       	ldi	r24, 0x00	; 0
    54f8:	61 e0       	ldi	r22, 0x01	; 1
    54fa:	41 e0       	ldi	r20, 0x01	; 1
    54fc:	0e 94 a2 1d 	call	0x3b44	; 0x3b44 <HAL_LED_u8LedMode>
			for (int i = START_ANGLE; i >= MAX_CCW_ANGLE; i -= NUM_2) {
    5500:	fe 01       	movw	r30, r28
    5502:	eb 58       	subi	r30, 0x8B	; 139
    5504:	ff 4f       	sbci	r31, 0xFF	; 255
    5506:	8a e5       	ldi	r24, 0x5A	; 90
    5508:	90 e0       	ldi	r25, 0x00	; 0
    550a:	91 83       	std	Z+1, r25	; 0x01
    550c:	80 83       	st	Z, r24
    550e:	c6 c2       	rjmp	.+1420   	; 0x5a9c <APP_Autonomous_Car_voidApp+0x99a>
				HAL_SM_voidSMSetAngle(i);
    5510:	fe 01       	movw	r30, r28
    5512:	eb 58       	subi	r30, 0x8B	; 139
    5514:	ff 4f       	sbci	r31, 0xFF	; 255
    5516:	80 81       	ld	r24, Z
    5518:	0e 94 8c 1b 	call	0x3718	; 0x3718 <HAL_SM_voidSMSetAngle>
				if (i == MAX_CCW_ANGLE) {
    551c:	fe 01       	movw	r30, r28
    551e:	eb 58       	subi	r30, 0x8B	; 139
    5520:	ff 4f       	sbci	r31, 0xFF	; 255
    5522:	80 81       	ld	r24, Z
    5524:	91 81       	ldd	r25, Z+1	; 0x01
    5526:	00 97       	sbiw	r24, 0x00	; 0
    5528:	09 f0       	breq	.+2      	; 0x552c <APP_Autonomous_Car_voidApp+0x42a>
    552a:	ac c2       	rjmp	.+1368   	; 0x5a84 <APP_Autonomous_Car_voidApp+0x982>
    552c:	fe 01       	movw	r30, r28
    552e:	ef 5a       	subi	r30, 0xAF	; 175
    5530:	ff 4f       	sbci	r31, 0xFF	; 255
    5532:	80 e0       	ldi	r24, 0x00	; 0
    5534:	90 e0       	ldi	r25, 0x00	; 0
    5536:	a8 e4       	ldi	r26, 0x48	; 72
    5538:	b2 e4       	ldi	r27, 0x42	; 66
    553a:	80 83       	st	Z, r24
    553c:	91 83       	std	Z+1, r25	; 0x01
    553e:	a2 83       	std	Z+2, r26	; 0x02
    5540:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5542:	8e 01       	movw	r16, r28
    5544:	03 5b       	subi	r16, 0xB3	; 179
    5546:	1f 4f       	sbci	r17, 0xFF	; 255
    5548:	fe 01       	movw	r30, r28
    554a:	ef 5a       	subi	r30, 0xAF	; 175
    554c:	ff 4f       	sbci	r31, 0xFF	; 255
    554e:	60 81       	ld	r22, Z
    5550:	71 81       	ldd	r23, Z+1	; 0x01
    5552:	82 81       	ldd	r24, Z+2	; 0x02
    5554:	93 81       	ldd	r25, Z+3	; 0x03
    5556:	20 e0       	ldi	r18, 0x00	; 0
    5558:	30 e0       	ldi	r19, 0x00	; 0
    555a:	4a e7       	ldi	r20, 0x7A	; 122
    555c:	55 e4       	ldi	r21, 0x45	; 69
    555e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5562:	dc 01       	movw	r26, r24
    5564:	cb 01       	movw	r24, r22
    5566:	f8 01       	movw	r30, r16
    5568:	80 83       	st	Z, r24
    556a:	91 83       	std	Z+1, r25	; 0x01
    556c:	a2 83       	std	Z+2, r26	; 0x02
    556e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5570:	fe 01       	movw	r30, r28
    5572:	e3 5b       	subi	r30, 0xB3	; 179
    5574:	ff 4f       	sbci	r31, 0xFF	; 255
    5576:	60 81       	ld	r22, Z
    5578:	71 81       	ldd	r23, Z+1	; 0x01
    557a:	82 81       	ldd	r24, Z+2	; 0x02
    557c:	93 81       	ldd	r25, Z+3	; 0x03
    557e:	20 e0       	ldi	r18, 0x00	; 0
    5580:	30 e0       	ldi	r19, 0x00	; 0
    5582:	40 e8       	ldi	r20, 0x80	; 128
    5584:	5f e3       	ldi	r21, 0x3F	; 63
    5586:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    558a:	88 23       	and	r24, r24
    558c:	44 f4       	brge	.+16     	; 0x559e <APP_Autonomous_Car_voidApp+0x49c>
		__ticks = 1;
    558e:	fe 01       	movw	r30, r28
    5590:	e5 5b       	subi	r30, 0xB5	; 181
    5592:	ff 4f       	sbci	r31, 0xFF	; 255
    5594:	81 e0       	ldi	r24, 0x01	; 1
    5596:	90 e0       	ldi	r25, 0x00	; 0
    5598:	91 83       	std	Z+1, r25	; 0x01
    559a:	80 83       	st	Z, r24
    559c:	64 c0       	rjmp	.+200    	; 0x5666 <APP_Autonomous_Car_voidApp+0x564>
	else if (__tmp > 65535)
    559e:	fe 01       	movw	r30, r28
    55a0:	e3 5b       	subi	r30, 0xB3	; 179
    55a2:	ff 4f       	sbci	r31, 0xFF	; 255
    55a4:	60 81       	ld	r22, Z
    55a6:	71 81       	ldd	r23, Z+1	; 0x01
    55a8:	82 81       	ldd	r24, Z+2	; 0x02
    55aa:	93 81       	ldd	r25, Z+3	; 0x03
    55ac:	20 e0       	ldi	r18, 0x00	; 0
    55ae:	3f ef       	ldi	r19, 0xFF	; 255
    55b0:	4f e7       	ldi	r20, 0x7F	; 127
    55b2:	57 e4       	ldi	r21, 0x47	; 71
    55b4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    55b8:	18 16       	cp	r1, r24
    55ba:	0c f0       	brlt	.+2      	; 0x55be <APP_Autonomous_Car_voidApp+0x4bc>
    55bc:	43 c0       	rjmp	.+134    	; 0x5644 <APP_Autonomous_Car_voidApp+0x542>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    55be:	fe 01       	movw	r30, r28
    55c0:	ef 5a       	subi	r30, 0xAF	; 175
    55c2:	ff 4f       	sbci	r31, 0xFF	; 255
    55c4:	60 81       	ld	r22, Z
    55c6:	71 81       	ldd	r23, Z+1	; 0x01
    55c8:	82 81       	ldd	r24, Z+2	; 0x02
    55ca:	93 81       	ldd	r25, Z+3	; 0x03
    55cc:	20 e0       	ldi	r18, 0x00	; 0
    55ce:	30 e0       	ldi	r19, 0x00	; 0
    55d0:	40 e2       	ldi	r20, 0x20	; 32
    55d2:	51 e4       	ldi	r21, 0x41	; 65
    55d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    55d8:	dc 01       	movw	r26, r24
    55da:	cb 01       	movw	r24, r22
    55dc:	8e 01       	movw	r16, r28
    55de:	05 5b       	subi	r16, 0xB5	; 181
    55e0:	1f 4f       	sbci	r17, 0xFF	; 255
    55e2:	bc 01       	movw	r22, r24
    55e4:	cd 01       	movw	r24, r26
    55e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    55ea:	dc 01       	movw	r26, r24
    55ec:	cb 01       	movw	r24, r22
    55ee:	f8 01       	movw	r30, r16
    55f0:	91 83       	std	Z+1, r25	; 0x01
    55f2:	80 83       	st	Z, r24
    55f4:	1f c0       	rjmp	.+62     	; 0x5634 <APP_Autonomous_Car_voidApp+0x532>
    55f6:	fe 01       	movw	r30, r28
    55f8:	e7 5b       	subi	r30, 0xB7	; 183
    55fa:	ff 4f       	sbci	r31, 0xFF	; 255
    55fc:	80 e9       	ldi	r24, 0x90	; 144
    55fe:	91 e0       	ldi	r25, 0x01	; 1
    5600:	91 83       	std	Z+1, r25	; 0x01
    5602:	80 83       	st	Z, r24
    5604:	fe 01       	movw	r30, r28
    5606:	e7 5b       	subi	r30, 0xB7	; 183
    5608:	ff 4f       	sbci	r31, 0xFF	; 255
    560a:	80 81       	ld	r24, Z
    560c:	91 81       	ldd	r25, Z+1	; 0x01
    560e:	01 97       	sbiw	r24, 0x01	; 1
    5610:	f1 f7       	brne	.-4      	; 0x560e <APP_Autonomous_Car_voidApp+0x50c>
    5612:	fe 01       	movw	r30, r28
    5614:	e7 5b       	subi	r30, 0xB7	; 183
    5616:	ff 4f       	sbci	r31, 0xFF	; 255
    5618:	91 83       	std	Z+1, r25	; 0x01
    561a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    561c:	de 01       	movw	r26, r28
    561e:	a5 5b       	subi	r26, 0xB5	; 181
    5620:	bf 4f       	sbci	r27, 0xFF	; 255
    5622:	fe 01       	movw	r30, r28
    5624:	e5 5b       	subi	r30, 0xB5	; 181
    5626:	ff 4f       	sbci	r31, 0xFF	; 255
    5628:	80 81       	ld	r24, Z
    562a:	91 81       	ldd	r25, Z+1	; 0x01
    562c:	01 97       	sbiw	r24, 0x01	; 1
    562e:	11 96       	adiw	r26, 0x01	; 1
    5630:	9c 93       	st	X, r25
    5632:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5634:	fe 01       	movw	r30, r28
    5636:	e5 5b       	subi	r30, 0xB5	; 181
    5638:	ff 4f       	sbci	r31, 0xFF	; 255
    563a:	80 81       	ld	r24, Z
    563c:	91 81       	ldd	r25, Z+1	; 0x01
    563e:	00 97       	sbiw	r24, 0x00	; 0
    5640:	d1 f6       	brne	.-76     	; 0x55f6 <APP_Autonomous_Car_voidApp+0x4f4>
    5642:	27 c0       	rjmp	.+78     	; 0x5692 <APP_Autonomous_Car_voidApp+0x590>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5644:	8e 01       	movw	r16, r28
    5646:	05 5b       	subi	r16, 0xB5	; 181
    5648:	1f 4f       	sbci	r17, 0xFF	; 255
    564a:	fe 01       	movw	r30, r28
    564c:	e3 5b       	subi	r30, 0xB3	; 179
    564e:	ff 4f       	sbci	r31, 0xFF	; 255
    5650:	60 81       	ld	r22, Z
    5652:	71 81       	ldd	r23, Z+1	; 0x01
    5654:	82 81       	ldd	r24, Z+2	; 0x02
    5656:	93 81       	ldd	r25, Z+3	; 0x03
    5658:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    565c:	dc 01       	movw	r26, r24
    565e:	cb 01       	movw	r24, r22
    5660:	f8 01       	movw	r30, r16
    5662:	91 83       	std	Z+1, r25	; 0x01
    5664:	80 83       	st	Z, r24
    5666:	de 01       	movw	r26, r28
    5668:	a9 5b       	subi	r26, 0xB9	; 185
    566a:	bf 4f       	sbci	r27, 0xFF	; 255
    566c:	fe 01       	movw	r30, r28
    566e:	e5 5b       	subi	r30, 0xB5	; 181
    5670:	ff 4f       	sbci	r31, 0xFF	; 255
    5672:	80 81       	ld	r24, Z
    5674:	91 81       	ldd	r25, Z+1	; 0x01
    5676:	8d 93       	st	X+, r24
    5678:	9c 93       	st	X, r25
    567a:	fe 01       	movw	r30, r28
    567c:	e9 5b       	subi	r30, 0xB9	; 185
    567e:	ff 4f       	sbci	r31, 0xFF	; 255
    5680:	80 81       	ld	r24, Z
    5682:	91 81       	ldd	r25, Z+1	; 0x01
    5684:	01 97       	sbiw	r24, 0x01	; 1
    5686:	f1 f7       	brne	.-4      	; 0x5684 <APP_Autonomous_Car_voidApp+0x582>
    5688:	fe 01       	movw	r30, r28
    568a:	e9 5b       	subi	r30, 0xB9	; 185
    568c:	ff 4f       	sbci	r31, 0xFF	; 255
    568e:	91 83       	std	Z+1, r25	; 0x01
    5690:	80 83       	st	Z, r24
					_delay_ms(50);
					HAL_Ultrasonic_Sensor_voidCalcDistancse(&LOC_f32Distance);
    5692:	ce 01       	movw	r24, r28
    5694:	89 58       	subi	r24, 0x89	; 137
    5696:	9f 4f       	sbci	r25, 0xFF	; 255
    5698:	0e 94 64 1a 	call	0x34c8	; 0x34c8 <HAL_Ultrasonic_Sensor_voidCalcDistancse>
					HAL_LCD_u8Clear();
    569c:	0e 94 19 26 	call	0x4c32	; 0x4c32 <HAL_LCD_u8Clear>
					HAL_LCD_u8SendString("Dir Right: ");
    56a0:	8a e8       	ldi	r24, 0x8A	; 138
    56a2:	90 e0       	ldi	r25, 0x00	; 0
    56a4:	0e 94 64 23 	call	0x46c8	; 0x46c8 <HAL_LCD_u8SendString>
					Glob_u16DirRight = LOC_f32Distance;
    56a8:	fe 01       	movw	r30, r28
    56aa:	e9 58       	subi	r30, 0x89	; 137
    56ac:	ff 4f       	sbci	r31, 0xFF	; 255
    56ae:	80 81       	ld	r24, Z
    56b0:	91 81       	ldd	r25, Z+1	; 0x01
    56b2:	a2 81       	ldd	r26, Z+2	; 0x02
    56b4:	b3 81       	ldd	r27, Z+3	; 0x03
    56b6:	bc 01       	movw	r22, r24
    56b8:	cd 01       	movw	r24, r26
    56ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    56be:	dc 01       	movw	r26, r24
    56c0:	cb 01       	movw	r24, r22
    56c2:	90 93 e7 01 	sts	0x01E7, r25
    56c6:	80 93 e6 01 	sts	0x01E6, r24
					HAL_LCD_u8SendNumber(Glob_u16DirRight);
    56ca:	80 91 e6 01 	lds	r24, 0x01E6
    56ce:	90 91 e7 01 	lds	r25, 0x01E7
    56d2:	0e 94 9a 23 	call	0x4734	; 0x4734 <HAL_LCD_u8SendNumber>
    56d6:	fe 01       	movw	r30, r28
    56d8:	ed 5b       	subi	r30, 0xBD	; 189
    56da:	ff 4f       	sbci	r31, 0xFF	; 255
    56dc:	80 e0       	ldi	r24, 0x00	; 0
    56de:	90 e0       	ldi	r25, 0x00	; 0
    56e0:	a8 e4       	ldi	r26, 0x48	; 72
    56e2:	b3 e4       	ldi	r27, 0x43	; 67
    56e4:	80 83       	st	Z, r24
    56e6:	91 83       	std	Z+1, r25	; 0x01
    56e8:	a2 83       	std	Z+2, r26	; 0x02
    56ea:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    56ec:	8e 01       	movw	r16, r28
    56ee:	01 5c       	subi	r16, 0xC1	; 193
    56f0:	1f 4f       	sbci	r17, 0xFF	; 255
    56f2:	fe 01       	movw	r30, r28
    56f4:	ed 5b       	subi	r30, 0xBD	; 189
    56f6:	ff 4f       	sbci	r31, 0xFF	; 255
    56f8:	60 81       	ld	r22, Z
    56fa:	71 81       	ldd	r23, Z+1	; 0x01
    56fc:	82 81       	ldd	r24, Z+2	; 0x02
    56fe:	93 81       	ldd	r25, Z+3	; 0x03
    5700:	20 e0       	ldi	r18, 0x00	; 0
    5702:	30 e0       	ldi	r19, 0x00	; 0
    5704:	4a e7       	ldi	r20, 0x7A	; 122
    5706:	55 e4       	ldi	r21, 0x45	; 69
    5708:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    570c:	dc 01       	movw	r26, r24
    570e:	cb 01       	movw	r24, r22
    5710:	f8 01       	movw	r30, r16
    5712:	80 83       	st	Z, r24
    5714:	91 83       	std	Z+1, r25	; 0x01
    5716:	a2 83       	std	Z+2, r26	; 0x02
    5718:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    571a:	fe 01       	movw	r30, r28
    571c:	ff 96       	adiw	r30, 0x3f	; 63
    571e:	60 81       	ld	r22, Z
    5720:	71 81       	ldd	r23, Z+1	; 0x01
    5722:	82 81       	ldd	r24, Z+2	; 0x02
    5724:	93 81       	ldd	r25, Z+3	; 0x03
    5726:	20 e0       	ldi	r18, 0x00	; 0
    5728:	30 e0       	ldi	r19, 0x00	; 0
    572a:	40 e8       	ldi	r20, 0x80	; 128
    572c:	5f e3       	ldi	r21, 0x3F	; 63
    572e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5732:	88 23       	and	r24, r24
    5734:	2c f4       	brge	.+10     	; 0x5740 <APP_Autonomous_Car_voidApp+0x63e>
		__ticks = 1;
    5736:	81 e0       	ldi	r24, 0x01	; 1
    5738:	90 e0       	ldi	r25, 0x00	; 0
    573a:	9e af       	std	Y+62, r25	; 0x3e
    573c:	8d af       	std	Y+61, r24	; 0x3d
    573e:	46 c0       	rjmp	.+140    	; 0x57cc <APP_Autonomous_Car_voidApp+0x6ca>
	else if (__tmp > 65535)
    5740:	fe 01       	movw	r30, r28
    5742:	ff 96       	adiw	r30, 0x3f	; 63
    5744:	60 81       	ld	r22, Z
    5746:	71 81       	ldd	r23, Z+1	; 0x01
    5748:	82 81       	ldd	r24, Z+2	; 0x02
    574a:	93 81       	ldd	r25, Z+3	; 0x03
    574c:	20 e0       	ldi	r18, 0x00	; 0
    574e:	3f ef       	ldi	r19, 0xFF	; 255
    5750:	4f e7       	ldi	r20, 0x7F	; 127
    5752:	57 e4       	ldi	r21, 0x47	; 71
    5754:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5758:	18 16       	cp	r1, r24
    575a:	64 f5       	brge	.+88     	; 0x57b4 <APP_Autonomous_Car_voidApp+0x6b2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    575c:	fe 01       	movw	r30, r28
    575e:	ed 5b       	subi	r30, 0xBD	; 189
    5760:	ff 4f       	sbci	r31, 0xFF	; 255
    5762:	60 81       	ld	r22, Z
    5764:	71 81       	ldd	r23, Z+1	; 0x01
    5766:	82 81       	ldd	r24, Z+2	; 0x02
    5768:	93 81       	ldd	r25, Z+3	; 0x03
    576a:	20 e0       	ldi	r18, 0x00	; 0
    576c:	30 e0       	ldi	r19, 0x00	; 0
    576e:	40 e2       	ldi	r20, 0x20	; 32
    5770:	51 e4       	ldi	r21, 0x41	; 65
    5772:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5776:	dc 01       	movw	r26, r24
    5778:	cb 01       	movw	r24, r22
    577a:	bc 01       	movw	r22, r24
    577c:	cd 01       	movw	r24, r26
    577e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5782:	dc 01       	movw	r26, r24
    5784:	cb 01       	movw	r24, r22
    5786:	9e af       	std	Y+62, r25	; 0x3e
    5788:	8d af       	std	Y+61, r24	; 0x3d
    578a:	0f c0       	rjmp	.+30     	; 0x57aa <APP_Autonomous_Car_voidApp+0x6a8>
    578c:	80 e9       	ldi	r24, 0x90	; 144
    578e:	91 e0       	ldi	r25, 0x01	; 1
    5790:	9c af       	std	Y+60, r25	; 0x3c
    5792:	8b af       	std	Y+59, r24	; 0x3b
    5794:	8b ad       	ldd	r24, Y+59	; 0x3b
    5796:	9c ad       	ldd	r25, Y+60	; 0x3c
    5798:	01 97       	sbiw	r24, 0x01	; 1
    579a:	f1 f7       	brne	.-4      	; 0x5798 <APP_Autonomous_Car_voidApp+0x696>
    579c:	9c af       	std	Y+60, r25	; 0x3c
    579e:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    57a0:	8d ad       	ldd	r24, Y+61	; 0x3d
    57a2:	9e ad       	ldd	r25, Y+62	; 0x3e
    57a4:	01 97       	sbiw	r24, 0x01	; 1
    57a6:	9e af       	std	Y+62, r25	; 0x3e
    57a8:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    57aa:	8d ad       	ldd	r24, Y+61	; 0x3d
    57ac:	9e ad       	ldd	r25, Y+62	; 0x3e
    57ae:	00 97       	sbiw	r24, 0x00	; 0
    57b0:	69 f7       	brne	.-38     	; 0x578c <APP_Autonomous_Car_voidApp+0x68a>
    57b2:	16 c0       	rjmp	.+44     	; 0x57e0 <APP_Autonomous_Car_voidApp+0x6de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    57b4:	fe 01       	movw	r30, r28
    57b6:	ff 96       	adiw	r30, 0x3f	; 63
    57b8:	60 81       	ld	r22, Z
    57ba:	71 81       	ldd	r23, Z+1	; 0x01
    57bc:	82 81       	ldd	r24, Z+2	; 0x02
    57be:	93 81       	ldd	r25, Z+3	; 0x03
    57c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    57c4:	dc 01       	movw	r26, r24
    57c6:	cb 01       	movw	r24, r22
    57c8:	9e af       	std	Y+62, r25	; 0x3e
    57ca:	8d af       	std	Y+61, r24	; 0x3d
    57cc:	8d ad       	ldd	r24, Y+61	; 0x3d
    57ce:	9e ad       	ldd	r25, Y+62	; 0x3e
    57d0:	9a af       	std	Y+58, r25	; 0x3a
    57d2:	89 af       	std	Y+57, r24	; 0x39
    57d4:	89 ad       	ldd	r24, Y+57	; 0x39
    57d6:	9a ad       	ldd	r25, Y+58	; 0x3a
    57d8:	01 97       	sbiw	r24, 0x01	; 1
    57da:	f1 f7       	brne	.-4      	; 0x57d8 <APP_Autonomous_Car_voidApp+0x6d6>
    57dc:	9a af       	std	Y+58, r25	; 0x3a
    57de:	89 af       	std	Y+57, r24	; 0x39
					_delay_ms(200);
					for (int j = MAX_CCW_ANGLE; j <= MAX_CW_ANGLE; j += NUM_2) {
    57e0:	fe 01       	movw	r30, r28
    57e2:	ed 58       	subi	r30, 0x8D	; 141
    57e4:	ff 4f       	sbci	r31, 0xFF	; 255
    57e6:	11 82       	std	Z+1, r1	; 0x01
    57e8:	10 82       	st	Z, r1
    57ea:	43 c1       	rjmp	.+646    	; 0x5a72 <APP_Autonomous_Car_voidApp+0x970>
						HAL_SM_voidSMSetAngle(j);
    57ec:	fe 01       	movw	r30, r28
    57ee:	ed 58       	subi	r30, 0x8D	; 141
    57f0:	ff 4f       	sbci	r31, 0xFF	; 255
    57f2:	80 81       	ld	r24, Z
    57f4:	0e 94 8c 1b 	call	0x3718	; 0x3718 <HAL_SM_voidSMSetAngle>
						if (j == MAX_CW_ANGLE) {
    57f8:	fe 01       	movw	r30, r28
    57fa:	ed 58       	subi	r30, 0x8D	; 141
    57fc:	ff 4f       	sbci	r31, 0xFF	; 255
    57fe:	80 81       	ld	r24, Z
    5800:	91 81       	ldd	r25, Z+1	; 0x01
    5802:	84 3b       	cpi	r24, 0xB4	; 180
    5804:	91 05       	cpc	r25, r1
    5806:	09 f0       	breq	.+2      	; 0x580a <APP_Autonomous_Car_voidApp+0x708>
    5808:	28 c1       	rjmp	.+592    	; 0x5a5a <APP_Autonomous_Car_voidApp+0x958>
    580a:	80 e0       	ldi	r24, 0x00	; 0
    580c:	90 e0       	ldi	r25, 0x00	; 0
    580e:	a8 e4       	ldi	r26, 0x48	; 72
    5810:	b2 e4       	ldi	r27, 0x42	; 66
    5812:	8d ab       	std	Y+53, r24	; 0x35
    5814:	9e ab       	std	Y+54, r25	; 0x36
    5816:	af ab       	std	Y+55, r26	; 0x37
    5818:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    581a:	6d a9       	ldd	r22, Y+53	; 0x35
    581c:	7e a9       	ldd	r23, Y+54	; 0x36
    581e:	8f a9       	ldd	r24, Y+55	; 0x37
    5820:	98 ad       	ldd	r25, Y+56	; 0x38
    5822:	20 e0       	ldi	r18, 0x00	; 0
    5824:	30 e0       	ldi	r19, 0x00	; 0
    5826:	4a e7       	ldi	r20, 0x7A	; 122
    5828:	55 e4       	ldi	r21, 0x45	; 69
    582a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    582e:	dc 01       	movw	r26, r24
    5830:	cb 01       	movw	r24, r22
    5832:	89 ab       	std	Y+49, r24	; 0x31
    5834:	9a ab       	std	Y+50, r25	; 0x32
    5836:	ab ab       	std	Y+51, r26	; 0x33
    5838:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    583a:	69 a9       	ldd	r22, Y+49	; 0x31
    583c:	7a a9       	ldd	r23, Y+50	; 0x32
    583e:	8b a9       	ldd	r24, Y+51	; 0x33
    5840:	9c a9       	ldd	r25, Y+52	; 0x34
    5842:	20 e0       	ldi	r18, 0x00	; 0
    5844:	30 e0       	ldi	r19, 0x00	; 0
    5846:	40 e8       	ldi	r20, 0x80	; 128
    5848:	5f e3       	ldi	r21, 0x3F	; 63
    584a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    584e:	88 23       	and	r24, r24
    5850:	2c f4       	brge	.+10     	; 0x585c <APP_Autonomous_Car_voidApp+0x75a>
		__ticks = 1;
    5852:	81 e0       	ldi	r24, 0x01	; 1
    5854:	90 e0       	ldi	r25, 0x00	; 0
    5856:	98 ab       	std	Y+48, r25	; 0x30
    5858:	8f a7       	std	Y+47, r24	; 0x2f
    585a:	3f c0       	rjmp	.+126    	; 0x58da <APP_Autonomous_Car_voidApp+0x7d8>
	else if (__tmp > 65535)
    585c:	69 a9       	ldd	r22, Y+49	; 0x31
    585e:	7a a9       	ldd	r23, Y+50	; 0x32
    5860:	8b a9       	ldd	r24, Y+51	; 0x33
    5862:	9c a9       	ldd	r25, Y+52	; 0x34
    5864:	20 e0       	ldi	r18, 0x00	; 0
    5866:	3f ef       	ldi	r19, 0xFF	; 255
    5868:	4f e7       	ldi	r20, 0x7F	; 127
    586a:	57 e4       	ldi	r21, 0x47	; 71
    586c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5870:	18 16       	cp	r1, r24
    5872:	4c f5       	brge	.+82     	; 0x58c6 <APP_Autonomous_Car_voidApp+0x7c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5874:	6d a9       	ldd	r22, Y+53	; 0x35
    5876:	7e a9       	ldd	r23, Y+54	; 0x36
    5878:	8f a9       	ldd	r24, Y+55	; 0x37
    587a:	98 ad       	ldd	r25, Y+56	; 0x38
    587c:	20 e0       	ldi	r18, 0x00	; 0
    587e:	30 e0       	ldi	r19, 0x00	; 0
    5880:	40 e2       	ldi	r20, 0x20	; 32
    5882:	51 e4       	ldi	r21, 0x41	; 65
    5884:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5888:	dc 01       	movw	r26, r24
    588a:	cb 01       	movw	r24, r22
    588c:	bc 01       	movw	r22, r24
    588e:	cd 01       	movw	r24, r26
    5890:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5894:	dc 01       	movw	r26, r24
    5896:	cb 01       	movw	r24, r22
    5898:	98 ab       	std	Y+48, r25	; 0x30
    589a:	8f a7       	std	Y+47, r24	; 0x2f
    589c:	0f c0       	rjmp	.+30     	; 0x58bc <APP_Autonomous_Car_voidApp+0x7ba>
    589e:	80 e9       	ldi	r24, 0x90	; 144
    58a0:	91 e0       	ldi	r25, 0x01	; 1
    58a2:	9e a7       	std	Y+46, r25	; 0x2e
    58a4:	8d a7       	std	Y+45, r24	; 0x2d
    58a6:	8d a5       	ldd	r24, Y+45	; 0x2d
    58a8:	9e a5       	ldd	r25, Y+46	; 0x2e
    58aa:	01 97       	sbiw	r24, 0x01	; 1
    58ac:	f1 f7       	brne	.-4      	; 0x58aa <APP_Autonomous_Car_voidApp+0x7a8>
    58ae:	9e a7       	std	Y+46, r25	; 0x2e
    58b0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    58b2:	8f a5       	ldd	r24, Y+47	; 0x2f
    58b4:	98 a9       	ldd	r25, Y+48	; 0x30
    58b6:	01 97       	sbiw	r24, 0x01	; 1
    58b8:	98 ab       	std	Y+48, r25	; 0x30
    58ba:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    58bc:	8f a5       	ldd	r24, Y+47	; 0x2f
    58be:	98 a9       	ldd	r25, Y+48	; 0x30
    58c0:	00 97       	sbiw	r24, 0x00	; 0
    58c2:	69 f7       	brne	.-38     	; 0x589e <APP_Autonomous_Car_voidApp+0x79c>
    58c4:	14 c0       	rjmp	.+40     	; 0x58ee <APP_Autonomous_Car_voidApp+0x7ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    58c6:	69 a9       	ldd	r22, Y+49	; 0x31
    58c8:	7a a9       	ldd	r23, Y+50	; 0x32
    58ca:	8b a9       	ldd	r24, Y+51	; 0x33
    58cc:	9c a9       	ldd	r25, Y+52	; 0x34
    58ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    58d2:	dc 01       	movw	r26, r24
    58d4:	cb 01       	movw	r24, r22
    58d6:	98 ab       	std	Y+48, r25	; 0x30
    58d8:	8f a7       	std	Y+47, r24	; 0x2f
    58da:	8f a5       	ldd	r24, Y+47	; 0x2f
    58dc:	98 a9       	ldd	r25, Y+48	; 0x30
    58de:	9c a7       	std	Y+44, r25	; 0x2c
    58e0:	8b a7       	std	Y+43, r24	; 0x2b
    58e2:	8b a5       	ldd	r24, Y+43	; 0x2b
    58e4:	9c a5       	ldd	r25, Y+44	; 0x2c
    58e6:	01 97       	sbiw	r24, 0x01	; 1
    58e8:	f1 f7       	brne	.-4      	; 0x58e6 <APP_Autonomous_Car_voidApp+0x7e4>
    58ea:	9c a7       	std	Y+44, r25	; 0x2c
    58ec:	8b a7       	std	Y+43, r24	; 0x2b
							_delay_ms(50);
							HAL_Ultrasonic_Sensor_voidCalcDistancse(
    58ee:	ce 01       	movw	r24, r28
    58f0:	89 58       	subi	r24, 0x89	; 137
    58f2:	9f 4f       	sbci	r25, 0xFF	; 255
    58f4:	0e 94 64 1a 	call	0x34c8	; 0x34c8 <HAL_Ultrasonic_Sensor_voidCalcDistancse>
									&LOC_f32Distance);
							HAL_LCD_u8Clear();
    58f8:	0e 94 19 26 	call	0x4c32	; 0x4c32 <HAL_LCD_u8Clear>
							HAL_LCD_u8SendString("Dir Left: ");
    58fc:	86 e9       	ldi	r24, 0x96	; 150
    58fe:	90 e0       	ldi	r25, 0x00	; 0
    5900:	0e 94 64 23 	call	0x46c8	; 0x46c8 <HAL_LCD_u8SendString>
							Glob_u16DirLeft = LOC_f32Distance;
    5904:	fe 01       	movw	r30, r28
    5906:	e9 58       	subi	r30, 0x89	; 137
    5908:	ff 4f       	sbci	r31, 0xFF	; 255
    590a:	80 81       	ld	r24, Z
    590c:	91 81       	ldd	r25, Z+1	; 0x01
    590e:	a2 81       	ldd	r26, Z+2	; 0x02
    5910:	b3 81       	ldd	r27, Z+3	; 0x03
    5912:	bc 01       	movw	r22, r24
    5914:	cd 01       	movw	r24, r26
    5916:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    591a:	dc 01       	movw	r26, r24
    591c:	cb 01       	movw	r24, r22
    591e:	90 93 e5 01 	sts	0x01E5, r25
    5922:	80 93 e4 01 	sts	0x01E4, r24
							HAL_LCD_u8SendNumber(Glob_u16DirLeft);
    5926:	80 91 e4 01 	lds	r24, 0x01E4
    592a:	90 91 e5 01 	lds	r25, 0x01E5
    592e:	0e 94 9a 23 	call	0x4734	; 0x4734 <HAL_LCD_u8SendNumber>
    5932:	80 e0       	ldi	r24, 0x00	; 0
    5934:	90 e0       	ldi	r25, 0x00	; 0
    5936:	a8 e4       	ldi	r26, 0x48	; 72
    5938:	b3 e4       	ldi	r27, 0x43	; 67
    593a:	8f a3       	std	Y+39, r24	; 0x27
    593c:	98 a7       	std	Y+40, r25	; 0x28
    593e:	a9 a7       	std	Y+41, r26	; 0x29
    5940:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5942:	6f a1       	ldd	r22, Y+39	; 0x27
    5944:	78 a5       	ldd	r23, Y+40	; 0x28
    5946:	89 a5       	ldd	r24, Y+41	; 0x29
    5948:	9a a5       	ldd	r25, Y+42	; 0x2a
    594a:	20 e0       	ldi	r18, 0x00	; 0
    594c:	30 e0       	ldi	r19, 0x00	; 0
    594e:	4a e7       	ldi	r20, 0x7A	; 122
    5950:	55 e4       	ldi	r21, 0x45	; 69
    5952:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5956:	dc 01       	movw	r26, r24
    5958:	cb 01       	movw	r24, r22
    595a:	8b a3       	std	Y+35, r24	; 0x23
    595c:	9c a3       	std	Y+36, r25	; 0x24
    595e:	ad a3       	std	Y+37, r26	; 0x25
    5960:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    5962:	6b a1       	ldd	r22, Y+35	; 0x23
    5964:	7c a1       	ldd	r23, Y+36	; 0x24
    5966:	8d a1       	ldd	r24, Y+37	; 0x25
    5968:	9e a1       	ldd	r25, Y+38	; 0x26
    596a:	20 e0       	ldi	r18, 0x00	; 0
    596c:	30 e0       	ldi	r19, 0x00	; 0
    596e:	40 e8       	ldi	r20, 0x80	; 128
    5970:	5f e3       	ldi	r21, 0x3F	; 63
    5972:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5976:	88 23       	and	r24, r24
    5978:	2c f4       	brge	.+10     	; 0x5984 <APP_Autonomous_Car_voidApp+0x882>
		__ticks = 1;
    597a:	81 e0       	ldi	r24, 0x01	; 1
    597c:	90 e0       	ldi	r25, 0x00	; 0
    597e:	9a a3       	std	Y+34, r25	; 0x22
    5980:	89 a3       	std	Y+33, r24	; 0x21
    5982:	3f c0       	rjmp	.+126    	; 0x5a02 <APP_Autonomous_Car_voidApp+0x900>
	else if (__tmp > 65535)
    5984:	6b a1       	ldd	r22, Y+35	; 0x23
    5986:	7c a1       	ldd	r23, Y+36	; 0x24
    5988:	8d a1       	ldd	r24, Y+37	; 0x25
    598a:	9e a1       	ldd	r25, Y+38	; 0x26
    598c:	20 e0       	ldi	r18, 0x00	; 0
    598e:	3f ef       	ldi	r19, 0xFF	; 255
    5990:	4f e7       	ldi	r20, 0x7F	; 127
    5992:	57 e4       	ldi	r21, 0x47	; 71
    5994:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5998:	18 16       	cp	r1, r24
    599a:	4c f5       	brge	.+82     	; 0x59ee <APP_Autonomous_Car_voidApp+0x8ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    599c:	6f a1       	ldd	r22, Y+39	; 0x27
    599e:	78 a5       	ldd	r23, Y+40	; 0x28
    59a0:	89 a5       	ldd	r24, Y+41	; 0x29
    59a2:	9a a5       	ldd	r25, Y+42	; 0x2a
    59a4:	20 e0       	ldi	r18, 0x00	; 0
    59a6:	30 e0       	ldi	r19, 0x00	; 0
    59a8:	40 e2       	ldi	r20, 0x20	; 32
    59aa:	51 e4       	ldi	r21, 0x41	; 65
    59ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    59b0:	dc 01       	movw	r26, r24
    59b2:	cb 01       	movw	r24, r22
    59b4:	bc 01       	movw	r22, r24
    59b6:	cd 01       	movw	r24, r26
    59b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    59bc:	dc 01       	movw	r26, r24
    59be:	cb 01       	movw	r24, r22
    59c0:	9a a3       	std	Y+34, r25	; 0x22
    59c2:	89 a3       	std	Y+33, r24	; 0x21
    59c4:	0f c0       	rjmp	.+30     	; 0x59e4 <APP_Autonomous_Car_voidApp+0x8e2>
    59c6:	80 e9       	ldi	r24, 0x90	; 144
    59c8:	91 e0       	ldi	r25, 0x01	; 1
    59ca:	98 a3       	std	Y+32, r25	; 0x20
    59cc:	8f 8f       	std	Y+31, r24	; 0x1f
    59ce:	8f 8d       	ldd	r24, Y+31	; 0x1f
    59d0:	98 a1       	ldd	r25, Y+32	; 0x20
    59d2:	01 97       	sbiw	r24, 0x01	; 1
    59d4:	f1 f7       	brne	.-4      	; 0x59d2 <APP_Autonomous_Car_voidApp+0x8d0>
    59d6:	98 a3       	std	Y+32, r25	; 0x20
    59d8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    59da:	89 a1       	ldd	r24, Y+33	; 0x21
    59dc:	9a a1       	ldd	r25, Y+34	; 0x22
    59de:	01 97       	sbiw	r24, 0x01	; 1
    59e0:	9a a3       	std	Y+34, r25	; 0x22
    59e2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    59e4:	89 a1       	ldd	r24, Y+33	; 0x21
    59e6:	9a a1       	ldd	r25, Y+34	; 0x22
    59e8:	00 97       	sbiw	r24, 0x00	; 0
    59ea:	69 f7       	brne	.-38     	; 0x59c6 <APP_Autonomous_Car_voidApp+0x8c4>
    59ec:	14 c0       	rjmp	.+40     	; 0x5a16 <APP_Autonomous_Car_voidApp+0x914>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    59ee:	6b a1       	ldd	r22, Y+35	; 0x23
    59f0:	7c a1       	ldd	r23, Y+36	; 0x24
    59f2:	8d a1       	ldd	r24, Y+37	; 0x25
    59f4:	9e a1       	ldd	r25, Y+38	; 0x26
    59f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    59fa:	dc 01       	movw	r26, r24
    59fc:	cb 01       	movw	r24, r22
    59fe:	9a a3       	std	Y+34, r25	; 0x22
    5a00:	89 a3       	std	Y+33, r24	; 0x21
    5a02:	89 a1       	ldd	r24, Y+33	; 0x21
    5a04:	9a a1       	ldd	r25, Y+34	; 0x22
    5a06:	9e 8f       	std	Y+30, r25	; 0x1e
    5a08:	8d 8f       	std	Y+29, r24	; 0x1d
    5a0a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5a0c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5a0e:	01 97       	sbiw	r24, 0x01	; 1
    5a10:	f1 f7       	brne	.-4      	; 0x5a0e <APP_Autonomous_Car_voidApp+0x90c>
    5a12:	9e 8f       	std	Y+30, r25	; 0x1e
    5a14:	8d 8f       	std	Y+29, r24	; 0x1d
							_delay_ms(200);
							for (int k = MAX_CW_ANGLE; k >= START_ANGLE; k -= NUM_2) {
    5a16:	fe 01       	movw	r30, r28
    5a18:	ef 58       	subi	r30, 0x8F	; 143
    5a1a:	ff 4f       	sbci	r31, 0xFF	; 255
    5a1c:	84 eb       	ldi	r24, 0xB4	; 180
    5a1e:	90 e0       	ldi	r25, 0x00	; 0
    5a20:	91 83       	std	Z+1, r25	; 0x01
    5a22:	80 83       	st	Z, r24
    5a24:	12 c0       	rjmp	.+36     	; 0x5a4a <APP_Autonomous_Car_voidApp+0x948>
								HAL_SM_voidSMSetAngle(k);
    5a26:	fe 01       	movw	r30, r28
    5a28:	ef 58       	subi	r30, 0x8F	; 143
    5a2a:	ff 4f       	sbci	r31, 0xFF	; 255
    5a2c:	80 81       	ld	r24, Z
    5a2e:	0e 94 8c 1b 	call	0x3718	; 0x3718 <HAL_SM_voidSMSetAngle>
							HAL_LCD_u8Clear();
							HAL_LCD_u8SendString("Dir Left: ");
							Glob_u16DirLeft = LOC_f32Distance;
							HAL_LCD_u8SendNumber(Glob_u16DirLeft);
							_delay_ms(200);
							for (int k = MAX_CW_ANGLE; k >= START_ANGLE; k -= NUM_2) {
    5a32:	de 01       	movw	r26, r28
    5a34:	af 58       	subi	r26, 0x8F	; 143
    5a36:	bf 4f       	sbci	r27, 0xFF	; 255
    5a38:	fe 01       	movw	r30, r28
    5a3a:	ef 58       	subi	r30, 0x8F	; 143
    5a3c:	ff 4f       	sbci	r31, 0xFF	; 255
    5a3e:	80 81       	ld	r24, Z
    5a40:	91 81       	ldd	r25, Z+1	; 0x01
    5a42:	02 97       	sbiw	r24, 0x02	; 2
    5a44:	11 96       	adiw	r26, 0x01	; 1
    5a46:	9c 93       	st	X, r25
    5a48:	8e 93       	st	-X, r24
    5a4a:	fe 01       	movw	r30, r28
    5a4c:	ef 58       	subi	r30, 0x8F	; 143
    5a4e:	ff 4f       	sbci	r31, 0xFF	; 255
    5a50:	80 81       	ld	r24, Z
    5a52:	91 81       	ldd	r25, Z+1	; 0x01
    5a54:	8a 35       	cpi	r24, 0x5A	; 90
    5a56:	91 05       	cpc	r25, r1
    5a58:	34 f7       	brge	.-52     	; 0x5a26 <APP_Autonomous_Car_voidApp+0x924>
					HAL_LCD_u8Clear();
					HAL_LCD_u8SendString("Dir Right: ");
					Glob_u16DirRight = LOC_f32Distance;
					HAL_LCD_u8SendNumber(Glob_u16DirRight);
					_delay_ms(200);
					for (int j = MAX_CCW_ANGLE; j <= MAX_CW_ANGLE; j += NUM_2) {
    5a5a:	de 01       	movw	r26, r28
    5a5c:	ad 58       	subi	r26, 0x8D	; 141
    5a5e:	bf 4f       	sbci	r27, 0xFF	; 255
    5a60:	fe 01       	movw	r30, r28
    5a62:	ed 58       	subi	r30, 0x8D	; 141
    5a64:	ff 4f       	sbci	r31, 0xFF	; 255
    5a66:	80 81       	ld	r24, Z
    5a68:	91 81       	ldd	r25, Z+1	; 0x01
    5a6a:	02 96       	adiw	r24, 0x02	; 2
    5a6c:	11 96       	adiw	r26, 0x01	; 1
    5a6e:	9c 93       	st	X, r25
    5a70:	8e 93       	st	-X, r24
    5a72:	fe 01       	movw	r30, r28
    5a74:	ed 58       	subi	r30, 0x8D	; 141
    5a76:	ff 4f       	sbci	r31, 0xFF	; 255
    5a78:	80 81       	ld	r24, Z
    5a7a:	91 81       	ldd	r25, Z+1	; 0x01
    5a7c:	85 3b       	cpi	r24, 0xB5	; 181
    5a7e:	91 05       	cpc	r25, r1
    5a80:	0c f4       	brge	.+2      	; 0x5a84 <APP_Autonomous_Car_voidApp+0x982>
    5a82:	b4 ce       	rjmp	.-664    	; 0x57ec <APP_Autonomous_Car_voidApp+0x6ea>
				HAL_void_H_BridgeBack(MAX_SPEED);
				_delay_ms(1000);
			}
			HAL_void_H_BridgeStop(NUM0);
			HAL_LED_u8LedMode(PortA, Pin1, LED_ON);
			for (int i = START_ANGLE; i >= MAX_CCW_ANGLE; i -= NUM_2) {
    5a84:	de 01       	movw	r26, r28
    5a86:	ab 58       	subi	r26, 0x8B	; 139
    5a88:	bf 4f       	sbci	r27, 0xFF	; 255
    5a8a:	fe 01       	movw	r30, r28
    5a8c:	eb 58       	subi	r30, 0x8B	; 139
    5a8e:	ff 4f       	sbci	r31, 0xFF	; 255
    5a90:	80 81       	ld	r24, Z
    5a92:	91 81       	ldd	r25, Z+1	; 0x01
    5a94:	02 97       	sbiw	r24, 0x02	; 2
    5a96:	11 96       	adiw	r26, 0x01	; 1
    5a98:	9c 93       	st	X, r25
    5a9a:	8e 93       	st	-X, r24
    5a9c:	fe 01       	movw	r30, r28
    5a9e:	eb 58       	subi	r30, 0x8B	; 139
    5aa0:	ff 4f       	sbci	r31, 0xFF	; 255
    5aa2:	80 81       	ld	r24, Z
    5aa4:	91 81       	ldd	r25, Z+1	; 0x01
    5aa6:	99 23       	and	r25, r25
    5aa8:	0c f0       	brlt	.+2      	; 0x5aac <APP_Autonomous_Car_voidApp+0x9aa>
    5aaa:	32 cd       	rjmp	.-1436   	; 0x5510 <APP_Autonomous_Car_voidApp+0x40e>
							}
						}
					}
				}
			}
			if (Glob_u16DirLeft > Glob_u16DirRight) {
    5aac:	20 91 e4 01 	lds	r18, 0x01E4
    5ab0:	30 91 e5 01 	lds	r19, 0x01E5
    5ab4:	80 91 e6 01 	lds	r24, 0x01E6
    5ab8:	90 91 e7 01 	lds	r25, 0x01E7
    5abc:	82 17       	cp	r24, r18
    5abe:	93 07       	cpc	r25, r19
    5ac0:	08 f0       	brcs	.+2      	; 0x5ac4 <APP_Autonomous_Car_voidApp+0x9c2>
    5ac2:	93 c0       	rjmp	.+294    	; 0x5bea <APP_Autonomous_Car_voidApp+0xae8>
				HAL_LCD_u8Clear();
    5ac4:	0e 94 19 26 	call	0x4c32	; 0x4c32 <HAL_LCD_u8Clear>
				HAL_LCD_u8SendString("Moving Left...");
    5ac8:	81 ea       	ldi	r24, 0xA1	; 161
    5aca:	90 e0       	ldi	r25, 0x00	; 0
    5acc:	0e 94 64 23 	call	0x46c8	; 0x46c8 <HAL_LCD_u8SendString>
				HAL_LCD_u8GoTo(Second_Line,NUM0);
    5ad0:	83 e0       	ldi	r24, 0x03	; 3
    5ad2:	60 e0       	ldi	r22, 0x00	; 0
    5ad4:	0e 94 bd 23 	call	0x477a	; 0x477a <HAL_LCD_u8GoTo>
				HAL_LCD_u8SendString("Distance: ");
    5ad8:	80 e7       	ldi	r24, 0x70	; 112
    5ada:	90 e0       	ldi	r25, 0x00	; 0
    5adc:	0e 94 64 23 	call	0x46c8	; 0x46c8 <HAL_LCD_u8SendString>
				HAL_LCD_u8SendNumber((u16)LOC_f32Distance);
    5ae0:	fe 01       	movw	r30, r28
    5ae2:	e9 58       	subi	r30, 0x89	; 137
    5ae4:	ff 4f       	sbci	r31, 0xFF	; 255
    5ae6:	80 81       	ld	r24, Z
    5ae8:	91 81       	ldd	r25, Z+1	; 0x01
    5aea:	a2 81       	ldd	r26, Z+2	; 0x02
    5aec:	b3 81       	ldd	r27, Z+3	; 0x03
    5aee:	bc 01       	movw	r22, r24
    5af0:	cd 01       	movw	r24, r26
    5af2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5af6:	dc 01       	movw	r26, r24
    5af8:	cb 01       	movw	r24, r22
    5afa:	0e 94 9a 23 	call	0x4734	; 0x4734 <HAL_LCD_u8SendNumber>
				HAL_void_H_BridgeCCW(MAX_SPEED);
    5afe:	83 e6       	ldi	r24, 0x63	; 99
    5b00:	0e 94 c5 27 	call	0x4f8a	; 0x4f8a <HAL_void_H_BridgeCCW>
    5b04:	80 e0       	ldi	r24, 0x00	; 0
    5b06:	90 e0       	ldi	r25, 0x00	; 0
    5b08:	a1 e6       	ldi	r26, 0x61	; 97
    5b0a:	b4 e4       	ldi	r27, 0x44	; 68
    5b0c:	89 8f       	std	Y+25, r24	; 0x19
    5b0e:	9a 8f       	std	Y+26, r25	; 0x1a
    5b10:	ab 8f       	std	Y+27, r26	; 0x1b
    5b12:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5b14:	69 8d       	ldd	r22, Y+25	; 0x19
    5b16:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5b18:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5b1a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5b1c:	20 e0       	ldi	r18, 0x00	; 0
    5b1e:	30 e0       	ldi	r19, 0x00	; 0
    5b20:	4a e7       	ldi	r20, 0x7A	; 122
    5b22:	55 e4       	ldi	r21, 0x45	; 69
    5b24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5b28:	dc 01       	movw	r26, r24
    5b2a:	cb 01       	movw	r24, r22
    5b2c:	8d 8b       	std	Y+21, r24	; 0x15
    5b2e:	9e 8b       	std	Y+22, r25	; 0x16
    5b30:	af 8b       	std	Y+23, r26	; 0x17
    5b32:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    5b34:	6d 89       	ldd	r22, Y+21	; 0x15
    5b36:	7e 89       	ldd	r23, Y+22	; 0x16
    5b38:	8f 89       	ldd	r24, Y+23	; 0x17
    5b3a:	98 8d       	ldd	r25, Y+24	; 0x18
    5b3c:	20 e0       	ldi	r18, 0x00	; 0
    5b3e:	30 e0       	ldi	r19, 0x00	; 0
    5b40:	40 e8       	ldi	r20, 0x80	; 128
    5b42:	5f e3       	ldi	r21, 0x3F	; 63
    5b44:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5b48:	88 23       	and	r24, r24
    5b4a:	2c f4       	brge	.+10     	; 0x5b56 <APP_Autonomous_Car_voidApp+0xa54>
		__ticks = 1;
    5b4c:	81 e0       	ldi	r24, 0x01	; 1
    5b4e:	90 e0       	ldi	r25, 0x00	; 0
    5b50:	9c 8b       	std	Y+20, r25	; 0x14
    5b52:	8b 8b       	std	Y+19, r24	; 0x13
    5b54:	3f c0       	rjmp	.+126    	; 0x5bd4 <APP_Autonomous_Car_voidApp+0xad2>
	else if (__tmp > 65535)
    5b56:	6d 89       	ldd	r22, Y+21	; 0x15
    5b58:	7e 89       	ldd	r23, Y+22	; 0x16
    5b5a:	8f 89       	ldd	r24, Y+23	; 0x17
    5b5c:	98 8d       	ldd	r25, Y+24	; 0x18
    5b5e:	20 e0       	ldi	r18, 0x00	; 0
    5b60:	3f ef       	ldi	r19, 0xFF	; 255
    5b62:	4f e7       	ldi	r20, 0x7F	; 127
    5b64:	57 e4       	ldi	r21, 0x47	; 71
    5b66:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5b6a:	18 16       	cp	r1, r24
    5b6c:	4c f5       	brge	.+82     	; 0x5bc0 <APP_Autonomous_Car_voidApp+0xabe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5b6e:	69 8d       	ldd	r22, Y+25	; 0x19
    5b70:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5b72:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5b74:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5b76:	20 e0       	ldi	r18, 0x00	; 0
    5b78:	30 e0       	ldi	r19, 0x00	; 0
    5b7a:	40 e2       	ldi	r20, 0x20	; 32
    5b7c:	51 e4       	ldi	r21, 0x41	; 65
    5b7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5b82:	dc 01       	movw	r26, r24
    5b84:	cb 01       	movw	r24, r22
    5b86:	bc 01       	movw	r22, r24
    5b88:	cd 01       	movw	r24, r26
    5b8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5b8e:	dc 01       	movw	r26, r24
    5b90:	cb 01       	movw	r24, r22
    5b92:	9c 8b       	std	Y+20, r25	; 0x14
    5b94:	8b 8b       	std	Y+19, r24	; 0x13
    5b96:	0f c0       	rjmp	.+30     	; 0x5bb6 <APP_Autonomous_Car_voidApp+0xab4>
    5b98:	80 e9       	ldi	r24, 0x90	; 144
    5b9a:	91 e0       	ldi	r25, 0x01	; 1
    5b9c:	9a 8b       	std	Y+18, r25	; 0x12
    5b9e:	89 8b       	std	Y+17, r24	; 0x11
    5ba0:	89 89       	ldd	r24, Y+17	; 0x11
    5ba2:	9a 89       	ldd	r25, Y+18	; 0x12
    5ba4:	01 97       	sbiw	r24, 0x01	; 1
    5ba6:	f1 f7       	brne	.-4      	; 0x5ba4 <APP_Autonomous_Car_voidApp+0xaa2>
    5ba8:	9a 8b       	std	Y+18, r25	; 0x12
    5baa:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5bac:	8b 89       	ldd	r24, Y+19	; 0x13
    5bae:	9c 89       	ldd	r25, Y+20	; 0x14
    5bb0:	01 97       	sbiw	r24, 0x01	; 1
    5bb2:	9c 8b       	std	Y+20, r25	; 0x14
    5bb4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5bb6:	8b 89       	ldd	r24, Y+19	; 0x13
    5bb8:	9c 89       	ldd	r25, Y+20	; 0x14
    5bba:	00 97       	sbiw	r24, 0x00	; 0
    5bbc:	69 f7       	brne	.-38     	; 0x5b98 <APP_Autonomous_Car_voidApp+0xa96>
    5bbe:	c1 ca       	rjmp	.-2686   	; 0x5142 <APP_Autonomous_Car_voidApp+0x40>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5bc0:	6d 89       	ldd	r22, Y+21	; 0x15
    5bc2:	7e 89       	ldd	r23, Y+22	; 0x16
    5bc4:	8f 89       	ldd	r24, Y+23	; 0x17
    5bc6:	98 8d       	ldd	r25, Y+24	; 0x18
    5bc8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5bcc:	dc 01       	movw	r26, r24
    5bce:	cb 01       	movw	r24, r22
    5bd0:	9c 8b       	std	Y+20, r25	; 0x14
    5bd2:	8b 8b       	std	Y+19, r24	; 0x13
    5bd4:	8b 89       	ldd	r24, Y+19	; 0x13
    5bd6:	9c 89       	ldd	r25, Y+20	; 0x14
    5bd8:	98 8b       	std	Y+16, r25	; 0x10
    5bda:	8f 87       	std	Y+15, r24	; 0x0f
    5bdc:	8f 85       	ldd	r24, Y+15	; 0x0f
    5bde:	98 89       	ldd	r25, Y+16	; 0x10
    5be0:	01 97       	sbiw	r24, 0x01	; 1
    5be2:	f1 f7       	brne	.-4      	; 0x5be0 <APP_Autonomous_Car_voidApp+0xade>
    5be4:	98 8b       	std	Y+16, r25	; 0x10
    5be6:	8f 87       	std	Y+15, r24	; 0x0f
    5be8:	ac ca       	rjmp	.-2728   	; 0x5142 <APP_Autonomous_Car_voidApp+0x40>
				_delay_ms(900);
			} else if (Glob_u16DirRight >= Glob_u16DirLeft) {
    5bea:	20 91 e6 01 	lds	r18, 0x01E6
    5bee:	30 91 e7 01 	lds	r19, 0x01E7
    5bf2:	80 91 e4 01 	lds	r24, 0x01E4
    5bf6:	90 91 e5 01 	lds	r25, 0x01E5
    5bfa:	28 17       	cp	r18, r24
    5bfc:	39 07       	cpc	r19, r25
    5bfe:	08 f4       	brcc	.+2      	; 0x5c02 <APP_Autonomous_Car_voidApp+0xb00>
    5c00:	a0 ca       	rjmp	.-2752   	; 0x5142 <APP_Autonomous_Car_voidApp+0x40>
				HAL_LCD_u8Clear();
    5c02:	0e 94 19 26 	call	0x4c32	; 0x4c32 <HAL_LCD_u8Clear>
				HAL_LCD_u8SendString("Moving Right...");
    5c06:	80 eb       	ldi	r24, 0xB0	; 176
    5c08:	90 e0       	ldi	r25, 0x00	; 0
    5c0a:	0e 94 64 23 	call	0x46c8	; 0x46c8 <HAL_LCD_u8SendString>
				HAL_LCD_u8GoTo(Second_Line,NUM0);
    5c0e:	83 e0       	ldi	r24, 0x03	; 3
    5c10:	60 e0       	ldi	r22, 0x00	; 0
    5c12:	0e 94 bd 23 	call	0x477a	; 0x477a <HAL_LCD_u8GoTo>
				HAL_LCD_u8SendString("Distance: ");
    5c16:	80 e7       	ldi	r24, 0x70	; 112
    5c18:	90 e0       	ldi	r25, 0x00	; 0
    5c1a:	0e 94 64 23 	call	0x46c8	; 0x46c8 <HAL_LCD_u8SendString>
				HAL_LCD_u8SendNumber((u16)LOC_f32Distance);
    5c1e:	fe 01       	movw	r30, r28
    5c20:	e9 58       	subi	r30, 0x89	; 137
    5c22:	ff 4f       	sbci	r31, 0xFF	; 255
    5c24:	80 81       	ld	r24, Z
    5c26:	91 81       	ldd	r25, Z+1	; 0x01
    5c28:	a2 81       	ldd	r26, Z+2	; 0x02
    5c2a:	b3 81       	ldd	r27, Z+3	; 0x03
    5c2c:	bc 01       	movw	r22, r24
    5c2e:	cd 01       	movw	r24, r26
    5c30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5c34:	dc 01       	movw	r26, r24
    5c36:	cb 01       	movw	r24, r22
    5c38:	0e 94 9a 23 	call	0x4734	; 0x4734 <HAL_LCD_u8SendNumber>
				HAL_void_H_BridgeCW(MAX_SPEED);
    5c3c:	83 e6       	ldi	r24, 0x63	; 99
    5c3e:	0e 94 49 27 	call	0x4e92	; 0x4e92 <HAL_void_H_BridgeCW>
    5c42:	80 e0       	ldi	r24, 0x00	; 0
    5c44:	90 e0       	ldi	r25, 0x00	; 0
    5c46:	a1 e6       	ldi	r26, 0x61	; 97
    5c48:	b4 e4       	ldi	r27, 0x44	; 68
    5c4a:	8b 87       	std	Y+11, r24	; 0x0b
    5c4c:	9c 87       	std	Y+12, r25	; 0x0c
    5c4e:	ad 87       	std	Y+13, r26	; 0x0d
    5c50:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5c52:	6b 85       	ldd	r22, Y+11	; 0x0b
    5c54:	7c 85       	ldd	r23, Y+12	; 0x0c
    5c56:	8d 85       	ldd	r24, Y+13	; 0x0d
    5c58:	9e 85       	ldd	r25, Y+14	; 0x0e
    5c5a:	20 e0       	ldi	r18, 0x00	; 0
    5c5c:	30 e0       	ldi	r19, 0x00	; 0
    5c5e:	4a e7       	ldi	r20, 0x7A	; 122
    5c60:	55 e4       	ldi	r21, 0x45	; 69
    5c62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5c66:	dc 01       	movw	r26, r24
    5c68:	cb 01       	movw	r24, r22
    5c6a:	8f 83       	std	Y+7, r24	; 0x07
    5c6c:	98 87       	std	Y+8, r25	; 0x08
    5c6e:	a9 87       	std	Y+9, r26	; 0x09
    5c70:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5c72:	6f 81       	ldd	r22, Y+7	; 0x07
    5c74:	78 85       	ldd	r23, Y+8	; 0x08
    5c76:	89 85       	ldd	r24, Y+9	; 0x09
    5c78:	9a 85       	ldd	r25, Y+10	; 0x0a
    5c7a:	20 e0       	ldi	r18, 0x00	; 0
    5c7c:	30 e0       	ldi	r19, 0x00	; 0
    5c7e:	40 e8       	ldi	r20, 0x80	; 128
    5c80:	5f e3       	ldi	r21, 0x3F	; 63
    5c82:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5c86:	88 23       	and	r24, r24
    5c88:	2c f4       	brge	.+10     	; 0x5c94 <APP_Autonomous_Car_voidApp+0xb92>
		__ticks = 1;
    5c8a:	81 e0       	ldi	r24, 0x01	; 1
    5c8c:	90 e0       	ldi	r25, 0x00	; 0
    5c8e:	9e 83       	std	Y+6, r25	; 0x06
    5c90:	8d 83       	std	Y+5, r24	; 0x05
    5c92:	3f c0       	rjmp	.+126    	; 0x5d12 <APP_Autonomous_Car_voidApp+0xc10>
	else if (__tmp > 65535)
    5c94:	6f 81       	ldd	r22, Y+7	; 0x07
    5c96:	78 85       	ldd	r23, Y+8	; 0x08
    5c98:	89 85       	ldd	r24, Y+9	; 0x09
    5c9a:	9a 85       	ldd	r25, Y+10	; 0x0a
    5c9c:	20 e0       	ldi	r18, 0x00	; 0
    5c9e:	3f ef       	ldi	r19, 0xFF	; 255
    5ca0:	4f e7       	ldi	r20, 0x7F	; 127
    5ca2:	57 e4       	ldi	r21, 0x47	; 71
    5ca4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5ca8:	18 16       	cp	r1, r24
    5caa:	4c f5       	brge	.+82     	; 0x5cfe <APP_Autonomous_Car_voidApp+0xbfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5cac:	6b 85       	ldd	r22, Y+11	; 0x0b
    5cae:	7c 85       	ldd	r23, Y+12	; 0x0c
    5cb0:	8d 85       	ldd	r24, Y+13	; 0x0d
    5cb2:	9e 85       	ldd	r25, Y+14	; 0x0e
    5cb4:	20 e0       	ldi	r18, 0x00	; 0
    5cb6:	30 e0       	ldi	r19, 0x00	; 0
    5cb8:	40 e2       	ldi	r20, 0x20	; 32
    5cba:	51 e4       	ldi	r21, 0x41	; 65
    5cbc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5cc0:	dc 01       	movw	r26, r24
    5cc2:	cb 01       	movw	r24, r22
    5cc4:	bc 01       	movw	r22, r24
    5cc6:	cd 01       	movw	r24, r26
    5cc8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5ccc:	dc 01       	movw	r26, r24
    5cce:	cb 01       	movw	r24, r22
    5cd0:	9e 83       	std	Y+6, r25	; 0x06
    5cd2:	8d 83       	std	Y+5, r24	; 0x05
    5cd4:	0f c0       	rjmp	.+30     	; 0x5cf4 <APP_Autonomous_Car_voidApp+0xbf2>
    5cd6:	80 e9       	ldi	r24, 0x90	; 144
    5cd8:	91 e0       	ldi	r25, 0x01	; 1
    5cda:	9c 83       	std	Y+4, r25	; 0x04
    5cdc:	8b 83       	std	Y+3, r24	; 0x03
    5cde:	8b 81       	ldd	r24, Y+3	; 0x03
    5ce0:	9c 81       	ldd	r25, Y+4	; 0x04
    5ce2:	01 97       	sbiw	r24, 0x01	; 1
    5ce4:	f1 f7       	brne	.-4      	; 0x5ce2 <APP_Autonomous_Car_voidApp+0xbe0>
    5ce6:	9c 83       	std	Y+4, r25	; 0x04
    5ce8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5cea:	8d 81       	ldd	r24, Y+5	; 0x05
    5cec:	9e 81       	ldd	r25, Y+6	; 0x06
    5cee:	01 97       	sbiw	r24, 0x01	; 1
    5cf0:	9e 83       	std	Y+6, r25	; 0x06
    5cf2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5cf4:	8d 81       	ldd	r24, Y+5	; 0x05
    5cf6:	9e 81       	ldd	r25, Y+6	; 0x06
    5cf8:	00 97       	sbiw	r24, 0x00	; 0
    5cfa:	69 f7       	brne	.-38     	; 0x5cd6 <APP_Autonomous_Car_voidApp+0xbd4>
    5cfc:	22 ca       	rjmp	.-3004   	; 0x5142 <APP_Autonomous_Car_voidApp+0x40>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5cfe:	6f 81       	ldd	r22, Y+7	; 0x07
    5d00:	78 85       	ldd	r23, Y+8	; 0x08
    5d02:	89 85       	ldd	r24, Y+9	; 0x09
    5d04:	9a 85       	ldd	r25, Y+10	; 0x0a
    5d06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5d0a:	dc 01       	movw	r26, r24
    5d0c:	cb 01       	movw	r24, r22
    5d0e:	9e 83       	std	Y+6, r25	; 0x06
    5d10:	8d 83       	std	Y+5, r24	; 0x05
    5d12:	8d 81       	ldd	r24, Y+5	; 0x05
    5d14:	9e 81       	ldd	r25, Y+6	; 0x06
    5d16:	9a 83       	std	Y+2, r25	; 0x02
    5d18:	89 83       	std	Y+1, r24	; 0x01
    5d1a:	89 81       	ldd	r24, Y+1	; 0x01
    5d1c:	9a 81       	ldd	r25, Y+2	; 0x02
    5d1e:	01 97       	sbiw	r24, 0x01	; 1
    5d20:	f1 f7       	brne	.-4      	; 0x5d1e <APP_Autonomous_Car_voidApp+0xc1c>
    5d22:	9a 83       	std	Y+2, r25	; 0x02
    5d24:	89 83       	std	Y+1, r24	; 0x01
    5d26:	0d ca       	rjmp	.-3046   	; 0x5142 <APP_Autonomous_Car_voidApp+0x40>

00005d28 <main>:
 *  Created on: Dec 13, 2023
 *      Author: Mohamed
 */

#include "Autonomous_Car/Autonomous_Car.h"
int main(void) {
    5d28:	df 93       	push	r29
    5d2a:	cf 93       	push	r28
    5d2c:	cd b7       	in	r28, 0x3d	; 61
    5d2e:	de b7       	in	r29, 0x3e	; 62
	APP_Autonomous_Car_voidInit();
    5d30:	0e 94 66 28 	call	0x50cc	; 0x50cc <APP_Autonomous_Car_voidInit>
	APP_Autonomous_Car_voidApp();
    5d34:	0e 94 81 28 	call	0x5102	; 0x5102 <APP_Autonomous_Car_voidApp>
    5d38:	80 e0       	ldi	r24, 0x00	; 0
    5d3a:	90 e0       	ldi	r25, 0x00	; 0


}
    5d3c:	cf 91       	pop	r28
    5d3e:	df 91       	pop	r29
    5d40:	08 95       	ret

00005d42 <__udivmodsi4>:
    5d42:	a1 e2       	ldi	r26, 0x21	; 33
    5d44:	1a 2e       	mov	r1, r26
    5d46:	aa 1b       	sub	r26, r26
    5d48:	bb 1b       	sub	r27, r27
    5d4a:	fd 01       	movw	r30, r26
    5d4c:	0d c0       	rjmp	.+26     	; 0x5d68 <__udivmodsi4_ep>

00005d4e <__udivmodsi4_loop>:
    5d4e:	aa 1f       	adc	r26, r26
    5d50:	bb 1f       	adc	r27, r27
    5d52:	ee 1f       	adc	r30, r30
    5d54:	ff 1f       	adc	r31, r31
    5d56:	a2 17       	cp	r26, r18
    5d58:	b3 07       	cpc	r27, r19
    5d5a:	e4 07       	cpc	r30, r20
    5d5c:	f5 07       	cpc	r31, r21
    5d5e:	20 f0       	brcs	.+8      	; 0x5d68 <__udivmodsi4_ep>
    5d60:	a2 1b       	sub	r26, r18
    5d62:	b3 0b       	sbc	r27, r19
    5d64:	e4 0b       	sbc	r30, r20
    5d66:	f5 0b       	sbc	r31, r21

00005d68 <__udivmodsi4_ep>:
    5d68:	66 1f       	adc	r22, r22
    5d6a:	77 1f       	adc	r23, r23
    5d6c:	88 1f       	adc	r24, r24
    5d6e:	99 1f       	adc	r25, r25
    5d70:	1a 94       	dec	r1
    5d72:	69 f7       	brne	.-38     	; 0x5d4e <__udivmodsi4_loop>
    5d74:	60 95       	com	r22
    5d76:	70 95       	com	r23
    5d78:	80 95       	com	r24
    5d7a:	90 95       	com	r25
    5d7c:	9b 01       	movw	r18, r22
    5d7e:	ac 01       	movw	r20, r24
    5d80:	bd 01       	movw	r22, r26
    5d82:	cf 01       	movw	r24, r30
    5d84:	08 95       	ret

00005d86 <__prologue_saves__>:
    5d86:	2f 92       	push	r2
    5d88:	3f 92       	push	r3
    5d8a:	4f 92       	push	r4
    5d8c:	5f 92       	push	r5
    5d8e:	6f 92       	push	r6
    5d90:	7f 92       	push	r7
    5d92:	8f 92       	push	r8
    5d94:	9f 92       	push	r9
    5d96:	af 92       	push	r10
    5d98:	bf 92       	push	r11
    5d9a:	cf 92       	push	r12
    5d9c:	df 92       	push	r13
    5d9e:	ef 92       	push	r14
    5da0:	ff 92       	push	r15
    5da2:	0f 93       	push	r16
    5da4:	1f 93       	push	r17
    5da6:	cf 93       	push	r28
    5da8:	df 93       	push	r29
    5daa:	cd b7       	in	r28, 0x3d	; 61
    5dac:	de b7       	in	r29, 0x3e	; 62
    5dae:	ca 1b       	sub	r28, r26
    5db0:	db 0b       	sbc	r29, r27
    5db2:	0f b6       	in	r0, 0x3f	; 63
    5db4:	f8 94       	cli
    5db6:	de bf       	out	0x3e, r29	; 62
    5db8:	0f be       	out	0x3f, r0	; 63
    5dba:	cd bf       	out	0x3d, r28	; 61
    5dbc:	09 94       	ijmp

00005dbe <__epilogue_restores__>:
    5dbe:	2a 88       	ldd	r2, Y+18	; 0x12
    5dc0:	39 88       	ldd	r3, Y+17	; 0x11
    5dc2:	48 88       	ldd	r4, Y+16	; 0x10
    5dc4:	5f 84       	ldd	r5, Y+15	; 0x0f
    5dc6:	6e 84       	ldd	r6, Y+14	; 0x0e
    5dc8:	7d 84       	ldd	r7, Y+13	; 0x0d
    5dca:	8c 84       	ldd	r8, Y+12	; 0x0c
    5dcc:	9b 84       	ldd	r9, Y+11	; 0x0b
    5dce:	aa 84       	ldd	r10, Y+10	; 0x0a
    5dd0:	b9 84       	ldd	r11, Y+9	; 0x09
    5dd2:	c8 84       	ldd	r12, Y+8	; 0x08
    5dd4:	df 80       	ldd	r13, Y+7	; 0x07
    5dd6:	ee 80       	ldd	r14, Y+6	; 0x06
    5dd8:	fd 80       	ldd	r15, Y+5	; 0x05
    5dda:	0c 81       	ldd	r16, Y+4	; 0x04
    5ddc:	1b 81       	ldd	r17, Y+3	; 0x03
    5dde:	aa 81       	ldd	r26, Y+2	; 0x02
    5de0:	b9 81       	ldd	r27, Y+1	; 0x01
    5de2:	ce 0f       	add	r28, r30
    5de4:	d1 1d       	adc	r29, r1
    5de6:	0f b6       	in	r0, 0x3f	; 63
    5de8:	f8 94       	cli
    5dea:	de bf       	out	0x3e, r29	; 62
    5dec:	0f be       	out	0x3f, r0	; 63
    5dee:	cd bf       	out	0x3d, r28	; 61
    5df0:	ed 01       	movw	r28, r26
    5df2:	08 95       	ret

00005df4 <itoa>:
    5df4:	fb 01       	movw	r30, r22
    5df6:	9f 01       	movw	r18, r30
    5df8:	e8 94       	clt
    5dfa:	42 30       	cpi	r20, 0x02	; 2
    5dfc:	c4 f0       	brlt	.+48     	; 0x5e2e <itoa+0x3a>
    5dfe:	45 32       	cpi	r20, 0x25	; 37
    5e00:	b4 f4       	brge	.+44     	; 0x5e2e <itoa+0x3a>
    5e02:	4a 30       	cpi	r20, 0x0A	; 10
    5e04:	29 f4       	brne	.+10     	; 0x5e10 <itoa+0x1c>
    5e06:	97 fb       	bst	r25, 7
    5e08:	1e f4       	brtc	.+6      	; 0x5e10 <itoa+0x1c>
    5e0a:	90 95       	com	r25
    5e0c:	81 95       	neg	r24
    5e0e:	9f 4f       	sbci	r25, 0xFF	; 255
    5e10:	64 2f       	mov	r22, r20
    5e12:	77 27       	eor	r23, r23
    5e14:	0e 94 2b 2f 	call	0x5e56	; 0x5e56 <__udivmodhi4>
    5e18:	80 5d       	subi	r24, 0xD0	; 208
    5e1a:	8a 33       	cpi	r24, 0x3A	; 58
    5e1c:	0c f0       	brlt	.+2      	; 0x5e20 <itoa+0x2c>
    5e1e:	89 5d       	subi	r24, 0xD9	; 217
    5e20:	81 93       	st	Z+, r24
    5e22:	cb 01       	movw	r24, r22
    5e24:	00 97       	sbiw	r24, 0x00	; 0
    5e26:	a1 f7       	brne	.-24     	; 0x5e10 <itoa+0x1c>
    5e28:	16 f4       	brtc	.+4      	; 0x5e2e <itoa+0x3a>
    5e2a:	5d e2       	ldi	r21, 0x2D	; 45
    5e2c:	51 93       	st	Z+, r21
    5e2e:	10 82       	st	Z, r1
    5e30:	c9 01       	movw	r24, r18
    5e32:	0c 94 1b 2f 	jmp	0x5e36	; 0x5e36 <strrev>

00005e36 <strrev>:
    5e36:	dc 01       	movw	r26, r24
    5e38:	fc 01       	movw	r30, r24
    5e3a:	67 2f       	mov	r22, r23
    5e3c:	71 91       	ld	r23, Z+
    5e3e:	77 23       	and	r23, r23
    5e40:	e1 f7       	brne	.-8      	; 0x5e3a <strrev+0x4>
    5e42:	32 97       	sbiw	r30, 0x02	; 2
    5e44:	04 c0       	rjmp	.+8      	; 0x5e4e <strrev+0x18>
    5e46:	7c 91       	ld	r23, X
    5e48:	6d 93       	st	X+, r22
    5e4a:	70 83       	st	Z, r23
    5e4c:	62 91       	ld	r22, -Z
    5e4e:	ae 17       	cp	r26, r30
    5e50:	bf 07       	cpc	r27, r31
    5e52:	c8 f3       	brcs	.-14     	; 0x5e46 <strrev+0x10>
    5e54:	08 95       	ret

00005e56 <__udivmodhi4>:
    5e56:	aa 1b       	sub	r26, r26
    5e58:	bb 1b       	sub	r27, r27
    5e5a:	51 e1       	ldi	r21, 0x11	; 17
    5e5c:	07 c0       	rjmp	.+14     	; 0x5e6c <__udivmodhi4_ep>

00005e5e <__udivmodhi4_loop>:
    5e5e:	aa 1f       	adc	r26, r26
    5e60:	bb 1f       	adc	r27, r27
    5e62:	a6 17       	cp	r26, r22
    5e64:	b7 07       	cpc	r27, r23
    5e66:	10 f0       	brcs	.+4      	; 0x5e6c <__udivmodhi4_ep>
    5e68:	a6 1b       	sub	r26, r22
    5e6a:	b7 0b       	sbc	r27, r23

00005e6c <__udivmodhi4_ep>:
    5e6c:	88 1f       	adc	r24, r24
    5e6e:	99 1f       	adc	r25, r25
    5e70:	5a 95       	dec	r21
    5e72:	a9 f7       	brne	.-22     	; 0x5e5e <__udivmodhi4_loop>
    5e74:	80 95       	com	r24
    5e76:	90 95       	com	r25
    5e78:	bc 01       	movw	r22, r24
    5e7a:	cd 01       	movw	r24, r26
    5e7c:	08 95       	ret

00005e7e <_exit>:
    5e7e:	f8 94       	cli

00005e80 <__stop_program>:
    5e80:	ff cf       	rjmp	.-2      	; 0x5e80 <__stop_program>
