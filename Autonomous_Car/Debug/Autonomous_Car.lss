
Autonomous_Car.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005182  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000118  00800060  00005182  00005216  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000e  00800178  00800178  0000532e  2**0
                  ALLOC
  3 .stab         00006f84  00000000  00000000  00005330  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002e44  00000000  00000000  0000c2b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  0000f0f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000020e  00000000  00000000  0000f2b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000268b  00000000  00000000  0000f4c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014d1  00000000  00000000  00011b51  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000012ab  00000000  00000000  00013022  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  000142d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002fb  00000000  00000000  000144b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a0a  00000000  00000000  000147ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  000151b5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 da 13 	jmp	0x27b4	; 0x27b4 <__vector_1>
       8:	0c 94 0d 14 	jmp	0x281a	; 0x281a <__vector_2>
       c:	0c 94 40 14 	jmp	0x2880	; 0x2880 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 80 0f 	jmp	0x1f00	; 0x1f00 <__vector_6>
      1c:	0c 94 1a 0f 	jmp	0x1e34	; 0x1e34 <__vector_7>
      20:	0c 94 4d 0f 	jmp	0x1e9a	; 0x1e9a <__vector_8>
      24:	0c 94 e7 0e 	jmp	0x1dce	; 0x1dce <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 86 1a 	jmp	0x350c	; 0x350c <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e8       	ldi	r30, 0x82	; 130
      68:	f1 e5       	ldi	r31, 0x51	; 81
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 37       	cpi	r26, 0x78	; 120
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a8 e7       	ldi	r26, 0x78	; 120
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 38       	cpi	r26, 0x86	; 134
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 e7 26 	call	0x4dce	; 0x4dce <main>
      8a:	0c 94 bf 28 	jmp	0x517e	; 0x517e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 43 28 	jmp	0x5086	; 0x5086 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 5f 28 	jmp	0x50be	; 0x50be <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 4f 28 	jmp	0x509e	; 0x509e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 86 05 	call	0xb0c	; 0xb0c <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 6b 28 	jmp	0x50d6	; 0x50d6 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 4f 28 	jmp	0x509e	; 0x509e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 86 05 	call	0xb0c	; 0xb0c <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 6b 28 	jmp	0x50d6	; 0x50d6 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 43 28 	jmp	0x5086	; 0x5086 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 86 05 	call	0xb0c	; 0xb0c <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 5f 28 	jmp	0x50be	; 0x50be <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 4b 28 	jmp	0x5096	; 0x5096 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 86 05 	call	0xb0c	; 0xb0c <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 67 28 	jmp	0x50ce	; 0x50ce <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 4f 28 	jmp	0x509e	; 0x509e <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 d3 06 	call	0xda6	; 0xda6 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 6b 28 	jmp	0x50d6	; 0x50d6 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 4f 28 	jmp	0x509e	; 0x509e <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 d3 06 	call	0xda6	; 0xda6 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 6b 28 	jmp	0x50d6	; 0x50d6 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 4f 28 	jmp	0x509e	; 0x509e <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 d3 06 	call	0xda6	; 0xda6 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 6b 28 	jmp	0x50d6	; 0x50d6 <__epilogue_restores__+0x18>

000008aa <__lesf2>:
     8aa:	a8 e1       	ldi	r26, 0x18	; 24
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 4f 28 	jmp	0x509e	; 0x509e <__prologue_saves__+0x18>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	2d 83       	std	Y+5, r18	; 0x05
     8c0:	3e 83       	std	Y+6, r19	; 0x06
     8c2:	4f 83       	std	Y+7, r20	; 0x07
     8c4:	58 87       	std	Y+8, r21	; 0x08
     8c6:	89 e0       	ldi	r24, 0x09	; 9
     8c8:	e8 2e       	mov	r14, r24
     8ca:	f1 2c       	mov	r15, r1
     8cc:	ec 0e       	add	r14, r28
     8ce:	fd 1e       	adc	r15, r29
     8d0:	ce 01       	movw	r24, r28
     8d2:	01 96       	adiw	r24, 0x01	; 1
     8d4:	b7 01       	movw	r22, r14
     8d6:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     8da:	8e 01       	movw	r16, r28
     8dc:	0f 5e       	subi	r16, 0xEF	; 239
     8de:	1f 4f       	sbci	r17, 0xFF	; 255
     8e0:	ce 01       	movw	r24, r28
     8e2:	05 96       	adiw	r24, 0x05	; 5
     8e4:	b8 01       	movw	r22, r16
     8e6:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     8ea:	89 85       	ldd	r24, Y+9	; 0x09
     8ec:	82 30       	cpi	r24, 0x02	; 2
     8ee:	40 f0       	brcs	.+16     	; 0x900 <__lesf2+0x56>
     8f0:	89 89       	ldd	r24, Y+17	; 0x11
     8f2:	82 30       	cpi	r24, 0x02	; 2
     8f4:	28 f0       	brcs	.+10     	; 0x900 <__lesf2+0x56>
     8f6:	c7 01       	movw	r24, r14
     8f8:	b8 01       	movw	r22, r16
     8fa:	0e 94 d3 06 	call	0xda6	; 0xda6 <__fpcmp_parts_f>
     8fe:	01 c0       	rjmp	.+2      	; 0x902 <__lesf2+0x58>
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	68 96       	adiw	r28, 0x18	; 24
     904:	e6 e0       	ldi	r30, 0x06	; 6
     906:	0c 94 6b 28 	jmp	0x50d6	; 0x50d6 <__epilogue_restores__+0x18>

0000090a <__floatsisf>:
     90a:	a8 e0       	ldi	r26, 0x08	; 8
     90c:	b0 e0       	ldi	r27, 0x00	; 0
     90e:	eb e8       	ldi	r30, 0x8B	; 139
     910:	f4 e0       	ldi	r31, 0x04	; 4
     912:	0c 94 4c 28 	jmp	0x5098	; 0x5098 <__prologue_saves__+0x12>
     916:	9b 01       	movw	r18, r22
     918:	ac 01       	movw	r20, r24
     91a:	83 e0       	ldi	r24, 0x03	; 3
     91c:	89 83       	std	Y+1, r24	; 0x01
     91e:	da 01       	movw	r26, r20
     920:	c9 01       	movw	r24, r18
     922:	88 27       	eor	r24, r24
     924:	b7 fd       	sbrc	r27, 7
     926:	83 95       	inc	r24
     928:	99 27       	eor	r25, r25
     92a:	aa 27       	eor	r26, r26
     92c:	bb 27       	eor	r27, r27
     92e:	b8 2e       	mov	r11, r24
     930:	21 15       	cp	r18, r1
     932:	31 05       	cpc	r19, r1
     934:	41 05       	cpc	r20, r1
     936:	51 05       	cpc	r21, r1
     938:	19 f4       	brne	.+6      	; 0x940 <__floatsisf+0x36>
     93a:	82 e0       	ldi	r24, 0x02	; 2
     93c:	89 83       	std	Y+1, r24	; 0x01
     93e:	3a c0       	rjmp	.+116    	; 0x9b4 <__floatsisf+0xaa>
     940:	88 23       	and	r24, r24
     942:	a9 f0       	breq	.+42     	; 0x96e <__floatsisf+0x64>
     944:	20 30       	cpi	r18, 0x00	; 0
     946:	80 e0       	ldi	r24, 0x00	; 0
     948:	38 07       	cpc	r19, r24
     94a:	80 e0       	ldi	r24, 0x00	; 0
     94c:	48 07       	cpc	r20, r24
     94e:	80 e8       	ldi	r24, 0x80	; 128
     950:	58 07       	cpc	r21, r24
     952:	29 f4       	brne	.+10     	; 0x95e <__floatsisf+0x54>
     954:	60 e0       	ldi	r22, 0x00	; 0
     956:	70 e0       	ldi	r23, 0x00	; 0
     958:	80 e0       	ldi	r24, 0x00	; 0
     95a:	9f ec       	ldi	r25, 0xCF	; 207
     95c:	30 c0       	rjmp	.+96     	; 0x9be <__floatsisf+0xb4>
     95e:	ee 24       	eor	r14, r14
     960:	ff 24       	eor	r15, r15
     962:	87 01       	movw	r16, r14
     964:	e2 1a       	sub	r14, r18
     966:	f3 0a       	sbc	r15, r19
     968:	04 0b       	sbc	r16, r20
     96a:	15 0b       	sbc	r17, r21
     96c:	02 c0       	rjmp	.+4      	; 0x972 <__floatsisf+0x68>
     96e:	79 01       	movw	r14, r18
     970:	8a 01       	movw	r16, r20
     972:	8e e1       	ldi	r24, 0x1E	; 30
     974:	c8 2e       	mov	r12, r24
     976:	d1 2c       	mov	r13, r1
     978:	dc 82       	std	Y+4, r13	; 0x04
     97a:	cb 82       	std	Y+3, r12	; 0x03
     97c:	ed 82       	std	Y+5, r14	; 0x05
     97e:	fe 82       	std	Y+6, r15	; 0x06
     980:	0f 83       	std	Y+7, r16	; 0x07
     982:	18 87       	std	Y+8, r17	; 0x08
     984:	c8 01       	movw	r24, r16
     986:	b7 01       	movw	r22, r14
     988:	0e 94 37 05 	call	0xa6e	; 0xa6e <__clzsi2>
     98c:	01 97       	sbiw	r24, 0x01	; 1
     98e:	18 16       	cp	r1, r24
     990:	19 06       	cpc	r1, r25
     992:	84 f4       	brge	.+32     	; 0x9b4 <__floatsisf+0xaa>
     994:	08 2e       	mov	r0, r24
     996:	04 c0       	rjmp	.+8      	; 0x9a0 <__floatsisf+0x96>
     998:	ee 0c       	add	r14, r14
     99a:	ff 1c       	adc	r15, r15
     99c:	00 1f       	adc	r16, r16
     99e:	11 1f       	adc	r17, r17
     9a0:	0a 94       	dec	r0
     9a2:	d2 f7       	brpl	.-12     	; 0x998 <__floatsisf+0x8e>
     9a4:	ed 82       	std	Y+5, r14	; 0x05
     9a6:	fe 82       	std	Y+6, r15	; 0x06
     9a8:	0f 83       	std	Y+7, r16	; 0x07
     9aa:	18 87       	std	Y+8, r17	; 0x08
     9ac:	c8 1a       	sub	r12, r24
     9ae:	d9 0a       	sbc	r13, r25
     9b0:	dc 82       	std	Y+4, r13	; 0x04
     9b2:	cb 82       	std	Y+3, r12	; 0x03
     9b4:	ba 82       	std	Y+2, r11	; 0x02
     9b6:	ce 01       	movw	r24, r28
     9b8:	01 96       	adiw	r24, 0x01	; 1
     9ba:	0e 94 86 05 	call	0xb0c	; 0xb0c <__pack_f>
     9be:	28 96       	adiw	r28, 0x08	; 8
     9c0:	e9 e0       	ldi	r30, 0x09	; 9
     9c2:	0c 94 68 28 	jmp	0x50d0	; 0x50d0 <__epilogue_restores__+0x12>

000009c6 <__fixsfsi>:
     9c6:	ac e0       	ldi	r26, 0x0C	; 12
     9c8:	b0 e0       	ldi	r27, 0x00	; 0
     9ca:	e9 ee       	ldi	r30, 0xE9	; 233
     9cc:	f4 e0       	ldi	r31, 0x04	; 4
     9ce:	0c 94 53 28 	jmp	0x50a6	; 0x50a6 <__prologue_saves__+0x20>
     9d2:	69 83       	std	Y+1, r22	; 0x01
     9d4:	7a 83       	std	Y+2, r23	; 0x02
     9d6:	8b 83       	std	Y+3, r24	; 0x03
     9d8:	9c 83       	std	Y+4, r25	; 0x04
     9da:	ce 01       	movw	r24, r28
     9dc:	01 96       	adiw	r24, 0x01	; 1
     9de:	be 01       	movw	r22, r28
     9e0:	6b 5f       	subi	r22, 0xFB	; 251
     9e2:	7f 4f       	sbci	r23, 0xFF	; 255
     9e4:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__unpack_f>
     9e8:	8d 81       	ldd	r24, Y+5	; 0x05
     9ea:	82 30       	cpi	r24, 0x02	; 2
     9ec:	61 f1       	breq	.+88     	; 0xa46 <__fixsfsi+0x80>
     9ee:	82 30       	cpi	r24, 0x02	; 2
     9f0:	50 f1       	brcs	.+84     	; 0xa46 <__fixsfsi+0x80>
     9f2:	84 30       	cpi	r24, 0x04	; 4
     9f4:	21 f4       	brne	.+8      	; 0x9fe <__fixsfsi+0x38>
     9f6:	8e 81       	ldd	r24, Y+6	; 0x06
     9f8:	88 23       	and	r24, r24
     9fa:	51 f1       	breq	.+84     	; 0xa50 <__fixsfsi+0x8a>
     9fc:	2e c0       	rjmp	.+92     	; 0xa5a <__fixsfsi+0x94>
     9fe:	2f 81       	ldd	r18, Y+7	; 0x07
     a00:	38 85       	ldd	r19, Y+8	; 0x08
     a02:	37 fd       	sbrc	r19, 7
     a04:	20 c0       	rjmp	.+64     	; 0xa46 <__fixsfsi+0x80>
     a06:	6e 81       	ldd	r22, Y+6	; 0x06
     a08:	2f 31       	cpi	r18, 0x1F	; 31
     a0a:	31 05       	cpc	r19, r1
     a0c:	1c f0       	brlt	.+6      	; 0xa14 <__fixsfsi+0x4e>
     a0e:	66 23       	and	r22, r22
     a10:	f9 f0       	breq	.+62     	; 0xa50 <__fixsfsi+0x8a>
     a12:	23 c0       	rjmp	.+70     	; 0xa5a <__fixsfsi+0x94>
     a14:	8e e1       	ldi	r24, 0x1E	; 30
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	82 1b       	sub	r24, r18
     a1a:	93 0b       	sbc	r25, r19
     a1c:	29 85       	ldd	r18, Y+9	; 0x09
     a1e:	3a 85       	ldd	r19, Y+10	; 0x0a
     a20:	4b 85       	ldd	r20, Y+11	; 0x0b
     a22:	5c 85       	ldd	r21, Y+12	; 0x0c
     a24:	04 c0       	rjmp	.+8      	; 0xa2e <__fixsfsi+0x68>
     a26:	56 95       	lsr	r21
     a28:	47 95       	ror	r20
     a2a:	37 95       	ror	r19
     a2c:	27 95       	ror	r18
     a2e:	8a 95       	dec	r24
     a30:	d2 f7       	brpl	.-12     	; 0xa26 <__fixsfsi+0x60>
     a32:	66 23       	and	r22, r22
     a34:	b1 f0       	breq	.+44     	; 0xa62 <__fixsfsi+0x9c>
     a36:	50 95       	com	r21
     a38:	40 95       	com	r20
     a3a:	30 95       	com	r19
     a3c:	21 95       	neg	r18
     a3e:	3f 4f       	sbci	r19, 0xFF	; 255
     a40:	4f 4f       	sbci	r20, 0xFF	; 255
     a42:	5f 4f       	sbci	r21, 0xFF	; 255
     a44:	0e c0       	rjmp	.+28     	; 0xa62 <__fixsfsi+0x9c>
     a46:	20 e0       	ldi	r18, 0x00	; 0
     a48:	30 e0       	ldi	r19, 0x00	; 0
     a4a:	40 e0       	ldi	r20, 0x00	; 0
     a4c:	50 e0       	ldi	r21, 0x00	; 0
     a4e:	09 c0       	rjmp	.+18     	; 0xa62 <__fixsfsi+0x9c>
     a50:	2f ef       	ldi	r18, 0xFF	; 255
     a52:	3f ef       	ldi	r19, 0xFF	; 255
     a54:	4f ef       	ldi	r20, 0xFF	; 255
     a56:	5f e7       	ldi	r21, 0x7F	; 127
     a58:	04 c0       	rjmp	.+8      	; 0xa62 <__fixsfsi+0x9c>
     a5a:	20 e0       	ldi	r18, 0x00	; 0
     a5c:	30 e0       	ldi	r19, 0x00	; 0
     a5e:	40 e0       	ldi	r20, 0x00	; 0
     a60:	50 e8       	ldi	r21, 0x80	; 128
     a62:	b9 01       	movw	r22, r18
     a64:	ca 01       	movw	r24, r20
     a66:	2c 96       	adiw	r28, 0x0c	; 12
     a68:	e2 e0       	ldi	r30, 0x02	; 2
     a6a:	0c 94 6f 28 	jmp	0x50de	; 0x50de <__epilogue_restores__+0x20>

00000a6e <__clzsi2>:
     a6e:	ef 92       	push	r14
     a70:	ff 92       	push	r15
     a72:	0f 93       	push	r16
     a74:	1f 93       	push	r17
     a76:	7b 01       	movw	r14, r22
     a78:	8c 01       	movw	r16, r24
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	e8 16       	cp	r14, r24
     a7e:	80 e0       	ldi	r24, 0x00	; 0
     a80:	f8 06       	cpc	r15, r24
     a82:	81 e0       	ldi	r24, 0x01	; 1
     a84:	08 07       	cpc	r16, r24
     a86:	80 e0       	ldi	r24, 0x00	; 0
     a88:	18 07       	cpc	r17, r24
     a8a:	88 f4       	brcc	.+34     	; 0xaae <__clzsi2+0x40>
     a8c:	8f ef       	ldi	r24, 0xFF	; 255
     a8e:	e8 16       	cp	r14, r24
     a90:	f1 04       	cpc	r15, r1
     a92:	01 05       	cpc	r16, r1
     a94:	11 05       	cpc	r17, r1
     a96:	31 f0       	breq	.+12     	; 0xaa4 <__clzsi2+0x36>
     a98:	28 f0       	brcs	.+10     	; 0xaa4 <__clzsi2+0x36>
     a9a:	88 e0       	ldi	r24, 0x08	; 8
     a9c:	90 e0       	ldi	r25, 0x00	; 0
     a9e:	a0 e0       	ldi	r26, 0x00	; 0
     aa0:	b0 e0       	ldi	r27, 0x00	; 0
     aa2:	17 c0       	rjmp	.+46     	; 0xad2 <__clzsi2+0x64>
     aa4:	80 e0       	ldi	r24, 0x00	; 0
     aa6:	90 e0       	ldi	r25, 0x00	; 0
     aa8:	a0 e0       	ldi	r26, 0x00	; 0
     aaa:	b0 e0       	ldi	r27, 0x00	; 0
     aac:	12 c0       	rjmp	.+36     	; 0xad2 <__clzsi2+0x64>
     aae:	80 e0       	ldi	r24, 0x00	; 0
     ab0:	e8 16       	cp	r14, r24
     ab2:	80 e0       	ldi	r24, 0x00	; 0
     ab4:	f8 06       	cpc	r15, r24
     ab6:	80 e0       	ldi	r24, 0x00	; 0
     ab8:	08 07       	cpc	r16, r24
     aba:	81 e0       	ldi	r24, 0x01	; 1
     abc:	18 07       	cpc	r17, r24
     abe:	28 f0       	brcs	.+10     	; 0xaca <__clzsi2+0x5c>
     ac0:	88 e1       	ldi	r24, 0x18	; 24
     ac2:	90 e0       	ldi	r25, 0x00	; 0
     ac4:	a0 e0       	ldi	r26, 0x00	; 0
     ac6:	b0 e0       	ldi	r27, 0x00	; 0
     ac8:	04 c0       	rjmp	.+8      	; 0xad2 <__clzsi2+0x64>
     aca:	80 e1       	ldi	r24, 0x10	; 16
     acc:	90 e0       	ldi	r25, 0x00	; 0
     ace:	a0 e0       	ldi	r26, 0x00	; 0
     ad0:	b0 e0       	ldi	r27, 0x00	; 0
     ad2:	20 e2       	ldi	r18, 0x20	; 32
     ad4:	30 e0       	ldi	r19, 0x00	; 0
     ad6:	40 e0       	ldi	r20, 0x00	; 0
     ad8:	50 e0       	ldi	r21, 0x00	; 0
     ada:	28 1b       	sub	r18, r24
     adc:	39 0b       	sbc	r19, r25
     ade:	4a 0b       	sbc	r20, r26
     ae0:	5b 0b       	sbc	r21, r27
     ae2:	04 c0       	rjmp	.+8      	; 0xaec <__clzsi2+0x7e>
     ae4:	16 95       	lsr	r17
     ae6:	07 95       	ror	r16
     ae8:	f7 94       	ror	r15
     aea:	e7 94       	ror	r14
     aec:	8a 95       	dec	r24
     aee:	d2 f7       	brpl	.-12     	; 0xae4 <__clzsi2+0x76>
     af0:	f7 01       	movw	r30, r14
     af2:	e8 59       	subi	r30, 0x98	; 152
     af4:	ff 4f       	sbci	r31, 0xFF	; 255
     af6:	80 81       	ld	r24, Z
     af8:	28 1b       	sub	r18, r24
     afa:	31 09       	sbc	r19, r1
     afc:	41 09       	sbc	r20, r1
     afe:	51 09       	sbc	r21, r1
     b00:	c9 01       	movw	r24, r18
     b02:	1f 91       	pop	r17
     b04:	0f 91       	pop	r16
     b06:	ff 90       	pop	r15
     b08:	ef 90       	pop	r14
     b0a:	08 95       	ret

00000b0c <__pack_f>:
     b0c:	df 92       	push	r13
     b0e:	ef 92       	push	r14
     b10:	ff 92       	push	r15
     b12:	0f 93       	push	r16
     b14:	1f 93       	push	r17
     b16:	fc 01       	movw	r30, r24
     b18:	e4 80       	ldd	r14, Z+4	; 0x04
     b1a:	f5 80       	ldd	r15, Z+5	; 0x05
     b1c:	06 81       	ldd	r16, Z+6	; 0x06
     b1e:	17 81       	ldd	r17, Z+7	; 0x07
     b20:	d1 80       	ldd	r13, Z+1	; 0x01
     b22:	80 81       	ld	r24, Z
     b24:	82 30       	cpi	r24, 0x02	; 2
     b26:	48 f4       	brcc	.+18     	; 0xb3a <__pack_f+0x2e>
     b28:	80 e0       	ldi	r24, 0x00	; 0
     b2a:	90 e0       	ldi	r25, 0x00	; 0
     b2c:	a0 e1       	ldi	r26, 0x10	; 16
     b2e:	b0 e0       	ldi	r27, 0x00	; 0
     b30:	e8 2a       	or	r14, r24
     b32:	f9 2a       	or	r15, r25
     b34:	0a 2b       	or	r16, r26
     b36:	1b 2b       	or	r17, r27
     b38:	a5 c0       	rjmp	.+330    	; 0xc84 <__pack_f+0x178>
     b3a:	84 30       	cpi	r24, 0x04	; 4
     b3c:	09 f4       	brne	.+2      	; 0xb40 <__pack_f+0x34>
     b3e:	9f c0       	rjmp	.+318    	; 0xc7e <__pack_f+0x172>
     b40:	82 30       	cpi	r24, 0x02	; 2
     b42:	21 f4       	brne	.+8      	; 0xb4c <__pack_f+0x40>
     b44:	ee 24       	eor	r14, r14
     b46:	ff 24       	eor	r15, r15
     b48:	87 01       	movw	r16, r14
     b4a:	05 c0       	rjmp	.+10     	; 0xb56 <__pack_f+0x4a>
     b4c:	e1 14       	cp	r14, r1
     b4e:	f1 04       	cpc	r15, r1
     b50:	01 05       	cpc	r16, r1
     b52:	11 05       	cpc	r17, r1
     b54:	19 f4       	brne	.+6      	; 0xb5c <__pack_f+0x50>
     b56:	e0 e0       	ldi	r30, 0x00	; 0
     b58:	f0 e0       	ldi	r31, 0x00	; 0
     b5a:	96 c0       	rjmp	.+300    	; 0xc88 <__pack_f+0x17c>
     b5c:	62 81       	ldd	r22, Z+2	; 0x02
     b5e:	73 81       	ldd	r23, Z+3	; 0x03
     b60:	9f ef       	ldi	r25, 0xFF	; 255
     b62:	62 38       	cpi	r22, 0x82	; 130
     b64:	79 07       	cpc	r23, r25
     b66:	0c f0       	brlt	.+2      	; 0xb6a <__pack_f+0x5e>
     b68:	5b c0       	rjmp	.+182    	; 0xc20 <__pack_f+0x114>
     b6a:	22 e8       	ldi	r18, 0x82	; 130
     b6c:	3f ef       	ldi	r19, 0xFF	; 255
     b6e:	26 1b       	sub	r18, r22
     b70:	37 0b       	sbc	r19, r23
     b72:	2a 31       	cpi	r18, 0x1A	; 26
     b74:	31 05       	cpc	r19, r1
     b76:	2c f0       	brlt	.+10     	; 0xb82 <__pack_f+0x76>
     b78:	20 e0       	ldi	r18, 0x00	; 0
     b7a:	30 e0       	ldi	r19, 0x00	; 0
     b7c:	40 e0       	ldi	r20, 0x00	; 0
     b7e:	50 e0       	ldi	r21, 0x00	; 0
     b80:	2a c0       	rjmp	.+84     	; 0xbd6 <__pack_f+0xca>
     b82:	b8 01       	movw	r22, r16
     b84:	a7 01       	movw	r20, r14
     b86:	02 2e       	mov	r0, r18
     b88:	04 c0       	rjmp	.+8      	; 0xb92 <__pack_f+0x86>
     b8a:	76 95       	lsr	r23
     b8c:	67 95       	ror	r22
     b8e:	57 95       	ror	r21
     b90:	47 95       	ror	r20
     b92:	0a 94       	dec	r0
     b94:	d2 f7       	brpl	.-12     	; 0xb8a <__pack_f+0x7e>
     b96:	81 e0       	ldi	r24, 0x01	; 1
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	a0 e0       	ldi	r26, 0x00	; 0
     b9c:	b0 e0       	ldi	r27, 0x00	; 0
     b9e:	04 c0       	rjmp	.+8      	; 0xba8 <__pack_f+0x9c>
     ba0:	88 0f       	add	r24, r24
     ba2:	99 1f       	adc	r25, r25
     ba4:	aa 1f       	adc	r26, r26
     ba6:	bb 1f       	adc	r27, r27
     ba8:	2a 95       	dec	r18
     baa:	d2 f7       	brpl	.-12     	; 0xba0 <__pack_f+0x94>
     bac:	01 97       	sbiw	r24, 0x01	; 1
     bae:	a1 09       	sbc	r26, r1
     bb0:	b1 09       	sbc	r27, r1
     bb2:	8e 21       	and	r24, r14
     bb4:	9f 21       	and	r25, r15
     bb6:	a0 23       	and	r26, r16
     bb8:	b1 23       	and	r27, r17
     bba:	00 97       	sbiw	r24, 0x00	; 0
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	21 f0       	breq	.+8      	; 0xbca <__pack_f+0xbe>
     bc2:	81 e0       	ldi	r24, 0x01	; 1
     bc4:	90 e0       	ldi	r25, 0x00	; 0
     bc6:	a0 e0       	ldi	r26, 0x00	; 0
     bc8:	b0 e0       	ldi	r27, 0x00	; 0
     bca:	9a 01       	movw	r18, r20
     bcc:	ab 01       	movw	r20, r22
     bce:	28 2b       	or	r18, r24
     bd0:	39 2b       	or	r19, r25
     bd2:	4a 2b       	or	r20, r26
     bd4:	5b 2b       	or	r21, r27
     bd6:	da 01       	movw	r26, r20
     bd8:	c9 01       	movw	r24, r18
     bda:	8f 77       	andi	r24, 0x7F	; 127
     bdc:	90 70       	andi	r25, 0x00	; 0
     bde:	a0 70       	andi	r26, 0x00	; 0
     be0:	b0 70       	andi	r27, 0x00	; 0
     be2:	80 34       	cpi	r24, 0x40	; 64
     be4:	91 05       	cpc	r25, r1
     be6:	a1 05       	cpc	r26, r1
     be8:	b1 05       	cpc	r27, r1
     bea:	39 f4       	brne	.+14     	; 0xbfa <__pack_f+0xee>
     bec:	27 ff       	sbrs	r18, 7
     bee:	09 c0       	rjmp	.+18     	; 0xc02 <__pack_f+0xf6>
     bf0:	20 5c       	subi	r18, 0xC0	; 192
     bf2:	3f 4f       	sbci	r19, 0xFF	; 255
     bf4:	4f 4f       	sbci	r20, 0xFF	; 255
     bf6:	5f 4f       	sbci	r21, 0xFF	; 255
     bf8:	04 c0       	rjmp	.+8      	; 0xc02 <__pack_f+0xf6>
     bfa:	21 5c       	subi	r18, 0xC1	; 193
     bfc:	3f 4f       	sbci	r19, 0xFF	; 255
     bfe:	4f 4f       	sbci	r20, 0xFF	; 255
     c00:	5f 4f       	sbci	r21, 0xFF	; 255
     c02:	e0 e0       	ldi	r30, 0x00	; 0
     c04:	f0 e0       	ldi	r31, 0x00	; 0
     c06:	20 30       	cpi	r18, 0x00	; 0
     c08:	a0 e0       	ldi	r26, 0x00	; 0
     c0a:	3a 07       	cpc	r19, r26
     c0c:	a0 e0       	ldi	r26, 0x00	; 0
     c0e:	4a 07       	cpc	r20, r26
     c10:	a0 e4       	ldi	r26, 0x40	; 64
     c12:	5a 07       	cpc	r21, r26
     c14:	10 f0       	brcs	.+4      	; 0xc1a <__pack_f+0x10e>
     c16:	e1 e0       	ldi	r30, 0x01	; 1
     c18:	f0 e0       	ldi	r31, 0x00	; 0
     c1a:	79 01       	movw	r14, r18
     c1c:	8a 01       	movw	r16, r20
     c1e:	27 c0       	rjmp	.+78     	; 0xc6e <__pack_f+0x162>
     c20:	60 38       	cpi	r22, 0x80	; 128
     c22:	71 05       	cpc	r23, r1
     c24:	64 f5       	brge	.+88     	; 0xc7e <__pack_f+0x172>
     c26:	fb 01       	movw	r30, r22
     c28:	e1 58       	subi	r30, 0x81	; 129
     c2a:	ff 4f       	sbci	r31, 0xFF	; 255
     c2c:	d8 01       	movw	r26, r16
     c2e:	c7 01       	movw	r24, r14
     c30:	8f 77       	andi	r24, 0x7F	; 127
     c32:	90 70       	andi	r25, 0x00	; 0
     c34:	a0 70       	andi	r26, 0x00	; 0
     c36:	b0 70       	andi	r27, 0x00	; 0
     c38:	80 34       	cpi	r24, 0x40	; 64
     c3a:	91 05       	cpc	r25, r1
     c3c:	a1 05       	cpc	r26, r1
     c3e:	b1 05       	cpc	r27, r1
     c40:	39 f4       	brne	.+14     	; 0xc50 <__pack_f+0x144>
     c42:	e7 fe       	sbrs	r14, 7
     c44:	0d c0       	rjmp	.+26     	; 0xc60 <__pack_f+0x154>
     c46:	80 e4       	ldi	r24, 0x40	; 64
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	a0 e0       	ldi	r26, 0x00	; 0
     c4c:	b0 e0       	ldi	r27, 0x00	; 0
     c4e:	04 c0       	rjmp	.+8      	; 0xc58 <__pack_f+0x14c>
     c50:	8f e3       	ldi	r24, 0x3F	; 63
     c52:	90 e0       	ldi	r25, 0x00	; 0
     c54:	a0 e0       	ldi	r26, 0x00	; 0
     c56:	b0 e0       	ldi	r27, 0x00	; 0
     c58:	e8 0e       	add	r14, r24
     c5a:	f9 1e       	adc	r15, r25
     c5c:	0a 1f       	adc	r16, r26
     c5e:	1b 1f       	adc	r17, r27
     c60:	17 ff       	sbrs	r17, 7
     c62:	05 c0       	rjmp	.+10     	; 0xc6e <__pack_f+0x162>
     c64:	16 95       	lsr	r17
     c66:	07 95       	ror	r16
     c68:	f7 94       	ror	r15
     c6a:	e7 94       	ror	r14
     c6c:	31 96       	adiw	r30, 0x01	; 1
     c6e:	87 e0       	ldi	r24, 0x07	; 7
     c70:	16 95       	lsr	r17
     c72:	07 95       	ror	r16
     c74:	f7 94       	ror	r15
     c76:	e7 94       	ror	r14
     c78:	8a 95       	dec	r24
     c7a:	d1 f7       	brne	.-12     	; 0xc70 <__pack_f+0x164>
     c7c:	05 c0       	rjmp	.+10     	; 0xc88 <__pack_f+0x17c>
     c7e:	ee 24       	eor	r14, r14
     c80:	ff 24       	eor	r15, r15
     c82:	87 01       	movw	r16, r14
     c84:	ef ef       	ldi	r30, 0xFF	; 255
     c86:	f0 e0       	ldi	r31, 0x00	; 0
     c88:	6e 2f       	mov	r22, r30
     c8a:	67 95       	ror	r22
     c8c:	66 27       	eor	r22, r22
     c8e:	67 95       	ror	r22
     c90:	90 2f       	mov	r25, r16
     c92:	9f 77       	andi	r25, 0x7F	; 127
     c94:	d7 94       	ror	r13
     c96:	dd 24       	eor	r13, r13
     c98:	d7 94       	ror	r13
     c9a:	8e 2f       	mov	r24, r30
     c9c:	86 95       	lsr	r24
     c9e:	49 2f       	mov	r20, r25
     ca0:	46 2b       	or	r20, r22
     ca2:	58 2f       	mov	r21, r24
     ca4:	5d 29       	or	r21, r13
     ca6:	b7 01       	movw	r22, r14
     ca8:	ca 01       	movw	r24, r20
     caa:	1f 91       	pop	r17
     cac:	0f 91       	pop	r16
     cae:	ff 90       	pop	r15
     cb0:	ef 90       	pop	r14
     cb2:	df 90       	pop	r13
     cb4:	08 95       	ret

00000cb6 <__unpack_f>:
     cb6:	fc 01       	movw	r30, r24
     cb8:	db 01       	movw	r26, r22
     cba:	40 81       	ld	r20, Z
     cbc:	51 81       	ldd	r21, Z+1	; 0x01
     cbe:	22 81       	ldd	r18, Z+2	; 0x02
     cc0:	62 2f       	mov	r22, r18
     cc2:	6f 77       	andi	r22, 0x7F	; 127
     cc4:	70 e0       	ldi	r23, 0x00	; 0
     cc6:	22 1f       	adc	r18, r18
     cc8:	22 27       	eor	r18, r18
     cca:	22 1f       	adc	r18, r18
     ccc:	93 81       	ldd	r25, Z+3	; 0x03
     cce:	89 2f       	mov	r24, r25
     cd0:	88 0f       	add	r24, r24
     cd2:	82 2b       	or	r24, r18
     cd4:	28 2f       	mov	r18, r24
     cd6:	30 e0       	ldi	r19, 0x00	; 0
     cd8:	99 1f       	adc	r25, r25
     cda:	99 27       	eor	r25, r25
     cdc:	99 1f       	adc	r25, r25
     cde:	11 96       	adiw	r26, 0x01	; 1
     ce0:	9c 93       	st	X, r25
     ce2:	11 97       	sbiw	r26, 0x01	; 1
     ce4:	21 15       	cp	r18, r1
     ce6:	31 05       	cpc	r19, r1
     ce8:	a9 f5       	brne	.+106    	; 0xd54 <__unpack_f+0x9e>
     cea:	41 15       	cp	r20, r1
     cec:	51 05       	cpc	r21, r1
     cee:	61 05       	cpc	r22, r1
     cf0:	71 05       	cpc	r23, r1
     cf2:	11 f4       	brne	.+4      	; 0xcf8 <__unpack_f+0x42>
     cf4:	82 e0       	ldi	r24, 0x02	; 2
     cf6:	37 c0       	rjmp	.+110    	; 0xd66 <__unpack_f+0xb0>
     cf8:	82 e8       	ldi	r24, 0x82	; 130
     cfa:	9f ef       	ldi	r25, 0xFF	; 255
     cfc:	13 96       	adiw	r26, 0x03	; 3
     cfe:	9c 93       	st	X, r25
     d00:	8e 93       	st	-X, r24
     d02:	12 97       	sbiw	r26, 0x02	; 2
     d04:	9a 01       	movw	r18, r20
     d06:	ab 01       	movw	r20, r22
     d08:	67 e0       	ldi	r22, 0x07	; 7
     d0a:	22 0f       	add	r18, r18
     d0c:	33 1f       	adc	r19, r19
     d0e:	44 1f       	adc	r20, r20
     d10:	55 1f       	adc	r21, r21
     d12:	6a 95       	dec	r22
     d14:	d1 f7       	brne	.-12     	; 0xd0a <__unpack_f+0x54>
     d16:	83 e0       	ldi	r24, 0x03	; 3
     d18:	8c 93       	st	X, r24
     d1a:	0d c0       	rjmp	.+26     	; 0xd36 <__unpack_f+0x80>
     d1c:	22 0f       	add	r18, r18
     d1e:	33 1f       	adc	r19, r19
     d20:	44 1f       	adc	r20, r20
     d22:	55 1f       	adc	r21, r21
     d24:	12 96       	adiw	r26, 0x02	; 2
     d26:	8d 91       	ld	r24, X+
     d28:	9c 91       	ld	r25, X
     d2a:	13 97       	sbiw	r26, 0x03	; 3
     d2c:	01 97       	sbiw	r24, 0x01	; 1
     d2e:	13 96       	adiw	r26, 0x03	; 3
     d30:	9c 93       	st	X, r25
     d32:	8e 93       	st	-X, r24
     d34:	12 97       	sbiw	r26, 0x02	; 2
     d36:	20 30       	cpi	r18, 0x00	; 0
     d38:	80 e0       	ldi	r24, 0x00	; 0
     d3a:	38 07       	cpc	r19, r24
     d3c:	80 e0       	ldi	r24, 0x00	; 0
     d3e:	48 07       	cpc	r20, r24
     d40:	80 e4       	ldi	r24, 0x40	; 64
     d42:	58 07       	cpc	r21, r24
     d44:	58 f3       	brcs	.-42     	; 0xd1c <__unpack_f+0x66>
     d46:	14 96       	adiw	r26, 0x04	; 4
     d48:	2d 93       	st	X+, r18
     d4a:	3d 93       	st	X+, r19
     d4c:	4d 93       	st	X+, r20
     d4e:	5c 93       	st	X, r21
     d50:	17 97       	sbiw	r26, 0x07	; 7
     d52:	08 95       	ret
     d54:	2f 3f       	cpi	r18, 0xFF	; 255
     d56:	31 05       	cpc	r19, r1
     d58:	79 f4       	brne	.+30     	; 0xd78 <__unpack_f+0xc2>
     d5a:	41 15       	cp	r20, r1
     d5c:	51 05       	cpc	r21, r1
     d5e:	61 05       	cpc	r22, r1
     d60:	71 05       	cpc	r23, r1
     d62:	19 f4       	brne	.+6      	; 0xd6a <__unpack_f+0xb4>
     d64:	84 e0       	ldi	r24, 0x04	; 4
     d66:	8c 93       	st	X, r24
     d68:	08 95       	ret
     d6a:	64 ff       	sbrs	r22, 4
     d6c:	03 c0       	rjmp	.+6      	; 0xd74 <__unpack_f+0xbe>
     d6e:	81 e0       	ldi	r24, 0x01	; 1
     d70:	8c 93       	st	X, r24
     d72:	12 c0       	rjmp	.+36     	; 0xd98 <__unpack_f+0xe2>
     d74:	1c 92       	st	X, r1
     d76:	10 c0       	rjmp	.+32     	; 0xd98 <__unpack_f+0xe2>
     d78:	2f 57       	subi	r18, 0x7F	; 127
     d7a:	30 40       	sbci	r19, 0x00	; 0
     d7c:	13 96       	adiw	r26, 0x03	; 3
     d7e:	3c 93       	st	X, r19
     d80:	2e 93       	st	-X, r18
     d82:	12 97       	sbiw	r26, 0x02	; 2
     d84:	83 e0       	ldi	r24, 0x03	; 3
     d86:	8c 93       	st	X, r24
     d88:	87 e0       	ldi	r24, 0x07	; 7
     d8a:	44 0f       	add	r20, r20
     d8c:	55 1f       	adc	r21, r21
     d8e:	66 1f       	adc	r22, r22
     d90:	77 1f       	adc	r23, r23
     d92:	8a 95       	dec	r24
     d94:	d1 f7       	brne	.-12     	; 0xd8a <__unpack_f+0xd4>
     d96:	70 64       	ori	r23, 0x40	; 64
     d98:	14 96       	adiw	r26, 0x04	; 4
     d9a:	4d 93       	st	X+, r20
     d9c:	5d 93       	st	X+, r21
     d9e:	6d 93       	st	X+, r22
     da0:	7c 93       	st	X, r23
     da2:	17 97       	sbiw	r26, 0x07	; 7
     da4:	08 95       	ret

00000da6 <__fpcmp_parts_f>:
     da6:	1f 93       	push	r17
     da8:	dc 01       	movw	r26, r24
     daa:	fb 01       	movw	r30, r22
     dac:	9c 91       	ld	r25, X
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	08 f4       	brcc	.+2      	; 0xdb4 <__fpcmp_parts_f+0xe>
     db2:	47 c0       	rjmp	.+142    	; 0xe42 <__fpcmp_parts_f+0x9c>
     db4:	80 81       	ld	r24, Z
     db6:	82 30       	cpi	r24, 0x02	; 2
     db8:	08 f4       	brcc	.+2      	; 0xdbc <__fpcmp_parts_f+0x16>
     dba:	43 c0       	rjmp	.+134    	; 0xe42 <__fpcmp_parts_f+0x9c>
     dbc:	94 30       	cpi	r25, 0x04	; 4
     dbe:	51 f4       	brne	.+20     	; 0xdd4 <__fpcmp_parts_f+0x2e>
     dc0:	11 96       	adiw	r26, 0x01	; 1
     dc2:	1c 91       	ld	r17, X
     dc4:	84 30       	cpi	r24, 0x04	; 4
     dc6:	99 f5       	brne	.+102    	; 0xe2e <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	68 2f       	mov	r22, r24
     dcc:	70 e0       	ldi	r23, 0x00	; 0
     dce:	61 1b       	sub	r22, r17
     dd0:	71 09       	sbc	r23, r1
     dd2:	3f c0       	rjmp	.+126    	; 0xe52 <__fpcmp_parts_f+0xac>
     dd4:	84 30       	cpi	r24, 0x04	; 4
     dd6:	21 f0       	breq	.+8      	; 0xde0 <__fpcmp_parts_f+0x3a>
     dd8:	92 30       	cpi	r25, 0x02	; 2
     dda:	31 f4       	brne	.+12     	; 0xde8 <__fpcmp_parts_f+0x42>
     ddc:	82 30       	cpi	r24, 0x02	; 2
     dde:	b9 f1       	breq	.+110    	; 0xe4e <__fpcmp_parts_f+0xa8>
     de0:	81 81       	ldd	r24, Z+1	; 0x01
     de2:	88 23       	and	r24, r24
     de4:	89 f1       	breq	.+98     	; 0xe48 <__fpcmp_parts_f+0xa2>
     de6:	2d c0       	rjmp	.+90     	; 0xe42 <__fpcmp_parts_f+0x9c>
     de8:	11 96       	adiw	r26, 0x01	; 1
     dea:	1c 91       	ld	r17, X
     dec:	11 97       	sbiw	r26, 0x01	; 1
     dee:	82 30       	cpi	r24, 0x02	; 2
     df0:	f1 f0       	breq	.+60     	; 0xe2e <__fpcmp_parts_f+0x88>
     df2:	81 81       	ldd	r24, Z+1	; 0x01
     df4:	18 17       	cp	r17, r24
     df6:	d9 f4       	brne	.+54     	; 0xe2e <__fpcmp_parts_f+0x88>
     df8:	12 96       	adiw	r26, 0x02	; 2
     dfa:	2d 91       	ld	r18, X+
     dfc:	3c 91       	ld	r19, X
     dfe:	13 97       	sbiw	r26, 0x03	; 3
     e00:	82 81       	ldd	r24, Z+2	; 0x02
     e02:	93 81       	ldd	r25, Z+3	; 0x03
     e04:	82 17       	cp	r24, r18
     e06:	93 07       	cpc	r25, r19
     e08:	94 f0       	brlt	.+36     	; 0xe2e <__fpcmp_parts_f+0x88>
     e0a:	28 17       	cp	r18, r24
     e0c:	39 07       	cpc	r19, r25
     e0e:	bc f0       	brlt	.+46     	; 0xe3e <__fpcmp_parts_f+0x98>
     e10:	14 96       	adiw	r26, 0x04	; 4
     e12:	8d 91       	ld	r24, X+
     e14:	9d 91       	ld	r25, X+
     e16:	0d 90       	ld	r0, X+
     e18:	bc 91       	ld	r27, X
     e1a:	a0 2d       	mov	r26, r0
     e1c:	24 81       	ldd	r18, Z+4	; 0x04
     e1e:	35 81       	ldd	r19, Z+5	; 0x05
     e20:	46 81       	ldd	r20, Z+6	; 0x06
     e22:	57 81       	ldd	r21, Z+7	; 0x07
     e24:	28 17       	cp	r18, r24
     e26:	39 07       	cpc	r19, r25
     e28:	4a 07       	cpc	r20, r26
     e2a:	5b 07       	cpc	r21, r27
     e2c:	18 f4       	brcc	.+6      	; 0xe34 <__fpcmp_parts_f+0x8e>
     e2e:	11 23       	and	r17, r17
     e30:	41 f0       	breq	.+16     	; 0xe42 <__fpcmp_parts_f+0x9c>
     e32:	0a c0       	rjmp	.+20     	; 0xe48 <__fpcmp_parts_f+0xa2>
     e34:	82 17       	cp	r24, r18
     e36:	93 07       	cpc	r25, r19
     e38:	a4 07       	cpc	r26, r20
     e3a:	b5 07       	cpc	r27, r21
     e3c:	40 f4       	brcc	.+16     	; 0xe4e <__fpcmp_parts_f+0xa8>
     e3e:	11 23       	and	r17, r17
     e40:	19 f0       	breq	.+6      	; 0xe48 <__fpcmp_parts_f+0xa2>
     e42:	61 e0       	ldi	r22, 0x01	; 1
     e44:	70 e0       	ldi	r23, 0x00	; 0
     e46:	05 c0       	rjmp	.+10     	; 0xe52 <__fpcmp_parts_f+0xac>
     e48:	6f ef       	ldi	r22, 0xFF	; 255
     e4a:	7f ef       	ldi	r23, 0xFF	; 255
     e4c:	02 c0       	rjmp	.+4      	; 0xe52 <__fpcmp_parts_f+0xac>
     e4e:	60 e0       	ldi	r22, 0x00	; 0
     e50:	70 e0       	ldi	r23, 0x00	; 0
     e52:	cb 01       	movw	r24, r22
     e54:	1f 91       	pop	r17
     e56:	08 95       	ret

00000e58 <MCAL_WDT_u8Enable>:
 *      Author: Mohamed
 */

#include "WDT.h"

void MCAL_WDT_u8Enable(void) {
     e58:	df 93       	push	r29
     e5a:	cf 93       	push	r28
     e5c:	cd b7       	in	r28, 0x3d	; 61
     e5e:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(WDTCR, WDTCR_Pin3);
     e60:	a1 e4       	ldi	r26, 0x41	; 65
     e62:	b0 e0       	ldi	r27, 0x00	; 0
     e64:	e1 e4       	ldi	r30, 0x41	; 65
     e66:	f0 e0       	ldi	r31, 0x00	; 0
     e68:	80 81       	ld	r24, Z
     e6a:	88 60       	ori	r24, 0x08	; 8
     e6c:	8c 93       	st	X, r24
	SET_BIT(WDTCR, WDTCR_Pin4);
     e6e:	a1 e4       	ldi	r26, 0x41	; 65
     e70:	b0 e0       	ldi	r27, 0x00	; 0
     e72:	e1 e4       	ldi	r30, 0x41	; 65
     e74:	f0 e0       	ldi	r31, 0x00	; 0
     e76:	80 81       	ld	r24, Z
     e78:	80 61       	ori	r24, 0x10	; 16
     e7a:	8c 93       	st	X, r24
}
     e7c:	cf 91       	pop	r28
     e7e:	df 91       	pop	r29
     e80:	08 95       	ret

00000e82 <MCAL_WDT_u8SetTime>:
void MCAL_WDT_u8SetTime(u8 Loc_u8Time) {
     e82:	df 93       	push	r29
     e84:	cf 93       	push	r28
     e86:	0f 92       	push	r0
     e88:	cd b7       	in	r28, 0x3d	; 61
     e8a:	de b7       	in	r29, 0x3e	; 62
     e8c:	89 83       	std	Y+1, r24	; 0x01
	if (Loc_u8Time == Time_16_3_ms) {
     e8e:	89 81       	ldd	r24, Y+1	; 0x01
     e90:	88 23       	and	r24, r24
     e92:	b1 f4       	brne	.+44     	; 0xec0 <MCAL_WDT_u8SetTime+0x3e>
		CLR_BIT(WDTCR, WDTCR_Pin0);
     e94:	a1 e4       	ldi	r26, 0x41	; 65
     e96:	b0 e0       	ldi	r27, 0x00	; 0
     e98:	e1 e4       	ldi	r30, 0x41	; 65
     e9a:	f0 e0       	ldi	r31, 0x00	; 0
     e9c:	80 81       	ld	r24, Z
     e9e:	8e 7f       	andi	r24, 0xFE	; 254
     ea0:	8c 93       	st	X, r24
		CLR_BIT(WDTCR, WDTCR_Pin1);
     ea2:	a1 e4       	ldi	r26, 0x41	; 65
     ea4:	b0 e0       	ldi	r27, 0x00	; 0
     ea6:	e1 e4       	ldi	r30, 0x41	; 65
     ea8:	f0 e0       	ldi	r31, 0x00	; 0
     eaa:	80 81       	ld	r24, Z
     eac:	8d 7f       	andi	r24, 0xFD	; 253
     eae:	8c 93       	st	X, r24
		CLR_BIT(WDTCR, WDTCR_Pin2);
     eb0:	a1 e4       	ldi	r26, 0x41	; 65
     eb2:	b0 e0       	ldi	r27, 0x00	; 0
     eb4:	e1 e4       	ldi	r30, 0x41	; 65
     eb6:	f0 e0       	ldi	r31, 0x00	; 0
     eb8:	80 81       	ld	r24, Z
     eba:	8b 7f       	andi	r24, 0xFB	; 251
     ebc:	8c 93       	st	X, r24
     ebe:	ae c0       	rjmp	.+348    	; 0x101c <MCAL_WDT_u8SetTime+0x19a>
	} else if (Loc_u8Time == Time_32_5_ms) {
     ec0:	89 81       	ldd	r24, Y+1	; 0x01
     ec2:	81 30       	cpi	r24, 0x01	; 1
     ec4:	b1 f4       	brne	.+44     	; 0xef2 <MCAL_WDT_u8SetTime+0x70>
		SET_BIT(WDTCR, WDTCR_Pin0);
     ec6:	a1 e4       	ldi	r26, 0x41	; 65
     ec8:	b0 e0       	ldi	r27, 0x00	; 0
     eca:	e1 e4       	ldi	r30, 0x41	; 65
     ecc:	f0 e0       	ldi	r31, 0x00	; 0
     ece:	80 81       	ld	r24, Z
     ed0:	81 60       	ori	r24, 0x01	; 1
     ed2:	8c 93       	st	X, r24
		CLR_BIT(WDTCR, WDTCR_Pin1);
     ed4:	a1 e4       	ldi	r26, 0x41	; 65
     ed6:	b0 e0       	ldi	r27, 0x00	; 0
     ed8:	e1 e4       	ldi	r30, 0x41	; 65
     eda:	f0 e0       	ldi	r31, 0x00	; 0
     edc:	80 81       	ld	r24, Z
     ede:	8d 7f       	andi	r24, 0xFD	; 253
     ee0:	8c 93       	st	X, r24
		CLR_BIT(WDTCR, WDTCR_Pin2);
     ee2:	a1 e4       	ldi	r26, 0x41	; 65
     ee4:	b0 e0       	ldi	r27, 0x00	; 0
     ee6:	e1 e4       	ldi	r30, 0x41	; 65
     ee8:	f0 e0       	ldi	r31, 0x00	; 0
     eea:	80 81       	ld	r24, Z
     eec:	8b 7f       	andi	r24, 0xFB	; 251
     eee:	8c 93       	st	X, r24
     ef0:	95 c0       	rjmp	.+298    	; 0x101c <MCAL_WDT_u8SetTime+0x19a>
	} else if (Loc_u8Time == Time_65_0_ms) {
     ef2:	89 81       	ldd	r24, Y+1	; 0x01
     ef4:	82 30       	cpi	r24, 0x02	; 2
     ef6:	b1 f4       	brne	.+44     	; 0xf24 <MCAL_WDT_u8SetTime+0xa2>
		CLR_BIT(WDTCR, WDTCR_Pin0);
     ef8:	a1 e4       	ldi	r26, 0x41	; 65
     efa:	b0 e0       	ldi	r27, 0x00	; 0
     efc:	e1 e4       	ldi	r30, 0x41	; 65
     efe:	f0 e0       	ldi	r31, 0x00	; 0
     f00:	80 81       	ld	r24, Z
     f02:	8e 7f       	andi	r24, 0xFE	; 254
     f04:	8c 93       	st	X, r24
		SET_BIT(WDTCR, WDTCR_Pin1);
     f06:	a1 e4       	ldi	r26, 0x41	; 65
     f08:	b0 e0       	ldi	r27, 0x00	; 0
     f0a:	e1 e4       	ldi	r30, 0x41	; 65
     f0c:	f0 e0       	ldi	r31, 0x00	; 0
     f0e:	80 81       	ld	r24, Z
     f10:	82 60       	ori	r24, 0x02	; 2
     f12:	8c 93       	st	X, r24
		CLR_BIT(WDTCR, WDTCR_Pin2);
     f14:	a1 e4       	ldi	r26, 0x41	; 65
     f16:	b0 e0       	ldi	r27, 0x00	; 0
     f18:	e1 e4       	ldi	r30, 0x41	; 65
     f1a:	f0 e0       	ldi	r31, 0x00	; 0
     f1c:	80 81       	ld	r24, Z
     f1e:	8b 7f       	andi	r24, 0xFB	; 251
     f20:	8c 93       	st	X, r24
     f22:	7c c0       	rjmp	.+248    	; 0x101c <MCAL_WDT_u8SetTime+0x19a>
	} else if (Loc_u8Time == Time_0_13_s) {
     f24:	89 81       	ldd	r24, Y+1	; 0x01
     f26:	83 30       	cpi	r24, 0x03	; 3
     f28:	b1 f4       	brne	.+44     	; 0xf56 <MCAL_WDT_u8SetTime+0xd4>
		SET_BIT(WDTCR, WDTCR_Pin0);
     f2a:	a1 e4       	ldi	r26, 0x41	; 65
     f2c:	b0 e0       	ldi	r27, 0x00	; 0
     f2e:	e1 e4       	ldi	r30, 0x41	; 65
     f30:	f0 e0       	ldi	r31, 0x00	; 0
     f32:	80 81       	ld	r24, Z
     f34:	81 60       	ori	r24, 0x01	; 1
     f36:	8c 93       	st	X, r24
		SET_BIT(WDTCR, WDTCR_Pin1);
     f38:	a1 e4       	ldi	r26, 0x41	; 65
     f3a:	b0 e0       	ldi	r27, 0x00	; 0
     f3c:	e1 e4       	ldi	r30, 0x41	; 65
     f3e:	f0 e0       	ldi	r31, 0x00	; 0
     f40:	80 81       	ld	r24, Z
     f42:	82 60       	ori	r24, 0x02	; 2
     f44:	8c 93       	st	X, r24
		CLR_BIT(WDTCR, WDTCR_Pin2);
     f46:	a1 e4       	ldi	r26, 0x41	; 65
     f48:	b0 e0       	ldi	r27, 0x00	; 0
     f4a:	e1 e4       	ldi	r30, 0x41	; 65
     f4c:	f0 e0       	ldi	r31, 0x00	; 0
     f4e:	80 81       	ld	r24, Z
     f50:	8b 7f       	andi	r24, 0xFB	; 251
     f52:	8c 93       	st	X, r24
     f54:	63 c0       	rjmp	.+198    	; 0x101c <MCAL_WDT_u8SetTime+0x19a>
	} else if (Loc_u8Time == Time_0_26_s) {
     f56:	89 81       	ldd	r24, Y+1	; 0x01
     f58:	84 30       	cpi	r24, 0x04	; 4
     f5a:	b1 f4       	brne	.+44     	; 0xf88 <MCAL_WDT_u8SetTime+0x106>
		CLR_BIT(WDTCR, WDTCR_Pin0);
     f5c:	a1 e4       	ldi	r26, 0x41	; 65
     f5e:	b0 e0       	ldi	r27, 0x00	; 0
     f60:	e1 e4       	ldi	r30, 0x41	; 65
     f62:	f0 e0       	ldi	r31, 0x00	; 0
     f64:	80 81       	ld	r24, Z
     f66:	8e 7f       	andi	r24, 0xFE	; 254
     f68:	8c 93       	st	X, r24
		CLR_BIT(WDTCR, WDTCR_Pin1);
     f6a:	a1 e4       	ldi	r26, 0x41	; 65
     f6c:	b0 e0       	ldi	r27, 0x00	; 0
     f6e:	e1 e4       	ldi	r30, 0x41	; 65
     f70:	f0 e0       	ldi	r31, 0x00	; 0
     f72:	80 81       	ld	r24, Z
     f74:	8d 7f       	andi	r24, 0xFD	; 253
     f76:	8c 93       	st	X, r24
		SET_BIT(WDTCR, WDTCR_Pin2);
     f78:	a1 e4       	ldi	r26, 0x41	; 65
     f7a:	b0 e0       	ldi	r27, 0x00	; 0
     f7c:	e1 e4       	ldi	r30, 0x41	; 65
     f7e:	f0 e0       	ldi	r31, 0x00	; 0
     f80:	80 81       	ld	r24, Z
     f82:	84 60       	ori	r24, 0x04	; 4
     f84:	8c 93       	st	X, r24
     f86:	4a c0       	rjmp	.+148    	; 0x101c <MCAL_WDT_u8SetTime+0x19a>
	} else if (Loc_u8Time == Time_0_52_s) {
     f88:	89 81       	ldd	r24, Y+1	; 0x01
     f8a:	85 30       	cpi	r24, 0x05	; 5
     f8c:	b1 f4       	brne	.+44     	; 0xfba <MCAL_WDT_u8SetTime+0x138>
		SET_BIT(WDTCR, WDTCR_Pin0);
     f8e:	a1 e4       	ldi	r26, 0x41	; 65
     f90:	b0 e0       	ldi	r27, 0x00	; 0
     f92:	e1 e4       	ldi	r30, 0x41	; 65
     f94:	f0 e0       	ldi	r31, 0x00	; 0
     f96:	80 81       	ld	r24, Z
     f98:	81 60       	ori	r24, 0x01	; 1
     f9a:	8c 93       	st	X, r24
		CLR_BIT(WDTCR, WDTCR_Pin1);
     f9c:	a1 e4       	ldi	r26, 0x41	; 65
     f9e:	b0 e0       	ldi	r27, 0x00	; 0
     fa0:	e1 e4       	ldi	r30, 0x41	; 65
     fa2:	f0 e0       	ldi	r31, 0x00	; 0
     fa4:	80 81       	ld	r24, Z
     fa6:	8d 7f       	andi	r24, 0xFD	; 253
     fa8:	8c 93       	st	X, r24
		SET_BIT(WDTCR, WDTCR_Pin2);
     faa:	a1 e4       	ldi	r26, 0x41	; 65
     fac:	b0 e0       	ldi	r27, 0x00	; 0
     fae:	e1 e4       	ldi	r30, 0x41	; 65
     fb0:	f0 e0       	ldi	r31, 0x00	; 0
     fb2:	80 81       	ld	r24, Z
     fb4:	84 60       	ori	r24, 0x04	; 4
     fb6:	8c 93       	st	X, r24
     fb8:	31 c0       	rjmp	.+98     	; 0x101c <MCAL_WDT_u8SetTime+0x19a>
	} else if (Loc_u8Time == Time_1_0_s) {
     fba:	89 81       	ldd	r24, Y+1	; 0x01
     fbc:	86 30       	cpi	r24, 0x06	; 6
     fbe:	b1 f4       	brne	.+44     	; 0xfec <MCAL_WDT_u8SetTime+0x16a>
		CLR_BIT(WDTCR, WDTCR_Pin0);
     fc0:	a1 e4       	ldi	r26, 0x41	; 65
     fc2:	b0 e0       	ldi	r27, 0x00	; 0
     fc4:	e1 e4       	ldi	r30, 0x41	; 65
     fc6:	f0 e0       	ldi	r31, 0x00	; 0
     fc8:	80 81       	ld	r24, Z
     fca:	8e 7f       	andi	r24, 0xFE	; 254
     fcc:	8c 93       	st	X, r24
		SET_BIT(WDTCR, WDTCR_Pin1);
     fce:	a1 e4       	ldi	r26, 0x41	; 65
     fd0:	b0 e0       	ldi	r27, 0x00	; 0
     fd2:	e1 e4       	ldi	r30, 0x41	; 65
     fd4:	f0 e0       	ldi	r31, 0x00	; 0
     fd6:	80 81       	ld	r24, Z
     fd8:	82 60       	ori	r24, 0x02	; 2
     fda:	8c 93       	st	X, r24
		SET_BIT(WDTCR, WDTCR_Pin2);
     fdc:	a1 e4       	ldi	r26, 0x41	; 65
     fde:	b0 e0       	ldi	r27, 0x00	; 0
     fe0:	e1 e4       	ldi	r30, 0x41	; 65
     fe2:	f0 e0       	ldi	r31, 0x00	; 0
     fe4:	80 81       	ld	r24, Z
     fe6:	84 60       	ori	r24, 0x04	; 4
     fe8:	8c 93       	st	X, r24
     fea:	18 c0       	rjmp	.+48     	; 0x101c <MCAL_WDT_u8SetTime+0x19a>
	} else if (Loc_u8Time == Time_2_1_s) {
     fec:	89 81       	ldd	r24, Y+1	; 0x01
     fee:	87 30       	cpi	r24, 0x07	; 7
     ff0:	a9 f4       	brne	.+42     	; 0x101c <MCAL_WDT_u8SetTime+0x19a>
		SET_BIT(WDTCR, WDTCR_Pin0);
     ff2:	a1 e4       	ldi	r26, 0x41	; 65
     ff4:	b0 e0       	ldi	r27, 0x00	; 0
     ff6:	e1 e4       	ldi	r30, 0x41	; 65
     ff8:	f0 e0       	ldi	r31, 0x00	; 0
     ffa:	80 81       	ld	r24, Z
     ffc:	81 60       	ori	r24, 0x01	; 1
     ffe:	8c 93       	st	X, r24
		SET_BIT(WDTCR, WDTCR_Pin1);
    1000:	a1 e4       	ldi	r26, 0x41	; 65
    1002:	b0 e0       	ldi	r27, 0x00	; 0
    1004:	e1 e4       	ldi	r30, 0x41	; 65
    1006:	f0 e0       	ldi	r31, 0x00	; 0
    1008:	80 81       	ld	r24, Z
    100a:	82 60       	ori	r24, 0x02	; 2
    100c:	8c 93       	st	X, r24
		SET_BIT(WDTCR, WDTCR_Pin2);
    100e:	a1 e4       	ldi	r26, 0x41	; 65
    1010:	b0 e0       	ldi	r27, 0x00	; 0
    1012:	e1 e4       	ldi	r30, 0x41	; 65
    1014:	f0 e0       	ldi	r31, 0x00	; 0
    1016:	80 81       	ld	r24, Z
    1018:	84 60       	ori	r24, 0x04	; 4
    101a:	8c 93       	st	X, r24
	}
}
    101c:	0f 90       	pop	r0
    101e:	cf 91       	pop	r28
    1020:	df 91       	pop	r29
    1022:	08 95       	ret

00001024 <MCAL_WDT_u8Disable>:
void MCAL_WDT_u8Disable(void) {
    1024:	df 93       	push	r29
    1026:	cf 93       	push	r28
    1028:	cd b7       	in	r28, 0x3d	; 61
    102a:	de b7       	in	r29, 0x3e	; 62
	WDTCR = WDTCR_Disable;
    102c:	e1 e4       	ldi	r30, 0x41	; 65
    102e:	f0 e0       	ldi	r31, 0x00	; 0
    1030:	88 e1       	ldi	r24, 0x18	; 24
    1032:	80 83       	st	Z, r24
	WDTCR = WDTCR_Zero;
    1034:	e1 e4       	ldi	r30, 0x41	; 65
    1036:	f0 e0       	ldi	r31, 0x00	; 0
    1038:	10 82       	st	Z, r1
}
    103a:	cf 91       	pop	r28
    103c:	df 91       	pop	r29
    103e:	08 95       	ret

00001040 <MCAL_UART_UARTInit>:
 */

#include "UART.h"
//#include "avr/interrupt.h"

void MCAL_UART_UARTInit(void) {
    1040:	df 93       	push	r29
    1042:	cf 93       	push	r28
    1044:	cd b7       	in	r28, 0x3d	; 61
    1046:	de b7       	in	r29, 0x3e	; 62
	/* Set baud rate */
	UBRRH = (u8) (Baud_Rate >> Shift_8_bit);
    1048:	e0 e4       	ldi	r30, 0x40	; 64
    104a:	f0 e0       	ldi	r31, 0x00	; 0
    104c:	10 82       	st	Z, r1
	UBRRL = (u8) Baud_Rate;
    104e:	e9 e2       	ldi	r30, 0x29	; 41
    1050:	f0 e0       	ldi	r31, 0x00	; 0
    1052:	87 e6       	ldi	r24, 0x67	; 103
    1054:	80 83       	st	Z, r24

	/* Enable RX and TX */
//	UCSRB = (1 << RXEN) | (1 << TXEN);
	SET_BIT(UCSRB,RXEN_PIN);
    1056:	aa e2       	ldi	r26, 0x2A	; 42
    1058:	b0 e0       	ldi	r27, 0x00	; 0
    105a:	ea e2       	ldi	r30, 0x2A	; 42
    105c:	f0 e0       	ldi	r31, 0x00	; 0
    105e:	80 81       	ld	r24, Z
    1060:	80 61       	ori	r24, 0x10	; 16
    1062:	8c 93       	st	X, r24
	SET_BIT(UCSRB,TXEN_PIN);
    1064:	aa e2       	ldi	r26, 0x2A	; 42
    1066:	b0 e0       	ldi	r27, 0x00	; 0
    1068:	ea e2       	ldi	r30, 0x2A	; 42
    106a:	f0 e0       	ldi	r31, 0x00	; 0
    106c:	80 81       	ld	r24, Z
    106e:	88 60       	ori	r24, 0x08	; 8
    1070:	8c 93       	st	X, r24

	/* Set frame format: 8data, 2stop bit */
//	UCSRC = (1 << URSEL) | (1 << USBS) | (3 << UCSZ0);
	UCSRC = UCSRC_Size;
    1072:	e0 e4       	ldi	r30, 0x40	; 64
    1074:	f0 e0       	ldi	r31, 0x00	; 0
    1076:	8e e8       	ldi	r24, 0x8E	; 142
    1078:	80 83       	st	Z, r24
	//Logical Error
//	SET_BIT(UCSRC,URSEL_PIN);
//	SET_BIT(UCSRC,USBS_PIN);
//	SET_BIT(UCSRC,UCSZ0_PIN);
//	SET_BIT(UCSRC,UCSZ1_PIN);
}
    107a:	cf 91       	pop	r28
    107c:	df 91       	pop	r29
    107e:	08 95       	ret

00001080 <MCAL_UART_UARTTransmit>:

void MCAL_UART_UARTTransmit(u8 Loc_u8data) {
    1080:	df 93       	push	r29
    1082:	cf 93       	push	r28
    1084:	0f 92       	push	r0
    1086:	cd b7       	in	r28, 0x3d	; 61
    1088:	de b7       	in	r29, 0x3e	; 62
    108a:	89 83       	std	Y+1, r24	; 0x01
	/* Wait for empty transmit buffer */
//	while (!( UCSRA & (1 << UDRE_PIN)));
	while (GET_BIT(UCSRA,UDRE_PIN)==0);
    108c:	eb e2       	ldi	r30, 0x2B	; 43
    108e:	f0 e0       	ldi	r31, 0x00	; 0
    1090:	80 81       	ld	r24, Z
    1092:	82 95       	swap	r24
    1094:	86 95       	lsr	r24
    1096:	87 70       	andi	r24, 0x07	; 7
    1098:	88 2f       	mov	r24, r24
    109a:	90 e0       	ldi	r25, 0x00	; 0
    109c:	81 70       	andi	r24, 0x01	; 1
    109e:	90 70       	andi	r25, 0x00	; 0
    10a0:	00 97       	sbiw	r24, 0x00	; 0
    10a2:	a1 f3       	breq	.-24     	; 0x108c <MCAL_UART_UARTTransmit+0xc>

	/* Put data into buffer, sends the data */
	UDR = Loc_u8data;
    10a4:	ec e2       	ldi	r30, 0x2C	; 44
    10a6:	f0 e0       	ldi	r31, 0x00	; 0
    10a8:	89 81       	ldd	r24, Y+1	; 0x01
    10aa:	80 83       	st	Z, r24

	/* Wait for data to be transmitted */
	while (GET_BIT(UCSRA,TXC_PIN)==0);
    10ac:	eb e2       	ldi	r30, 0x2B	; 43
    10ae:	f0 e0       	ldi	r31, 0x00	; 0
    10b0:	80 81       	ld	r24, Z
    10b2:	82 95       	swap	r24
    10b4:	86 95       	lsr	r24
    10b6:	86 95       	lsr	r24
    10b8:	83 70       	andi	r24, 0x03	; 3
    10ba:	88 2f       	mov	r24, r24
    10bc:	90 e0       	ldi	r25, 0x00	; 0
    10be:	81 70       	andi	r24, 0x01	; 1
    10c0:	90 70       	andi	r25, 0x00	; 0
    10c2:	00 97       	sbiw	r24, 0x00	; 0
    10c4:	99 f3       	breq	.-26     	; 0x10ac <MCAL_UART_UARTTransmit+0x2c>
	SET_BIT(UCSRA,TXC_PIN);
    10c6:	ab e2       	ldi	r26, 0x2B	; 43
    10c8:	b0 e0       	ldi	r27, 0x00	; 0
    10ca:	eb e2       	ldi	r30, 0x2B	; 43
    10cc:	f0 e0       	ldi	r31, 0x00	; 0
    10ce:	80 81       	ld	r24, Z
    10d0:	80 64       	ori	r24, 0x40	; 64
    10d2:	8c 93       	st	X, r24

}
    10d4:	0f 90       	pop	r0
    10d6:	cf 91       	pop	r28
    10d8:	df 91       	pop	r29
    10da:	08 95       	ret

000010dc <MCAL_UART_UARTReceive>:
//		MCAL_UART_UARTTransmit(Loc_u8data[i]);
//	}
//
//}

void MCAL_UART_UARTReceive(u8* Loc_u8data) {
    10dc:	df 93       	push	r29
    10de:	cf 93       	push	r28
    10e0:	00 d0       	rcall	.+0      	; 0x10e2 <MCAL_UART_UARTReceive+0x6>
    10e2:	cd b7       	in	r28, 0x3d	; 61
    10e4:	de b7       	in	r29, 0x3e	; 62
    10e6:	9a 83       	std	Y+2, r25	; 0x02
    10e8:	89 83       	std	Y+1, r24	; 0x01
	/* Wait for data to be received */
//	while (!(UCSRA & (1 << RXC_PIN)));
	while (GET_BIT(UCSRA,RXC_PIN)==0);
    10ea:	eb e2       	ldi	r30, 0x2B	; 43
    10ec:	f0 e0       	ldi	r31, 0x00	; 0
    10ee:	80 81       	ld	r24, Z
    10f0:	88 23       	and	r24, r24
    10f2:	dc f7       	brge	.-10     	; 0x10ea <MCAL_UART_UARTReceive+0xe>

	/* 	Save Received Data in Var-Loc_u8data */
	*Loc_u8data=UDR;
    10f4:	ec e2       	ldi	r30, 0x2C	; 44
    10f6:	f0 e0       	ldi	r31, 0x00	; 0
    10f8:	80 81       	ld	r24, Z
    10fa:	e9 81       	ldd	r30, Y+1	; 0x01
    10fc:	fa 81       	ldd	r31, Y+2	; 0x02
    10fe:	80 83       	st	Z, r24
}
    1100:	0f 90       	pop	r0
    1102:	0f 90       	pop	r0
    1104:	cf 91       	pop	r28
    1106:	df 91       	pop	r29
    1108:	08 95       	ret

0000110a <MCAL_T1_u8T1Init>:
 *  Created on: Oct 22, 2023
 *      Author: TOP_WORLD
 */
#include "Timer1.h"
void (*Gptr_3)(void)='\0';
u8 MCAL_T1_u8T1Init(u8 LOC_u8Timer1Mode) {
    110a:	df 93       	push	r29
    110c:	cf 93       	push	r28
    110e:	00 d0       	rcall	.+0      	; 0x1110 <MCAL_T1_u8T1Init+0x6>
    1110:	cd b7       	in	r28, 0x3d	; 61
    1112:	de b7       	in	r29, 0x3e	; 62
    1114:	8a 83       	std	Y+2, r24	; 0x02
	u8 LOC_u8ReturnValue = E_NOT_OK;
    1116:	81 e0       	ldi	r24, 0x01	; 1
    1118:	89 83       	std	Y+1, r24	; 0x01
	if (LOC_u8Timer1Mode <= FAST_PWM_OCR1A) {
    111a:	8a 81       	ldd	r24, Y+2	; 0x02
    111c:	80 31       	cpi	r24, 0x10	; 16
    111e:	08 f0       	brcs	.+2      	; 0x1122 <MCAL_T1_u8T1Init+0x18>
    1120:	0f c2       	rjmp	.+1054   	; 0x1540 <MCAL_T1_u8T1Init+0x436>
		if (LOC_u8Timer1Mode == NORMAL_MODE) {
    1122:	8a 81       	ldd	r24, Y+2	; 0x02
    1124:	88 23       	and	r24, r24
    1126:	f1 f4       	brne	.+60     	; 0x1164 <MCAL_T1_u8T1Init+0x5a>
			CLR_BIT(TCCR1A, Pin0);
    1128:	af e4       	ldi	r26, 0x4F	; 79
    112a:	b0 e0       	ldi	r27, 0x00	; 0
    112c:	ef e4       	ldi	r30, 0x4F	; 79
    112e:	f0 e0       	ldi	r31, 0x00	; 0
    1130:	80 81       	ld	r24, Z
    1132:	8e 7f       	andi	r24, 0xFE	; 254
    1134:	8c 93       	st	X, r24
			CLR_BIT(TCCR1A, Pin1);
    1136:	af e4       	ldi	r26, 0x4F	; 79
    1138:	b0 e0       	ldi	r27, 0x00	; 0
    113a:	ef e4       	ldi	r30, 0x4F	; 79
    113c:	f0 e0       	ldi	r31, 0x00	; 0
    113e:	80 81       	ld	r24, Z
    1140:	8d 7f       	andi	r24, 0xFD	; 253
    1142:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B, Pin3);
    1144:	ae e4       	ldi	r26, 0x4E	; 78
    1146:	b0 e0       	ldi	r27, 0x00	; 0
    1148:	ee e4       	ldi	r30, 0x4E	; 78
    114a:	f0 e0       	ldi	r31, 0x00	; 0
    114c:	80 81       	ld	r24, Z
    114e:	87 7f       	andi	r24, 0xF7	; 247
    1150:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B, Pin4);
    1152:	ae e4       	ldi	r26, 0x4E	; 78
    1154:	b0 e0       	ldi	r27, 0x00	; 0
    1156:	ee e4       	ldi	r30, 0x4E	; 78
    1158:	f0 e0       	ldi	r31, 0x00	; 0
    115a:	80 81       	ld	r24, Z
    115c:	8f 7e       	andi	r24, 0xEF	; 239
    115e:	8c 93       	st	X, r24
			LOC_u8ReturnValue = E_OK;
    1160:	19 82       	std	Y+1, r1	; 0x01
    1162:	ee c1       	rjmp	.+988    	; 0x1540 <MCAL_T1_u8T1Init+0x436>
		} else if (LOC_u8Timer1Mode == PWM_PHASE_CORRECT_8bit) {
    1164:	8a 81       	ldd	r24, Y+2	; 0x02
    1166:	81 30       	cpi	r24, 0x01	; 1
    1168:	f1 f4       	brne	.+60     	; 0x11a6 <MCAL_T1_u8T1Init+0x9c>
			SET_BIT(TCCR1A, Pin0);
    116a:	af e4       	ldi	r26, 0x4F	; 79
    116c:	b0 e0       	ldi	r27, 0x00	; 0
    116e:	ef e4       	ldi	r30, 0x4F	; 79
    1170:	f0 e0       	ldi	r31, 0x00	; 0
    1172:	80 81       	ld	r24, Z
    1174:	81 60       	ori	r24, 0x01	; 1
    1176:	8c 93       	st	X, r24
			CLR_BIT(TCCR1A, Pin1);
    1178:	af e4       	ldi	r26, 0x4F	; 79
    117a:	b0 e0       	ldi	r27, 0x00	; 0
    117c:	ef e4       	ldi	r30, 0x4F	; 79
    117e:	f0 e0       	ldi	r31, 0x00	; 0
    1180:	80 81       	ld	r24, Z
    1182:	8d 7f       	andi	r24, 0xFD	; 253
    1184:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B, Pin3);
    1186:	ae e4       	ldi	r26, 0x4E	; 78
    1188:	b0 e0       	ldi	r27, 0x00	; 0
    118a:	ee e4       	ldi	r30, 0x4E	; 78
    118c:	f0 e0       	ldi	r31, 0x00	; 0
    118e:	80 81       	ld	r24, Z
    1190:	87 7f       	andi	r24, 0xF7	; 247
    1192:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B, Pin4);
    1194:	ae e4       	ldi	r26, 0x4E	; 78
    1196:	b0 e0       	ldi	r27, 0x00	; 0
    1198:	ee e4       	ldi	r30, 0x4E	; 78
    119a:	f0 e0       	ldi	r31, 0x00	; 0
    119c:	80 81       	ld	r24, Z
    119e:	8f 7e       	andi	r24, 0xEF	; 239
    11a0:	8c 93       	st	X, r24
			LOC_u8ReturnValue = E_OK;
    11a2:	19 82       	std	Y+1, r1	; 0x01
    11a4:	cd c1       	rjmp	.+922    	; 0x1540 <MCAL_T1_u8T1Init+0x436>
		} else if (LOC_u8Timer1Mode == PWM_PHASE_CORRECT_9bit) {
    11a6:	8a 81       	ldd	r24, Y+2	; 0x02
    11a8:	82 30       	cpi	r24, 0x02	; 2
    11aa:	f1 f4       	brne	.+60     	; 0x11e8 <MCAL_T1_u8T1Init+0xde>
			CLR_BIT(TCCR1A, Pin0);
    11ac:	af e4       	ldi	r26, 0x4F	; 79
    11ae:	b0 e0       	ldi	r27, 0x00	; 0
    11b0:	ef e4       	ldi	r30, 0x4F	; 79
    11b2:	f0 e0       	ldi	r31, 0x00	; 0
    11b4:	80 81       	ld	r24, Z
    11b6:	8e 7f       	andi	r24, 0xFE	; 254
    11b8:	8c 93       	st	X, r24
			SET_BIT(TCCR1A, Pin1);
    11ba:	af e4       	ldi	r26, 0x4F	; 79
    11bc:	b0 e0       	ldi	r27, 0x00	; 0
    11be:	ef e4       	ldi	r30, 0x4F	; 79
    11c0:	f0 e0       	ldi	r31, 0x00	; 0
    11c2:	80 81       	ld	r24, Z
    11c4:	82 60       	ori	r24, 0x02	; 2
    11c6:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B, Pin3);
    11c8:	ae e4       	ldi	r26, 0x4E	; 78
    11ca:	b0 e0       	ldi	r27, 0x00	; 0
    11cc:	ee e4       	ldi	r30, 0x4E	; 78
    11ce:	f0 e0       	ldi	r31, 0x00	; 0
    11d0:	80 81       	ld	r24, Z
    11d2:	87 7f       	andi	r24, 0xF7	; 247
    11d4:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B, Pin4);
    11d6:	ae e4       	ldi	r26, 0x4E	; 78
    11d8:	b0 e0       	ldi	r27, 0x00	; 0
    11da:	ee e4       	ldi	r30, 0x4E	; 78
    11dc:	f0 e0       	ldi	r31, 0x00	; 0
    11de:	80 81       	ld	r24, Z
    11e0:	8f 7e       	andi	r24, 0xEF	; 239
    11e2:	8c 93       	st	X, r24
			LOC_u8ReturnValue = E_OK;
    11e4:	19 82       	std	Y+1, r1	; 0x01
    11e6:	ac c1       	rjmp	.+856    	; 0x1540 <MCAL_T1_u8T1Init+0x436>
		} else if (LOC_u8Timer1Mode == PWM_PHASE_CORRECT_10bit) {
    11e8:	8a 81       	ldd	r24, Y+2	; 0x02
    11ea:	83 30       	cpi	r24, 0x03	; 3
    11ec:	f1 f4       	brne	.+60     	; 0x122a <MCAL_T1_u8T1Init+0x120>
			SET_BIT(TCCR1A, Pin0);
    11ee:	af e4       	ldi	r26, 0x4F	; 79
    11f0:	b0 e0       	ldi	r27, 0x00	; 0
    11f2:	ef e4       	ldi	r30, 0x4F	; 79
    11f4:	f0 e0       	ldi	r31, 0x00	; 0
    11f6:	80 81       	ld	r24, Z
    11f8:	81 60       	ori	r24, 0x01	; 1
    11fa:	8c 93       	st	X, r24
			SET_BIT(TCCR1A, Pin1);
    11fc:	af e4       	ldi	r26, 0x4F	; 79
    11fe:	b0 e0       	ldi	r27, 0x00	; 0
    1200:	ef e4       	ldi	r30, 0x4F	; 79
    1202:	f0 e0       	ldi	r31, 0x00	; 0
    1204:	80 81       	ld	r24, Z
    1206:	82 60       	ori	r24, 0x02	; 2
    1208:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B, Pin3);
    120a:	ae e4       	ldi	r26, 0x4E	; 78
    120c:	b0 e0       	ldi	r27, 0x00	; 0
    120e:	ee e4       	ldi	r30, 0x4E	; 78
    1210:	f0 e0       	ldi	r31, 0x00	; 0
    1212:	80 81       	ld	r24, Z
    1214:	87 7f       	andi	r24, 0xF7	; 247
    1216:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B, Pin4);
    1218:	ae e4       	ldi	r26, 0x4E	; 78
    121a:	b0 e0       	ldi	r27, 0x00	; 0
    121c:	ee e4       	ldi	r30, 0x4E	; 78
    121e:	f0 e0       	ldi	r31, 0x00	; 0
    1220:	80 81       	ld	r24, Z
    1222:	8f 7e       	andi	r24, 0xEF	; 239
    1224:	8c 93       	st	X, r24
			LOC_u8ReturnValue = E_OK;
    1226:	19 82       	std	Y+1, r1	; 0x01
    1228:	8b c1       	rjmp	.+790    	; 0x1540 <MCAL_T1_u8T1Init+0x436>
		} else if (LOC_u8Timer1Mode == CTC_OCR1A) {
    122a:	8a 81       	ldd	r24, Y+2	; 0x02
    122c:	84 30       	cpi	r24, 0x04	; 4
    122e:	f1 f4       	brne	.+60     	; 0x126c <MCAL_T1_u8T1Init+0x162>
			CLR_BIT(TCCR1A, Pin0);
    1230:	af e4       	ldi	r26, 0x4F	; 79
    1232:	b0 e0       	ldi	r27, 0x00	; 0
    1234:	ef e4       	ldi	r30, 0x4F	; 79
    1236:	f0 e0       	ldi	r31, 0x00	; 0
    1238:	80 81       	ld	r24, Z
    123a:	8e 7f       	andi	r24, 0xFE	; 254
    123c:	8c 93       	st	X, r24
			CLR_BIT(TCCR1A, Pin1);
    123e:	af e4       	ldi	r26, 0x4F	; 79
    1240:	b0 e0       	ldi	r27, 0x00	; 0
    1242:	ef e4       	ldi	r30, 0x4F	; 79
    1244:	f0 e0       	ldi	r31, 0x00	; 0
    1246:	80 81       	ld	r24, Z
    1248:	8d 7f       	andi	r24, 0xFD	; 253
    124a:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, Pin3);
    124c:	ae e4       	ldi	r26, 0x4E	; 78
    124e:	b0 e0       	ldi	r27, 0x00	; 0
    1250:	ee e4       	ldi	r30, 0x4E	; 78
    1252:	f0 e0       	ldi	r31, 0x00	; 0
    1254:	80 81       	ld	r24, Z
    1256:	88 60       	ori	r24, 0x08	; 8
    1258:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B, Pin4);
    125a:	ae e4       	ldi	r26, 0x4E	; 78
    125c:	b0 e0       	ldi	r27, 0x00	; 0
    125e:	ee e4       	ldi	r30, 0x4E	; 78
    1260:	f0 e0       	ldi	r31, 0x00	; 0
    1262:	80 81       	ld	r24, Z
    1264:	8f 7e       	andi	r24, 0xEF	; 239
    1266:	8c 93       	st	X, r24
			LOC_u8ReturnValue = E_OK;
    1268:	19 82       	std	Y+1, r1	; 0x01
    126a:	6a c1       	rjmp	.+724    	; 0x1540 <MCAL_T1_u8T1Init+0x436>
		} else if (LOC_u8Timer1Mode == FAST_PWM_8bit) {
    126c:	8a 81       	ldd	r24, Y+2	; 0x02
    126e:	85 30       	cpi	r24, 0x05	; 5
    1270:	f1 f4       	brne	.+60     	; 0x12ae <MCAL_T1_u8T1Init+0x1a4>
			SET_BIT(TCCR1A, Pin0);
    1272:	af e4       	ldi	r26, 0x4F	; 79
    1274:	b0 e0       	ldi	r27, 0x00	; 0
    1276:	ef e4       	ldi	r30, 0x4F	; 79
    1278:	f0 e0       	ldi	r31, 0x00	; 0
    127a:	80 81       	ld	r24, Z
    127c:	81 60       	ori	r24, 0x01	; 1
    127e:	8c 93       	st	X, r24
			CLR_BIT(TCCR1A, Pin1);
    1280:	af e4       	ldi	r26, 0x4F	; 79
    1282:	b0 e0       	ldi	r27, 0x00	; 0
    1284:	ef e4       	ldi	r30, 0x4F	; 79
    1286:	f0 e0       	ldi	r31, 0x00	; 0
    1288:	80 81       	ld	r24, Z
    128a:	8d 7f       	andi	r24, 0xFD	; 253
    128c:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, Pin3);
    128e:	ae e4       	ldi	r26, 0x4E	; 78
    1290:	b0 e0       	ldi	r27, 0x00	; 0
    1292:	ee e4       	ldi	r30, 0x4E	; 78
    1294:	f0 e0       	ldi	r31, 0x00	; 0
    1296:	80 81       	ld	r24, Z
    1298:	88 60       	ori	r24, 0x08	; 8
    129a:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B, Pin4);
    129c:	ae e4       	ldi	r26, 0x4E	; 78
    129e:	b0 e0       	ldi	r27, 0x00	; 0
    12a0:	ee e4       	ldi	r30, 0x4E	; 78
    12a2:	f0 e0       	ldi	r31, 0x00	; 0
    12a4:	80 81       	ld	r24, Z
    12a6:	8f 7e       	andi	r24, 0xEF	; 239
    12a8:	8c 93       	st	X, r24
			LOC_u8ReturnValue = E_OK;
    12aa:	19 82       	std	Y+1, r1	; 0x01
    12ac:	49 c1       	rjmp	.+658    	; 0x1540 <MCAL_T1_u8T1Init+0x436>
		} else if (LOC_u8Timer1Mode == FAST_PWM_9bit) {
    12ae:	8a 81       	ldd	r24, Y+2	; 0x02
    12b0:	86 30       	cpi	r24, 0x06	; 6
    12b2:	f1 f4       	brne	.+60     	; 0x12f0 <MCAL_T1_u8T1Init+0x1e6>
			CLR_BIT(TCCR1A, Pin0);
    12b4:	af e4       	ldi	r26, 0x4F	; 79
    12b6:	b0 e0       	ldi	r27, 0x00	; 0
    12b8:	ef e4       	ldi	r30, 0x4F	; 79
    12ba:	f0 e0       	ldi	r31, 0x00	; 0
    12bc:	80 81       	ld	r24, Z
    12be:	8e 7f       	andi	r24, 0xFE	; 254
    12c0:	8c 93       	st	X, r24
			SET_BIT(TCCR1A, Pin1);
    12c2:	af e4       	ldi	r26, 0x4F	; 79
    12c4:	b0 e0       	ldi	r27, 0x00	; 0
    12c6:	ef e4       	ldi	r30, 0x4F	; 79
    12c8:	f0 e0       	ldi	r31, 0x00	; 0
    12ca:	80 81       	ld	r24, Z
    12cc:	82 60       	ori	r24, 0x02	; 2
    12ce:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, Pin3);
    12d0:	ae e4       	ldi	r26, 0x4E	; 78
    12d2:	b0 e0       	ldi	r27, 0x00	; 0
    12d4:	ee e4       	ldi	r30, 0x4E	; 78
    12d6:	f0 e0       	ldi	r31, 0x00	; 0
    12d8:	80 81       	ld	r24, Z
    12da:	88 60       	ori	r24, 0x08	; 8
    12dc:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B, Pin4);
    12de:	ae e4       	ldi	r26, 0x4E	; 78
    12e0:	b0 e0       	ldi	r27, 0x00	; 0
    12e2:	ee e4       	ldi	r30, 0x4E	; 78
    12e4:	f0 e0       	ldi	r31, 0x00	; 0
    12e6:	80 81       	ld	r24, Z
    12e8:	8f 7e       	andi	r24, 0xEF	; 239
    12ea:	8c 93       	st	X, r24
			LOC_u8ReturnValue = E_OK;
    12ec:	19 82       	std	Y+1, r1	; 0x01
    12ee:	28 c1       	rjmp	.+592    	; 0x1540 <MCAL_T1_u8T1Init+0x436>
		} else if (LOC_u8Timer1Mode == FAST_PWM_10bit) {
    12f0:	8a 81       	ldd	r24, Y+2	; 0x02
    12f2:	87 30       	cpi	r24, 0x07	; 7
    12f4:	f1 f4       	brne	.+60     	; 0x1332 <MCAL_T1_u8T1Init+0x228>
			SET_BIT(TCCR1A, Pin0);
    12f6:	af e4       	ldi	r26, 0x4F	; 79
    12f8:	b0 e0       	ldi	r27, 0x00	; 0
    12fa:	ef e4       	ldi	r30, 0x4F	; 79
    12fc:	f0 e0       	ldi	r31, 0x00	; 0
    12fe:	80 81       	ld	r24, Z
    1300:	81 60       	ori	r24, 0x01	; 1
    1302:	8c 93       	st	X, r24
			SET_BIT(TCCR1A, Pin1);
    1304:	af e4       	ldi	r26, 0x4F	; 79
    1306:	b0 e0       	ldi	r27, 0x00	; 0
    1308:	ef e4       	ldi	r30, 0x4F	; 79
    130a:	f0 e0       	ldi	r31, 0x00	; 0
    130c:	80 81       	ld	r24, Z
    130e:	82 60       	ori	r24, 0x02	; 2
    1310:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, Pin3);
    1312:	ae e4       	ldi	r26, 0x4E	; 78
    1314:	b0 e0       	ldi	r27, 0x00	; 0
    1316:	ee e4       	ldi	r30, 0x4E	; 78
    1318:	f0 e0       	ldi	r31, 0x00	; 0
    131a:	80 81       	ld	r24, Z
    131c:	88 60       	ori	r24, 0x08	; 8
    131e:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B, Pin4);
    1320:	ae e4       	ldi	r26, 0x4E	; 78
    1322:	b0 e0       	ldi	r27, 0x00	; 0
    1324:	ee e4       	ldi	r30, 0x4E	; 78
    1326:	f0 e0       	ldi	r31, 0x00	; 0
    1328:	80 81       	ld	r24, Z
    132a:	8f 7e       	andi	r24, 0xEF	; 239
    132c:	8c 93       	st	X, r24
			LOC_u8ReturnValue = E_OK;
    132e:	19 82       	std	Y+1, r1	; 0x01
    1330:	07 c1       	rjmp	.+526    	; 0x1540 <MCAL_T1_u8T1Init+0x436>
		} else if (LOC_u8Timer1Mode == PWM_PHASE_AND_FREQUANCY_CORRECT_ICR1) {
    1332:	8a 81       	ldd	r24, Y+2	; 0x02
    1334:	88 30       	cpi	r24, 0x08	; 8
    1336:	f1 f4       	brne	.+60     	; 0x1374 <MCAL_T1_u8T1Init+0x26a>
			CLR_BIT(TCCR1A, Pin0);
    1338:	af e4       	ldi	r26, 0x4F	; 79
    133a:	b0 e0       	ldi	r27, 0x00	; 0
    133c:	ef e4       	ldi	r30, 0x4F	; 79
    133e:	f0 e0       	ldi	r31, 0x00	; 0
    1340:	80 81       	ld	r24, Z
    1342:	8e 7f       	andi	r24, 0xFE	; 254
    1344:	8c 93       	st	X, r24
			CLR_BIT(TCCR1A, Pin1);
    1346:	af e4       	ldi	r26, 0x4F	; 79
    1348:	b0 e0       	ldi	r27, 0x00	; 0
    134a:	ef e4       	ldi	r30, 0x4F	; 79
    134c:	f0 e0       	ldi	r31, 0x00	; 0
    134e:	80 81       	ld	r24, Z
    1350:	8d 7f       	andi	r24, 0xFD	; 253
    1352:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B, Pin3);
    1354:	ae e4       	ldi	r26, 0x4E	; 78
    1356:	b0 e0       	ldi	r27, 0x00	; 0
    1358:	ee e4       	ldi	r30, 0x4E	; 78
    135a:	f0 e0       	ldi	r31, 0x00	; 0
    135c:	80 81       	ld	r24, Z
    135e:	87 7f       	andi	r24, 0xF7	; 247
    1360:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, Pin4);
    1362:	ae e4       	ldi	r26, 0x4E	; 78
    1364:	b0 e0       	ldi	r27, 0x00	; 0
    1366:	ee e4       	ldi	r30, 0x4E	; 78
    1368:	f0 e0       	ldi	r31, 0x00	; 0
    136a:	80 81       	ld	r24, Z
    136c:	80 61       	ori	r24, 0x10	; 16
    136e:	8c 93       	st	X, r24
			LOC_u8ReturnValue = E_OK;
    1370:	19 82       	std	Y+1, r1	; 0x01
    1372:	e6 c0       	rjmp	.+460    	; 0x1540 <MCAL_T1_u8T1Init+0x436>
		} else if (LOC_u8Timer1Mode == PWM_PHASE_AND_FREQUANCY_CORRECT_OCR1A) {
    1374:	8a 81       	ldd	r24, Y+2	; 0x02
    1376:	89 30       	cpi	r24, 0x09	; 9
    1378:	f1 f4       	brne	.+60     	; 0x13b6 <MCAL_T1_u8T1Init+0x2ac>
			SET_BIT(TCCR1A, Pin0);
    137a:	af e4       	ldi	r26, 0x4F	; 79
    137c:	b0 e0       	ldi	r27, 0x00	; 0
    137e:	ef e4       	ldi	r30, 0x4F	; 79
    1380:	f0 e0       	ldi	r31, 0x00	; 0
    1382:	80 81       	ld	r24, Z
    1384:	81 60       	ori	r24, 0x01	; 1
    1386:	8c 93       	st	X, r24
			CLR_BIT(TCCR1A, Pin1);
    1388:	af e4       	ldi	r26, 0x4F	; 79
    138a:	b0 e0       	ldi	r27, 0x00	; 0
    138c:	ef e4       	ldi	r30, 0x4F	; 79
    138e:	f0 e0       	ldi	r31, 0x00	; 0
    1390:	80 81       	ld	r24, Z
    1392:	8d 7f       	andi	r24, 0xFD	; 253
    1394:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B, Pin3);
    1396:	ae e4       	ldi	r26, 0x4E	; 78
    1398:	b0 e0       	ldi	r27, 0x00	; 0
    139a:	ee e4       	ldi	r30, 0x4E	; 78
    139c:	f0 e0       	ldi	r31, 0x00	; 0
    139e:	80 81       	ld	r24, Z
    13a0:	87 7f       	andi	r24, 0xF7	; 247
    13a2:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, Pin4);
    13a4:	ae e4       	ldi	r26, 0x4E	; 78
    13a6:	b0 e0       	ldi	r27, 0x00	; 0
    13a8:	ee e4       	ldi	r30, 0x4E	; 78
    13aa:	f0 e0       	ldi	r31, 0x00	; 0
    13ac:	80 81       	ld	r24, Z
    13ae:	80 61       	ori	r24, 0x10	; 16
    13b0:	8c 93       	st	X, r24
			LOC_u8ReturnValue = E_OK;
    13b2:	19 82       	std	Y+1, r1	; 0x01
    13b4:	c5 c0       	rjmp	.+394    	; 0x1540 <MCAL_T1_u8T1Init+0x436>
		} else if (LOC_u8Timer1Mode == PWM_PHASE_CORRECT_ICR1) {
    13b6:	8a 81       	ldd	r24, Y+2	; 0x02
    13b8:	8a 30       	cpi	r24, 0x0A	; 10
    13ba:	f1 f4       	brne	.+60     	; 0x13f8 <MCAL_T1_u8T1Init+0x2ee>
			CLR_BIT(TCCR1A, Pin0);
    13bc:	af e4       	ldi	r26, 0x4F	; 79
    13be:	b0 e0       	ldi	r27, 0x00	; 0
    13c0:	ef e4       	ldi	r30, 0x4F	; 79
    13c2:	f0 e0       	ldi	r31, 0x00	; 0
    13c4:	80 81       	ld	r24, Z
    13c6:	8e 7f       	andi	r24, 0xFE	; 254
    13c8:	8c 93       	st	X, r24
			SET_BIT(TCCR1A, Pin1);
    13ca:	af e4       	ldi	r26, 0x4F	; 79
    13cc:	b0 e0       	ldi	r27, 0x00	; 0
    13ce:	ef e4       	ldi	r30, 0x4F	; 79
    13d0:	f0 e0       	ldi	r31, 0x00	; 0
    13d2:	80 81       	ld	r24, Z
    13d4:	82 60       	ori	r24, 0x02	; 2
    13d6:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B, Pin3);
    13d8:	ae e4       	ldi	r26, 0x4E	; 78
    13da:	b0 e0       	ldi	r27, 0x00	; 0
    13dc:	ee e4       	ldi	r30, 0x4E	; 78
    13de:	f0 e0       	ldi	r31, 0x00	; 0
    13e0:	80 81       	ld	r24, Z
    13e2:	87 7f       	andi	r24, 0xF7	; 247
    13e4:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, Pin4);
    13e6:	ae e4       	ldi	r26, 0x4E	; 78
    13e8:	b0 e0       	ldi	r27, 0x00	; 0
    13ea:	ee e4       	ldi	r30, 0x4E	; 78
    13ec:	f0 e0       	ldi	r31, 0x00	; 0
    13ee:	80 81       	ld	r24, Z
    13f0:	80 61       	ori	r24, 0x10	; 16
    13f2:	8c 93       	st	X, r24
			LOC_u8ReturnValue = E_OK;
    13f4:	19 82       	std	Y+1, r1	; 0x01
    13f6:	a4 c0       	rjmp	.+328    	; 0x1540 <MCAL_T1_u8T1Init+0x436>
		} else if (LOC_u8Timer1Mode == PWM_PHASE_CORRECT_OCR1A) {
    13f8:	8a 81       	ldd	r24, Y+2	; 0x02
    13fa:	8b 30       	cpi	r24, 0x0B	; 11
    13fc:	f1 f4       	brne	.+60     	; 0x143a <MCAL_T1_u8T1Init+0x330>
			SET_BIT(TCCR1A, Pin0);
    13fe:	af e4       	ldi	r26, 0x4F	; 79
    1400:	b0 e0       	ldi	r27, 0x00	; 0
    1402:	ef e4       	ldi	r30, 0x4F	; 79
    1404:	f0 e0       	ldi	r31, 0x00	; 0
    1406:	80 81       	ld	r24, Z
    1408:	81 60       	ori	r24, 0x01	; 1
    140a:	8c 93       	st	X, r24
			SET_BIT(TCCR1A, Pin1);
    140c:	af e4       	ldi	r26, 0x4F	; 79
    140e:	b0 e0       	ldi	r27, 0x00	; 0
    1410:	ef e4       	ldi	r30, 0x4F	; 79
    1412:	f0 e0       	ldi	r31, 0x00	; 0
    1414:	80 81       	ld	r24, Z
    1416:	82 60       	ori	r24, 0x02	; 2
    1418:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B, Pin3);
    141a:	ae e4       	ldi	r26, 0x4E	; 78
    141c:	b0 e0       	ldi	r27, 0x00	; 0
    141e:	ee e4       	ldi	r30, 0x4E	; 78
    1420:	f0 e0       	ldi	r31, 0x00	; 0
    1422:	80 81       	ld	r24, Z
    1424:	87 7f       	andi	r24, 0xF7	; 247
    1426:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, Pin4);
    1428:	ae e4       	ldi	r26, 0x4E	; 78
    142a:	b0 e0       	ldi	r27, 0x00	; 0
    142c:	ee e4       	ldi	r30, 0x4E	; 78
    142e:	f0 e0       	ldi	r31, 0x00	; 0
    1430:	80 81       	ld	r24, Z
    1432:	80 61       	ori	r24, 0x10	; 16
    1434:	8c 93       	st	X, r24
			LOC_u8ReturnValue = E_OK;
    1436:	19 82       	std	Y+1, r1	; 0x01
    1438:	83 c0       	rjmp	.+262    	; 0x1540 <MCAL_T1_u8T1Init+0x436>
		} else if (LOC_u8Timer1Mode == CTC_ICR1) {
    143a:	8a 81       	ldd	r24, Y+2	; 0x02
    143c:	8c 30       	cpi	r24, 0x0C	; 12
    143e:	f1 f4       	brne	.+60     	; 0x147c <MCAL_T1_u8T1Init+0x372>
			CLR_BIT(TCCR1A, Pin0);
    1440:	af e4       	ldi	r26, 0x4F	; 79
    1442:	b0 e0       	ldi	r27, 0x00	; 0
    1444:	ef e4       	ldi	r30, 0x4F	; 79
    1446:	f0 e0       	ldi	r31, 0x00	; 0
    1448:	80 81       	ld	r24, Z
    144a:	8e 7f       	andi	r24, 0xFE	; 254
    144c:	8c 93       	st	X, r24
			CLR_BIT(TCCR1A, Pin1);
    144e:	af e4       	ldi	r26, 0x4F	; 79
    1450:	b0 e0       	ldi	r27, 0x00	; 0
    1452:	ef e4       	ldi	r30, 0x4F	; 79
    1454:	f0 e0       	ldi	r31, 0x00	; 0
    1456:	80 81       	ld	r24, Z
    1458:	8d 7f       	andi	r24, 0xFD	; 253
    145a:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, Pin3);
    145c:	ae e4       	ldi	r26, 0x4E	; 78
    145e:	b0 e0       	ldi	r27, 0x00	; 0
    1460:	ee e4       	ldi	r30, 0x4E	; 78
    1462:	f0 e0       	ldi	r31, 0x00	; 0
    1464:	80 81       	ld	r24, Z
    1466:	88 60       	ori	r24, 0x08	; 8
    1468:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, Pin4);
    146a:	ae e4       	ldi	r26, 0x4E	; 78
    146c:	b0 e0       	ldi	r27, 0x00	; 0
    146e:	ee e4       	ldi	r30, 0x4E	; 78
    1470:	f0 e0       	ldi	r31, 0x00	; 0
    1472:	80 81       	ld	r24, Z
    1474:	80 61       	ori	r24, 0x10	; 16
    1476:	8c 93       	st	X, r24
			LOC_u8ReturnValue = E_OK;
    1478:	19 82       	std	Y+1, r1	; 0x01
    147a:	62 c0       	rjmp	.+196    	; 0x1540 <MCAL_T1_u8T1Init+0x436>
		} else if (LOC_u8Timer1Mode == REVERSED_MODE) {
    147c:	8a 81       	ldd	r24, Y+2	; 0x02
    147e:	8d 30       	cpi	r24, 0x0D	; 13
    1480:	f1 f4       	brne	.+60     	; 0x14be <MCAL_T1_u8T1Init+0x3b4>
			SET_BIT(TCCR1A, Pin0);
    1482:	af e4       	ldi	r26, 0x4F	; 79
    1484:	b0 e0       	ldi	r27, 0x00	; 0
    1486:	ef e4       	ldi	r30, 0x4F	; 79
    1488:	f0 e0       	ldi	r31, 0x00	; 0
    148a:	80 81       	ld	r24, Z
    148c:	81 60       	ori	r24, 0x01	; 1
    148e:	8c 93       	st	X, r24
			CLR_BIT(TCCR1A, Pin1);
    1490:	af e4       	ldi	r26, 0x4F	; 79
    1492:	b0 e0       	ldi	r27, 0x00	; 0
    1494:	ef e4       	ldi	r30, 0x4F	; 79
    1496:	f0 e0       	ldi	r31, 0x00	; 0
    1498:	80 81       	ld	r24, Z
    149a:	8d 7f       	andi	r24, 0xFD	; 253
    149c:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, Pin3);
    149e:	ae e4       	ldi	r26, 0x4E	; 78
    14a0:	b0 e0       	ldi	r27, 0x00	; 0
    14a2:	ee e4       	ldi	r30, 0x4E	; 78
    14a4:	f0 e0       	ldi	r31, 0x00	; 0
    14a6:	80 81       	ld	r24, Z
    14a8:	88 60       	ori	r24, 0x08	; 8
    14aa:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, Pin4);
    14ac:	ae e4       	ldi	r26, 0x4E	; 78
    14ae:	b0 e0       	ldi	r27, 0x00	; 0
    14b0:	ee e4       	ldi	r30, 0x4E	; 78
    14b2:	f0 e0       	ldi	r31, 0x00	; 0
    14b4:	80 81       	ld	r24, Z
    14b6:	80 61       	ori	r24, 0x10	; 16
    14b8:	8c 93       	st	X, r24
			LOC_u8ReturnValue = E_OK;
    14ba:	19 82       	std	Y+1, r1	; 0x01
    14bc:	41 c0       	rjmp	.+130    	; 0x1540 <MCAL_T1_u8T1Init+0x436>
		} else if (LOC_u8Timer1Mode == FAST_PWM_ICR1) {
    14be:	8a 81       	ldd	r24, Y+2	; 0x02
    14c0:	8e 30       	cpi	r24, 0x0E	; 14
    14c2:	f1 f4       	brne	.+60     	; 0x1500 <MCAL_T1_u8T1Init+0x3f6>
			CLR_BIT(TCCR1A, Pin0);
    14c4:	af e4       	ldi	r26, 0x4F	; 79
    14c6:	b0 e0       	ldi	r27, 0x00	; 0
    14c8:	ef e4       	ldi	r30, 0x4F	; 79
    14ca:	f0 e0       	ldi	r31, 0x00	; 0
    14cc:	80 81       	ld	r24, Z
    14ce:	8e 7f       	andi	r24, 0xFE	; 254
    14d0:	8c 93       	st	X, r24
			SET_BIT(TCCR1A, Pin1);
    14d2:	af e4       	ldi	r26, 0x4F	; 79
    14d4:	b0 e0       	ldi	r27, 0x00	; 0
    14d6:	ef e4       	ldi	r30, 0x4F	; 79
    14d8:	f0 e0       	ldi	r31, 0x00	; 0
    14da:	80 81       	ld	r24, Z
    14dc:	82 60       	ori	r24, 0x02	; 2
    14de:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, Pin3);
    14e0:	ae e4       	ldi	r26, 0x4E	; 78
    14e2:	b0 e0       	ldi	r27, 0x00	; 0
    14e4:	ee e4       	ldi	r30, 0x4E	; 78
    14e6:	f0 e0       	ldi	r31, 0x00	; 0
    14e8:	80 81       	ld	r24, Z
    14ea:	88 60       	ori	r24, 0x08	; 8
    14ec:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, Pin4);
    14ee:	ae e4       	ldi	r26, 0x4E	; 78
    14f0:	b0 e0       	ldi	r27, 0x00	; 0
    14f2:	ee e4       	ldi	r30, 0x4E	; 78
    14f4:	f0 e0       	ldi	r31, 0x00	; 0
    14f6:	80 81       	ld	r24, Z
    14f8:	80 61       	ori	r24, 0x10	; 16
    14fa:	8c 93       	st	X, r24
			LOC_u8ReturnValue = E_OK;
    14fc:	19 82       	std	Y+1, r1	; 0x01
    14fe:	20 c0       	rjmp	.+64     	; 0x1540 <MCAL_T1_u8T1Init+0x436>
		} else if (LOC_u8Timer1Mode == FAST_PWM_OCR1A) {
    1500:	8a 81       	ldd	r24, Y+2	; 0x02
    1502:	8f 30       	cpi	r24, 0x0F	; 15
    1504:	e9 f4       	brne	.+58     	; 0x1540 <MCAL_T1_u8T1Init+0x436>
			SET_BIT(TCCR1A, Pin0);
    1506:	af e4       	ldi	r26, 0x4F	; 79
    1508:	b0 e0       	ldi	r27, 0x00	; 0
    150a:	ef e4       	ldi	r30, 0x4F	; 79
    150c:	f0 e0       	ldi	r31, 0x00	; 0
    150e:	80 81       	ld	r24, Z
    1510:	81 60       	ori	r24, 0x01	; 1
    1512:	8c 93       	st	X, r24
			SET_BIT(TCCR1A, Pin1);
    1514:	af e4       	ldi	r26, 0x4F	; 79
    1516:	b0 e0       	ldi	r27, 0x00	; 0
    1518:	ef e4       	ldi	r30, 0x4F	; 79
    151a:	f0 e0       	ldi	r31, 0x00	; 0
    151c:	80 81       	ld	r24, Z
    151e:	82 60       	ori	r24, 0x02	; 2
    1520:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, Pin3);
    1522:	ae e4       	ldi	r26, 0x4E	; 78
    1524:	b0 e0       	ldi	r27, 0x00	; 0
    1526:	ee e4       	ldi	r30, 0x4E	; 78
    1528:	f0 e0       	ldi	r31, 0x00	; 0
    152a:	80 81       	ld	r24, Z
    152c:	88 60       	ori	r24, 0x08	; 8
    152e:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, Pin4);
    1530:	ae e4       	ldi	r26, 0x4E	; 78
    1532:	b0 e0       	ldi	r27, 0x00	; 0
    1534:	ee e4       	ldi	r30, 0x4E	; 78
    1536:	f0 e0       	ldi	r31, 0x00	; 0
    1538:	80 81       	ld	r24, Z
    153a:	80 61       	ori	r24, 0x10	; 16
    153c:	8c 93       	st	X, r24
			LOC_u8ReturnValue = E_OK;
    153e:	19 82       	std	Y+1, r1	; 0x01
			//NOTHING
		}
	} else {
		//NOTHING
	}
	return LOC_u8ReturnValue;
    1540:	89 81       	ldd	r24, Y+1	; 0x01
}
    1542:	0f 90       	pop	r0
    1544:	0f 90       	pop	r0
    1546:	cf 91       	pop	r28
    1548:	df 91       	pop	r29
    154a:	08 95       	ret

0000154c <MCAL_T1_u8T1Prescaler>:
u8 MCAL_T1_u8T1Prescaler(u8 LOC_u8Clock_Selection, f32 *LOC_pf32TickTime) {
    154c:	df 93       	push	r29
    154e:	cf 93       	push	r28
    1550:	00 d0       	rcall	.+0      	; 0x1552 <MCAL_T1_u8T1Prescaler+0x6>
    1552:	00 d0       	rcall	.+0      	; 0x1554 <MCAL_T1_u8T1Prescaler+0x8>
    1554:	cd b7       	in	r28, 0x3d	; 61
    1556:	de b7       	in	r29, 0x3e	; 62
    1558:	8a 83       	std	Y+2, r24	; 0x02
    155a:	7c 83       	std	Y+4, r23	; 0x04
    155c:	6b 83       	std	Y+3, r22	; 0x03
	u8 LOC_u8ReturnValue = E_NOT_OK;
    155e:	81 e0       	ldi	r24, 0x01	; 1
    1560:	89 83       	std	Y+1, r24	; 0x01
	if (LOC_u8Clock_Selection <= EXTERNAL_RISING_EDGE) {
    1562:	8a 81       	ldd	r24, Y+2	; 0x02
    1564:	88 30       	cpi	r24, 0x08	; 8
    1566:	08 f0       	brcs	.+2      	; 0x156a <MCAL_T1_u8T1Prescaler+0x1e>
    1568:	01 c1       	rjmp	.+514    	; 0x176c <MCAL_T1_u8T1Prescaler+0x220>
		if (LOC_u8Clock_Selection == COUNTER_STOP) {
    156a:	8a 81       	ldd	r24, Y+2	; 0x02
    156c:	88 23       	and	r24, r24
    156e:	b9 f4       	brne	.+46     	; 0x159e <MCAL_T1_u8T1Prescaler+0x52>
			CLR_BIT(TCCR1B, Pin0);
    1570:	ae e4       	ldi	r26, 0x4E	; 78
    1572:	b0 e0       	ldi	r27, 0x00	; 0
    1574:	ee e4       	ldi	r30, 0x4E	; 78
    1576:	f0 e0       	ldi	r31, 0x00	; 0
    1578:	80 81       	ld	r24, Z
    157a:	8e 7f       	andi	r24, 0xFE	; 254
    157c:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B, Pin1);
    157e:	ae e4       	ldi	r26, 0x4E	; 78
    1580:	b0 e0       	ldi	r27, 0x00	; 0
    1582:	ee e4       	ldi	r30, 0x4E	; 78
    1584:	f0 e0       	ldi	r31, 0x00	; 0
    1586:	80 81       	ld	r24, Z
    1588:	8d 7f       	andi	r24, 0xFD	; 253
    158a:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B, Pin2);
    158c:	ae e4       	ldi	r26, 0x4E	; 78
    158e:	b0 e0       	ldi	r27, 0x00	; 0
    1590:	ee e4       	ldi	r30, 0x4E	; 78
    1592:	f0 e0       	ldi	r31, 0x00	; 0
    1594:	80 81       	ld	r24, Z
    1596:	8b 7f       	andi	r24, 0xFB	; 251
    1598:	8c 93       	st	X, r24
			LOC_u8ReturnValue = E_OK;
    159a:	19 82       	std	Y+1, r1	; 0x01
    159c:	e7 c0       	rjmp	.+462    	; 0x176c <MCAL_T1_u8T1Prescaler+0x220>
		} else if (LOC_u8Clock_Selection == PRESCALLING_0) {
    159e:	8a 81       	ldd	r24, Y+2	; 0x02
    15a0:	81 30       	cpi	r24, 0x01	; 1
    15a2:	09 f5       	brne	.+66     	; 0x15e6 <MCAL_T1_u8T1Prescaler+0x9a>
			SET_BIT(TCCR1B, Pin0);
    15a4:	ae e4       	ldi	r26, 0x4E	; 78
    15a6:	b0 e0       	ldi	r27, 0x00	; 0
    15a8:	ee e4       	ldi	r30, 0x4E	; 78
    15aa:	f0 e0       	ldi	r31, 0x00	; 0
    15ac:	80 81       	ld	r24, Z
    15ae:	81 60       	ori	r24, 0x01	; 1
    15b0:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B, Pin1);
    15b2:	ae e4       	ldi	r26, 0x4E	; 78
    15b4:	b0 e0       	ldi	r27, 0x00	; 0
    15b6:	ee e4       	ldi	r30, 0x4E	; 78
    15b8:	f0 e0       	ldi	r31, 0x00	; 0
    15ba:	80 81       	ld	r24, Z
    15bc:	8d 7f       	andi	r24, 0xFD	; 253
    15be:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B, Pin2);
    15c0:	ae e4       	ldi	r26, 0x4E	; 78
    15c2:	b0 e0       	ldi	r27, 0x00	; 0
    15c4:	ee e4       	ldi	r30, 0x4E	; 78
    15c6:	f0 e0       	ldi	r31, 0x00	; 0
    15c8:	80 81       	ld	r24, Z
    15ca:	8b 7f       	andi	r24, 0xFB	; 251
    15cc:	8c 93       	st	X, r24
			*LOC_pf32TickTime = PRESCALLING0 / (f32) CPU_FREQUNCY;
    15ce:	eb 81       	ldd	r30, Y+3	; 0x03
    15d0:	fc 81       	ldd	r31, Y+4	; 0x04
    15d2:	8d eb       	ldi	r24, 0xBD	; 189
    15d4:	97 e3       	ldi	r25, 0x37	; 55
    15d6:	a6 e8       	ldi	r26, 0x86	; 134
    15d8:	b3 e3       	ldi	r27, 0x33	; 51
    15da:	80 83       	st	Z, r24
    15dc:	91 83       	std	Z+1, r25	; 0x01
    15de:	a2 83       	std	Z+2, r26	; 0x02
    15e0:	b3 83       	std	Z+3, r27	; 0x03
			LOC_u8ReturnValue = E_OK;
    15e2:	19 82       	std	Y+1, r1	; 0x01
    15e4:	c3 c0       	rjmp	.+390    	; 0x176c <MCAL_T1_u8T1Prescaler+0x220>
		} else if (LOC_u8Clock_Selection == PRESCALLING_8) {
    15e6:	8a 81       	ldd	r24, Y+2	; 0x02
    15e8:	82 30       	cpi	r24, 0x02	; 2
    15ea:	09 f5       	brne	.+66     	; 0x162e <MCAL_T1_u8T1Prescaler+0xe2>
			CLR_BIT(TCCR1B, Pin0);
    15ec:	ae e4       	ldi	r26, 0x4E	; 78
    15ee:	b0 e0       	ldi	r27, 0x00	; 0
    15f0:	ee e4       	ldi	r30, 0x4E	; 78
    15f2:	f0 e0       	ldi	r31, 0x00	; 0
    15f4:	80 81       	ld	r24, Z
    15f6:	8e 7f       	andi	r24, 0xFE	; 254
    15f8:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, Pin1);
    15fa:	ae e4       	ldi	r26, 0x4E	; 78
    15fc:	b0 e0       	ldi	r27, 0x00	; 0
    15fe:	ee e4       	ldi	r30, 0x4E	; 78
    1600:	f0 e0       	ldi	r31, 0x00	; 0
    1602:	80 81       	ld	r24, Z
    1604:	82 60       	ori	r24, 0x02	; 2
    1606:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B, Pin2);
    1608:	ae e4       	ldi	r26, 0x4E	; 78
    160a:	b0 e0       	ldi	r27, 0x00	; 0
    160c:	ee e4       	ldi	r30, 0x4E	; 78
    160e:	f0 e0       	ldi	r31, 0x00	; 0
    1610:	80 81       	ld	r24, Z
    1612:	8b 7f       	andi	r24, 0xFB	; 251
    1614:	8c 93       	st	X, r24
			*LOC_pf32TickTime = PRESCALLING8 / (f32) CPU_FREQUNCY;
    1616:	eb 81       	ldd	r30, Y+3	; 0x03
    1618:	fc 81       	ldd	r31, Y+4	; 0x04
    161a:	8d eb       	ldi	r24, 0xBD	; 189
    161c:	97 e3       	ldi	r25, 0x37	; 55
    161e:	a6 e0       	ldi	r26, 0x06	; 6
    1620:	b5 e3       	ldi	r27, 0x35	; 53
    1622:	80 83       	st	Z, r24
    1624:	91 83       	std	Z+1, r25	; 0x01
    1626:	a2 83       	std	Z+2, r26	; 0x02
    1628:	b3 83       	std	Z+3, r27	; 0x03
			LOC_u8ReturnValue = E_OK;
    162a:	19 82       	std	Y+1, r1	; 0x01
    162c:	9f c0       	rjmp	.+318    	; 0x176c <MCAL_T1_u8T1Prescaler+0x220>
		} else if (LOC_u8Clock_Selection == PRESCALLING_64) {
    162e:	8a 81       	ldd	r24, Y+2	; 0x02
    1630:	83 30       	cpi	r24, 0x03	; 3
    1632:	09 f5       	brne	.+66     	; 0x1676 <MCAL_T1_u8T1Prescaler+0x12a>
			SET_BIT(TCCR1B, Pin0);
    1634:	ae e4       	ldi	r26, 0x4E	; 78
    1636:	b0 e0       	ldi	r27, 0x00	; 0
    1638:	ee e4       	ldi	r30, 0x4E	; 78
    163a:	f0 e0       	ldi	r31, 0x00	; 0
    163c:	80 81       	ld	r24, Z
    163e:	81 60       	ori	r24, 0x01	; 1
    1640:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, Pin1);
    1642:	ae e4       	ldi	r26, 0x4E	; 78
    1644:	b0 e0       	ldi	r27, 0x00	; 0
    1646:	ee e4       	ldi	r30, 0x4E	; 78
    1648:	f0 e0       	ldi	r31, 0x00	; 0
    164a:	80 81       	ld	r24, Z
    164c:	82 60       	ori	r24, 0x02	; 2
    164e:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B, Pin2);
    1650:	ae e4       	ldi	r26, 0x4E	; 78
    1652:	b0 e0       	ldi	r27, 0x00	; 0
    1654:	ee e4       	ldi	r30, 0x4E	; 78
    1656:	f0 e0       	ldi	r31, 0x00	; 0
    1658:	80 81       	ld	r24, Z
    165a:	8b 7f       	andi	r24, 0xFB	; 251
    165c:	8c 93       	st	X, r24
			*LOC_pf32TickTime = PRESCALLING64 / (f32) CPU_FREQUNCY;
    165e:	eb 81       	ldd	r30, Y+3	; 0x03
    1660:	fc 81       	ldd	r31, Y+4	; 0x04
    1662:	8d eb       	ldi	r24, 0xBD	; 189
    1664:	97 e3       	ldi	r25, 0x37	; 55
    1666:	a6 e8       	ldi	r26, 0x86	; 134
    1668:	b6 e3       	ldi	r27, 0x36	; 54
    166a:	80 83       	st	Z, r24
    166c:	91 83       	std	Z+1, r25	; 0x01
    166e:	a2 83       	std	Z+2, r26	; 0x02
    1670:	b3 83       	std	Z+3, r27	; 0x03
			LOC_u8ReturnValue = E_OK;
    1672:	19 82       	std	Y+1, r1	; 0x01
    1674:	7b c0       	rjmp	.+246    	; 0x176c <MCAL_T1_u8T1Prescaler+0x220>
		} else if (LOC_u8Clock_Selection == PRESCALLING_256) {
    1676:	8a 81       	ldd	r24, Y+2	; 0x02
    1678:	84 30       	cpi	r24, 0x04	; 4
    167a:	09 f5       	brne	.+66     	; 0x16be <MCAL_T1_u8T1Prescaler+0x172>
			CLR_BIT(TCCR1B, Pin0);
    167c:	ae e4       	ldi	r26, 0x4E	; 78
    167e:	b0 e0       	ldi	r27, 0x00	; 0
    1680:	ee e4       	ldi	r30, 0x4E	; 78
    1682:	f0 e0       	ldi	r31, 0x00	; 0
    1684:	80 81       	ld	r24, Z
    1686:	8e 7f       	andi	r24, 0xFE	; 254
    1688:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B, Pin1);
    168a:	ae e4       	ldi	r26, 0x4E	; 78
    168c:	b0 e0       	ldi	r27, 0x00	; 0
    168e:	ee e4       	ldi	r30, 0x4E	; 78
    1690:	f0 e0       	ldi	r31, 0x00	; 0
    1692:	80 81       	ld	r24, Z
    1694:	8d 7f       	andi	r24, 0xFD	; 253
    1696:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, Pin2);
    1698:	ae e4       	ldi	r26, 0x4E	; 78
    169a:	b0 e0       	ldi	r27, 0x00	; 0
    169c:	ee e4       	ldi	r30, 0x4E	; 78
    169e:	f0 e0       	ldi	r31, 0x00	; 0
    16a0:	80 81       	ld	r24, Z
    16a2:	84 60       	ori	r24, 0x04	; 4
    16a4:	8c 93       	st	X, r24
			*LOC_pf32TickTime = PRESCALLING256 / (f32) CPU_FREQUNCY;
    16a6:	eb 81       	ldd	r30, Y+3	; 0x03
    16a8:	fc 81       	ldd	r31, Y+4	; 0x04
    16aa:	8d eb       	ldi	r24, 0xBD	; 189
    16ac:	97 e3       	ldi	r25, 0x37	; 55
    16ae:	a6 e8       	ldi	r26, 0x86	; 134
    16b0:	b7 e3       	ldi	r27, 0x37	; 55
    16b2:	80 83       	st	Z, r24
    16b4:	91 83       	std	Z+1, r25	; 0x01
    16b6:	a2 83       	std	Z+2, r26	; 0x02
    16b8:	b3 83       	std	Z+3, r27	; 0x03
			LOC_u8ReturnValue = E_OK;
    16ba:	19 82       	std	Y+1, r1	; 0x01
    16bc:	57 c0       	rjmp	.+174    	; 0x176c <MCAL_T1_u8T1Prescaler+0x220>
		} else if (LOC_u8Clock_Selection == PRESCALLING_1024) {
    16be:	8a 81       	ldd	r24, Y+2	; 0x02
    16c0:	85 30       	cpi	r24, 0x05	; 5
    16c2:	09 f5       	brne	.+66     	; 0x1706 <MCAL_T1_u8T1Prescaler+0x1ba>
			SET_BIT(TCCR1B, Pin0);
    16c4:	ae e4       	ldi	r26, 0x4E	; 78
    16c6:	b0 e0       	ldi	r27, 0x00	; 0
    16c8:	ee e4       	ldi	r30, 0x4E	; 78
    16ca:	f0 e0       	ldi	r31, 0x00	; 0
    16cc:	80 81       	ld	r24, Z
    16ce:	81 60       	ori	r24, 0x01	; 1
    16d0:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B, Pin1);
    16d2:	ae e4       	ldi	r26, 0x4E	; 78
    16d4:	b0 e0       	ldi	r27, 0x00	; 0
    16d6:	ee e4       	ldi	r30, 0x4E	; 78
    16d8:	f0 e0       	ldi	r31, 0x00	; 0
    16da:	80 81       	ld	r24, Z
    16dc:	8d 7f       	andi	r24, 0xFD	; 253
    16de:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, Pin2);
    16e0:	ae e4       	ldi	r26, 0x4E	; 78
    16e2:	b0 e0       	ldi	r27, 0x00	; 0
    16e4:	ee e4       	ldi	r30, 0x4E	; 78
    16e6:	f0 e0       	ldi	r31, 0x00	; 0
    16e8:	80 81       	ld	r24, Z
    16ea:	84 60       	ori	r24, 0x04	; 4
    16ec:	8c 93       	st	X, r24
			*LOC_pf32TickTime = PRESCALLING1024 / (f32) CPU_FREQUNCY;
    16ee:	eb 81       	ldd	r30, Y+3	; 0x03
    16f0:	fc 81       	ldd	r31, Y+4	; 0x04
    16f2:	8d eb       	ldi	r24, 0xBD	; 189
    16f4:	97 e3       	ldi	r25, 0x37	; 55
    16f6:	a6 e8       	ldi	r26, 0x86	; 134
    16f8:	b8 e3       	ldi	r27, 0x38	; 56
    16fa:	80 83       	st	Z, r24
    16fc:	91 83       	std	Z+1, r25	; 0x01
    16fe:	a2 83       	std	Z+2, r26	; 0x02
    1700:	b3 83       	std	Z+3, r27	; 0x03
			LOC_u8ReturnValue = E_OK;
    1702:	19 82       	std	Y+1, r1	; 0x01
    1704:	33 c0       	rjmp	.+102    	; 0x176c <MCAL_T1_u8T1Prescaler+0x220>
		} else if (LOC_u8Clock_Selection == EXTERNAL_FALLING_EDGE) {
    1706:	8a 81       	ldd	r24, Y+2	; 0x02
    1708:	86 30       	cpi	r24, 0x06	; 6
    170a:	b9 f4       	brne	.+46     	; 0x173a <MCAL_T1_u8T1Prescaler+0x1ee>
			CLR_BIT(TCCR1B, Pin0);
    170c:	ae e4       	ldi	r26, 0x4E	; 78
    170e:	b0 e0       	ldi	r27, 0x00	; 0
    1710:	ee e4       	ldi	r30, 0x4E	; 78
    1712:	f0 e0       	ldi	r31, 0x00	; 0
    1714:	80 81       	ld	r24, Z
    1716:	8e 7f       	andi	r24, 0xFE	; 254
    1718:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, Pin1);
    171a:	ae e4       	ldi	r26, 0x4E	; 78
    171c:	b0 e0       	ldi	r27, 0x00	; 0
    171e:	ee e4       	ldi	r30, 0x4E	; 78
    1720:	f0 e0       	ldi	r31, 0x00	; 0
    1722:	80 81       	ld	r24, Z
    1724:	82 60       	ori	r24, 0x02	; 2
    1726:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, Pin2);
    1728:	ae e4       	ldi	r26, 0x4E	; 78
    172a:	b0 e0       	ldi	r27, 0x00	; 0
    172c:	ee e4       	ldi	r30, 0x4E	; 78
    172e:	f0 e0       	ldi	r31, 0x00	; 0
    1730:	80 81       	ld	r24, Z
    1732:	84 60       	ori	r24, 0x04	; 4
    1734:	8c 93       	st	X, r24
			LOC_u8ReturnValue = E_OK;
    1736:	19 82       	std	Y+1, r1	; 0x01
    1738:	19 c0       	rjmp	.+50     	; 0x176c <MCAL_T1_u8T1Prescaler+0x220>
		} else if (LOC_u8Clock_Selection == EXTERNAL_RISING_EDGE) {
    173a:	8a 81       	ldd	r24, Y+2	; 0x02
    173c:	87 30       	cpi	r24, 0x07	; 7
    173e:	b1 f4       	brne	.+44     	; 0x176c <MCAL_T1_u8T1Prescaler+0x220>
			SET_BIT(TCCR1B, Pin0);
    1740:	ae e4       	ldi	r26, 0x4E	; 78
    1742:	b0 e0       	ldi	r27, 0x00	; 0
    1744:	ee e4       	ldi	r30, 0x4E	; 78
    1746:	f0 e0       	ldi	r31, 0x00	; 0
    1748:	80 81       	ld	r24, Z
    174a:	81 60       	ori	r24, 0x01	; 1
    174c:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, Pin1);
    174e:	ae e4       	ldi	r26, 0x4E	; 78
    1750:	b0 e0       	ldi	r27, 0x00	; 0
    1752:	ee e4       	ldi	r30, 0x4E	; 78
    1754:	f0 e0       	ldi	r31, 0x00	; 0
    1756:	80 81       	ld	r24, Z
    1758:	82 60       	ori	r24, 0x02	; 2
    175a:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, Pin2);
    175c:	ae e4       	ldi	r26, 0x4E	; 78
    175e:	b0 e0       	ldi	r27, 0x00	; 0
    1760:	ee e4       	ldi	r30, 0x4E	; 78
    1762:	f0 e0       	ldi	r31, 0x00	; 0
    1764:	80 81       	ld	r24, Z
    1766:	84 60       	ori	r24, 0x04	; 4
    1768:	8c 93       	st	X, r24
			LOC_u8ReturnValue = E_OK;
    176a:	19 82       	std	Y+1, r1	; 0x01
			//NOTHING
		}
	} else {
		//NOTHING
	}
	return LOC_u8ReturnValue;
    176c:	89 81       	ldd	r24, Y+1	; 0x01
}
    176e:	0f 90       	pop	r0
    1770:	0f 90       	pop	r0
    1772:	0f 90       	pop	r0
    1774:	0f 90       	pop	r0
    1776:	cf 91       	pop	r28
    1778:	df 91       	pop	r29
    177a:	08 95       	ret

0000177c <MCAL_T1_u8T1CompareOutputMode>:
//Fast MODE PWM & PHASE CORRECT
u8 MCAL_T1_u8T1CompareOutputMode(u8 LOC_u8OutputMode, u8 LOC_u8Channel) {
    177c:	df 93       	push	r29
    177e:	cf 93       	push	r28
    1780:	00 d0       	rcall	.+0      	; 0x1782 <MCAL_T1_u8T1CompareOutputMode+0x6>
    1782:	0f 92       	push	r0
    1784:	cd b7       	in	r28, 0x3d	; 61
    1786:	de b7       	in	r29, 0x3e	; 62
    1788:	8a 83       	std	Y+2, r24	; 0x02
    178a:	6b 83       	std	Y+3, r22	; 0x03
	u8 LOC_u8ReturnValue = E_NOT_OK;
    178c:	81 e0       	ldi	r24, 0x01	; 1
    178e:	89 83       	std	Y+1, r24	; 0x01
	if (LOC_u8OutputMode <= INVERTING_MODE && LOC_u8Channel <= CHENNEL_B) {
    1790:	8a 81       	ldd	r24, Y+2	; 0x02
    1792:	82 30       	cpi	r24, 0x02	; 2
    1794:	08 f0       	brcs	.+2      	; 0x1798 <MCAL_T1_u8T1CompareOutputMode+0x1c>
    1796:	72 c0       	rjmp	.+228    	; 0x187c <MCAL_T1_u8T1CompareOutputMode+0x100>
    1798:	8b 81       	ldd	r24, Y+3	; 0x03
    179a:	82 30       	cpi	r24, 0x02	; 2
    179c:	08 f0       	brcs	.+2      	; 0x17a0 <MCAL_T1_u8T1CompareOutputMode+0x24>
    179e:	6e c0       	rjmp	.+220    	; 0x187c <MCAL_T1_u8T1CompareOutputMode+0x100>
		if (LOC_u8Channel == CHENNEL_A) {
    17a0:	8b 81       	ldd	r24, Y+3	; 0x03
    17a2:	88 23       	and	r24, r24
    17a4:	a9 f5       	brne	.+106    	; 0x1810 <MCAL_T1_u8T1CompareOutputMode+0x94>
			if (LOC_u8OutputMode == NON_INVERTING_MODE) {
    17a6:	8a 81       	ldd	r24, Y+2	; 0x02
    17a8:	88 23       	and	r24, r24
    17aa:	b9 f4       	brne	.+46     	; 0x17da <MCAL_T1_u8T1CompareOutputMode+0x5e>
				CLR_BIT(TCCR1A, Pin6);
    17ac:	af e4       	ldi	r26, 0x4F	; 79
    17ae:	b0 e0       	ldi	r27, 0x00	; 0
    17b0:	ef e4       	ldi	r30, 0x4F	; 79
    17b2:	f0 e0       	ldi	r31, 0x00	; 0
    17b4:	80 81       	ld	r24, Z
    17b6:	8f 7b       	andi	r24, 0xBF	; 191
    17b8:	8c 93       	st	X, r24
				SET_BIT(TCCR1A, Pin7);
    17ba:	af e4       	ldi	r26, 0x4F	; 79
    17bc:	b0 e0       	ldi	r27, 0x00	; 0
    17be:	ef e4       	ldi	r30, 0x4F	; 79
    17c0:	f0 e0       	ldi	r31, 0x00	; 0
    17c2:	80 81       	ld	r24, Z
    17c4:	80 68       	ori	r24, 0x80	; 128
    17c6:	8c 93       	st	X, r24
				SET_BIT(DDRD, Pin5);
    17c8:	a1 e3       	ldi	r26, 0x31	; 49
    17ca:	b0 e0       	ldi	r27, 0x00	; 0
    17cc:	e1 e3       	ldi	r30, 0x31	; 49
    17ce:	f0 e0       	ldi	r31, 0x00	; 0
    17d0:	80 81       	ld	r24, Z
    17d2:	80 62       	ori	r24, 0x20	; 32
    17d4:	8c 93       	st	X, r24
				LOC_u8ReturnValue = E_OK;
    17d6:	19 82       	std	Y+1, r1	; 0x01
    17d8:	51 c0       	rjmp	.+162    	; 0x187c <MCAL_T1_u8T1CompareOutputMode+0x100>
			} else if (LOC_u8OutputMode == INVERTING_MODE) {
    17da:	8a 81       	ldd	r24, Y+2	; 0x02
    17dc:	81 30       	cpi	r24, 0x01	; 1
    17de:	09 f0       	breq	.+2      	; 0x17e2 <MCAL_T1_u8T1CompareOutputMode+0x66>
    17e0:	4d c0       	rjmp	.+154    	; 0x187c <MCAL_T1_u8T1CompareOutputMode+0x100>
				SET_BIT(TCCR1A, Pin6);
    17e2:	af e4       	ldi	r26, 0x4F	; 79
    17e4:	b0 e0       	ldi	r27, 0x00	; 0
    17e6:	ef e4       	ldi	r30, 0x4F	; 79
    17e8:	f0 e0       	ldi	r31, 0x00	; 0
    17ea:	80 81       	ld	r24, Z
    17ec:	80 64       	ori	r24, 0x40	; 64
    17ee:	8c 93       	st	X, r24
				SET_BIT(TCCR1A, Pin7);
    17f0:	af e4       	ldi	r26, 0x4F	; 79
    17f2:	b0 e0       	ldi	r27, 0x00	; 0
    17f4:	ef e4       	ldi	r30, 0x4F	; 79
    17f6:	f0 e0       	ldi	r31, 0x00	; 0
    17f8:	80 81       	ld	r24, Z
    17fa:	80 68       	ori	r24, 0x80	; 128
    17fc:	8c 93       	st	X, r24
				SET_BIT(DDRD, Pin5);
    17fe:	a1 e3       	ldi	r26, 0x31	; 49
    1800:	b0 e0       	ldi	r27, 0x00	; 0
    1802:	e1 e3       	ldi	r30, 0x31	; 49
    1804:	f0 e0       	ldi	r31, 0x00	; 0
    1806:	80 81       	ld	r24, Z
    1808:	80 62       	ori	r24, 0x20	; 32
    180a:	8c 93       	st	X, r24
				LOC_u8ReturnValue = E_OK;
    180c:	19 82       	std	Y+1, r1	; 0x01
    180e:	36 c0       	rjmp	.+108    	; 0x187c <MCAL_T1_u8T1CompareOutputMode+0x100>
			} else {
				//NOTHING
			}
		} else if (LOC_u8Channel == CHENNEL_B) {
    1810:	8b 81       	ldd	r24, Y+3	; 0x03
    1812:	81 30       	cpi	r24, 0x01	; 1
    1814:	99 f5       	brne	.+102    	; 0x187c <MCAL_T1_u8T1CompareOutputMode+0x100>
			if (LOC_u8OutputMode == NON_INVERTING_MODE) {
    1816:	8a 81       	ldd	r24, Y+2	; 0x02
    1818:	88 23       	and	r24, r24
    181a:	b9 f4       	brne	.+46     	; 0x184a <MCAL_T1_u8T1CompareOutputMode+0xce>
				CLR_BIT(TCCR1A, Pin4);
    181c:	af e4       	ldi	r26, 0x4F	; 79
    181e:	b0 e0       	ldi	r27, 0x00	; 0
    1820:	ef e4       	ldi	r30, 0x4F	; 79
    1822:	f0 e0       	ldi	r31, 0x00	; 0
    1824:	80 81       	ld	r24, Z
    1826:	8f 7e       	andi	r24, 0xEF	; 239
    1828:	8c 93       	st	X, r24
				SET_BIT(TCCR1A, Pin5);
    182a:	af e4       	ldi	r26, 0x4F	; 79
    182c:	b0 e0       	ldi	r27, 0x00	; 0
    182e:	ef e4       	ldi	r30, 0x4F	; 79
    1830:	f0 e0       	ldi	r31, 0x00	; 0
    1832:	80 81       	ld	r24, Z
    1834:	80 62       	ori	r24, 0x20	; 32
    1836:	8c 93       	st	X, r24
				SET_BIT(DDRD, Pin4);
    1838:	a1 e3       	ldi	r26, 0x31	; 49
    183a:	b0 e0       	ldi	r27, 0x00	; 0
    183c:	e1 e3       	ldi	r30, 0x31	; 49
    183e:	f0 e0       	ldi	r31, 0x00	; 0
    1840:	80 81       	ld	r24, Z
    1842:	80 61       	ori	r24, 0x10	; 16
    1844:	8c 93       	st	X, r24
				LOC_u8ReturnValue = E_OK;
    1846:	19 82       	std	Y+1, r1	; 0x01
    1848:	19 c0       	rjmp	.+50     	; 0x187c <MCAL_T1_u8T1CompareOutputMode+0x100>
			} else if (LOC_u8OutputMode == INVERTING_MODE) {
    184a:	8a 81       	ldd	r24, Y+2	; 0x02
    184c:	81 30       	cpi	r24, 0x01	; 1
    184e:	b1 f4       	brne	.+44     	; 0x187c <MCAL_T1_u8T1CompareOutputMode+0x100>
				SET_BIT(TCCR1A, Pin4);
    1850:	af e4       	ldi	r26, 0x4F	; 79
    1852:	b0 e0       	ldi	r27, 0x00	; 0
    1854:	ef e4       	ldi	r30, 0x4F	; 79
    1856:	f0 e0       	ldi	r31, 0x00	; 0
    1858:	80 81       	ld	r24, Z
    185a:	80 61       	ori	r24, 0x10	; 16
    185c:	8c 93       	st	X, r24
				SET_BIT(TCCR1A, Pin5);
    185e:	af e4       	ldi	r26, 0x4F	; 79
    1860:	b0 e0       	ldi	r27, 0x00	; 0
    1862:	ef e4       	ldi	r30, 0x4F	; 79
    1864:	f0 e0       	ldi	r31, 0x00	; 0
    1866:	80 81       	ld	r24, Z
    1868:	80 62       	ori	r24, 0x20	; 32
    186a:	8c 93       	st	X, r24
				SET_BIT(DDRD, Pin4);
    186c:	a1 e3       	ldi	r26, 0x31	; 49
    186e:	b0 e0       	ldi	r27, 0x00	; 0
    1870:	e1 e3       	ldi	r30, 0x31	; 49
    1872:	f0 e0       	ldi	r31, 0x00	; 0
    1874:	80 81       	ld	r24, Z
    1876:	80 61       	ori	r24, 0x10	; 16
    1878:	8c 93       	st	X, r24
				LOC_u8ReturnValue = E_OK;
    187a:	19 82       	std	Y+1, r1	; 0x01
			//NOTHING
		}
	} else {
		//NOTHING
	}
	return LOC_u8ReturnValue;
    187c:	89 81       	ldd	r24, Y+1	; 0x01
}
    187e:	0f 90       	pop	r0
    1880:	0f 90       	pop	r0
    1882:	0f 90       	pop	r0
    1884:	cf 91       	pop	r28
    1886:	df 91       	pop	r29
    1888:	08 95       	ret

0000188a <MCAL_T1_voidNoiseCancller>:
//NOISE CANCLLER
void MCAL_T1_voidNoiseCancller(void) {
    188a:	df 93       	push	r29
    188c:	cf 93       	push	r28
    188e:	cd b7       	in	r28, 0x3d	; 61
    1890:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TCCR1B, Pin7);
    1892:	ae e4       	ldi	r26, 0x4E	; 78
    1894:	b0 e0       	ldi	r27, 0x00	; 0
    1896:	ee e4       	ldi	r30, 0x4E	; 78
    1898:	f0 e0       	ldi	r31, 0x00	; 0
    189a:	80 81       	ld	r24, Z
    189c:	80 68       	ori	r24, 0x80	; 128
    189e:	8c 93       	st	X, r24
}
    18a0:	cf 91       	pop	r28
    18a2:	df 91       	pop	r29
    18a4:	08 95       	ret

000018a6 <MCAL_T1_voidSetTCNT1Value>:
//Set TCNT1 Value
void MCAL_T1_voidSetTCNT1Value(u16 LOC_u16Value) {
    18a6:	df 93       	push	r29
    18a8:	cf 93       	push	r28
    18aa:	00 d0       	rcall	.+0      	; 0x18ac <MCAL_T1_voidSetTCNT1Value+0x6>
    18ac:	cd b7       	in	r28, 0x3d	; 61
    18ae:	de b7       	in	r29, 0x3e	; 62
    18b0:	9a 83       	std	Y+2, r25	; 0x02
    18b2:	89 83       	std	Y+1, r24	; 0x01
	if (LOC_u16Value <= SIXTEEN_BIT_MAX_VALUE) {
		TCNT1L = LOC_u16Value;
    18b4:	ec e4       	ldi	r30, 0x4C	; 76
    18b6:	f0 e0       	ldi	r31, 0x00	; 0
    18b8:	89 81       	ldd	r24, Y+1	; 0x01
    18ba:	80 83       	st	Z, r24
		TCNT1H = (LOC_u16Value >> 8);
    18bc:	ed e4       	ldi	r30, 0x4D	; 77
    18be:	f0 e0       	ldi	r31, 0x00	; 0
    18c0:	89 81       	ldd	r24, Y+1	; 0x01
    18c2:	9a 81       	ldd	r25, Y+2	; 0x02
    18c4:	89 2f       	mov	r24, r25
    18c6:	99 27       	eor	r25, r25
    18c8:	80 83       	st	Z, r24
	} else {
		//NOTHING
	}
}
    18ca:	0f 90       	pop	r0
    18cc:	0f 90       	pop	r0
    18ce:	cf 91       	pop	r28
    18d0:	df 91       	pop	r29
    18d2:	08 95       	ret

000018d4 <MCAL_T1_voidGetTCNT1Value>:
//GIT TCNT1
void MCAL_T1_voidGetTCNT1Value(u16 *LOC_pu16Value) {
    18d4:	df 93       	push	r29
    18d6:	cf 93       	push	r28
    18d8:	00 d0       	rcall	.+0      	; 0x18da <MCAL_T1_voidGetTCNT1Value+0x6>
    18da:	cd b7       	in	r28, 0x3d	; 61
    18dc:	de b7       	in	r29, 0x3e	; 62
    18de:	9a 83       	std	Y+2, r25	; 0x02
    18e0:	89 83       	std	Y+1, r24	; 0x01
	if (LOC_pu16Value) {
    18e2:	89 81       	ldd	r24, Y+1	; 0x01
    18e4:	9a 81       	ldd	r25, Y+2	; 0x02
    18e6:	00 97       	sbiw	r24, 0x00	; 0
    18e8:	91 f0       	breq	.+36     	; 0x190e <MCAL_T1_voidGetTCNT1Value+0x3a>
		*LOC_pu16Value = (TCNT1H << 8) | TCNT1L;
    18ea:	ed e4       	ldi	r30, 0x4D	; 77
    18ec:	f0 e0       	ldi	r31, 0x00	; 0
    18ee:	80 81       	ld	r24, Z
    18f0:	88 2f       	mov	r24, r24
    18f2:	90 e0       	ldi	r25, 0x00	; 0
    18f4:	38 2f       	mov	r19, r24
    18f6:	22 27       	eor	r18, r18
    18f8:	ec e4       	ldi	r30, 0x4C	; 76
    18fa:	f0 e0       	ldi	r31, 0x00	; 0
    18fc:	80 81       	ld	r24, Z
    18fe:	88 2f       	mov	r24, r24
    1900:	90 e0       	ldi	r25, 0x00	; 0
    1902:	82 2b       	or	r24, r18
    1904:	93 2b       	or	r25, r19
    1906:	e9 81       	ldd	r30, Y+1	; 0x01
    1908:	fa 81       	ldd	r31, Y+2	; 0x02
    190a:	91 83       	std	Z+1, r25	; 0x01
    190c:	80 83       	st	Z, r24
	}
}
    190e:	0f 90       	pop	r0
    1910:	0f 90       	pop	r0
    1912:	cf 91       	pop	r28
    1914:	df 91       	pop	r29
    1916:	08 95       	ret

00001918 <MCAL_T1_voidSetOCR1AValue>:
//Set OCR1A
void MCAL_T1_voidSetOCR1AValue(u16 LOC_u16Value) {
    1918:	df 93       	push	r29
    191a:	cf 93       	push	r28
    191c:	00 d0       	rcall	.+0      	; 0x191e <MCAL_T1_voidSetOCR1AValue+0x6>
    191e:	cd b7       	in	r28, 0x3d	; 61
    1920:	de b7       	in	r29, 0x3e	; 62
    1922:	9a 83       	std	Y+2, r25	; 0x02
    1924:	89 83       	std	Y+1, r24	; 0x01
	if (LOC_u16Value <= SIXTEEN_BIT_MAX_VALUE) {
		OCR1A = LOC_u16Value;
    1926:	ea e4       	ldi	r30, 0x4A	; 74
    1928:	f0 e0       	ldi	r31, 0x00	; 0
    192a:	89 81       	ldd	r24, Y+1	; 0x01
    192c:	9a 81       	ldd	r25, Y+2	; 0x02
    192e:	91 83       	std	Z+1, r25	; 0x01
    1930:	80 83       	st	Z, r24
	} else {
		//NOTHING
	}
}
    1932:	0f 90       	pop	r0
    1934:	0f 90       	pop	r0
    1936:	cf 91       	pop	r28
    1938:	df 91       	pop	r29
    193a:	08 95       	ret

0000193c <MCAL_T1_voidSetOCR1BValue>:
//SET OCR1B
void MCAL_T1_voidSetOCR1BValue(u16 LOC_u16Value) {
    193c:	df 93       	push	r29
    193e:	cf 93       	push	r28
    1940:	00 d0       	rcall	.+0      	; 0x1942 <MCAL_T1_voidSetOCR1BValue+0x6>
    1942:	cd b7       	in	r28, 0x3d	; 61
    1944:	de b7       	in	r29, 0x3e	; 62
    1946:	9a 83       	std	Y+2, r25	; 0x02
    1948:	89 83       	std	Y+1, r24	; 0x01
	if (LOC_u16Value <= SIXTEEN_BIT_MAX_VALUE) {
		OCR1B = LOC_u16Value;
    194a:	e8 e4       	ldi	r30, 0x48	; 72
    194c:	f0 e0       	ldi	r31, 0x00	; 0
    194e:	89 81       	ldd	r24, Y+1	; 0x01
    1950:	9a 81       	ldd	r25, Y+2	; 0x02
    1952:	91 83       	std	Z+1, r25	; 0x01
    1954:	80 83       	st	Z, r24
	} else {
		//NOTHING
	}
}
    1956:	0f 90       	pop	r0
    1958:	0f 90       	pop	r0
    195a:	cf 91       	pop	r28
    195c:	df 91       	pop	r29
    195e:	08 95       	ret

00001960 <MCAL_T1_voidSetICR1Value>:
//SET ICR1
void MCAL_T1_voidSetICR1Value(u16 LOC_u16Value) {
    1960:	df 93       	push	r29
    1962:	cf 93       	push	r28
    1964:	00 d0       	rcall	.+0      	; 0x1966 <MCAL_T1_voidSetICR1Value+0x6>
    1966:	cd b7       	in	r28, 0x3d	; 61
    1968:	de b7       	in	r29, 0x3e	; 62
    196a:	9a 83       	std	Y+2, r25	; 0x02
    196c:	89 83       	std	Y+1, r24	; 0x01
	if (LOC_u16Value <= SIXTEEN_BIT_MAX_VALUE) {
		ICR1 = LOC_u16Value;
    196e:	e6 e4       	ldi	r30, 0x46	; 70
    1970:	f0 e0       	ldi	r31, 0x00	; 0
    1972:	89 81       	ldd	r24, Y+1	; 0x01
    1974:	9a 81       	ldd	r25, Y+2	; 0x02
    1976:	91 83       	std	Z+1, r25	; 0x01
    1978:	80 83       	st	Z, r24
	} else {
		//NOTHING
	}
}
    197a:	0f 90       	pop	r0
    197c:	0f 90       	pop	r0
    197e:	cf 91       	pop	r28
    1980:	df 91       	pop	r29
    1982:	08 95       	ret

00001984 <MCAL_T1_voidGetICR1Value>:
//Get ICR1
void MCAL_T1_voidGetICR1Value(u16 *LOC_pu16Value) {
    1984:	df 93       	push	r29
    1986:	cf 93       	push	r28
    1988:	00 d0       	rcall	.+0      	; 0x198a <MCAL_T1_voidGetICR1Value+0x6>
    198a:	cd b7       	in	r28, 0x3d	; 61
    198c:	de b7       	in	r29, 0x3e	; 62
    198e:	9a 83       	std	Y+2, r25	; 0x02
    1990:	89 83       	std	Y+1, r24	; 0x01
	if (LOC_pu16Value) {
    1992:	89 81       	ldd	r24, Y+1	; 0x01
    1994:	9a 81       	ldd	r25, Y+2	; 0x02
    1996:	00 97       	sbiw	r24, 0x00	; 0
    1998:	91 f0       	breq	.+36     	; 0x19be <MCAL_T1_voidGetICR1Value+0x3a>
		*LOC_pu16Value = (ICR1H << 8) | ICR1L;
    199a:	e7 e4       	ldi	r30, 0x47	; 71
    199c:	f0 e0       	ldi	r31, 0x00	; 0
    199e:	80 81       	ld	r24, Z
    19a0:	88 2f       	mov	r24, r24
    19a2:	90 e0       	ldi	r25, 0x00	; 0
    19a4:	38 2f       	mov	r19, r24
    19a6:	22 27       	eor	r18, r18
    19a8:	e6 e4       	ldi	r30, 0x46	; 70
    19aa:	f0 e0       	ldi	r31, 0x00	; 0
    19ac:	80 81       	ld	r24, Z
    19ae:	88 2f       	mov	r24, r24
    19b0:	90 e0       	ldi	r25, 0x00	; 0
    19b2:	82 2b       	or	r24, r18
    19b4:	93 2b       	or	r25, r19
    19b6:	e9 81       	ldd	r30, Y+1	; 0x01
    19b8:	fa 81       	ldd	r31, Y+2	; 0x02
    19ba:	91 83       	std	Z+1, r25	; 0x01
    19bc:	80 83       	st	Z, r24
	}
}
    19be:	0f 90       	pop	r0
    19c0:	0f 90       	pop	r0
    19c2:	cf 91       	pop	r28
    19c4:	df 91       	pop	r29
    19c6:	08 95       	ret

000019c8 <MCAL_T1_voidTCNT1_GIEEnable>:
//TCNT1 PIE
void MCAL_T1_voidTCNT1_GIEEnable(void) {
    19c8:	df 93       	push	r29
    19ca:	cf 93       	push	r28
    19cc:	cd b7       	in	r28, 0x3d	; 61
    19ce:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG, Pin7);
    19d0:	af e5       	ldi	r26, 0x5F	; 95
    19d2:	b0 e0       	ldi	r27, 0x00	; 0
    19d4:	ef e5       	ldi	r30, 0x5F	; 95
    19d6:	f0 e0       	ldi	r31, 0x00	; 0
    19d8:	80 81       	ld	r24, Z
    19da:	80 68       	ori	r24, 0x80	; 128
    19dc:	8c 93       	st	X, r24
	SET_BIT(TIMSK, Pin2);
    19de:	a9 e5       	ldi	r26, 0x59	; 89
    19e0:	b0 e0       	ldi	r27, 0x00	; 0
    19e2:	e9 e5       	ldi	r30, 0x59	; 89
    19e4:	f0 e0       	ldi	r31, 0x00	; 0
    19e6:	80 81       	ld	r24, Z
    19e8:	84 60       	ori	r24, 0x04	; 4
    19ea:	8c 93       	st	X, r24
}
    19ec:	cf 91       	pop	r28
    19ee:	df 91       	pop	r29
    19f0:	08 95       	ret

000019f2 <MCAL_T1_voidTCNT1_GIEDisable>:
void MCAL_T1_voidTCNT1_GIEDisable(void) {
    19f2:	df 93       	push	r29
    19f4:	cf 93       	push	r28
    19f6:	cd b7       	in	r28, 0x3d	; 61
    19f8:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK, Pin2);
    19fa:	a9 e5       	ldi	r26, 0x59	; 89
    19fc:	b0 e0       	ldi	r27, 0x00	; 0
    19fe:	e9 e5       	ldi	r30, 0x59	; 89
    1a00:	f0 e0       	ldi	r31, 0x00	; 0
    1a02:	80 81       	ld	r24, Z
    1a04:	8b 7f       	andi	r24, 0xFB	; 251
    1a06:	8c 93       	st	X, r24
}
    1a08:	cf 91       	pop	r28
    1a0a:	df 91       	pop	r29
    1a0c:	08 95       	ret

00001a0e <MCAL_T1_voidOCR1B_GIEEnable>:
//OCR1B PIE
void MCAL_T1_voidOCR1B_GIEEnable(void) {
    1a0e:	df 93       	push	r29
    1a10:	cf 93       	push	r28
    1a12:	cd b7       	in	r28, 0x3d	; 61
    1a14:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG, Pin7);
    1a16:	af e5       	ldi	r26, 0x5F	; 95
    1a18:	b0 e0       	ldi	r27, 0x00	; 0
    1a1a:	ef e5       	ldi	r30, 0x5F	; 95
    1a1c:	f0 e0       	ldi	r31, 0x00	; 0
    1a1e:	80 81       	ld	r24, Z
    1a20:	80 68       	ori	r24, 0x80	; 128
    1a22:	8c 93       	st	X, r24
	SET_BIT(TIMSK, Pin3);
    1a24:	a9 e5       	ldi	r26, 0x59	; 89
    1a26:	b0 e0       	ldi	r27, 0x00	; 0
    1a28:	e9 e5       	ldi	r30, 0x59	; 89
    1a2a:	f0 e0       	ldi	r31, 0x00	; 0
    1a2c:	80 81       	ld	r24, Z
    1a2e:	88 60       	ori	r24, 0x08	; 8
    1a30:	8c 93       	st	X, r24
}
    1a32:	cf 91       	pop	r28
    1a34:	df 91       	pop	r29
    1a36:	08 95       	ret

00001a38 <MCAL_T1_voidOCR1B_GIEDisable>:
void MCAL_T1_voidOCR1B_GIEDisable(void) {
    1a38:	df 93       	push	r29
    1a3a:	cf 93       	push	r28
    1a3c:	cd b7       	in	r28, 0x3d	; 61
    1a3e:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK, Pin3);
    1a40:	a9 e5       	ldi	r26, 0x59	; 89
    1a42:	b0 e0       	ldi	r27, 0x00	; 0
    1a44:	e9 e5       	ldi	r30, 0x59	; 89
    1a46:	f0 e0       	ldi	r31, 0x00	; 0
    1a48:	80 81       	ld	r24, Z
    1a4a:	87 7f       	andi	r24, 0xF7	; 247
    1a4c:	8c 93       	st	X, r24
}
    1a4e:	cf 91       	pop	r28
    1a50:	df 91       	pop	r29
    1a52:	08 95       	ret

00001a54 <MCAL_T1_voidOCR1A_GIEEnable>:
//OCR1A PIE
void MCAL_T1_voidOCR1A_GIEEnable(void) {
    1a54:	df 93       	push	r29
    1a56:	cf 93       	push	r28
    1a58:	cd b7       	in	r28, 0x3d	; 61
    1a5a:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG, Pin7);
    1a5c:	af e5       	ldi	r26, 0x5F	; 95
    1a5e:	b0 e0       	ldi	r27, 0x00	; 0
    1a60:	ef e5       	ldi	r30, 0x5F	; 95
    1a62:	f0 e0       	ldi	r31, 0x00	; 0
    1a64:	80 81       	ld	r24, Z
    1a66:	80 68       	ori	r24, 0x80	; 128
    1a68:	8c 93       	st	X, r24
	SET_BIT(TIMSK, Pin4);
    1a6a:	a9 e5       	ldi	r26, 0x59	; 89
    1a6c:	b0 e0       	ldi	r27, 0x00	; 0
    1a6e:	e9 e5       	ldi	r30, 0x59	; 89
    1a70:	f0 e0       	ldi	r31, 0x00	; 0
    1a72:	80 81       	ld	r24, Z
    1a74:	80 61       	ori	r24, 0x10	; 16
    1a76:	8c 93       	st	X, r24
}
    1a78:	cf 91       	pop	r28
    1a7a:	df 91       	pop	r29
    1a7c:	08 95       	ret

00001a7e <MCAL_T1_voidOCR1A_GIEDisable>:
void MCAL_T1_voidOCR1A_GIEDisable(void) {
    1a7e:	df 93       	push	r29
    1a80:	cf 93       	push	r28
    1a82:	cd b7       	in	r28, 0x3d	; 61
    1a84:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK, Pin4);
    1a86:	a9 e5       	ldi	r26, 0x59	; 89
    1a88:	b0 e0       	ldi	r27, 0x00	; 0
    1a8a:	e9 e5       	ldi	r30, 0x59	; 89
    1a8c:	f0 e0       	ldi	r31, 0x00	; 0
    1a8e:	80 81       	ld	r24, Z
    1a90:	8f 7e       	andi	r24, 0xEF	; 239
    1a92:	8c 93       	st	X, r24
}
    1a94:	cf 91       	pop	r28
    1a96:	df 91       	pop	r29
    1a98:	08 95       	ret

00001a9a <MCAL_T1_voidICR1_GIEEnable>:
//ICR1 PIE
void MCAL_T1_voidICR1_GIEEnable(void) {
    1a9a:	df 93       	push	r29
    1a9c:	cf 93       	push	r28
    1a9e:	cd b7       	in	r28, 0x3d	; 61
    1aa0:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG, Pin7);
    1aa2:	af e5       	ldi	r26, 0x5F	; 95
    1aa4:	b0 e0       	ldi	r27, 0x00	; 0
    1aa6:	ef e5       	ldi	r30, 0x5F	; 95
    1aa8:	f0 e0       	ldi	r31, 0x00	; 0
    1aaa:	80 81       	ld	r24, Z
    1aac:	80 68       	ori	r24, 0x80	; 128
    1aae:	8c 93       	st	X, r24
	SET_BIT(TIMSK, Pin5);
    1ab0:	a9 e5       	ldi	r26, 0x59	; 89
    1ab2:	b0 e0       	ldi	r27, 0x00	; 0
    1ab4:	e9 e5       	ldi	r30, 0x59	; 89
    1ab6:	f0 e0       	ldi	r31, 0x00	; 0
    1ab8:	80 81       	ld	r24, Z
    1aba:	80 62       	ori	r24, 0x20	; 32
    1abc:	8c 93       	st	X, r24
}
    1abe:	cf 91       	pop	r28
    1ac0:	df 91       	pop	r29
    1ac2:	08 95       	ret

00001ac4 <MCAL_T1_voidICR1_GIEDisable>:
void MCAL_T1_voidICR1_GIEDisable(void) {
    1ac4:	df 93       	push	r29
    1ac6:	cf 93       	push	r28
    1ac8:	cd b7       	in	r28, 0x3d	; 61
    1aca:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK, Pin5);
    1acc:	a9 e5       	ldi	r26, 0x59	; 89
    1ace:	b0 e0       	ldi	r27, 0x00	; 0
    1ad0:	e9 e5       	ldi	r30, 0x59	; 89
    1ad2:	f0 e0       	ldi	r31, 0x00	; 0
    1ad4:	80 81       	ld	r24, Z
    1ad6:	8f 7d       	andi	r24, 0xDF	; 223
    1ad8:	8c 93       	st	X, r24
}
    1ada:	cf 91       	pop	r28
    1adc:	df 91       	pop	r29
    1ade:	08 95       	ret

00001ae0 <MCAL_T1_u8T1DelayNormalMode>:

u8 MCAL_T1_u8T1DelayNormalMode(u8 LOC_u8Clock_Selection,
		f32 LOC_f32NumOFSecond, u16 *LOC_pu8StartValue, u16 *LOC_pu16Counter) {
    1ae0:	0f 93       	push	r16
    1ae2:	1f 93       	push	r17
    1ae4:	df 93       	push	r29
    1ae6:	cf 93       	push	r28
    1ae8:	cd b7       	in	r28, 0x3d	; 61
    1aea:	de b7       	in	r29, 0x3e	; 62
    1aec:	66 97       	sbiw	r28, 0x16	; 22
    1aee:	0f b6       	in	r0, 0x3f	; 63
    1af0:	f8 94       	cli
    1af2:	de bf       	out	0x3e, r29	; 62
    1af4:	0f be       	out	0x3f, r0	; 63
    1af6:	cd bf       	out	0x3d, r28	; 61
    1af8:	8e 87       	std	Y+14, r24	; 0x0e
    1afa:	4f 87       	std	Y+15, r20	; 0x0f
    1afc:	58 8b       	std	Y+16, r21	; 0x10
    1afe:	69 8b       	std	Y+17, r22	; 0x11
    1b00:	7a 8b       	std	Y+18, r23	; 0x12
    1b02:	3c 8b       	std	Y+20, r19	; 0x14
    1b04:	2b 8b       	std	Y+19, r18	; 0x13
    1b06:	1e 8b       	std	Y+22, r17	; 0x16
    1b08:	0d 8b       	std	Y+21, r16	; 0x15
	u8 LOC_u8ReturnValue = E_NOT_OK;
    1b0a:	81 e0       	ldi	r24, 0x01	; 1
    1b0c:	89 87       	std	Y+9, r24	; 0x09
	f32 TickTime = NUMBER_0;
    1b0e:	80 e0       	ldi	r24, 0x00	; 0
    1b10:	90 e0       	ldi	r25, 0x00	; 0
    1b12:	a0 e0       	ldi	r26, 0x00	; 0
    1b14:	b0 e0       	ldi	r27, 0x00	; 0
    1b16:	8a 87       	std	Y+10, r24	; 0x0a
    1b18:	9b 87       	std	Y+11, r25	; 0x0b
    1b1a:	ac 87       	std	Y+12, r26	; 0x0c
    1b1c:	bd 87       	std	Y+13, r27	; 0x0d
	u32 N = NUMBER_0;
    1b1e:	1d 82       	std	Y+5, r1	; 0x05
    1b20:	1e 82       	std	Y+6, r1	; 0x06
    1b22:	1f 82       	std	Y+7, r1	; 0x07
    1b24:	18 86       	std	Y+8, r1	; 0x08
	u16 counter = NUMBER_0;
    1b26:	1c 82       	std	Y+4, r1	; 0x04
    1b28:	1b 82       	std	Y+3, r1	; 0x03
	u16 Reminder = NUMBER_0;
    1b2a:	1a 82       	std	Y+2, r1	; 0x02
    1b2c:	19 82       	std	Y+1, r1	; 0x01
	MCAL_T1_u8T1Prescaler(LOC_u8Clock_Selection, &TickTime);
    1b2e:	9e 01       	movw	r18, r28
    1b30:	26 5f       	subi	r18, 0xF6	; 246
    1b32:	3f 4f       	sbci	r19, 0xFF	; 255
    1b34:	8e 85       	ldd	r24, Y+14	; 0x0e
    1b36:	b9 01       	movw	r22, r18
    1b38:	0e 94 a6 0a 	call	0x154c	; 0x154c <MCAL_T1_u8T1Prescaler>
	if (LOC_f32NumOFSecond <= 0 || LOC_f32NumOFSecond > 0) {
    1b3c:	6f 85       	ldd	r22, Y+15	; 0x0f
    1b3e:	78 89       	ldd	r23, Y+16	; 0x10
    1b40:	89 89       	ldd	r24, Y+17	; 0x11
    1b42:	9a 89       	ldd	r25, Y+18	; 0x12
    1b44:	20 e0       	ldi	r18, 0x00	; 0
    1b46:	30 e0       	ldi	r19, 0x00	; 0
    1b48:	40 e0       	ldi	r20, 0x00	; 0
    1b4a:	50 e0       	ldi	r21, 0x00	; 0
    1b4c:	0e 94 55 04 	call	0x8aa	; 0x8aa <__lesf2>
    1b50:	18 16       	cp	r1, r24
    1b52:	6c f4       	brge	.+26     	; 0x1b6e <MCAL_T1_u8T1DelayNormalMode+0x8e>
    1b54:	6f 85       	ldd	r22, Y+15	; 0x0f
    1b56:	78 89       	ldd	r23, Y+16	; 0x10
    1b58:	89 89       	ldd	r24, Y+17	; 0x11
    1b5a:	9a 89       	ldd	r25, Y+18	; 0x12
    1b5c:	20 e0       	ldi	r18, 0x00	; 0
    1b5e:	30 e0       	ldi	r19, 0x00	; 0
    1b60:	40 e0       	ldi	r20, 0x00	; 0
    1b62:	50 e0       	ldi	r21, 0x00	; 0
    1b64:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b68:	18 16       	cp	r1, r24
    1b6a:	0c f0       	brlt	.+2      	; 0x1b6e <MCAL_T1_u8T1DelayNormalMode+0x8e>
    1b6c:	6b c0       	rjmp	.+214    	; 0x1c44 <MCAL_T1_u8T1DelayNormalMode+0x164>
		N = LOC_f32NumOFSecond / (f32) TickTime;
    1b6e:	2a 85       	ldd	r18, Y+10	; 0x0a
    1b70:	3b 85       	ldd	r19, Y+11	; 0x0b
    1b72:	4c 85       	ldd	r20, Y+12	; 0x0c
    1b74:	5d 85       	ldd	r21, Y+13	; 0x0d
    1b76:	6f 85       	ldd	r22, Y+15	; 0x0f
    1b78:	78 89       	ldd	r23, Y+16	; 0x10
    1b7a:	89 89       	ldd	r24, Y+17	; 0x11
    1b7c:	9a 89       	ldd	r25, Y+18	; 0x12
    1b7e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1b82:	dc 01       	movw	r26, r24
    1b84:	cb 01       	movw	r24, r22
    1b86:	bc 01       	movw	r22, r24
    1b88:	cd 01       	movw	r24, r26
    1b8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b8e:	dc 01       	movw	r26, r24
    1b90:	cb 01       	movw	r24, r22
    1b92:	8d 83       	std	Y+5, r24	; 0x05
    1b94:	9e 83       	std	Y+6, r25	; 0x06
    1b96:	af 83       	std	Y+7, r26	; 0x07
    1b98:	b8 87       	std	Y+8, r27	; 0x08
		Reminder = N % OVER_FLOW_COUNT;
    1b9a:	8d 81       	ldd	r24, Y+5	; 0x05
    1b9c:	9e 81       	ldd	r25, Y+6	; 0x06
    1b9e:	af 81       	ldd	r26, Y+7	; 0x07
    1ba0:	b8 85       	ldd	r27, Y+8	; 0x08
    1ba2:	2f ef       	ldi	r18, 0xFF	; 255
    1ba4:	3f ef       	ldi	r19, 0xFF	; 255
    1ba6:	40 e0       	ldi	r20, 0x00	; 0
    1ba8:	50 e0       	ldi	r21, 0x00	; 0
    1baa:	bc 01       	movw	r22, r24
    1bac:	cd 01       	movw	r24, r26
    1bae:	0e 94 21 28 	call	0x5042	; 0x5042 <__udivmodsi4>
    1bb2:	dc 01       	movw	r26, r24
    1bb4:	cb 01       	movw	r24, r22
    1bb6:	9a 83       	std	Y+2, r25	; 0x02
    1bb8:	89 83       	std	Y+1, r24	; 0x01
		*LOC_pu8StartValue = Reminder;
    1bba:	eb 89       	ldd	r30, Y+19	; 0x13
    1bbc:	fc 89       	ldd	r31, Y+20	; 0x14
    1bbe:	89 81       	ldd	r24, Y+1	; 0x01
    1bc0:	9a 81       	ldd	r25, Y+2	; 0x02
    1bc2:	91 83       	std	Z+1, r25	; 0x01
    1bc4:	80 83       	st	Z, r24
		if (Reminder == NUMBER_0) {
    1bc6:	89 81       	ldd	r24, Y+1	; 0x01
    1bc8:	9a 81       	ldd	r25, Y+2	; 0x02
    1bca:	00 97       	sbiw	r24, 0x00	; 0
    1bcc:	d9 f4       	brne	.+54     	; 0x1c04 <MCAL_T1_u8T1DelayNormalMode+0x124>
			MCAL_T1_voidSetTCNT1Value(Reminder);
    1bce:	89 81       	ldd	r24, Y+1	; 0x01
    1bd0:	9a 81       	ldd	r25, Y+2	; 0x02
    1bd2:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <MCAL_T1_voidSetTCNT1Value>
			counter = N / OVER_FLOW_COUNT;
    1bd6:	8d 81       	ldd	r24, Y+5	; 0x05
    1bd8:	9e 81       	ldd	r25, Y+6	; 0x06
    1bda:	af 81       	ldd	r26, Y+7	; 0x07
    1bdc:	b8 85       	ldd	r27, Y+8	; 0x08
    1bde:	2f ef       	ldi	r18, 0xFF	; 255
    1be0:	3f ef       	ldi	r19, 0xFF	; 255
    1be2:	40 e0       	ldi	r20, 0x00	; 0
    1be4:	50 e0       	ldi	r21, 0x00	; 0
    1be6:	bc 01       	movw	r22, r24
    1be8:	cd 01       	movw	r24, r26
    1bea:	0e 94 21 28 	call	0x5042	; 0x5042 <__udivmodsi4>
    1bee:	da 01       	movw	r26, r20
    1bf0:	c9 01       	movw	r24, r18
    1bf2:	9c 83       	std	Y+4, r25	; 0x04
    1bf4:	8b 83       	std	Y+3, r24	; 0x03
			*LOC_pu16Counter = counter;
    1bf6:	ed 89       	ldd	r30, Y+21	; 0x15
    1bf8:	fe 89       	ldd	r31, Y+22	; 0x16
    1bfa:	8b 81       	ldd	r24, Y+3	; 0x03
    1bfc:	9c 81       	ldd	r25, Y+4	; 0x04
    1bfe:	91 83       	std	Z+1, r25	; 0x01
    1c00:	80 83       	st	Z, r24
    1c02:	1f c0       	rjmp	.+62     	; 0x1c42 <MCAL_T1_u8T1DelayNormalMode+0x162>
		} else if (Reminder != NUMBER_0) {
    1c04:	89 81       	ldd	r24, Y+1	; 0x01
    1c06:	9a 81       	ldd	r25, Y+2	; 0x02
    1c08:	00 97       	sbiw	r24, 0x00	; 0
    1c0a:	d9 f0       	breq	.+54     	; 0x1c42 <MCAL_T1_u8T1DelayNormalMode+0x162>
			MCAL_T1_voidSetTCNT1Value(Reminder);
    1c0c:	89 81       	ldd	r24, Y+1	; 0x01
    1c0e:	9a 81       	ldd	r25, Y+2	; 0x02
    1c10:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <MCAL_T1_voidSetTCNT1Value>
			counter = ((N / OVER_FLOW_COUNT) + NUMBER_1);
    1c14:	8d 81       	ldd	r24, Y+5	; 0x05
    1c16:	9e 81       	ldd	r25, Y+6	; 0x06
    1c18:	af 81       	ldd	r26, Y+7	; 0x07
    1c1a:	b8 85       	ldd	r27, Y+8	; 0x08
    1c1c:	2f ef       	ldi	r18, 0xFF	; 255
    1c1e:	3f ef       	ldi	r19, 0xFF	; 255
    1c20:	40 e0       	ldi	r20, 0x00	; 0
    1c22:	50 e0       	ldi	r21, 0x00	; 0
    1c24:	bc 01       	movw	r22, r24
    1c26:	cd 01       	movw	r24, r26
    1c28:	0e 94 21 28 	call	0x5042	; 0x5042 <__udivmodsi4>
    1c2c:	da 01       	movw	r26, r20
    1c2e:	c9 01       	movw	r24, r18
    1c30:	01 96       	adiw	r24, 0x01	; 1
    1c32:	9c 83       	std	Y+4, r25	; 0x04
    1c34:	8b 83       	std	Y+3, r24	; 0x03
			*LOC_pu16Counter = counter;
    1c36:	ed 89       	ldd	r30, Y+21	; 0x15
    1c38:	fe 89       	ldd	r31, Y+22	; 0x16
    1c3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c3c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c3e:	91 83       	std	Z+1, r25	; 0x01
    1c40:	80 83       	st	Z, r24
		} else {
			//NOTHING
		}
		LOC_u8ReturnValue = E_OK;
    1c42:	19 86       	std	Y+9, r1	; 0x09
	}
	return LOC_u8ReturnValue;
    1c44:	89 85       	ldd	r24, Y+9	; 0x09

}
    1c46:	66 96       	adiw	r28, 0x16	; 22
    1c48:	0f b6       	in	r0, 0x3f	; 63
    1c4a:	f8 94       	cli
    1c4c:	de bf       	out	0x3e, r29	; 62
    1c4e:	0f be       	out	0x3f, r0	; 63
    1c50:	cd bf       	out	0x3d, r28	; 61
    1c52:	cf 91       	pop	r28
    1c54:	df 91       	pop	r29
    1c56:	1f 91       	pop	r17
    1c58:	0f 91       	pop	r16
    1c5a:	08 95       	ret

00001c5c <MCAL_T1_voidDelayCTCMode>:

void MCAL_T1_voidDelayCTCMode(u8 LOC_u8Clock_Selection,
		f32 LOC_f32NumOFSecond, u16 *LOC_pu16Counter) {
    1c5c:	df 93       	push	r29
    1c5e:	cf 93       	push	r28
    1c60:	cd b7       	in	r28, 0x3d	; 61
    1c62:	de b7       	in	r29, 0x3e	; 62
    1c64:	61 97       	sbiw	r28, 0x11	; 17
    1c66:	0f b6       	in	r0, 0x3f	; 63
    1c68:	f8 94       	cli
    1c6a:	de bf       	out	0x3e, r29	; 62
    1c6c:	0f be       	out	0x3f, r0	; 63
    1c6e:	cd bf       	out	0x3d, r28	; 61
    1c70:	8b 87       	std	Y+11, r24	; 0x0b
    1c72:	4c 87       	std	Y+12, r20	; 0x0c
    1c74:	5d 87       	std	Y+13, r21	; 0x0d
    1c76:	6e 87       	std	Y+14, r22	; 0x0e
    1c78:	7f 87       	std	Y+15, r23	; 0x0f
    1c7a:	39 8b       	std	Y+17, r19	; 0x11
    1c7c:	28 8b       	std	Y+16, r18	; 0x10
	f32 TickTime = NUMBER_0;
    1c7e:	80 e0       	ldi	r24, 0x00	; 0
    1c80:	90 e0       	ldi	r25, 0x00	; 0
    1c82:	a0 e0       	ldi	r26, 0x00	; 0
    1c84:	b0 e0       	ldi	r27, 0x00	; 0
    1c86:	8f 83       	std	Y+7, r24	; 0x07
    1c88:	98 87       	std	Y+8, r25	; 0x08
    1c8a:	a9 87       	std	Y+9, r26	; 0x09
    1c8c:	ba 87       	std	Y+10, r27	; 0x0a
	f32 N = NUMBER_0;
    1c8e:	80 e0       	ldi	r24, 0x00	; 0
    1c90:	90 e0       	ldi	r25, 0x00	; 0
    1c92:	a0 e0       	ldi	r26, 0x00	; 0
    1c94:	b0 e0       	ldi	r27, 0x00	; 0
    1c96:	8b 83       	std	Y+3, r24	; 0x03
    1c98:	9c 83       	std	Y+4, r25	; 0x04
    1c9a:	ad 83       	std	Y+5, r26	; 0x05
    1c9c:	be 83       	std	Y+6, r27	; 0x06
	u16 counter = NUMBER_0;
    1c9e:	1a 82       	std	Y+2, r1	; 0x02
    1ca0:	19 82       	std	Y+1, r1	; 0x01
	MCAL_T1_u8T1Prescaler(LOC_u8Clock_Selection, &TickTime);
    1ca2:	9e 01       	movw	r18, r28
    1ca4:	29 5f       	subi	r18, 0xF9	; 249
    1ca6:	3f 4f       	sbci	r19, 0xFF	; 255
    1ca8:	8b 85       	ldd	r24, Y+11	; 0x0b
    1caa:	b9 01       	movw	r22, r18
    1cac:	0e 94 a6 0a 	call	0x154c	; 0x154c <MCAL_T1_u8T1Prescaler>
	MCAL_T1_voidSetOCR1AValue(CTC_DELAY_CONST);
    1cb0:	87 ec       	ldi	r24, 0xC7	; 199
    1cb2:	90 e0       	ldi	r25, 0x00	; 0
    1cb4:	0e 94 8c 0c 	call	0x1918	; 0x1918 <MCAL_T1_voidSetOCR1AValue>
	if (LOC_f32NumOFSecond <= 0 || LOC_f32NumOFSecond > 0) {
    1cb8:	6c 85       	ldd	r22, Y+12	; 0x0c
    1cba:	7d 85       	ldd	r23, Y+13	; 0x0d
    1cbc:	8e 85       	ldd	r24, Y+14	; 0x0e
    1cbe:	9f 85       	ldd	r25, Y+15	; 0x0f
    1cc0:	20 e0       	ldi	r18, 0x00	; 0
    1cc2:	30 e0       	ldi	r19, 0x00	; 0
    1cc4:	40 e0       	ldi	r20, 0x00	; 0
    1cc6:	50 e0       	ldi	r21, 0x00	; 0
    1cc8:	0e 94 55 04 	call	0x8aa	; 0x8aa <__lesf2>
    1ccc:	18 16       	cp	r1, r24
    1cce:	64 f4       	brge	.+24     	; 0x1ce8 <MCAL_T1_voidDelayCTCMode+0x8c>
    1cd0:	6c 85       	ldd	r22, Y+12	; 0x0c
    1cd2:	7d 85       	ldd	r23, Y+13	; 0x0d
    1cd4:	8e 85       	ldd	r24, Y+14	; 0x0e
    1cd6:	9f 85       	ldd	r25, Y+15	; 0x0f
    1cd8:	20 e0       	ldi	r18, 0x00	; 0
    1cda:	30 e0       	ldi	r19, 0x00	; 0
    1cdc:	40 e0       	ldi	r20, 0x00	; 0
    1cde:	50 e0       	ldi	r21, 0x00	; 0
    1ce0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ce4:	18 16       	cp	r1, r24
    1ce6:	64 f5       	brge	.+88     	; 0x1d40 <MCAL_T1_voidDelayCTCMode+0xe4>
		N = ((CTC_DELAY_CONST + NUMBER_1) * TickTime);
    1ce8:	8f 81       	ldd	r24, Y+7	; 0x07
    1cea:	98 85       	ldd	r25, Y+8	; 0x08
    1cec:	a9 85       	ldd	r26, Y+9	; 0x09
    1cee:	ba 85       	ldd	r27, Y+10	; 0x0a
    1cf0:	bc 01       	movw	r22, r24
    1cf2:	cd 01       	movw	r24, r26
    1cf4:	20 e0       	ldi	r18, 0x00	; 0
    1cf6:	30 e0       	ldi	r19, 0x00	; 0
    1cf8:	48 e4       	ldi	r20, 0x48	; 72
    1cfa:	53 e4       	ldi	r21, 0x43	; 67
    1cfc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d00:	dc 01       	movw	r26, r24
    1d02:	cb 01       	movw	r24, r22
    1d04:	8b 83       	std	Y+3, r24	; 0x03
    1d06:	9c 83       	std	Y+4, r25	; 0x04
    1d08:	ad 83       	std	Y+5, r26	; 0x05
    1d0a:	be 83       	std	Y+6, r27	; 0x06
		counter = (LOC_f32NumOFSecond / N);
    1d0c:	6c 85       	ldd	r22, Y+12	; 0x0c
    1d0e:	7d 85       	ldd	r23, Y+13	; 0x0d
    1d10:	8e 85       	ldd	r24, Y+14	; 0x0e
    1d12:	9f 85       	ldd	r25, Y+15	; 0x0f
    1d14:	2b 81       	ldd	r18, Y+3	; 0x03
    1d16:	3c 81       	ldd	r19, Y+4	; 0x04
    1d18:	4d 81       	ldd	r20, Y+5	; 0x05
    1d1a:	5e 81       	ldd	r21, Y+6	; 0x06
    1d1c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1d20:	dc 01       	movw	r26, r24
    1d22:	cb 01       	movw	r24, r22
    1d24:	bc 01       	movw	r22, r24
    1d26:	cd 01       	movw	r24, r26
    1d28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d2c:	dc 01       	movw	r26, r24
    1d2e:	cb 01       	movw	r24, r22
    1d30:	9a 83       	std	Y+2, r25	; 0x02
    1d32:	89 83       	std	Y+1, r24	; 0x01
		*LOC_pu16Counter = counter;
    1d34:	e8 89       	ldd	r30, Y+16	; 0x10
    1d36:	f9 89       	ldd	r31, Y+17	; 0x11
    1d38:	89 81       	ldd	r24, Y+1	; 0x01
    1d3a:	9a 81       	ldd	r25, Y+2	; 0x02
    1d3c:	91 83       	std	Z+1, r25	; 0x01
    1d3e:	80 83       	st	Z, r24
	} else {
		//NOTING
	}
}
    1d40:	61 96       	adiw	r28, 0x11	; 17
    1d42:	0f b6       	in	r0, 0x3f	; 63
    1d44:	f8 94       	cli
    1d46:	de bf       	out	0x3e, r29	; 62
    1d48:	0f be       	out	0x3f, r0	; 63
    1d4a:	cd bf       	out	0x3d, r28	; 61
    1d4c:	cf 91       	pop	r28
    1d4e:	df 91       	pop	r29
    1d50:	08 95       	ret

00001d52 <MCAL_T1_voidSetTriggerEdge>:
//ICU EDGE
void MCAL_T1_voidSetTriggerEdge(u8 LOC_u8TriggerEdge) {
    1d52:	df 93       	push	r29
    1d54:	cf 93       	push	r28
    1d56:	0f 92       	push	r0
    1d58:	cd b7       	in	r28, 0x3d	; 61
    1d5a:	de b7       	in	r29, 0x3e	; 62
    1d5c:	89 83       	std	Y+1, r24	; 0x01
	if (LOC_u8TriggerEdge <= RISING_EDGE) {
    1d5e:	89 81       	ldd	r24, Y+1	; 0x01
    1d60:	82 30       	cpi	r24, 0x02	; 2
    1d62:	a8 f4       	brcc	.+42     	; 0x1d8e <MCAL_T1_voidSetTriggerEdge+0x3c>
		if (LOC_u8TriggerEdge == RISING_EDGE) {
    1d64:	89 81       	ldd	r24, Y+1	; 0x01
    1d66:	81 30       	cpi	r24, 0x01	; 1
    1d68:	41 f4       	brne	.+16     	; 0x1d7a <MCAL_T1_voidSetTriggerEdge+0x28>
			SET_BIT(TCCR1B, Pin6);
    1d6a:	ae e4       	ldi	r26, 0x4E	; 78
    1d6c:	b0 e0       	ldi	r27, 0x00	; 0
    1d6e:	ee e4       	ldi	r30, 0x4E	; 78
    1d70:	f0 e0       	ldi	r31, 0x00	; 0
    1d72:	80 81       	ld	r24, Z
    1d74:	80 64       	ori	r24, 0x40	; 64
    1d76:	8c 93       	st	X, r24
    1d78:	0a c0       	rjmp	.+20     	; 0x1d8e <MCAL_T1_voidSetTriggerEdge+0x3c>
		} else if (LOC_u8TriggerEdge == FALLING_EDGE) {
    1d7a:	89 81       	ldd	r24, Y+1	; 0x01
    1d7c:	88 23       	and	r24, r24
    1d7e:	39 f4       	brne	.+14     	; 0x1d8e <MCAL_T1_voidSetTriggerEdge+0x3c>
			CLR_BIT(TCCR1B, Pin6);
    1d80:	ae e4       	ldi	r26, 0x4E	; 78
    1d82:	b0 e0       	ldi	r27, 0x00	; 0
    1d84:	ee e4       	ldi	r30, 0x4E	; 78
    1d86:	f0 e0       	ldi	r31, 0x00	; 0
    1d88:	80 81       	ld	r24, Z
    1d8a:	8f 7b       	andi	r24, 0xBF	; 191
    1d8c:	8c 93       	st	X, r24
			//NOTHING
		}
	} else {
		//NOTHING
	}
}
    1d8e:	0f 90       	pop	r0
    1d90:	cf 91       	pop	r28
    1d92:	df 91       	pop	r29
    1d94:	08 95       	ret

00001d96 <MCAL_T1_u8T1_Callback>:
u8 MCAL_T1_u8T1_Callback(void (*ptr)(void)) {
    1d96:	df 93       	push	r29
    1d98:	cf 93       	push	r28
    1d9a:	00 d0       	rcall	.+0      	; 0x1d9c <MCAL_T1_u8T1_Callback+0x6>
    1d9c:	0f 92       	push	r0
    1d9e:	cd b7       	in	r28, 0x3d	; 61
    1da0:	de b7       	in	r29, 0x3e	; 62
    1da2:	9b 83       	std	Y+3, r25	; 0x03
    1da4:	8a 83       	std	Y+2, r24	; 0x02
	u8 LOC_u8ReturnValue = E_NOT_OK;
    1da6:	81 e0       	ldi	r24, 0x01	; 1
    1da8:	89 83       	std	Y+1, r24	; 0x01
	if (ptr != '\0') {
    1daa:	8a 81       	ldd	r24, Y+2	; 0x02
    1dac:	9b 81       	ldd	r25, Y+3	; 0x03
    1dae:	00 97       	sbiw	r24, 0x00	; 0
    1db0:	39 f0       	breq	.+14     	; 0x1dc0 <MCAL_T1_u8T1_Callback+0x2a>
		Gptr_3 = ptr;
    1db2:	8a 81       	ldd	r24, Y+2	; 0x02
    1db4:	9b 81       	ldd	r25, Y+3	; 0x03
    1db6:	90 93 79 01 	sts	0x0179, r25
    1dba:	80 93 78 01 	sts	0x0178, r24
		LOC_u8ReturnValue = E_OK;
    1dbe:	19 82       	std	Y+1, r1	; 0x01
	}
	return LOC_u8ReturnValue;
    1dc0:	89 81       	ldd	r24, Y+1	; 0x01
}
    1dc2:	0f 90       	pop	r0
    1dc4:	0f 90       	pop	r0
    1dc6:	0f 90       	pop	r0
    1dc8:	cf 91       	pop	r28
    1dca:	df 91       	pop	r29
    1dcc:	08 95       	ret

00001dce <__vector_9>:

ISR(TIMER1_OVF_vect) {
    1dce:	1f 92       	push	r1
    1dd0:	0f 92       	push	r0
    1dd2:	0f b6       	in	r0, 0x3f	; 63
    1dd4:	0f 92       	push	r0
    1dd6:	11 24       	eor	r1, r1
    1dd8:	2f 93       	push	r18
    1dda:	3f 93       	push	r19
    1ddc:	4f 93       	push	r20
    1dde:	5f 93       	push	r21
    1de0:	6f 93       	push	r22
    1de2:	7f 93       	push	r23
    1de4:	8f 93       	push	r24
    1de6:	9f 93       	push	r25
    1de8:	af 93       	push	r26
    1dea:	bf 93       	push	r27
    1dec:	ef 93       	push	r30
    1dee:	ff 93       	push	r31
    1df0:	df 93       	push	r29
    1df2:	cf 93       	push	r28
    1df4:	cd b7       	in	r28, 0x3d	; 61
    1df6:	de b7       	in	r29, 0x3e	; 62
	if (Gptr_3 != '\0') {
    1df8:	80 91 78 01 	lds	r24, 0x0178
    1dfc:	90 91 79 01 	lds	r25, 0x0179
    1e00:	00 97       	sbiw	r24, 0x00	; 0
    1e02:	29 f0       	breq	.+10     	; 0x1e0e <__vector_9+0x40>
		Gptr_3();
    1e04:	e0 91 78 01 	lds	r30, 0x0178
    1e08:	f0 91 79 01 	lds	r31, 0x0179
    1e0c:	09 95       	icall
	}
}
    1e0e:	cf 91       	pop	r28
    1e10:	df 91       	pop	r29
    1e12:	ff 91       	pop	r31
    1e14:	ef 91       	pop	r30
    1e16:	bf 91       	pop	r27
    1e18:	af 91       	pop	r26
    1e1a:	9f 91       	pop	r25
    1e1c:	8f 91       	pop	r24
    1e1e:	7f 91       	pop	r23
    1e20:	6f 91       	pop	r22
    1e22:	5f 91       	pop	r21
    1e24:	4f 91       	pop	r20
    1e26:	3f 91       	pop	r19
    1e28:	2f 91       	pop	r18
    1e2a:	0f 90       	pop	r0
    1e2c:	0f be       	out	0x3f, r0	; 63
    1e2e:	0f 90       	pop	r0
    1e30:	1f 90       	pop	r1
    1e32:	18 95       	reti

00001e34 <__vector_7>:
ISR(TIMER1_COMPA_vect) {
    1e34:	1f 92       	push	r1
    1e36:	0f 92       	push	r0
    1e38:	0f b6       	in	r0, 0x3f	; 63
    1e3a:	0f 92       	push	r0
    1e3c:	11 24       	eor	r1, r1
    1e3e:	2f 93       	push	r18
    1e40:	3f 93       	push	r19
    1e42:	4f 93       	push	r20
    1e44:	5f 93       	push	r21
    1e46:	6f 93       	push	r22
    1e48:	7f 93       	push	r23
    1e4a:	8f 93       	push	r24
    1e4c:	9f 93       	push	r25
    1e4e:	af 93       	push	r26
    1e50:	bf 93       	push	r27
    1e52:	ef 93       	push	r30
    1e54:	ff 93       	push	r31
    1e56:	df 93       	push	r29
    1e58:	cf 93       	push	r28
    1e5a:	cd b7       	in	r28, 0x3d	; 61
    1e5c:	de b7       	in	r29, 0x3e	; 62
	if (Gptr_3 != '\0') {
    1e5e:	80 91 78 01 	lds	r24, 0x0178
    1e62:	90 91 79 01 	lds	r25, 0x0179
    1e66:	00 97       	sbiw	r24, 0x00	; 0
    1e68:	29 f0       	breq	.+10     	; 0x1e74 <__vector_7+0x40>
		Gptr_3();
    1e6a:	e0 91 78 01 	lds	r30, 0x0178
    1e6e:	f0 91 79 01 	lds	r31, 0x0179
    1e72:	09 95       	icall
	}
}
    1e74:	cf 91       	pop	r28
    1e76:	df 91       	pop	r29
    1e78:	ff 91       	pop	r31
    1e7a:	ef 91       	pop	r30
    1e7c:	bf 91       	pop	r27
    1e7e:	af 91       	pop	r26
    1e80:	9f 91       	pop	r25
    1e82:	8f 91       	pop	r24
    1e84:	7f 91       	pop	r23
    1e86:	6f 91       	pop	r22
    1e88:	5f 91       	pop	r21
    1e8a:	4f 91       	pop	r20
    1e8c:	3f 91       	pop	r19
    1e8e:	2f 91       	pop	r18
    1e90:	0f 90       	pop	r0
    1e92:	0f be       	out	0x3f, r0	; 63
    1e94:	0f 90       	pop	r0
    1e96:	1f 90       	pop	r1
    1e98:	18 95       	reti

00001e9a <__vector_8>:
ISR(TIMER1_COMPB_vect) {
    1e9a:	1f 92       	push	r1
    1e9c:	0f 92       	push	r0
    1e9e:	0f b6       	in	r0, 0x3f	; 63
    1ea0:	0f 92       	push	r0
    1ea2:	11 24       	eor	r1, r1
    1ea4:	2f 93       	push	r18
    1ea6:	3f 93       	push	r19
    1ea8:	4f 93       	push	r20
    1eaa:	5f 93       	push	r21
    1eac:	6f 93       	push	r22
    1eae:	7f 93       	push	r23
    1eb0:	8f 93       	push	r24
    1eb2:	9f 93       	push	r25
    1eb4:	af 93       	push	r26
    1eb6:	bf 93       	push	r27
    1eb8:	ef 93       	push	r30
    1eba:	ff 93       	push	r31
    1ebc:	df 93       	push	r29
    1ebe:	cf 93       	push	r28
    1ec0:	cd b7       	in	r28, 0x3d	; 61
    1ec2:	de b7       	in	r29, 0x3e	; 62
	if (Gptr_3 != '\0') {
    1ec4:	80 91 78 01 	lds	r24, 0x0178
    1ec8:	90 91 79 01 	lds	r25, 0x0179
    1ecc:	00 97       	sbiw	r24, 0x00	; 0
    1ece:	29 f0       	breq	.+10     	; 0x1eda <__vector_8+0x40>
		Gptr_3();
    1ed0:	e0 91 78 01 	lds	r30, 0x0178
    1ed4:	f0 91 79 01 	lds	r31, 0x0179
    1ed8:	09 95       	icall
	}
}
    1eda:	cf 91       	pop	r28
    1edc:	df 91       	pop	r29
    1ede:	ff 91       	pop	r31
    1ee0:	ef 91       	pop	r30
    1ee2:	bf 91       	pop	r27
    1ee4:	af 91       	pop	r26
    1ee6:	9f 91       	pop	r25
    1ee8:	8f 91       	pop	r24
    1eea:	7f 91       	pop	r23
    1eec:	6f 91       	pop	r22
    1eee:	5f 91       	pop	r21
    1ef0:	4f 91       	pop	r20
    1ef2:	3f 91       	pop	r19
    1ef4:	2f 91       	pop	r18
    1ef6:	0f 90       	pop	r0
    1ef8:	0f be       	out	0x3f, r0	; 63
    1efa:	0f 90       	pop	r0
    1efc:	1f 90       	pop	r1
    1efe:	18 95       	reti

00001f00 <__vector_6>:
ISR(TIMER1_CAPT_vect) {
    1f00:	1f 92       	push	r1
    1f02:	0f 92       	push	r0
    1f04:	0f b6       	in	r0, 0x3f	; 63
    1f06:	0f 92       	push	r0
    1f08:	11 24       	eor	r1, r1
    1f0a:	2f 93       	push	r18
    1f0c:	3f 93       	push	r19
    1f0e:	4f 93       	push	r20
    1f10:	5f 93       	push	r21
    1f12:	6f 93       	push	r22
    1f14:	7f 93       	push	r23
    1f16:	8f 93       	push	r24
    1f18:	9f 93       	push	r25
    1f1a:	af 93       	push	r26
    1f1c:	bf 93       	push	r27
    1f1e:	ef 93       	push	r30
    1f20:	ff 93       	push	r31
    1f22:	df 93       	push	r29
    1f24:	cf 93       	push	r28
    1f26:	cd b7       	in	r28, 0x3d	; 61
    1f28:	de b7       	in	r29, 0x3e	; 62
	if (Gptr_3 != '\0') {
    1f2a:	80 91 78 01 	lds	r24, 0x0178
    1f2e:	90 91 79 01 	lds	r25, 0x0179
    1f32:	00 97       	sbiw	r24, 0x00	; 0
    1f34:	29 f0       	breq	.+10     	; 0x1f40 <__vector_6+0x40>
		Gptr_3();
    1f36:	e0 91 78 01 	lds	r30, 0x0178
    1f3a:	f0 91 79 01 	lds	r31, 0x0179
    1f3e:	09 95       	icall
	}
}
    1f40:	cf 91       	pop	r28
    1f42:	df 91       	pop	r29
    1f44:	ff 91       	pop	r31
    1f46:	ef 91       	pop	r30
    1f48:	bf 91       	pop	r27
    1f4a:	af 91       	pop	r26
    1f4c:	9f 91       	pop	r25
    1f4e:	8f 91       	pop	r24
    1f50:	7f 91       	pop	r23
    1f52:	6f 91       	pop	r22
    1f54:	5f 91       	pop	r21
    1f56:	4f 91       	pop	r20
    1f58:	3f 91       	pop	r19
    1f5a:	2f 91       	pop	r18
    1f5c:	0f 90       	pop	r0
    1f5e:	0f be       	out	0x3f, r0	; 63
    1f60:	0f 90       	pop	r0
    1f62:	1f 90       	pop	r1
    1f64:	18 95       	reti

00001f66 <MCAL_T1_FPWM_10bitRES>:

void MCAL_T1_FPWM_10bitRES(u8 copy_u8Channel, u8 copy_u8Duty) {
    1f66:	0f 93       	push	r16
    1f68:	1f 93       	push	r17
    1f6a:	df 93       	push	r29
    1f6c:	cf 93       	push	r28
    1f6e:	00 d0       	rcall	.+0      	; 0x1f70 <MCAL_T1_FPWM_10bitRES+0xa>
    1f70:	00 d0       	rcall	.+0      	; 0x1f72 <MCAL_T1_FPWM_10bitRES+0xc>
    1f72:	00 d0       	rcall	.+0      	; 0x1f74 <MCAL_T1_FPWM_10bitRES+0xe>
    1f74:	cd b7       	in	r28, 0x3d	; 61
    1f76:	de b7       	in	r29, 0x3e	; 62
    1f78:	8d 83       	std	Y+5, r24	; 0x05
    1f7a:	6e 83       	std	Y+6, r22	; 0x06
	f32 LOC_f32tickTime = 0;
    1f7c:	80 e0       	ldi	r24, 0x00	; 0
    1f7e:	90 e0       	ldi	r25, 0x00	; 0
    1f80:	a0 e0       	ldi	r26, 0x00	; 0
    1f82:	b0 e0       	ldi	r27, 0x00	; 0
    1f84:	89 83       	std	Y+1, r24	; 0x01
    1f86:	9a 83       	std	Y+2, r25	; 0x02
    1f88:	ab 83       	std	Y+3, r26	; 0x03
    1f8a:	bc 83       	std	Y+4, r27	; 0x04
	//Set Mode
	MCAL_T1_u8T1Init(PWM_PHASE_CORRECT_10bit);
    1f8c:	83 e0       	ldi	r24, 0x03	; 3
    1f8e:	0e 94 85 08 	call	0x110a	; 0x110a <MCAL_T1_u8T1Init>
	//Select Prescaler
	MCAL_T1_u8T1Prescaler(PRESCALLING_64, &LOC_f32tickTime);
    1f92:	83 e0       	ldi	r24, 0x03	; 3
    1f94:	9e 01       	movw	r18, r28
    1f96:	2f 5f       	subi	r18, 0xFF	; 255
    1f98:	3f 4f       	sbci	r19, 0xFF	; 255
    1f9a:	b9 01       	movw	r22, r18
    1f9c:	0e 94 a6 0a 	call	0x154c	; 0x154c <MCAL_T1_u8T1Prescaler>
	MCAL_T1_u8T1CompareOutputMode(NON_INVERTING_MODE, copy_u8Channel);
    1fa0:	80 e0       	ldi	r24, 0x00	; 0
    1fa2:	6d 81       	ldd	r22, Y+5	; 0x05
    1fa4:	0e 94 be 0b 	call	0x177c	; 0x177c <MCAL_T1_u8T1CompareOutputMode>
	if (copy_u8Channel == CHENNEL_A) {
    1fa8:	8d 81       	ldd	r24, Y+5	; 0x05
    1faa:	88 23       	and	r24, r24
    1fac:	19 f5       	brne	.+70     	; 0x1ff4 <MCAL_T1_FPWM_10bitRES+0x8e>
		OCR1A = copy_u8Duty * 10.23;
    1fae:	0a e4       	ldi	r16, 0x4A	; 74
    1fb0:	10 e0       	ldi	r17, 0x00	; 0
    1fb2:	8e 81       	ldd	r24, Y+6	; 0x06
    1fb4:	88 2f       	mov	r24, r24
    1fb6:	90 e0       	ldi	r25, 0x00	; 0
    1fb8:	aa 27       	eor	r26, r26
    1fba:	97 fd       	sbrc	r25, 7
    1fbc:	a0 95       	com	r26
    1fbe:	ba 2f       	mov	r27, r26
    1fc0:	bc 01       	movw	r22, r24
    1fc2:	cd 01       	movw	r24, r26
    1fc4:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    1fc8:	dc 01       	movw	r26, r24
    1fca:	cb 01       	movw	r24, r22
    1fcc:	bc 01       	movw	r22, r24
    1fce:	cd 01       	movw	r24, r26
    1fd0:	24 e1       	ldi	r18, 0x14	; 20
    1fd2:	3e ea       	ldi	r19, 0xAE	; 174
    1fd4:	43 e2       	ldi	r20, 0x23	; 35
    1fd6:	51 e4       	ldi	r21, 0x41	; 65
    1fd8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fdc:	dc 01       	movw	r26, r24
    1fde:	cb 01       	movw	r24, r22
    1fe0:	bc 01       	movw	r22, r24
    1fe2:	cd 01       	movw	r24, r26
    1fe4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fe8:	dc 01       	movw	r26, r24
    1fea:	cb 01       	movw	r24, r22
    1fec:	f8 01       	movw	r30, r16
    1fee:	91 83       	std	Z+1, r25	; 0x01
    1ff0:	80 83       	st	Z, r24
    1ff2:	25 c0       	rjmp	.+74     	; 0x203e <MCAL_T1_FPWM_10bitRES+0xd8>
	} else if (copy_u8Channel == CHENNEL_B) {
    1ff4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ff6:	81 30       	cpi	r24, 0x01	; 1
    1ff8:	11 f5       	brne	.+68     	; 0x203e <MCAL_T1_FPWM_10bitRES+0xd8>
		OCR1B = copy_u8Duty * 10.23;
    1ffa:	08 e4       	ldi	r16, 0x48	; 72
    1ffc:	10 e0       	ldi	r17, 0x00	; 0
    1ffe:	8e 81       	ldd	r24, Y+6	; 0x06
    2000:	88 2f       	mov	r24, r24
    2002:	90 e0       	ldi	r25, 0x00	; 0
    2004:	aa 27       	eor	r26, r26
    2006:	97 fd       	sbrc	r25, 7
    2008:	a0 95       	com	r26
    200a:	ba 2f       	mov	r27, r26
    200c:	bc 01       	movw	r22, r24
    200e:	cd 01       	movw	r24, r26
    2010:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    2014:	dc 01       	movw	r26, r24
    2016:	cb 01       	movw	r24, r22
    2018:	bc 01       	movw	r22, r24
    201a:	cd 01       	movw	r24, r26
    201c:	24 e1       	ldi	r18, 0x14	; 20
    201e:	3e ea       	ldi	r19, 0xAE	; 174
    2020:	43 e2       	ldi	r20, 0x23	; 35
    2022:	51 e4       	ldi	r21, 0x41	; 65
    2024:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2028:	dc 01       	movw	r26, r24
    202a:	cb 01       	movw	r24, r22
    202c:	bc 01       	movw	r22, r24
    202e:	cd 01       	movw	r24, r26
    2030:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2034:	dc 01       	movw	r26, r24
    2036:	cb 01       	movw	r24, r22
    2038:	f8 01       	movw	r30, r16
    203a:	91 83       	std	Z+1, r25	; 0x01
    203c:	80 83       	st	Z, r24

	} else {
		//NOTHING
	}
}
    203e:	26 96       	adiw	r28, 0x06	; 6
    2040:	0f b6       	in	r0, 0x3f	; 63
    2042:	f8 94       	cli
    2044:	de bf       	out	0x3e, r29	; 62
    2046:	0f be       	out	0x3f, r0	; 63
    2048:	cd bf       	out	0x3d, r28	; 61
    204a:	cf 91       	pop	r28
    204c:	df 91       	pop	r29
    204e:	1f 91       	pop	r17
    2050:	0f 91       	pop	r16
    2052:	08 95       	ret

00002054 <MCAL_TWI_Master_Init>:
 */

#include "TWI.h"

// Master
void MCAL_TWI_Master_Init(void) {
    2054:	df 93       	push	r29
    2056:	cf 93       	push	r28
    2058:	cd b7       	in	r28, 0x3d	; 61
    205a:	de b7       	in	r29, 0x3e	; 62
	//Enable TWI
	SET_BIT(TWCR, Pin2);
    205c:	a6 e5       	ldi	r26, 0x56	; 86
    205e:	b0 e0       	ldi	r27, 0x00	; 0
    2060:	e6 e5       	ldi	r30, 0x56	; 86
    2062:	f0 e0       	ldi	r31, 0x00	; 0
    2064:	80 81       	ld	r24, Z
    2066:	84 60       	ori	r24, 0x04	; 4
    2068:	8c 93       	st	X, r24
	//Enable ACK
	SET_BIT(TWCR, Pin6);
    206a:	a6 e5       	ldi	r26, 0x56	; 86
    206c:	b0 e0       	ldi	r27, 0x00	; 0
    206e:	e6 e5       	ldi	r30, 0x56	; 86
    2070:	f0 e0       	ldi	r31, 0x00	; 0
    2072:	80 81       	ld	r24, Z
    2074:	80 64       	ori	r24, 0x40	; 64
    2076:	8c 93       	st	X, r24
	//Bit Rate
	TWBR = Bit_Rate;
    2078:	e0 e2       	ldi	r30, 0x20	; 32
    207a:	f0 e0       	ldi	r31, 0x00	; 0
    207c:	88 e9       	ldi	r24, 0x98	; 152
    207e:	80 83       	st	Z, r24
}
    2080:	cf 91       	pop	r28
    2082:	df 91       	pop	r29
    2084:	08 95       	ret

00002086 <MCAL_TWI_Master_SendStartCondition>:

void MCAL_TWI_Master_SendStartCondition(void) {
    2086:	df 93       	push	r29
    2088:	cf 93       	push	r28
    208a:	cd b7       	in	r28, 0x3d	; 61
    208c:	de b7       	in	r29, 0x3e	; 62
	// Enable Start
	SET_BIT(TWCR, Pin5);
    208e:	a6 e5       	ldi	r26, 0x56	; 86
    2090:	b0 e0       	ldi	r27, 0x00	; 0
    2092:	e6 e5       	ldi	r30, 0x56	; 86
    2094:	f0 e0       	ldi	r31, 0x00	; 0
    2096:	80 81       	ld	r24, Z
    2098:	80 62       	ori	r24, 0x20	; 32
    209a:	8c 93       	st	X, r24
	//CLR Flag
	SET_BIT(TWCR, Pin7);
    209c:	a6 e5       	ldi	r26, 0x56	; 86
    209e:	b0 e0       	ldi	r27, 0x00	; 0
    20a0:	e6 e5       	ldi	r30, 0x56	; 86
    20a2:	f0 e0       	ldi	r31, 0x00	; 0
    20a4:	80 81       	ld	r24, Z
    20a6:	80 68       	ori	r24, 0x80	; 128
    20a8:	8c 93       	st	X, r24
	//Wait
	while (GET_BIT(TWCR,Pin7) == 0)
    20aa:	e6 e5       	ldi	r30, 0x56	; 86
    20ac:	f0 e0       	ldi	r31, 0x00	; 0
    20ae:	80 81       	ld	r24, Z
    20b0:	88 23       	and	r24, r24
    20b2:	dc f7       	brge	.-10     	; 0x20aa <MCAL_TWI_Master_SendStartCondition+0x24>
		;
}
    20b4:	cf 91       	pop	r28
    20b6:	df 91       	pop	r29
    20b8:	08 95       	ret

000020ba <MCAL_TWI_Master_SendReStartCondition>:
void MCAL_TWI_Master_SendReStartCondition(void) {
    20ba:	df 93       	push	r29
    20bc:	cf 93       	push	r28
    20be:	cd b7       	in	r28, 0x3d	; 61
    20c0:	de b7       	in	r29, 0x3e	; 62
	// Enable Start
	SET_BIT(TWCR, Pin5);
    20c2:	a6 e5       	ldi	r26, 0x56	; 86
    20c4:	b0 e0       	ldi	r27, 0x00	; 0
    20c6:	e6 e5       	ldi	r30, 0x56	; 86
    20c8:	f0 e0       	ldi	r31, 0x00	; 0
    20ca:	80 81       	ld	r24, Z
    20cc:	80 62       	ori	r24, 0x20	; 32
    20ce:	8c 93       	st	X, r24
	//CLR Flag
	SET_BIT(TWCR, Pin7);
    20d0:	a6 e5       	ldi	r26, 0x56	; 86
    20d2:	b0 e0       	ldi	r27, 0x00	; 0
    20d4:	e6 e5       	ldi	r30, 0x56	; 86
    20d6:	f0 e0       	ldi	r31, 0x00	; 0
    20d8:	80 81       	ld	r24, Z
    20da:	80 68       	ori	r24, 0x80	; 128
    20dc:	8c 93       	st	X, r24
	//Wait
	while (GET_BIT(TWCR,Pin7) == 0)
    20de:	e6 e5       	ldi	r30, 0x56	; 86
    20e0:	f0 e0       	ldi	r31, 0x00	; 0
    20e2:	80 81       	ld	r24, Z
    20e4:	88 23       	and	r24, r24
    20e6:	dc f7       	brge	.-10     	; 0x20de <MCAL_TWI_Master_SendReStartCondition+0x24>
		;
}
    20e8:	cf 91       	pop	r28
    20ea:	df 91       	pop	r29
    20ec:	08 95       	ret

000020ee <MCAL_TWI_Master_SendStopCondition>:

void MCAL_TWI_Master_SendStopCondition(void) {
    20ee:	df 93       	push	r29
    20f0:	cf 93       	push	r28
    20f2:	cd b7       	in	r28, 0x3d	; 61
    20f4:	de b7       	in	r29, 0x3e	; 62
	// Enable Stop
	SET_BIT(TWCR, Pin4);
    20f6:	a6 e5       	ldi	r26, 0x56	; 86
    20f8:	b0 e0       	ldi	r27, 0x00	; 0
    20fa:	e6 e5       	ldi	r30, 0x56	; 86
    20fc:	f0 e0       	ldi	r31, 0x00	; 0
    20fe:	80 81       	ld	r24, Z
    2100:	80 61       	ori	r24, 0x10	; 16
    2102:	8c 93       	st	X, r24
	//CLR Flag
	SET_BIT(TWCR, Pin7);
    2104:	a6 e5       	ldi	r26, 0x56	; 86
    2106:	b0 e0       	ldi	r27, 0x00	; 0
    2108:	e6 e5       	ldi	r30, 0x56	; 86
    210a:	f0 e0       	ldi	r31, 0x00	; 0
    210c:	80 81       	ld	r24, Z
    210e:	80 68       	ori	r24, 0x80	; 128
    2110:	8c 93       	st	X, r24
}
    2112:	cf 91       	pop	r28
    2114:	df 91       	pop	r29
    2116:	08 95       	ret

00002118 <MCAL_TWI_Master_SendSlaveAddWithWrite>:

void MCAL_TWI_Master_SendSlaveAddWithWrite(u8 Address) {
    2118:	df 93       	push	r29
    211a:	cf 93       	push	r28
    211c:	0f 92       	push	r0
    211e:	cd b7       	in	r28, 0x3d	; 61
    2120:	de b7       	in	r29, 0x3e	; 62
    2122:	89 83       	std	Y+1, r24	; 0x01
	TWDR = Address << 1;
    2124:	e3 e2       	ldi	r30, 0x23	; 35
    2126:	f0 e0       	ldi	r31, 0x00	; 0
    2128:	89 81       	ldd	r24, Y+1	; 0x01
    212a:	88 0f       	add	r24, r24
    212c:	80 83       	st	Z, r24
	//Write
	CLR_BIT(TWDR, Pin0);
    212e:	a3 e2       	ldi	r26, 0x23	; 35
    2130:	b0 e0       	ldi	r27, 0x00	; 0
    2132:	e3 e2       	ldi	r30, 0x23	; 35
    2134:	f0 e0       	ldi	r31, 0x00	; 0
    2136:	80 81       	ld	r24, Z
    2138:	8e 7f       	andi	r24, 0xFE	; 254
    213a:	8c 93       	st	X, r24
	//clr start cond
	CLR_BIT(TWCR, Pin5);
    213c:	a6 e5       	ldi	r26, 0x56	; 86
    213e:	b0 e0       	ldi	r27, 0x00	; 0
    2140:	e6 e5       	ldi	r30, 0x56	; 86
    2142:	f0 e0       	ldi	r31, 0x00	; 0
    2144:	80 81       	ld	r24, Z
    2146:	8f 7d       	andi	r24, 0xDF	; 223
    2148:	8c 93       	st	X, r24
	//clr flage
	SET_BIT(TWCR, Pin7);
    214a:	a6 e5       	ldi	r26, 0x56	; 86
    214c:	b0 e0       	ldi	r27, 0x00	; 0
    214e:	e6 e5       	ldi	r30, 0x56	; 86
    2150:	f0 e0       	ldi	r31, 0x00	; 0
    2152:	80 81       	ld	r24, Z
    2154:	80 68       	ori	r24, 0x80	; 128
    2156:	8c 93       	st	X, r24
	//Wait
	while (GET_BIT(TWCR,Pin7) == 0)
    2158:	e6 e5       	ldi	r30, 0x56	; 86
    215a:	f0 e0       	ldi	r31, 0x00	; 0
    215c:	80 81       	ld	r24, Z
    215e:	88 23       	and	r24, r24
    2160:	dc f7       	brge	.-10     	; 0x2158 <MCAL_TWI_Master_SendSlaveAddWithWrite+0x40>
		;
}
    2162:	0f 90       	pop	r0
    2164:	cf 91       	pop	r28
    2166:	df 91       	pop	r29
    2168:	08 95       	ret

0000216a <MCAL_TWI_Master_SendSlaveAddWithRead>:
void MCAL_TWI_Master_SendSlaveAddWithRead(u8 Address) {
    216a:	df 93       	push	r29
    216c:	cf 93       	push	r28
    216e:	0f 92       	push	r0
    2170:	cd b7       	in	r28, 0x3d	; 61
    2172:	de b7       	in	r29, 0x3e	; 62
    2174:	89 83       	std	Y+1, r24	; 0x01
	TWDR = Address << 1;
    2176:	e3 e2       	ldi	r30, 0x23	; 35
    2178:	f0 e0       	ldi	r31, 0x00	; 0
    217a:	89 81       	ldd	r24, Y+1	; 0x01
    217c:	88 0f       	add	r24, r24
    217e:	80 83       	st	Z, r24
	//Read
	SET_BIT(TWDR, Pin0);
    2180:	a3 e2       	ldi	r26, 0x23	; 35
    2182:	b0 e0       	ldi	r27, 0x00	; 0
    2184:	e3 e2       	ldi	r30, 0x23	; 35
    2186:	f0 e0       	ldi	r31, 0x00	; 0
    2188:	80 81       	ld	r24, Z
    218a:	81 60       	ori	r24, 0x01	; 1
    218c:	8c 93       	st	X, r24
	//clr start cond
	CLR_BIT(TWCR, Pin5);
    218e:	a6 e5       	ldi	r26, 0x56	; 86
    2190:	b0 e0       	ldi	r27, 0x00	; 0
    2192:	e6 e5       	ldi	r30, 0x56	; 86
    2194:	f0 e0       	ldi	r31, 0x00	; 0
    2196:	80 81       	ld	r24, Z
    2198:	8f 7d       	andi	r24, 0xDF	; 223
    219a:	8c 93       	st	X, r24
	//clr flage
	SET_BIT(TWCR, Pin7);
    219c:	a6 e5       	ldi	r26, 0x56	; 86
    219e:	b0 e0       	ldi	r27, 0x00	; 0
    21a0:	e6 e5       	ldi	r30, 0x56	; 86
    21a2:	f0 e0       	ldi	r31, 0x00	; 0
    21a4:	80 81       	ld	r24, Z
    21a6:	80 68       	ori	r24, 0x80	; 128
    21a8:	8c 93       	st	X, r24
	//Wait
	while (GET_BIT(TWCR,Pin7) == 0)
    21aa:	e6 e5       	ldi	r30, 0x56	; 86
    21ac:	f0 e0       	ldi	r31, 0x00	; 0
    21ae:	80 81       	ld	r24, Z
    21b0:	88 23       	and	r24, r24
    21b2:	dc f7       	brge	.-10     	; 0x21aa <MCAL_TWI_Master_SendSlaveAddWithRead+0x40>
		;
}
    21b4:	0f 90       	pop	r0
    21b6:	cf 91       	pop	r28
    21b8:	df 91       	pop	r29
    21ba:	08 95       	ret

000021bc <MCAL_TWI_Slave_Init>:

// Slave
void MCAL_TWI_Slave_Init(u8 Slave_Address) {
    21bc:	df 93       	push	r29
    21be:	cf 93       	push	r28
    21c0:	0f 92       	push	r0
    21c2:	cd b7       	in	r28, 0x3d	; 61
    21c4:	de b7       	in	r29, 0x3e	; 62
    21c6:	89 83       	std	Y+1, r24	; 0x01
	//Enable TWI
	SET_BIT(TWCR, Pin2);
    21c8:	a6 e5       	ldi	r26, 0x56	; 86
    21ca:	b0 e0       	ldi	r27, 0x00	; 0
    21cc:	e6 e5       	ldi	r30, 0x56	; 86
    21ce:	f0 e0       	ldi	r31, 0x00	; 0
    21d0:	80 81       	ld	r24, Z
    21d2:	84 60       	ori	r24, 0x04	; 4
    21d4:	8c 93       	st	X, r24
	//Enable ACK
	SET_BIT(TWCR, Pin6);
    21d6:	a6 e5       	ldi	r26, 0x56	; 86
    21d8:	b0 e0       	ldi	r27, 0x00	; 0
    21da:	e6 e5       	ldi	r30, 0x56	; 86
    21dc:	f0 e0       	ldi	r31, 0x00	; 0
    21de:	80 81       	ld	r24, Z
    21e0:	80 64       	ori	r24, 0x40	; 64
    21e2:	8c 93       	st	X, r24
	//Set Slave Address
	TWAR = Slave_Address << 1;
    21e4:	e2 e2       	ldi	r30, 0x22	; 34
    21e6:	f0 e0       	ldi	r31, 0x00	; 0
    21e8:	89 81       	ldd	r24, Y+1	; 0x01
    21ea:	88 0f       	add	r24, r24
    21ec:	80 83       	st	Z, r24
	//config general call
	CLR_BIT(TWAR, Pin0);
    21ee:	a2 e2       	ldi	r26, 0x22	; 34
    21f0:	b0 e0       	ldi	r27, 0x00	; 0
    21f2:	e2 e2       	ldi	r30, 0x22	; 34
    21f4:	f0 e0       	ldi	r31, 0x00	; 0
    21f6:	80 81       	ld	r24, Z
    21f8:	8e 7f       	andi	r24, 0xFE	; 254
    21fa:	8c 93       	st	X, r24
	//CLr flag
	SET_BIT(TWCR, Pin7);
    21fc:	a6 e5       	ldi	r26, 0x56	; 86
    21fe:	b0 e0       	ldi	r27, 0x00	; 0
    2200:	e6 e5       	ldi	r30, 0x56	; 86
    2202:	f0 e0       	ldi	r31, 0x00	; 0
    2204:	80 81       	ld	r24, Z
    2206:	80 68       	ori	r24, 0x80	; 128
    2208:	8c 93       	st	X, r24
}
    220a:	0f 90       	pop	r0
    220c:	cf 91       	pop	r28
    220e:	df 91       	pop	r29
    2210:	08 95       	ret

00002212 <MCAL_TWI_Slave_Listen>:

void MCAL_TWI_Slave_Listen(void) {
    2212:	df 93       	push	r29
    2214:	cf 93       	push	r28
    2216:	cd b7       	in	r28, 0x3d	; 61
    2218:	de b7       	in	r29, 0x3e	; 62
	//clr flage
	SET_BIT(TWCR, Pin7);
    221a:	a6 e5       	ldi	r26, 0x56	; 86
    221c:	b0 e0       	ldi	r27, 0x00	; 0
    221e:	e6 e5       	ldi	r30, 0x56	; 86
    2220:	f0 e0       	ldi	r31, 0x00	; 0
    2222:	80 81       	ld	r24, Z
    2224:	80 68       	ori	r24, 0x80	; 128
    2226:	8c 93       	st	X, r24

}
    2228:	cf 91       	pop	r28
    222a:	df 91       	pop	r29
    222c:	08 95       	ret

0000222e <MCAL_TWI_SendData>:

// Common

void MCAL_TWI_SendData(u8 Data) {
    222e:	df 93       	push	r29
    2230:	cf 93       	push	r28
    2232:	0f 92       	push	r0
    2234:	cd b7       	in	r28, 0x3d	; 61
    2236:	de b7       	in	r29, 0x3e	; 62
    2238:	89 83       	std	Y+1, r24	; 0x01
	TWDR = Data;
    223a:	e3 e2       	ldi	r30, 0x23	; 35
    223c:	f0 e0       	ldi	r31, 0x00	; 0
    223e:	89 81       	ldd	r24, Y+1	; 0x01
    2240:	80 83       	st	Z, r24
	//clr flage
	SET_BIT(TWCR, Pin7);
    2242:	a6 e5       	ldi	r26, 0x56	; 86
    2244:	b0 e0       	ldi	r27, 0x00	; 0
    2246:	e6 e5       	ldi	r30, 0x56	; 86
    2248:	f0 e0       	ldi	r31, 0x00	; 0
    224a:	80 81       	ld	r24, Z
    224c:	80 68       	ori	r24, 0x80	; 128
    224e:	8c 93       	st	X, r24
	//Wait
	while (GET_BIT(TWCR,Pin7) == 0)
    2250:	e6 e5       	ldi	r30, 0x56	; 86
    2252:	f0 e0       	ldi	r31, 0x00	; 0
    2254:	80 81       	ld	r24, Z
    2256:	88 23       	and	r24, r24
    2258:	dc f7       	brge	.-10     	; 0x2250 <MCAL_TWI_SendData+0x22>
		;
}
    225a:	0f 90       	pop	r0
    225c:	cf 91       	pop	r28
    225e:	df 91       	pop	r29
    2260:	08 95       	ret

00002262 <MCAL_TWI_RecieveData>:
void MCAL_TWI_RecieveData(u8* Data) {
    2262:	df 93       	push	r29
    2264:	cf 93       	push	r28
    2266:	00 d0       	rcall	.+0      	; 0x2268 <MCAL_TWI_RecieveData+0x6>
    2268:	cd b7       	in	r28, 0x3d	; 61
    226a:	de b7       	in	r29, 0x3e	; 62
    226c:	9a 83       	std	Y+2, r25	; 0x02
    226e:	89 83       	std	Y+1, r24	; 0x01
	//clr flage
	SET_BIT(TWCR, Pin7);
    2270:	a6 e5       	ldi	r26, 0x56	; 86
    2272:	b0 e0       	ldi	r27, 0x00	; 0
    2274:	e6 e5       	ldi	r30, 0x56	; 86
    2276:	f0 e0       	ldi	r31, 0x00	; 0
    2278:	80 81       	ld	r24, Z
    227a:	80 68       	ori	r24, 0x80	; 128
    227c:	8c 93       	st	X, r24
	//Wait
	while (GET_BIT(TWCR,Pin7) == 0)
    227e:	e6 e5       	ldi	r30, 0x56	; 86
    2280:	f0 e0       	ldi	r31, 0x00	; 0
    2282:	80 81       	ld	r24, Z
    2284:	88 23       	and	r24, r24
    2286:	dc f7       	brge	.-10     	; 0x227e <MCAL_TWI_RecieveData+0x1c>
		;
	*Data = TWDR;
    2288:	e3 e2       	ldi	r30, 0x23	; 35
    228a:	f0 e0       	ldi	r31, 0x00	; 0
    228c:	80 81       	ld	r24, Z
    228e:	e9 81       	ldd	r30, Y+1	; 0x01
    2290:	fa 81       	ldd	r31, Y+2	; 0x02
    2292:	80 83       	st	Z, r24
}
    2294:	0f 90       	pop	r0
    2296:	0f 90       	pop	r0
    2298:	cf 91       	pop	r28
    229a:	df 91       	pop	r29
    229c:	08 95       	ret

0000229e <MCAL_SPI_SPIInit>:
 */

//Slave
#include "SPI.h"

void MCAL_SPI_SPIInit(void) {
    229e:	df 93       	push	r29
    22a0:	cf 93       	push	r28
    22a2:	cd b7       	in	r28, 0x3d	; 61
    22a4:	de b7       	in	r29, 0x3e	; 62
#if SPI_Mode == SPI_Master
	//Master Enable   *
	SET_BIT(SPCR, MSTR_PIN);
    22a6:	ad e2       	ldi	r26, 0x2D	; 45
    22a8:	b0 e0       	ldi	r27, 0x00	; 0
    22aa:	ed e2       	ldi	r30, 0x2D	; 45
    22ac:	f0 e0       	ldi	r31, 0x00	; 0
    22ae:	80 81       	ld	r24, Z
    22b0:	80 61       	ori	r24, 0x10	; 16
    22b2:	8c 93       	st	X, r24

	//MOSI   *
	MCAL_DIO_u8SetPinDirection(PortB, Pin5, Pin_High);
    22b4:	81 e0       	ldi	r24, 0x01	; 1
    22b6:	65 e0       	ldi	r22, 0x05	; 5
    22b8:	41 e0       	ldi	r20, 0x01	; 1
    22ba:	0e 94 f6 14 	call	0x29ec	; 0x29ec <MCAL_DIO_u8SetPinDirection>
	//Disable SS  *
	MCAL_DIO_u8SetPinDirection(PortB, Pin4, Pin_High);
    22be:	81 e0       	ldi	r24, 0x01	; 1
    22c0:	64 e0       	ldi	r22, 0x04	; 4
    22c2:	41 e0       	ldi	r20, 0x01	; 1
    22c4:	0e 94 f6 14 	call	0x29ec	; 0x29ec <MCAL_DIO_u8SetPinDirection>
	//SDK  *
	MCAL_DIO_u8SetPinDirection(PortB, Pin7, Pin_High);
    22c8:	81 e0       	ldi	r24, 0x01	; 1
    22ca:	67 e0       	ldi	r22, 0x07	; 7
    22cc:	41 e0       	ldi	r20, 0x01	; 1
    22ce:	0e 94 f6 14 	call	0x29ec	; 0x29ec <MCAL_DIO_u8SetPinDirection>

	//SS Disable *
	MCAL_DIO_u8SetPinValue(PortB, Pin4, Pin_High);
    22d2:	81 e0       	ldi	r24, 0x01	; 1
    22d4:	64 e0       	ldi	r22, 0x04	; 4
    22d6:	41 e0       	ldi	r20, 0x01	; 1
    22d8:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <MCAL_DIO_u8SetPinValue>

	//Prescaler 64 *
	SET_BIT(SPCR, SPR0_PIN);
    22dc:	ad e2       	ldi	r26, 0x2D	; 45
    22de:	b0 e0       	ldi	r27, 0x00	; 0
    22e0:	ed e2       	ldi	r30, 0x2D	; 45
    22e2:	f0 e0       	ldi	r31, 0x00	; 0
    22e4:	80 81       	ld	r24, Z
    22e6:	81 60       	ori	r24, 0x01	; 1
    22e8:	8c 93       	st	X, r24
	SET_BIT(SPCR, SPR1_PIN);
    22ea:	ad e2       	ldi	r26, 0x2D	; 45
    22ec:	b0 e0       	ldi	r27, 0x00	; 0
    22ee:	ed e2       	ldi	r30, 0x2D	; 45
    22f0:	f0 e0       	ldi	r31, 0x00	; 0
    22f2:	80 81       	ld	r24, Z
    22f4:	82 60       	ori	r24, 0x02	; 2
    22f6:	8c 93       	st	X, r24
	//MISO *
	MCAL_DIO_u8SetPinDirection(PortB, Pin6, Pin_High);
#endif

//the LSB of the data word is transmitted first.
	SET_BIT(SPCR, DORD_PIN);
    22f8:	ad e2       	ldi	r26, 0x2D	; 45
    22fa:	b0 e0       	ldi	r27, 0x00	; 0
    22fc:	ed e2       	ldi	r30, 0x2D	; 45
    22fe:	f0 e0       	ldi	r31, 0x00	; 0
    2300:	80 81       	ld	r24, Z
    2302:	80 62       	ori	r24, 0x20	; 32
    2304:	8c 93       	st	X, r24

	//Clock
//	SET_BIT(SPCR, CPOL_PIN);
	SET_BIT(SPCR, CPHA_PIN);
    2306:	ad e2       	ldi	r26, 0x2D	; 45
    2308:	b0 e0       	ldi	r27, 0x00	; 0
    230a:	ed e2       	ldi	r30, 0x2D	; 45
    230c:	f0 e0       	ldi	r31, 0x00	; 0
    230e:	80 81       	ld	r24, Z
    2310:	84 60       	ori	r24, 0x04	; 4
    2312:	8c 93       	st	X, r24

//Enable Interrupt
//	SET_BIT(SPCR, SPIE_PIN);

//SPI Enable
	SET_BIT(SPCR, SPE_PIN);
    2314:	ad e2       	ldi	r26, 0x2D	; 45
    2316:	b0 e0       	ldi	r27, 0x00	; 0
    2318:	ed e2       	ldi	r30, 0x2D	; 45
    231a:	f0 e0       	ldi	r31, 0x00	; 0
    231c:	80 81       	ld	r24, Z
    231e:	80 64       	ori	r24, 0x40	; 64
    2320:	8c 93       	st	X, r24
}
    2322:	cf 91       	pop	r28
    2324:	df 91       	pop	r29
    2326:	08 95       	ret

00002328 <MCAL_SPI_SendString>:

void MCAL_SPI_SendString(u8* Loc_Data) {
    2328:	df 93       	push	r29
    232a:	cf 93       	push	r28
    232c:	00 d0       	rcall	.+0      	; 0x232e <MCAL_SPI_SendString+0x6>
    232e:	00 d0       	rcall	.+0      	; 0x2330 <MCAL_SPI_SendString+0x8>
    2330:	00 d0       	rcall	.+0      	; 0x2332 <MCAL_SPI_SendString+0xa>
    2332:	cd b7       	in	r28, 0x3d	; 61
    2334:	de b7       	in	r29, 0x3e	; 62
    2336:	9e 83       	std	Y+6, r25	; 0x06
    2338:	8d 83       	std	Y+5, r24	; 0x05
	for (u32 i = 0; Loc_Data[i] != '\0'; i++) {
    233a:	19 82       	std	Y+1, r1	; 0x01
    233c:	1a 82       	std	Y+2, r1	; 0x02
    233e:	1b 82       	std	Y+3, r1	; 0x03
    2340:	1c 82       	std	Y+4, r1	; 0x04
    2342:	15 c0       	rjmp	.+42     	; 0x236e <MCAL_SPI_SendString+0x46>
		MCAL_SPI_SPITranceive(Loc_Data[i]);
    2344:	29 81       	ldd	r18, Y+1	; 0x01
    2346:	3a 81       	ldd	r19, Y+2	; 0x02
    2348:	8d 81       	ldd	r24, Y+5	; 0x05
    234a:	9e 81       	ldd	r25, Y+6	; 0x06
    234c:	fc 01       	movw	r30, r24
    234e:	e2 0f       	add	r30, r18
    2350:	f3 1f       	adc	r31, r19
    2352:	80 81       	ld	r24, Z
    2354:	0e 94 06 12 	call	0x240c	; 0x240c <MCAL_SPI_SPITranceive>
//SPI Enable
	SET_BIT(SPCR, SPE_PIN);
}

void MCAL_SPI_SendString(u8* Loc_Data) {
	for (u32 i = 0; Loc_Data[i] != '\0'; i++) {
    2358:	89 81       	ldd	r24, Y+1	; 0x01
    235a:	9a 81       	ldd	r25, Y+2	; 0x02
    235c:	ab 81       	ldd	r26, Y+3	; 0x03
    235e:	bc 81       	ldd	r27, Y+4	; 0x04
    2360:	01 96       	adiw	r24, 0x01	; 1
    2362:	a1 1d       	adc	r26, r1
    2364:	b1 1d       	adc	r27, r1
    2366:	89 83       	std	Y+1, r24	; 0x01
    2368:	9a 83       	std	Y+2, r25	; 0x02
    236a:	ab 83       	std	Y+3, r26	; 0x03
    236c:	bc 83       	std	Y+4, r27	; 0x04
    236e:	29 81       	ldd	r18, Y+1	; 0x01
    2370:	3a 81       	ldd	r19, Y+2	; 0x02
    2372:	8d 81       	ldd	r24, Y+5	; 0x05
    2374:	9e 81       	ldd	r25, Y+6	; 0x06
    2376:	fc 01       	movw	r30, r24
    2378:	e2 0f       	add	r30, r18
    237a:	f3 1f       	adc	r31, r19
    237c:	80 81       	ld	r24, Z
    237e:	88 23       	and	r24, r24
    2380:	09 f7       	brne	.-62     	; 0x2344 <MCAL_SPI_SendString+0x1c>
		MCAL_SPI_SPITranceive(Loc_Data[i]);
	}
}
    2382:	26 96       	adiw	r28, 0x06	; 6
    2384:	0f b6       	in	r0, 0x3f	; 63
    2386:	f8 94       	cli
    2388:	de bf       	out	0x3e, r29	; 62
    238a:	0f be       	out	0x3f, r0	; 63
    238c:	cd bf       	out	0x3d, r28	; 61
    238e:	cf 91       	pop	r28
    2390:	df 91       	pop	r29
    2392:	08 95       	ret

00002394 <MCAL_SPI_RecieveString>:

void MCAL_SPI_RecieveString(u8* Loc_Data) {
    2394:	0f 93       	push	r16
    2396:	1f 93       	push	r17
    2398:	df 93       	push	r29
    239a:	cf 93       	push	r28
    239c:	00 d0       	rcall	.+0      	; 0x239e <MCAL_SPI_RecieveString+0xa>
    239e:	00 d0       	rcall	.+0      	; 0x23a0 <MCAL_SPI_RecieveString+0xc>
    23a0:	00 d0       	rcall	.+0      	; 0x23a2 <MCAL_SPI_RecieveString+0xe>
    23a2:	cd b7       	in	r28, 0x3d	; 61
    23a4:	de b7       	in	r29, 0x3e	; 62
    23a6:	9e 83       	std	Y+6, r25	; 0x06
    23a8:	8d 83       	std	Y+5, r24	; 0x05
	for (u32 i = 0; Loc_Data[i] != '\0'; i++) {
    23aa:	19 82       	std	Y+1, r1	; 0x01
    23ac:	1a 82       	std	Y+2, r1	; 0x02
    23ae:	1b 82       	std	Y+3, r1	; 0x03
    23b0:	1c 82       	std	Y+4, r1	; 0x04
    23b2:	17 c0       	rjmp	.+46     	; 0x23e2 <MCAL_SPI_RecieveString+0x4e>
		Loc_Data[i] = MCAL_SPI_SPITranceive(0xff);
    23b4:	29 81       	ldd	r18, Y+1	; 0x01
    23b6:	3a 81       	ldd	r19, Y+2	; 0x02
    23b8:	8d 81       	ldd	r24, Y+5	; 0x05
    23ba:	9e 81       	ldd	r25, Y+6	; 0x06
    23bc:	8c 01       	movw	r16, r24
    23be:	02 0f       	add	r16, r18
    23c0:	13 1f       	adc	r17, r19
    23c2:	8f ef       	ldi	r24, 0xFF	; 255
    23c4:	0e 94 06 12 	call	0x240c	; 0x240c <MCAL_SPI_SPITranceive>
    23c8:	f8 01       	movw	r30, r16
    23ca:	80 83       	st	Z, r24
		MCAL_SPI_SPITranceive(Loc_Data[i]);
	}
}

void MCAL_SPI_RecieveString(u8* Loc_Data) {
	for (u32 i = 0; Loc_Data[i] != '\0'; i++) {
    23cc:	89 81       	ldd	r24, Y+1	; 0x01
    23ce:	9a 81       	ldd	r25, Y+2	; 0x02
    23d0:	ab 81       	ldd	r26, Y+3	; 0x03
    23d2:	bc 81       	ldd	r27, Y+4	; 0x04
    23d4:	01 96       	adiw	r24, 0x01	; 1
    23d6:	a1 1d       	adc	r26, r1
    23d8:	b1 1d       	adc	r27, r1
    23da:	89 83       	std	Y+1, r24	; 0x01
    23dc:	9a 83       	std	Y+2, r25	; 0x02
    23de:	ab 83       	std	Y+3, r26	; 0x03
    23e0:	bc 83       	std	Y+4, r27	; 0x04
    23e2:	29 81       	ldd	r18, Y+1	; 0x01
    23e4:	3a 81       	ldd	r19, Y+2	; 0x02
    23e6:	8d 81       	ldd	r24, Y+5	; 0x05
    23e8:	9e 81       	ldd	r25, Y+6	; 0x06
    23ea:	fc 01       	movw	r30, r24
    23ec:	e2 0f       	add	r30, r18
    23ee:	f3 1f       	adc	r31, r19
    23f0:	80 81       	ld	r24, Z
    23f2:	88 23       	and	r24, r24
    23f4:	f9 f6       	brne	.-66     	; 0x23b4 <MCAL_SPI_RecieveString+0x20>
		Loc_Data[i] = MCAL_SPI_SPITranceive(0xff);
	}
}
    23f6:	26 96       	adiw	r28, 0x06	; 6
    23f8:	0f b6       	in	r0, 0x3f	; 63
    23fa:	f8 94       	cli
    23fc:	de bf       	out	0x3e, r29	; 62
    23fe:	0f be       	out	0x3f, r0	; 63
    2400:	cd bf       	out	0x3d, r28	; 61
    2402:	cf 91       	pop	r28
    2404:	df 91       	pop	r29
    2406:	1f 91       	pop	r17
    2408:	0f 91       	pop	r16
    240a:	08 95       	ret

0000240c <MCAL_SPI_SPITranceive>:

u8 MCAL_SPI_SPITranceive(u8 Loc_u8Data) {
    240c:	df 93       	push	r29
    240e:	cf 93       	push	r28
    2410:	0f 92       	push	r0
    2412:	cd b7       	in	r28, 0x3d	; 61
    2414:	de b7       	in	r29, 0x3e	; 62
    2416:	89 83       	std	Y+1, r24	; 0x01
	SPDR = Loc_u8Data;
    2418:	ef e2       	ldi	r30, 0x2F	; 47
    241a:	f0 e0       	ldi	r31, 0x00	; 0
    241c:	89 81       	ldd	r24, Y+1	; 0x01
    241e:	80 83       	st	Z, r24
	while (GET_BIT(SPSR,SPIF_PIN) == 0)
    2420:	ee e2       	ldi	r30, 0x2E	; 46
    2422:	f0 e0       	ldi	r31, 0x00	; 0
    2424:	80 81       	ld	r24, Z
    2426:	88 23       	and	r24, r24
    2428:	dc f7       	brge	.-10     	; 0x2420 <MCAL_SPI_SPITranceive+0x14>
		;
	return SPDR;
    242a:	ef e2       	ldi	r30, 0x2F	; 47
    242c:	f0 e0       	ldi	r31, 0x00	; 0
    242e:	80 81       	ld	r24, Z
}
    2430:	0f 90       	pop	r0
    2432:	cf 91       	pop	r28
    2434:	df 91       	pop	r29
    2436:	08 95       	ret

00002438 <MCAL_Interrupt_u8SetRegister>:

void (*Gptr0)(void)= '\0' ;
void (*Gptr1)(void)= '\0' ;
void (*Gptr2)(void)= '\0' ;

void MCAL_Interrupt_u8SetRegister(u8 Loc_u8PortID, u8 Loc_u8PortValue) {
    2438:	df 93       	push	r29
    243a:	cf 93       	push	r28
    243c:	00 d0       	rcall	.+0      	; 0x243e <MCAL_Interrupt_u8SetRegister+0x6>
    243e:	cd b7       	in	r28, 0x3d	; 61
    2440:	de b7       	in	r29, 0x3e	; 62
    2442:	89 83       	std	Y+1, r24	; 0x01
    2444:	6a 83       	std	Y+2, r22	; 0x02
	if (Loc_u8PortValue == PORT_OUTPUT) {
    2446:	8a 81       	ldd	r24, Y+2	; 0x02
    2448:	8f 3f       	cpi	r24, 0xFF	; 255
    244a:	09 f5       	brne	.+66     	; 0x248e <MCAL_Interrupt_u8SetRegister+0x56>
		if (Loc_u8PortID == Sreg) {
    244c:	89 81       	ldd	r24, Y+1	; 0x01
    244e:	88 23       	and	r24, r24
    2450:	29 f4       	brne	.+10     	; 0x245c <MCAL_Interrupt_u8SetRegister+0x24>
			SREG = PORT_OUTPUT;
    2452:	ef e5       	ldi	r30, 0x5F	; 95
    2454:	f0 e0       	ldi	r31, 0x00	; 0
    2456:	8f ef       	ldi	r24, 0xFF	; 255
    2458:	80 83       	st	Z, r24
    245a:	57 c0       	rjmp	.+174    	; 0x250a <MCAL_Interrupt_u8SetRegister+0xd2>
		} else if (Loc_u8PortID == Gicr) {
    245c:	89 81       	ldd	r24, Y+1	; 0x01
    245e:	81 30       	cpi	r24, 0x01	; 1
    2460:	29 f4       	brne	.+10     	; 0x246c <MCAL_Interrupt_u8SetRegister+0x34>
			GICR = PORT_OUTPUT;
    2462:	eb e5       	ldi	r30, 0x5B	; 91
    2464:	f0 e0       	ldi	r31, 0x00	; 0
    2466:	8f ef       	ldi	r24, 0xFF	; 255
    2468:	80 83       	st	Z, r24
    246a:	4f c0       	rjmp	.+158    	; 0x250a <MCAL_Interrupt_u8SetRegister+0xd2>
		} else if (Loc_u8PortID == Mcucr) {
    246c:	89 81       	ldd	r24, Y+1	; 0x01
    246e:	82 30       	cpi	r24, 0x02	; 2
    2470:	29 f4       	brne	.+10     	; 0x247c <MCAL_Interrupt_u8SetRegister+0x44>
			MCUCR = PORT_OUTPUT;
    2472:	e5 e5       	ldi	r30, 0x55	; 85
    2474:	f0 e0       	ldi	r31, 0x00	; 0
    2476:	8f ef       	ldi	r24, 0xFF	; 255
    2478:	80 83       	st	Z, r24
    247a:	47 c0       	rjmp	.+142    	; 0x250a <MCAL_Interrupt_u8SetRegister+0xd2>
		} else if (Loc_u8PortID == Mcucsr) {
    247c:	89 81       	ldd	r24, Y+1	; 0x01
    247e:	83 30       	cpi	r24, 0x03	; 3
    2480:	09 f0       	breq	.+2      	; 0x2484 <MCAL_Interrupt_u8SetRegister+0x4c>
    2482:	43 c0       	rjmp	.+134    	; 0x250a <MCAL_Interrupt_u8SetRegister+0xd2>
			MCUCSR = PORT_OUTPUT;
    2484:	e4 e5       	ldi	r30, 0x54	; 84
    2486:	f0 e0       	ldi	r31, 0x00	; 0
    2488:	8f ef       	ldi	r24, 0xFF	; 255
    248a:	80 83       	st	Z, r24
    248c:	3e c0       	rjmp	.+124    	; 0x250a <MCAL_Interrupt_u8SetRegister+0xd2>
		} else {
			//Do Nothing
		}
	} else if (Loc_u8PortValue == PORT_INPUT) {
    248e:	8a 81       	ldd	r24, Y+2	; 0x02
    2490:	88 23       	and	r24, r24
    2492:	e1 f4       	brne	.+56     	; 0x24cc <MCAL_Interrupt_u8SetRegister+0x94>
		if (Loc_u8PortID == Sreg) {
    2494:	89 81       	ldd	r24, Y+1	; 0x01
    2496:	88 23       	and	r24, r24
    2498:	21 f4       	brne	.+8      	; 0x24a2 <MCAL_Interrupt_u8SetRegister+0x6a>
			SREG = PORT_INPUT;
    249a:	ef e5       	ldi	r30, 0x5F	; 95
    249c:	f0 e0       	ldi	r31, 0x00	; 0
    249e:	10 82       	st	Z, r1
    24a0:	34 c0       	rjmp	.+104    	; 0x250a <MCAL_Interrupt_u8SetRegister+0xd2>
		} else if (Loc_u8PortID == Gicr) {
    24a2:	89 81       	ldd	r24, Y+1	; 0x01
    24a4:	81 30       	cpi	r24, 0x01	; 1
    24a6:	21 f4       	brne	.+8      	; 0x24b0 <MCAL_Interrupt_u8SetRegister+0x78>
			GICR = PORT_INPUT;
    24a8:	eb e5       	ldi	r30, 0x5B	; 91
    24aa:	f0 e0       	ldi	r31, 0x00	; 0
    24ac:	10 82       	st	Z, r1
    24ae:	2d c0       	rjmp	.+90     	; 0x250a <MCAL_Interrupt_u8SetRegister+0xd2>
		} else if (Loc_u8PortID == Mcucr) {
    24b0:	89 81       	ldd	r24, Y+1	; 0x01
    24b2:	82 30       	cpi	r24, 0x02	; 2
    24b4:	21 f4       	brne	.+8      	; 0x24be <MCAL_Interrupt_u8SetRegister+0x86>
			MCUCR = PORT_INPUT;
    24b6:	e5 e5       	ldi	r30, 0x55	; 85
    24b8:	f0 e0       	ldi	r31, 0x00	; 0
    24ba:	10 82       	st	Z, r1
    24bc:	26 c0       	rjmp	.+76     	; 0x250a <MCAL_Interrupt_u8SetRegister+0xd2>
		} else if (Loc_u8PortID == Mcucsr) {
    24be:	89 81       	ldd	r24, Y+1	; 0x01
    24c0:	83 30       	cpi	r24, 0x03	; 3
    24c2:	19 f5       	brne	.+70     	; 0x250a <MCAL_Interrupt_u8SetRegister+0xd2>
			MCUCSR = PORT_INPUT;
    24c4:	e4 e5       	ldi	r30, 0x54	; 84
    24c6:	f0 e0       	ldi	r31, 0x00	; 0
    24c8:	10 82       	st	Z, r1
    24ca:	1f c0       	rjmp	.+62     	; 0x250a <MCAL_Interrupt_u8SetRegister+0xd2>
		} else {
			//Do Nothing
		}
	} else {
		if (Loc_u8PortID == Sreg) {
    24cc:	89 81       	ldd	r24, Y+1	; 0x01
    24ce:	88 23       	and	r24, r24
    24d0:	29 f4       	brne	.+10     	; 0x24dc <MCAL_Interrupt_u8SetRegister+0xa4>
			SREG = Loc_u8PortValue;
    24d2:	ef e5       	ldi	r30, 0x5F	; 95
    24d4:	f0 e0       	ldi	r31, 0x00	; 0
    24d6:	8a 81       	ldd	r24, Y+2	; 0x02
    24d8:	80 83       	st	Z, r24
    24da:	17 c0       	rjmp	.+46     	; 0x250a <MCAL_Interrupt_u8SetRegister+0xd2>
		} else if (Loc_u8PortID == Gicr) {
    24dc:	89 81       	ldd	r24, Y+1	; 0x01
    24de:	81 30       	cpi	r24, 0x01	; 1
    24e0:	29 f4       	brne	.+10     	; 0x24ec <MCAL_Interrupt_u8SetRegister+0xb4>
			GICR = Loc_u8PortValue;
    24e2:	eb e5       	ldi	r30, 0x5B	; 91
    24e4:	f0 e0       	ldi	r31, 0x00	; 0
    24e6:	8a 81       	ldd	r24, Y+2	; 0x02
    24e8:	80 83       	st	Z, r24
    24ea:	0f c0       	rjmp	.+30     	; 0x250a <MCAL_Interrupt_u8SetRegister+0xd2>
		} else if (Loc_u8PortID == Mcucr) {
    24ec:	89 81       	ldd	r24, Y+1	; 0x01
    24ee:	82 30       	cpi	r24, 0x02	; 2
    24f0:	29 f4       	brne	.+10     	; 0x24fc <MCAL_Interrupt_u8SetRegister+0xc4>
			MCUCR = Loc_u8PortValue;
    24f2:	e5 e5       	ldi	r30, 0x55	; 85
    24f4:	f0 e0       	ldi	r31, 0x00	; 0
    24f6:	8a 81       	ldd	r24, Y+2	; 0x02
    24f8:	80 83       	st	Z, r24
    24fa:	07 c0       	rjmp	.+14     	; 0x250a <MCAL_Interrupt_u8SetRegister+0xd2>
		} else if (Loc_u8PortID == Mcucsr) {
    24fc:	89 81       	ldd	r24, Y+1	; 0x01
    24fe:	83 30       	cpi	r24, 0x03	; 3
    2500:	21 f4       	brne	.+8      	; 0x250a <MCAL_Interrupt_u8SetRegister+0xd2>
			MCUCSR = Loc_u8PortValue;
    2502:	e4 e5       	ldi	r30, 0x54	; 84
    2504:	f0 e0       	ldi	r31, 0x00	; 0
    2506:	8a 81       	ldd	r24, Y+2	; 0x02
    2508:	80 83       	st	Z, r24
		}
	}
}
    250a:	0f 90       	pop	r0
    250c:	0f 90       	pop	r0
    250e:	cf 91       	pop	r28
    2510:	df 91       	pop	r29
    2512:	08 95       	ret

00002514 <MCAL_Interrupt_u8SetRegisterPin>:

void MCAL_Interrupt_u8SetRegisterPin(u8 Loc_u8PortID, u8 Loc_u8PinID,
		u8 Loc_u8PinValue) {
    2514:	df 93       	push	r29
    2516:	cf 93       	push	r28
    2518:	00 d0       	rcall	.+0      	; 0x251a <MCAL_Interrupt_u8SetRegisterPin+0x6>
    251a:	0f 92       	push	r0
    251c:	cd b7       	in	r28, 0x3d	; 61
    251e:	de b7       	in	r29, 0x3e	; 62
    2520:	89 83       	std	Y+1, r24	; 0x01
    2522:	6a 83       	std	Y+2, r22	; 0x02
    2524:	4b 83       	std	Y+3, r20	; 0x03
	if (Loc_u8PinValue == Pin_High) {
    2526:	8b 81       	ldd	r24, Y+3	; 0x03
    2528:	81 30       	cpi	r24, 0x01	; 1
    252a:	09 f0       	breq	.+2      	; 0x252e <MCAL_Interrupt_u8SetRegisterPin+0x1a>
    252c:	5d c0       	rjmp	.+186    	; 0x25e8 <MCAL_Interrupt_u8SetRegisterPin+0xd4>
		if (Loc_u8PortID == Sreg) {
    252e:	89 81       	ldd	r24, Y+1	; 0x01
    2530:	88 23       	and	r24, r24
    2532:	a1 f4       	brne	.+40     	; 0x255c <MCAL_Interrupt_u8SetRegisterPin+0x48>
			SET_BIT(SREG, Loc_u8PinID);
    2534:	af e5       	ldi	r26, 0x5F	; 95
    2536:	b0 e0       	ldi	r27, 0x00	; 0
    2538:	ef e5       	ldi	r30, 0x5F	; 95
    253a:	f0 e0       	ldi	r31, 0x00	; 0
    253c:	80 81       	ld	r24, Z
    253e:	48 2f       	mov	r20, r24
    2540:	8a 81       	ldd	r24, Y+2	; 0x02
    2542:	28 2f       	mov	r18, r24
    2544:	30 e0       	ldi	r19, 0x00	; 0
    2546:	81 e0       	ldi	r24, 0x01	; 1
    2548:	90 e0       	ldi	r25, 0x00	; 0
    254a:	02 2e       	mov	r0, r18
    254c:	02 c0       	rjmp	.+4      	; 0x2552 <MCAL_Interrupt_u8SetRegisterPin+0x3e>
    254e:	88 0f       	add	r24, r24
    2550:	99 1f       	adc	r25, r25
    2552:	0a 94       	dec	r0
    2554:	e2 f7       	brpl	.-8      	; 0x254e <MCAL_Interrupt_u8SetRegisterPin+0x3a>
    2556:	84 2b       	or	r24, r20
    2558:	8c 93       	st	X, r24
    255a:	a9 c0       	rjmp	.+338    	; 0x26ae <MCAL_Interrupt_u8SetRegisterPin+0x19a>
		} else if (Loc_u8PortID == Gicr) {
    255c:	89 81       	ldd	r24, Y+1	; 0x01
    255e:	81 30       	cpi	r24, 0x01	; 1
    2560:	a1 f4       	brne	.+40     	; 0x258a <MCAL_Interrupt_u8SetRegisterPin+0x76>
			SET_BIT(GICR, Loc_u8PinID);
    2562:	ab e5       	ldi	r26, 0x5B	; 91
    2564:	b0 e0       	ldi	r27, 0x00	; 0
    2566:	eb e5       	ldi	r30, 0x5B	; 91
    2568:	f0 e0       	ldi	r31, 0x00	; 0
    256a:	80 81       	ld	r24, Z
    256c:	48 2f       	mov	r20, r24
    256e:	8a 81       	ldd	r24, Y+2	; 0x02
    2570:	28 2f       	mov	r18, r24
    2572:	30 e0       	ldi	r19, 0x00	; 0
    2574:	81 e0       	ldi	r24, 0x01	; 1
    2576:	90 e0       	ldi	r25, 0x00	; 0
    2578:	02 2e       	mov	r0, r18
    257a:	02 c0       	rjmp	.+4      	; 0x2580 <MCAL_Interrupt_u8SetRegisterPin+0x6c>
    257c:	88 0f       	add	r24, r24
    257e:	99 1f       	adc	r25, r25
    2580:	0a 94       	dec	r0
    2582:	e2 f7       	brpl	.-8      	; 0x257c <MCAL_Interrupt_u8SetRegisterPin+0x68>
    2584:	84 2b       	or	r24, r20
    2586:	8c 93       	st	X, r24
    2588:	92 c0       	rjmp	.+292    	; 0x26ae <MCAL_Interrupt_u8SetRegisterPin+0x19a>
		} else if (Loc_u8PortID == Mcucr) {
    258a:	89 81       	ldd	r24, Y+1	; 0x01
    258c:	82 30       	cpi	r24, 0x02	; 2
    258e:	a1 f4       	brne	.+40     	; 0x25b8 <MCAL_Interrupt_u8SetRegisterPin+0xa4>
			SET_BIT(MCUCR, Loc_u8PinID);
    2590:	a5 e5       	ldi	r26, 0x55	; 85
    2592:	b0 e0       	ldi	r27, 0x00	; 0
    2594:	e5 e5       	ldi	r30, 0x55	; 85
    2596:	f0 e0       	ldi	r31, 0x00	; 0
    2598:	80 81       	ld	r24, Z
    259a:	48 2f       	mov	r20, r24
    259c:	8a 81       	ldd	r24, Y+2	; 0x02
    259e:	28 2f       	mov	r18, r24
    25a0:	30 e0       	ldi	r19, 0x00	; 0
    25a2:	81 e0       	ldi	r24, 0x01	; 1
    25a4:	90 e0       	ldi	r25, 0x00	; 0
    25a6:	02 2e       	mov	r0, r18
    25a8:	02 c0       	rjmp	.+4      	; 0x25ae <MCAL_Interrupt_u8SetRegisterPin+0x9a>
    25aa:	88 0f       	add	r24, r24
    25ac:	99 1f       	adc	r25, r25
    25ae:	0a 94       	dec	r0
    25b0:	e2 f7       	brpl	.-8      	; 0x25aa <MCAL_Interrupt_u8SetRegisterPin+0x96>
    25b2:	84 2b       	or	r24, r20
    25b4:	8c 93       	st	X, r24
    25b6:	7b c0       	rjmp	.+246    	; 0x26ae <MCAL_Interrupt_u8SetRegisterPin+0x19a>
		} else if (Loc_u8PortID == Mcucsr) {
    25b8:	89 81       	ldd	r24, Y+1	; 0x01
    25ba:	83 30       	cpi	r24, 0x03	; 3
    25bc:	09 f0       	breq	.+2      	; 0x25c0 <MCAL_Interrupt_u8SetRegisterPin+0xac>
    25be:	77 c0       	rjmp	.+238    	; 0x26ae <MCAL_Interrupt_u8SetRegisterPin+0x19a>
			SET_BIT(MCUCSR, Loc_u8PinID);
    25c0:	a4 e5       	ldi	r26, 0x54	; 84
    25c2:	b0 e0       	ldi	r27, 0x00	; 0
    25c4:	e4 e5       	ldi	r30, 0x54	; 84
    25c6:	f0 e0       	ldi	r31, 0x00	; 0
    25c8:	80 81       	ld	r24, Z
    25ca:	48 2f       	mov	r20, r24
    25cc:	8a 81       	ldd	r24, Y+2	; 0x02
    25ce:	28 2f       	mov	r18, r24
    25d0:	30 e0       	ldi	r19, 0x00	; 0
    25d2:	81 e0       	ldi	r24, 0x01	; 1
    25d4:	90 e0       	ldi	r25, 0x00	; 0
    25d6:	02 2e       	mov	r0, r18
    25d8:	02 c0       	rjmp	.+4      	; 0x25de <MCAL_Interrupt_u8SetRegisterPin+0xca>
    25da:	88 0f       	add	r24, r24
    25dc:	99 1f       	adc	r25, r25
    25de:	0a 94       	dec	r0
    25e0:	e2 f7       	brpl	.-8      	; 0x25da <MCAL_Interrupt_u8SetRegisterPin+0xc6>
    25e2:	84 2b       	or	r24, r20
    25e4:	8c 93       	st	X, r24
    25e6:	63 c0       	rjmp	.+198    	; 0x26ae <MCAL_Interrupt_u8SetRegisterPin+0x19a>
		} else {
			//Do Nothing
		}
	} else if (Loc_u8PinValue == Pin_Low) {
    25e8:	8b 81       	ldd	r24, Y+3	; 0x03
    25ea:	88 23       	and	r24, r24
    25ec:	09 f0       	breq	.+2      	; 0x25f0 <MCAL_Interrupt_u8SetRegisterPin+0xdc>
    25ee:	5f c0       	rjmp	.+190    	; 0x26ae <MCAL_Interrupt_u8SetRegisterPin+0x19a>
		if (Loc_u8PortID == Sreg) {
    25f0:	89 81       	ldd	r24, Y+1	; 0x01
    25f2:	88 23       	and	r24, r24
    25f4:	a9 f4       	brne	.+42     	; 0x2620 <MCAL_Interrupt_u8SetRegisterPin+0x10c>
			CLR_BIT(SREG, Loc_u8PinID);
    25f6:	af e5       	ldi	r26, 0x5F	; 95
    25f8:	b0 e0       	ldi	r27, 0x00	; 0
    25fa:	ef e5       	ldi	r30, 0x5F	; 95
    25fc:	f0 e0       	ldi	r31, 0x00	; 0
    25fe:	80 81       	ld	r24, Z
    2600:	48 2f       	mov	r20, r24
    2602:	8a 81       	ldd	r24, Y+2	; 0x02
    2604:	28 2f       	mov	r18, r24
    2606:	30 e0       	ldi	r19, 0x00	; 0
    2608:	81 e0       	ldi	r24, 0x01	; 1
    260a:	90 e0       	ldi	r25, 0x00	; 0
    260c:	02 2e       	mov	r0, r18
    260e:	02 c0       	rjmp	.+4      	; 0x2614 <MCAL_Interrupt_u8SetRegisterPin+0x100>
    2610:	88 0f       	add	r24, r24
    2612:	99 1f       	adc	r25, r25
    2614:	0a 94       	dec	r0
    2616:	e2 f7       	brpl	.-8      	; 0x2610 <MCAL_Interrupt_u8SetRegisterPin+0xfc>
    2618:	80 95       	com	r24
    261a:	84 23       	and	r24, r20
    261c:	8c 93       	st	X, r24
    261e:	47 c0       	rjmp	.+142    	; 0x26ae <MCAL_Interrupt_u8SetRegisterPin+0x19a>
		} else if (Loc_u8PortID == Gicr) {
    2620:	89 81       	ldd	r24, Y+1	; 0x01
    2622:	81 30       	cpi	r24, 0x01	; 1
    2624:	a9 f4       	brne	.+42     	; 0x2650 <MCAL_Interrupt_u8SetRegisterPin+0x13c>
			CLR_BIT(GICR, Loc_u8PinID);
    2626:	ab e5       	ldi	r26, 0x5B	; 91
    2628:	b0 e0       	ldi	r27, 0x00	; 0
    262a:	eb e5       	ldi	r30, 0x5B	; 91
    262c:	f0 e0       	ldi	r31, 0x00	; 0
    262e:	80 81       	ld	r24, Z
    2630:	48 2f       	mov	r20, r24
    2632:	8a 81       	ldd	r24, Y+2	; 0x02
    2634:	28 2f       	mov	r18, r24
    2636:	30 e0       	ldi	r19, 0x00	; 0
    2638:	81 e0       	ldi	r24, 0x01	; 1
    263a:	90 e0       	ldi	r25, 0x00	; 0
    263c:	02 2e       	mov	r0, r18
    263e:	02 c0       	rjmp	.+4      	; 0x2644 <MCAL_Interrupt_u8SetRegisterPin+0x130>
    2640:	88 0f       	add	r24, r24
    2642:	99 1f       	adc	r25, r25
    2644:	0a 94       	dec	r0
    2646:	e2 f7       	brpl	.-8      	; 0x2640 <MCAL_Interrupt_u8SetRegisterPin+0x12c>
    2648:	80 95       	com	r24
    264a:	84 23       	and	r24, r20
    264c:	8c 93       	st	X, r24
    264e:	2f c0       	rjmp	.+94     	; 0x26ae <MCAL_Interrupt_u8SetRegisterPin+0x19a>
		} else if (Loc_u8PortID == Mcucr) {
    2650:	89 81       	ldd	r24, Y+1	; 0x01
    2652:	82 30       	cpi	r24, 0x02	; 2
    2654:	a9 f4       	brne	.+42     	; 0x2680 <MCAL_Interrupt_u8SetRegisterPin+0x16c>
			CLR_BIT(MCUCR, Loc_u8PinID);
    2656:	a5 e5       	ldi	r26, 0x55	; 85
    2658:	b0 e0       	ldi	r27, 0x00	; 0
    265a:	e5 e5       	ldi	r30, 0x55	; 85
    265c:	f0 e0       	ldi	r31, 0x00	; 0
    265e:	80 81       	ld	r24, Z
    2660:	48 2f       	mov	r20, r24
    2662:	8a 81       	ldd	r24, Y+2	; 0x02
    2664:	28 2f       	mov	r18, r24
    2666:	30 e0       	ldi	r19, 0x00	; 0
    2668:	81 e0       	ldi	r24, 0x01	; 1
    266a:	90 e0       	ldi	r25, 0x00	; 0
    266c:	02 2e       	mov	r0, r18
    266e:	02 c0       	rjmp	.+4      	; 0x2674 <MCAL_Interrupt_u8SetRegisterPin+0x160>
    2670:	88 0f       	add	r24, r24
    2672:	99 1f       	adc	r25, r25
    2674:	0a 94       	dec	r0
    2676:	e2 f7       	brpl	.-8      	; 0x2670 <MCAL_Interrupt_u8SetRegisterPin+0x15c>
    2678:	80 95       	com	r24
    267a:	84 23       	and	r24, r20
    267c:	8c 93       	st	X, r24
    267e:	17 c0       	rjmp	.+46     	; 0x26ae <MCAL_Interrupt_u8SetRegisterPin+0x19a>
		} else if (Loc_u8PortID == Mcucsr) {
    2680:	89 81       	ldd	r24, Y+1	; 0x01
    2682:	83 30       	cpi	r24, 0x03	; 3
    2684:	a1 f4       	brne	.+40     	; 0x26ae <MCAL_Interrupt_u8SetRegisterPin+0x19a>
			CLR_BIT(MCUCSR, Loc_u8PinID);
    2686:	a4 e5       	ldi	r26, 0x54	; 84
    2688:	b0 e0       	ldi	r27, 0x00	; 0
    268a:	e4 e5       	ldi	r30, 0x54	; 84
    268c:	f0 e0       	ldi	r31, 0x00	; 0
    268e:	80 81       	ld	r24, Z
    2690:	48 2f       	mov	r20, r24
    2692:	8a 81       	ldd	r24, Y+2	; 0x02
    2694:	28 2f       	mov	r18, r24
    2696:	30 e0       	ldi	r19, 0x00	; 0
    2698:	81 e0       	ldi	r24, 0x01	; 1
    269a:	90 e0       	ldi	r25, 0x00	; 0
    269c:	02 2e       	mov	r0, r18
    269e:	02 c0       	rjmp	.+4      	; 0x26a4 <MCAL_Interrupt_u8SetRegisterPin+0x190>
    26a0:	88 0f       	add	r24, r24
    26a2:	99 1f       	adc	r25, r25
    26a4:	0a 94       	dec	r0
    26a6:	e2 f7       	brpl	.-8      	; 0x26a0 <MCAL_Interrupt_u8SetRegisterPin+0x18c>
    26a8:	80 95       	com	r24
    26aa:	84 23       	and	r24, r20
    26ac:	8c 93       	st	X, r24
			//Do Nothing
		}
	} else {
		//Do Nothing
	}
}
    26ae:	0f 90       	pop	r0
    26b0:	0f 90       	pop	r0
    26b2:	0f 90       	pop	r0
    26b4:	cf 91       	pop	r28
    26b6:	df 91       	pop	r29
    26b8:	08 95       	ret

000026ba <MCAL_Interrupt_EXIT_CallBack_0>:

void MCAL_Interrupt_EXIT_CallBack_0(void (*ptr)(void)) {
    26ba:	df 93       	push	r29
    26bc:	cf 93       	push	r28
    26be:	00 d0       	rcall	.+0      	; 0x26c0 <MCAL_Interrupt_EXIT_CallBack_0+0x6>
    26c0:	cd b7       	in	r28, 0x3d	; 61
    26c2:	de b7       	in	r29, 0x3e	; 62
    26c4:	9a 83       	std	Y+2, r25	; 0x02
    26c6:	89 83       	std	Y+1, r24	; 0x01
	if (ptr != '\0')
    26c8:	89 81       	ldd	r24, Y+1	; 0x01
    26ca:	9a 81       	ldd	r25, Y+2	; 0x02
    26cc:	00 97       	sbiw	r24, 0x00	; 0
    26ce:	31 f0       	breq	.+12     	; 0x26dc <MCAL_Interrupt_EXIT_CallBack_0+0x22>
		Gptr0 = ptr;
    26d0:	89 81       	ldd	r24, Y+1	; 0x01
    26d2:	9a 81       	ldd	r25, Y+2	; 0x02
    26d4:	90 93 7b 01 	sts	0x017B, r25
    26d8:	80 93 7a 01 	sts	0x017A, r24
}
    26dc:	0f 90       	pop	r0
    26de:	0f 90       	pop	r0
    26e0:	cf 91       	pop	r28
    26e2:	df 91       	pop	r29
    26e4:	08 95       	ret

000026e6 <MCAL_Interrupt_EXIT_CallBack_1>:
void MCAL_Interrupt_EXIT_CallBack_1(void (*ptr)(void)) {
    26e6:	df 93       	push	r29
    26e8:	cf 93       	push	r28
    26ea:	00 d0       	rcall	.+0      	; 0x26ec <MCAL_Interrupt_EXIT_CallBack_1+0x6>
    26ec:	cd b7       	in	r28, 0x3d	; 61
    26ee:	de b7       	in	r29, 0x3e	; 62
    26f0:	9a 83       	std	Y+2, r25	; 0x02
    26f2:	89 83       	std	Y+1, r24	; 0x01
	if (ptr != '\0')
    26f4:	89 81       	ldd	r24, Y+1	; 0x01
    26f6:	9a 81       	ldd	r25, Y+2	; 0x02
    26f8:	00 97       	sbiw	r24, 0x00	; 0
    26fa:	31 f0       	breq	.+12     	; 0x2708 <MCAL_Interrupt_EXIT_CallBack_1+0x22>
		Gptr1 = ptr;
    26fc:	89 81       	ldd	r24, Y+1	; 0x01
    26fe:	9a 81       	ldd	r25, Y+2	; 0x02
    2700:	90 93 7d 01 	sts	0x017D, r25
    2704:	80 93 7c 01 	sts	0x017C, r24
}
    2708:	0f 90       	pop	r0
    270a:	0f 90       	pop	r0
    270c:	cf 91       	pop	r28
    270e:	df 91       	pop	r29
    2710:	08 95       	ret

00002712 <MCAL_Interrupt_EXIT_CallBack_2>:
void MCAL_Interrupt_EXIT_CallBack_2(void (*ptr)(void)) {
    2712:	df 93       	push	r29
    2714:	cf 93       	push	r28
    2716:	00 d0       	rcall	.+0      	; 0x2718 <MCAL_Interrupt_EXIT_CallBack_2+0x6>
    2718:	cd b7       	in	r28, 0x3d	; 61
    271a:	de b7       	in	r29, 0x3e	; 62
    271c:	9a 83       	std	Y+2, r25	; 0x02
    271e:	89 83       	std	Y+1, r24	; 0x01
	if (ptr != '\0')
    2720:	89 81       	ldd	r24, Y+1	; 0x01
    2722:	9a 81       	ldd	r25, Y+2	; 0x02
    2724:	00 97       	sbiw	r24, 0x00	; 0
    2726:	31 f0       	breq	.+12     	; 0x2734 <MCAL_Interrupt_EXIT_CallBack_2+0x22>
		Gptr2 = ptr;
    2728:	89 81       	ldd	r24, Y+1	; 0x01
    272a:	9a 81       	ldd	r25, Y+2	; 0x02
    272c:	90 93 7f 01 	sts	0x017F, r25
    2730:	80 93 7e 01 	sts	0x017E, r24
}
    2734:	0f 90       	pop	r0
    2736:	0f 90       	pop	r0
    2738:	cf 91       	pop	r28
    273a:	df 91       	pop	r29
    273c:	08 95       	ret

0000273e <MCAL_Interrupt_EnableGIE>:

void MCAL_Interrupt_EnableGIE(u8 Loc_u8value) {
    273e:	df 93       	push	r29
    2740:	cf 93       	push	r28
    2742:	0f 92       	push	r0
    2744:	cd b7       	in	r28, 0x3d	; 61
    2746:	de b7       	in	r29, 0x3e	; 62
    2748:	89 83       	std	Y+1, r24	; 0x01
	if (Loc_u8value == Enable) {
    274a:	89 81       	ldd	r24, Y+1	; 0x01
    274c:	81 30       	cpi	r24, 0x01	; 1
    274e:	31 f4       	brne	.+12     	; 0x275c <MCAL_Interrupt_EnableGIE+0x1e>
		MCAL_Interrupt_u8SetRegisterPin(Sreg, SREG_Pin, Pin_High);
    2750:	80 e0       	ldi	r24, 0x00	; 0
    2752:	67 e0       	ldi	r22, 0x07	; 7
    2754:	41 e0       	ldi	r20, 0x01	; 1
    2756:	0e 94 8a 12 	call	0x2514	; 0x2514 <MCAL_Interrupt_u8SetRegisterPin>
    275a:	08 c0       	rjmp	.+16     	; 0x276c <MCAL_Interrupt_EnableGIE+0x2e>
	} else if (Loc_u8value == Disable) {
    275c:	89 81       	ldd	r24, Y+1	; 0x01
    275e:	88 23       	and	r24, r24
    2760:	29 f4       	brne	.+10     	; 0x276c <MCAL_Interrupt_EnableGIE+0x2e>
		MCAL_Interrupt_u8SetRegisterPin(Sreg, SREG_Pin, Pin_Low);
    2762:	80 e0       	ldi	r24, 0x00	; 0
    2764:	67 e0       	ldi	r22, 0x07	; 7
    2766:	40 e0       	ldi	r20, 0x00	; 0
    2768:	0e 94 8a 12 	call	0x2514	; 0x2514 <MCAL_Interrupt_u8SetRegisterPin>
	}
}
    276c:	0f 90       	pop	r0
    276e:	cf 91       	pop	r28
    2770:	df 91       	pop	r29
    2772:	08 95       	ret

00002774 <MCAL_Interrupt_InterruptInit>:

void MCAL_Interrupt_InterruptInit() {
    2774:	df 93       	push	r29
    2776:	cf 93       	push	r28
    2778:	cd b7       	in	r28, 0x3d	; 61
    277a:	de b7       	in	r29, 0x3e	; 62
	MCAL_Interrupt_u8SetRegisterPin(Sreg, SREG_Pin, Pin_High);
    277c:	80 e0       	ldi	r24, 0x00	; 0
    277e:	67 e0       	ldi	r22, 0x07	; 7
    2780:	41 e0       	ldi	r20, 0x01	; 1
    2782:	0e 94 8a 12 	call	0x2514	; 0x2514 <MCAL_Interrupt_u8SetRegisterPin>
	MCAL_Interrupt_u8SetRegisterPin(Gicr, GICR_Pin5, Pin_High);
    2786:	81 e0       	ldi	r24, 0x01	; 1
    2788:	65 e0       	ldi	r22, 0x05	; 5
    278a:	41 e0       	ldi	r20, 0x01	; 1
    278c:	0e 94 8a 12 	call	0x2514	; 0x2514 <MCAL_Interrupt_u8SetRegisterPin>
	MCAL_Interrupt_u8SetRegisterPin(Gicr, GICR_Pin6, Pin_High);
    2790:	81 e0       	ldi	r24, 0x01	; 1
    2792:	66 e0       	ldi	r22, 0x06	; 6
    2794:	41 e0       	ldi	r20, 0x01	; 1
    2796:	0e 94 8a 12 	call	0x2514	; 0x2514 <MCAL_Interrupt_u8SetRegisterPin>
	MCAL_Interrupt_u8SetRegisterPin(Gicr, GICR_Pin7, Pin_High);
    279a:	81 e0       	ldi	r24, 0x01	; 1
    279c:	67 e0       	ldi	r22, 0x07	; 7
    279e:	41 e0       	ldi	r20, 0x01	; 1
    27a0:	0e 94 8a 12 	call	0x2514	; 0x2514 <MCAL_Interrupt_u8SetRegisterPin>
	MCAL_Interrupt_u8SetRegisterPin(Mcucr, MCUCR_Pin, Pin_High);
    27a4:	82 e0       	ldi	r24, 0x02	; 2
    27a6:	61 e0       	ldi	r22, 0x01	; 1
    27a8:	41 e0       	ldi	r20, 0x01	; 1
    27aa:	0e 94 8a 12 	call	0x2514	; 0x2514 <MCAL_Interrupt_u8SetRegisterPin>
}
    27ae:	cf 91       	pop	r28
    27b0:	df 91       	pop	r29
    27b2:	08 95       	ret

000027b4 <__vector_1>:

ISR(VECT_INT0) {
    27b4:	1f 92       	push	r1
    27b6:	0f 92       	push	r0
    27b8:	0f b6       	in	r0, 0x3f	; 63
    27ba:	0f 92       	push	r0
    27bc:	11 24       	eor	r1, r1
    27be:	2f 93       	push	r18
    27c0:	3f 93       	push	r19
    27c2:	4f 93       	push	r20
    27c4:	5f 93       	push	r21
    27c6:	6f 93       	push	r22
    27c8:	7f 93       	push	r23
    27ca:	8f 93       	push	r24
    27cc:	9f 93       	push	r25
    27ce:	af 93       	push	r26
    27d0:	bf 93       	push	r27
    27d2:	ef 93       	push	r30
    27d4:	ff 93       	push	r31
    27d6:	df 93       	push	r29
    27d8:	cf 93       	push	r28
    27da:	cd b7       	in	r28, 0x3d	; 61
    27dc:	de b7       	in	r29, 0x3e	; 62
	if (Gptr0 != '\0')
    27de:	80 91 7a 01 	lds	r24, 0x017A
    27e2:	90 91 7b 01 	lds	r25, 0x017B
    27e6:	00 97       	sbiw	r24, 0x00	; 0
    27e8:	29 f0       	breq	.+10     	; 0x27f4 <__vector_1+0x40>
		Gptr0();
    27ea:	e0 91 7a 01 	lds	r30, 0x017A
    27ee:	f0 91 7b 01 	lds	r31, 0x017B
    27f2:	09 95       	icall
}
    27f4:	cf 91       	pop	r28
    27f6:	df 91       	pop	r29
    27f8:	ff 91       	pop	r31
    27fa:	ef 91       	pop	r30
    27fc:	bf 91       	pop	r27
    27fe:	af 91       	pop	r26
    2800:	9f 91       	pop	r25
    2802:	8f 91       	pop	r24
    2804:	7f 91       	pop	r23
    2806:	6f 91       	pop	r22
    2808:	5f 91       	pop	r21
    280a:	4f 91       	pop	r20
    280c:	3f 91       	pop	r19
    280e:	2f 91       	pop	r18
    2810:	0f 90       	pop	r0
    2812:	0f be       	out	0x3f, r0	; 63
    2814:	0f 90       	pop	r0
    2816:	1f 90       	pop	r1
    2818:	18 95       	reti

0000281a <__vector_2>:
ISR(VECT_INT1) {
    281a:	1f 92       	push	r1
    281c:	0f 92       	push	r0
    281e:	0f b6       	in	r0, 0x3f	; 63
    2820:	0f 92       	push	r0
    2822:	11 24       	eor	r1, r1
    2824:	2f 93       	push	r18
    2826:	3f 93       	push	r19
    2828:	4f 93       	push	r20
    282a:	5f 93       	push	r21
    282c:	6f 93       	push	r22
    282e:	7f 93       	push	r23
    2830:	8f 93       	push	r24
    2832:	9f 93       	push	r25
    2834:	af 93       	push	r26
    2836:	bf 93       	push	r27
    2838:	ef 93       	push	r30
    283a:	ff 93       	push	r31
    283c:	df 93       	push	r29
    283e:	cf 93       	push	r28
    2840:	cd b7       	in	r28, 0x3d	; 61
    2842:	de b7       	in	r29, 0x3e	; 62
	if (Gptr1 != '\0')
    2844:	80 91 7c 01 	lds	r24, 0x017C
    2848:	90 91 7d 01 	lds	r25, 0x017D
    284c:	00 97       	sbiw	r24, 0x00	; 0
    284e:	29 f0       	breq	.+10     	; 0x285a <__vector_2+0x40>
		Gptr1();
    2850:	e0 91 7c 01 	lds	r30, 0x017C
    2854:	f0 91 7d 01 	lds	r31, 0x017D
    2858:	09 95       	icall
}
    285a:	cf 91       	pop	r28
    285c:	df 91       	pop	r29
    285e:	ff 91       	pop	r31
    2860:	ef 91       	pop	r30
    2862:	bf 91       	pop	r27
    2864:	af 91       	pop	r26
    2866:	9f 91       	pop	r25
    2868:	8f 91       	pop	r24
    286a:	7f 91       	pop	r23
    286c:	6f 91       	pop	r22
    286e:	5f 91       	pop	r21
    2870:	4f 91       	pop	r20
    2872:	3f 91       	pop	r19
    2874:	2f 91       	pop	r18
    2876:	0f 90       	pop	r0
    2878:	0f be       	out	0x3f, r0	; 63
    287a:	0f 90       	pop	r0
    287c:	1f 90       	pop	r1
    287e:	18 95       	reti

00002880 <__vector_3>:
ISR(VECT_INT2) {
    2880:	1f 92       	push	r1
    2882:	0f 92       	push	r0
    2884:	0f b6       	in	r0, 0x3f	; 63
    2886:	0f 92       	push	r0
    2888:	11 24       	eor	r1, r1
    288a:	2f 93       	push	r18
    288c:	3f 93       	push	r19
    288e:	4f 93       	push	r20
    2890:	5f 93       	push	r21
    2892:	6f 93       	push	r22
    2894:	7f 93       	push	r23
    2896:	8f 93       	push	r24
    2898:	9f 93       	push	r25
    289a:	af 93       	push	r26
    289c:	bf 93       	push	r27
    289e:	ef 93       	push	r30
    28a0:	ff 93       	push	r31
    28a2:	df 93       	push	r29
    28a4:	cf 93       	push	r28
    28a6:	cd b7       	in	r28, 0x3d	; 61
    28a8:	de b7       	in	r29, 0x3e	; 62
	if (Gptr2 != '\0')
    28aa:	80 91 7e 01 	lds	r24, 0x017E
    28ae:	90 91 7f 01 	lds	r25, 0x017F
    28b2:	00 97       	sbiw	r24, 0x00	; 0
    28b4:	29 f0       	breq	.+10     	; 0x28c0 <__vector_3+0x40>
		Gptr2();
    28b6:	e0 91 7e 01 	lds	r30, 0x017E
    28ba:	f0 91 7f 01 	lds	r31, 0x017F
    28be:	09 95       	icall
}
    28c0:	cf 91       	pop	r28
    28c2:	df 91       	pop	r29
    28c4:	ff 91       	pop	r31
    28c6:	ef 91       	pop	r30
    28c8:	bf 91       	pop	r27
    28ca:	af 91       	pop	r26
    28cc:	9f 91       	pop	r25
    28ce:	8f 91       	pop	r24
    28d0:	7f 91       	pop	r23
    28d2:	6f 91       	pop	r22
    28d4:	5f 91       	pop	r21
    28d6:	4f 91       	pop	r20
    28d8:	3f 91       	pop	r19
    28da:	2f 91       	pop	r18
    28dc:	0f 90       	pop	r0
    28de:	0f be       	out	0x3f, r0	; 63
    28e0:	0f 90       	pop	r0
    28e2:	1f 90       	pop	r1
    28e4:	18 95       	reti

000028e6 <MCAL_DIO_u8SetPortDirection>:
 *      Author: Mohamed
 */

#include "DIO.h"

STD_Type MCAL_DIO_u8SetPortDirection(u8 Loc_u8PortID, u8 Loc_u8PortDirection) {
    28e6:	df 93       	push	r29
    28e8:	cf 93       	push	r28
    28ea:	00 d0       	rcall	.+0      	; 0x28ec <MCAL_DIO_u8SetPortDirection+0x6>
    28ec:	0f 92       	push	r0
    28ee:	cd b7       	in	r28, 0x3d	; 61
    28f0:	de b7       	in	r29, 0x3e	; 62
    28f2:	8a 83       	std	Y+2, r24	; 0x02
    28f4:	6b 83       	std	Y+3, r22	; 0x03
	u8 Loc_u8Return_Value = E_NOT_OK;
    28f6:	81 e0       	ldi	r24, 0x01	; 1
    28f8:	89 83       	std	Y+1, r24	; 0x01
	if (Loc_u8PortID <= PortD && Loc_u8PortDirection <= PORT_OUTPUT) {
    28fa:	8a 81       	ldd	r24, Y+2	; 0x02
    28fc:	84 30       	cpi	r24, 0x04	; 4
    28fe:	08 f0       	brcs	.+2      	; 0x2902 <MCAL_DIO_u8SetPortDirection+0x1c>
    2900:	6e c0       	rjmp	.+220    	; 0x29de <MCAL_DIO_u8SetPortDirection+0xf8>
		if (Loc_u8PortDirection == PORT_OUTPUT) {
    2902:	8b 81       	ldd	r24, Y+3	; 0x03
    2904:	8f 3f       	cpi	r24, 0xFF	; 255
    2906:	29 f5       	brne	.+74     	; 0x2952 <MCAL_DIO_u8SetPortDirection+0x6c>
			if (Loc_u8PortID == PortA) {
    2908:	8a 81       	ldd	r24, Y+2	; 0x02
    290a:	88 23       	and	r24, r24
    290c:	31 f4       	brne	.+12     	; 0x291a <MCAL_DIO_u8SetPortDirection+0x34>
				DDRA = PORT_OUTPUT;
    290e:	ea e3       	ldi	r30, 0x3A	; 58
    2910:	f0 e0       	ldi	r31, 0x00	; 0
    2912:	8f ef       	ldi	r24, 0xFF	; 255
    2914:	80 83       	st	Z, r24
				Loc_u8Return_Value = E_OK;
    2916:	19 82       	std	Y+1, r1	; 0x01
    2918:	62 c0       	rjmp	.+196    	; 0x29de <MCAL_DIO_u8SetPortDirection+0xf8>
			} else if (Loc_u8PortID == PortB) {
    291a:	8a 81       	ldd	r24, Y+2	; 0x02
    291c:	81 30       	cpi	r24, 0x01	; 1
    291e:	31 f4       	brne	.+12     	; 0x292c <MCAL_DIO_u8SetPortDirection+0x46>
				DDRB = PORT_OUTPUT;
    2920:	e7 e3       	ldi	r30, 0x37	; 55
    2922:	f0 e0       	ldi	r31, 0x00	; 0
    2924:	8f ef       	ldi	r24, 0xFF	; 255
    2926:	80 83       	st	Z, r24
				Loc_u8Return_Value = E_OK;
    2928:	19 82       	std	Y+1, r1	; 0x01
    292a:	59 c0       	rjmp	.+178    	; 0x29de <MCAL_DIO_u8SetPortDirection+0xf8>
			} else if (Loc_u8PortID == PortC) {
    292c:	8a 81       	ldd	r24, Y+2	; 0x02
    292e:	82 30       	cpi	r24, 0x02	; 2
    2930:	31 f4       	brne	.+12     	; 0x293e <MCAL_DIO_u8SetPortDirection+0x58>
				DDRC = PORT_OUTPUT;
    2932:	e4 e3       	ldi	r30, 0x34	; 52
    2934:	f0 e0       	ldi	r31, 0x00	; 0
    2936:	8f ef       	ldi	r24, 0xFF	; 255
    2938:	80 83       	st	Z, r24
				Loc_u8Return_Value = E_OK;
    293a:	19 82       	std	Y+1, r1	; 0x01
    293c:	50 c0       	rjmp	.+160    	; 0x29de <MCAL_DIO_u8SetPortDirection+0xf8>
			} else if (Loc_u8PortID == PortD) {
    293e:	8a 81       	ldd	r24, Y+2	; 0x02
    2940:	83 30       	cpi	r24, 0x03	; 3
    2942:	09 f0       	breq	.+2      	; 0x2946 <MCAL_DIO_u8SetPortDirection+0x60>
    2944:	4c c0       	rjmp	.+152    	; 0x29de <MCAL_DIO_u8SetPortDirection+0xf8>
				DDRD = PORT_OUTPUT;
    2946:	e1 e3       	ldi	r30, 0x31	; 49
    2948:	f0 e0       	ldi	r31, 0x00	; 0
    294a:	8f ef       	ldi	r24, 0xFF	; 255
    294c:	80 83       	st	Z, r24
				Loc_u8Return_Value = E_OK;
    294e:	19 82       	std	Y+1, r1	; 0x01
    2950:	46 c0       	rjmp	.+140    	; 0x29de <MCAL_DIO_u8SetPortDirection+0xf8>
			} else {
				//Do Nothing
			}
		} else if (Loc_u8PortDirection == PORT_INPUT) {
    2952:	8b 81       	ldd	r24, Y+3	; 0x03
    2954:	88 23       	and	r24, r24
    2956:	01 f5       	brne	.+64     	; 0x2998 <MCAL_DIO_u8SetPortDirection+0xb2>
			if (Loc_u8PortID == PortA) {
    2958:	8a 81       	ldd	r24, Y+2	; 0x02
    295a:	88 23       	and	r24, r24
    295c:	29 f4       	brne	.+10     	; 0x2968 <MCAL_DIO_u8SetPortDirection+0x82>
				DDRA = PORT_INPUT;
    295e:	ea e3       	ldi	r30, 0x3A	; 58
    2960:	f0 e0       	ldi	r31, 0x00	; 0
    2962:	10 82       	st	Z, r1
				Loc_u8Return_Value = E_OK;
    2964:	19 82       	std	Y+1, r1	; 0x01
    2966:	3b c0       	rjmp	.+118    	; 0x29de <MCAL_DIO_u8SetPortDirection+0xf8>
			} else if (Loc_u8PortID == PortB) {
    2968:	8a 81       	ldd	r24, Y+2	; 0x02
    296a:	81 30       	cpi	r24, 0x01	; 1
    296c:	29 f4       	brne	.+10     	; 0x2978 <MCAL_DIO_u8SetPortDirection+0x92>
				DDRB = PORT_INPUT;
    296e:	e7 e3       	ldi	r30, 0x37	; 55
    2970:	f0 e0       	ldi	r31, 0x00	; 0
    2972:	10 82       	st	Z, r1
				Loc_u8Return_Value = E_OK;
    2974:	19 82       	std	Y+1, r1	; 0x01
    2976:	33 c0       	rjmp	.+102    	; 0x29de <MCAL_DIO_u8SetPortDirection+0xf8>
			} else if (Loc_u8PortID == PortC) {
    2978:	8a 81       	ldd	r24, Y+2	; 0x02
    297a:	82 30       	cpi	r24, 0x02	; 2
    297c:	29 f4       	brne	.+10     	; 0x2988 <MCAL_DIO_u8SetPortDirection+0xa2>
				DDRC = PORT_INPUT;
    297e:	e4 e3       	ldi	r30, 0x34	; 52
    2980:	f0 e0       	ldi	r31, 0x00	; 0
    2982:	10 82       	st	Z, r1
				Loc_u8Return_Value = E_OK;
    2984:	19 82       	std	Y+1, r1	; 0x01
    2986:	2b c0       	rjmp	.+86     	; 0x29de <MCAL_DIO_u8SetPortDirection+0xf8>
			} else if (Loc_u8PortID == PortD) {
    2988:	8a 81       	ldd	r24, Y+2	; 0x02
    298a:	83 30       	cpi	r24, 0x03	; 3
    298c:	41 f5       	brne	.+80     	; 0x29de <MCAL_DIO_u8SetPortDirection+0xf8>
				DDRD = PORT_INPUT;
    298e:	e1 e3       	ldi	r30, 0x31	; 49
    2990:	f0 e0       	ldi	r31, 0x00	; 0
    2992:	10 82       	st	Z, r1
				Loc_u8Return_Value = E_OK;
    2994:	19 82       	std	Y+1, r1	; 0x01
    2996:	23 c0       	rjmp	.+70     	; 0x29de <MCAL_DIO_u8SetPortDirection+0xf8>
			} else {
				//Do Nothing
			}
		} else {
			if (Loc_u8PortID == PortA) {
    2998:	8a 81       	ldd	r24, Y+2	; 0x02
    299a:	88 23       	and	r24, r24
    299c:	31 f4       	brne	.+12     	; 0x29aa <MCAL_DIO_u8SetPortDirection+0xc4>
				DDRA = Loc_u8PortDirection;
    299e:	ea e3       	ldi	r30, 0x3A	; 58
    29a0:	f0 e0       	ldi	r31, 0x00	; 0
    29a2:	8b 81       	ldd	r24, Y+3	; 0x03
    29a4:	80 83       	st	Z, r24
				Loc_u8Return_Value = E_OK;
    29a6:	19 82       	std	Y+1, r1	; 0x01
    29a8:	1a c0       	rjmp	.+52     	; 0x29de <MCAL_DIO_u8SetPortDirection+0xf8>
			} else if (Loc_u8PortID == PortB) {
    29aa:	8a 81       	ldd	r24, Y+2	; 0x02
    29ac:	81 30       	cpi	r24, 0x01	; 1
    29ae:	31 f4       	brne	.+12     	; 0x29bc <MCAL_DIO_u8SetPortDirection+0xd6>
				DDRB = Loc_u8PortDirection;
    29b0:	e7 e3       	ldi	r30, 0x37	; 55
    29b2:	f0 e0       	ldi	r31, 0x00	; 0
    29b4:	8b 81       	ldd	r24, Y+3	; 0x03
    29b6:	80 83       	st	Z, r24
				Loc_u8Return_Value = E_OK;
    29b8:	19 82       	std	Y+1, r1	; 0x01
    29ba:	11 c0       	rjmp	.+34     	; 0x29de <MCAL_DIO_u8SetPortDirection+0xf8>
			} else if (Loc_u8PortID == PortC) {
    29bc:	8a 81       	ldd	r24, Y+2	; 0x02
    29be:	82 30       	cpi	r24, 0x02	; 2
    29c0:	31 f4       	brne	.+12     	; 0x29ce <MCAL_DIO_u8SetPortDirection+0xe8>
				DDRC = Loc_u8PortDirection;
    29c2:	e4 e3       	ldi	r30, 0x34	; 52
    29c4:	f0 e0       	ldi	r31, 0x00	; 0
    29c6:	8b 81       	ldd	r24, Y+3	; 0x03
    29c8:	80 83       	st	Z, r24
				Loc_u8Return_Value = E_OK;
    29ca:	19 82       	std	Y+1, r1	; 0x01
    29cc:	08 c0       	rjmp	.+16     	; 0x29de <MCAL_DIO_u8SetPortDirection+0xf8>
			} else if (Loc_u8PortID == PortD) {
    29ce:	8a 81       	ldd	r24, Y+2	; 0x02
    29d0:	83 30       	cpi	r24, 0x03	; 3
    29d2:	29 f4       	brne	.+10     	; 0x29de <MCAL_DIO_u8SetPortDirection+0xf8>
				DDRD = Loc_u8PortDirection;
    29d4:	e1 e3       	ldi	r30, 0x31	; 49
    29d6:	f0 e0       	ldi	r31, 0x00	; 0
    29d8:	8b 81       	ldd	r24, Y+3	; 0x03
    29da:	80 83       	st	Z, r24
				Loc_u8Return_Value = E_OK;
    29dc:	19 82       	std	Y+1, r1	; 0x01
			}
		}
	} else {
		//Do Nothing
	}
	return Loc_u8Return_Value;
    29de:	89 81       	ldd	r24, Y+1	; 0x01
}
    29e0:	0f 90       	pop	r0
    29e2:	0f 90       	pop	r0
    29e4:	0f 90       	pop	r0
    29e6:	cf 91       	pop	r28
    29e8:	df 91       	pop	r29
    29ea:	08 95       	ret

000029ec <MCAL_DIO_u8SetPinDirection>:

STD_Type MCAL_DIO_u8SetPinDirection(u8 Loc_u8PortID, u8 Loc_u8PinID,
		u8 Loc_u8PinDirection) {
    29ec:	df 93       	push	r29
    29ee:	cf 93       	push	r28
    29f0:	00 d0       	rcall	.+0      	; 0x29f2 <MCAL_DIO_u8SetPinDirection+0x6>
    29f2:	00 d0       	rcall	.+0      	; 0x29f4 <MCAL_DIO_u8SetPinDirection+0x8>
    29f4:	cd b7       	in	r28, 0x3d	; 61
    29f6:	de b7       	in	r29, 0x3e	; 62
    29f8:	8a 83       	std	Y+2, r24	; 0x02
    29fa:	6b 83       	std	Y+3, r22	; 0x03
    29fc:	4c 83       	std	Y+4, r20	; 0x04
	u8 Loc_u8Return_Value = E_NOT_OK;
    29fe:	81 e0       	ldi	r24, 0x01	; 1
    2a00:	89 83       	std	Y+1, r24	; 0x01
	if (Loc_u8PortID <= PortD && Loc_u8PinID <= Num_Of_Pins
    2a02:	8a 81       	ldd	r24, Y+2	; 0x02
    2a04:	84 30       	cpi	r24, 0x04	; 4
    2a06:	08 f0       	brcs	.+2      	; 0x2a0a <MCAL_DIO_u8SetPinDirection+0x1e>
    2a08:	d4 c0       	rjmp	.+424    	; 0x2bb2 <MCAL_DIO_u8SetPinDirection+0x1c6>
    2a0a:	8b 81       	ldd	r24, Y+3	; 0x03
    2a0c:	88 30       	cpi	r24, 0x08	; 8
    2a0e:	08 f0       	brcs	.+2      	; 0x2a12 <MCAL_DIO_u8SetPinDirection+0x26>
    2a10:	d0 c0       	rjmp	.+416    	; 0x2bb2 <MCAL_DIO_u8SetPinDirection+0x1c6>
    2a12:	8c 81       	ldd	r24, Y+4	; 0x04
    2a14:	82 30       	cpi	r24, 0x02	; 2
    2a16:	08 f0       	brcs	.+2      	; 0x2a1a <MCAL_DIO_u8SetPinDirection+0x2e>
    2a18:	cc c0       	rjmp	.+408    	; 0x2bb2 <MCAL_DIO_u8SetPinDirection+0x1c6>
			&& Loc_u8PinDirection <= Pin_High) {
		if (Loc_u8PinDirection == Pin_High) {
    2a1a:	8c 81       	ldd	r24, Y+4	; 0x04
    2a1c:	81 30       	cpi	r24, 0x01	; 1
    2a1e:	09 f0       	breq	.+2      	; 0x2a22 <MCAL_DIO_u8SetPinDirection+0x36>
    2a20:	61 c0       	rjmp	.+194    	; 0x2ae4 <MCAL_DIO_u8SetPinDirection+0xf8>
			if (Loc_u8PortID == PortA) {
    2a22:	8a 81       	ldd	r24, Y+2	; 0x02
    2a24:	88 23       	and	r24, r24
    2a26:	a9 f4       	brne	.+42     	; 0x2a52 <MCAL_DIO_u8SetPinDirection+0x66>
				SET_BIT(DDRA, Loc_u8PinID);
    2a28:	aa e3       	ldi	r26, 0x3A	; 58
    2a2a:	b0 e0       	ldi	r27, 0x00	; 0
    2a2c:	ea e3       	ldi	r30, 0x3A	; 58
    2a2e:	f0 e0       	ldi	r31, 0x00	; 0
    2a30:	80 81       	ld	r24, Z
    2a32:	48 2f       	mov	r20, r24
    2a34:	8b 81       	ldd	r24, Y+3	; 0x03
    2a36:	28 2f       	mov	r18, r24
    2a38:	30 e0       	ldi	r19, 0x00	; 0
    2a3a:	81 e0       	ldi	r24, 0x01	; 1
    2a3c:	90 e0       	ldi	r25, 0x00	; 0
    2a3e:	02 2e       	mov	r0, r18
    2a40:	02 c0       	rjmp	.+4      	; 0x2a46 <MCAL_DIO_u8SetPinDirection+0x5a>
    2a42:	88 0f       	add	r24, r24
    2a44:	99 1f       	adc	r25, r25
    2a46:	0a 94       	dec	r0
    2a48:	e2 f7       	brpl	.-8      	; 0x2a42 <MCAL_DIO_u8SetPinDirection+0x56>
    2a4a:	84 2b       	or	r24, r20
    2a4c:	8c 93       	st	X, r24
				Loc_u8Return_Value = E_OK;
    2a4e:	19 82       	std	Y+1, r1	; 0x01
    2a50:	b0 c0       	rjmp	.+352    	; 0x2bb2 <MCAL_DIO_u8SetPinDirection+0x1c6>
			} else if (Loc_u8PortID == PortB) {
    2a52:	8a 81       	ldd	r24, Y+2	; 0x02
    2a54:	81 30       	cpi	r24, 0x01	; 1
    2a56:	a9 f4       	brne	.+42     	; 0x2a82 <MCAL_DIO_u8SetPinDirection+0x96>
				SET_BIT(DDRB, Loc_u8PinID);
    2a58:	a7 e3       	ldi	r26, 0x37	; 55
    2a5a:	b0 e0       	ldi	r27, 0x00	; 0
    2a5c:	e7 e3       	ldi	r30, 0x37	; 55
    2a5e:	f0 e0       	ldi	r31, 0x00	; 0
    2a60:	80 81       	ld	r24, Z
    2a62:	48 2f       	mov	r20, r24
    2a64:	8b 81       	ldd	r24, Y+3	; 0x03
    2a66:	28 2f       	mov	r18, r24
    2a68:	30 e0       	ldi	r19, 0x00	; 0
    2a6a:	81 e0       	ldi	r24, 0x01	; 1
    2a6c:	90 e0       	ldi	r25, 0x00	; 0
    2a6e:	02 2e       	mov	r0, r18
    2a70:	02 c0       	rjmp	.+4      	; 0x2a76 <MCAL_DIO_u8SetPinDirection+0x8a>
    2a72:	88 0f       	add	r24, r24
    2a74:	99 1f       	adc	r25, r25
    2a76:	0a 94       	dec	r0
    2a78:	e2 f7       	brpl	.-8      	; 0x2a72 <MCAL_DIO_u8SetPinDirection+0x86>
    2a7a:	84 2b       	or	r24, r20
    2a7c:	8c 93       	st	X, r24
				Loc_u8Return_Value = E_OK;
    2a7e:	19 82       	std	Y+1, r1	; 0x01
    2a80:	98 c0       	rjmp	.+304    	; 0x2bb2 <MCAL_DIO_u8SetPinDirection+0x1c6>
			} else if (Loc_u8PortID == PortC) {
    2a82:	8a 81       	ldd	r24, Y+2	; 0x02
    2a84:	82 30       	cpi	r24, 0x02	; 2
    2a86:	a9 f4       	brne	.+42     	; 0x2ab2 <MCAL_DIO_u8SetPinDirection+0xc6>
				SET_BIT(DDRC, Loc_u8PinID);
    2a88:	a4 e3       	ldi	r26, 0x34	; 52
    2a8a:	b0 e0       	ldi	r27, 0x00	; 0
    2a8c:	e4 e3       	ldi	r30, 0x34	; 52
    2a8e:	f0 e0       	ldi	r31, 0x00	; 0
    2a90:	80 81       	ld	r24, Z
    2a92:	48 2f       	mov	r20, r24
    2a94:	8b 81       	ldd	r24, Y+3	; 0x03
    2a96:	28 2f       	mov	r18, r24
    2a98:	30 e0       	ldi	r19, 0x00	; 0
    2a9a:	81 e0       	ldi	r24, 0x01	; 1
    2a9c:	90 e0       	ldi	r25, 0x00	; 0
    2a9e:	02 2e       	mov	r0, r18
    2aa0:	02 c0       	rjmp	.+4      	; 0x2aa6 <MCAL_DIO_u8SetPinDirection+0xba>
    2aa2:	88 0f       	add	r24, r24
    2aa4:	99 1f       	adc	r25, r25
    2aa6:	0a 94       	dec	r0
    2aa8:	e2 f7       	brpl	.-8      	; 0x2aa2 <MCAL_DIO_u8SetPinDirection+0xb6>
    2aaa:	84 2b       	or	r24, r20
    2aac:	8c 93       	st	X, r24
				Loc_u8Return_Value = E_OK;
    2aae:	19 82       	std	Y+1, r1	; 0x01
    2ab0:	80 c0       	rjmp	.+256    	; 0x2bb2 <MCAL_DIO_u8SetPinDirection+0x1c6>
			} else if (Loc_u8PortID == PortD) {
    2ab2:	8a 81       	ldd	r24, Y+2	; 0x02
    2ab4:	83 30       	cpi	r24, 0x03	; 3
    2ab6:	09 f0       	breq	.+2      	; 0x2aba <MCAL_DIO_u8SetPinDirection+0xce>
    2ab8:	7c c0       	rjmp	.+248    	; 0x2bb2 <MCAL_DIO_u8SetPinDirection+0x1c6>
				SET_BIT(DDRD, Loc_u8PinID);
    2aba:	a1 e3       	ldi	r26, 0x31	; 49
    2abc:	b0 e0       	ldi	r27, 0x00	; 0
    2abe:	e1 e3       	ldi	r30, 0x31	; 49
    2ac0:	f0 e0       	ldi	r31, 0x00	; 0
    2ac2:	80 81       	ld	r24, Z
    2ac4:	48 2f       	mov	r20, r24
    2ac6:	8b 81       	ldd	r24, Y+3	; 0x03
    2ac8:	28 2f       	mov	r18, r24
    2aca:	30 e0       	ldi	r19, 0x00	; 0
    2acc:	81 e0       	ldi	r24, 0x01	; 1
    2ace:	90 e0       	ldi	r25, 0x00	; 0
    2ad0:	02 2e       	mov	r0, r18
    2ad2:	02 c0       	rjmp	.+4      	; 0x2ad8 <MCAL_DIO_u8SetPinDirection+0xec>
    2ad4:	88 0f       	add	r24, r24
    2ad6:	99 1f       	adc	r25, r25
    2ad8:	0a 94       	dec	r0
    2ada:	e2 f7       	brpl	.-8      	; 0x2ad4 <MCAL_DIO_u8SetPinDirection+0xe8>
    2adc:	84 2b       	or	r24, r20
    2ade:	8c 93       	st	X, r24
				Loc_u8Return_Value = E_OK;
    2ae0:	19 82       	std	Y+1, r1	; 0x01
    2ae2:	67 c0       	rjmp	.+206    	; 0x2bb2 <MCAL_DIO_u8SetPinDirection+0x1c6>
			} else {
				//Do Nothing
			}
		} else if (Loc_u8PinDirection == Pin_Low) {
    2ae4:	8c 81       	ldd	r24, Y+4	; 0x04
    2ae6:	88 23       	and	r24, r24
    2ae8:	09 f0       	breq	.+2      	; 0x2aec <MCAL_DIO_u8SetPinDirection+0x100>
    2aea:	63 c0       	rjmp	.+198    	; 0x2bb2 <MCAL_DIO_u8SetPinDirection+0x1c6>
			if (Loc_u8PortID == PortA) {
    2aec:	8a 81       	ldd	r24, Y+2	; 0x02
    2aee:	88 23       	and	r24, r24
    2af0:	b1 f4       	brne	.+44     	; 0x2b1e <MCAL_DIO_u8SetPinDirection+0x132>
				CLR_BIT(DDRA, Loc_u8PinID);
    2af2:	aa e3       	ldi	r26, 0x3A	; 58
    2af4:	b0 e0       	ldi	r27, 0x00	; 0
    2af6:	ea e3       	ldi	r30, 0x3A	; 58
    2af8:	f0 e0       	ldi	r31, 0x00	; 0
    2afa:	80 81       	ld	r24, Z
    2afc:	48 2f       	mov	r20, r24
    2afe:	8b 81       	ldd	r24, Y+3	; 0x03
    2b00:	28 2f       	mov	r18, r24
    2b02:	30 e0       	ldi	r19, 0x00	; 0
    2b04:	81 e0       	ldi	r24, 0x01	; 1
    2b06:	90 e0       	ldi	r25, 0x00	; 0
    2b08:	02 2e       	mov	r0, r18
    2b0a:	02 c0       	rjmp	.+4      	; 0x2b10 <MCAL_DIO_u8SetPinDirection+0x124>
    2b0c:	88 0f       	add	r24, r24
    2b0e:	99 1f       	adc	r25, r25
    2b10:	0a 94       	dec	r0
    2b12:	e2 f7       	brpl	.-8      	; 0x2b0c <MCAL_DIO_u8SetPinDirection+0x120>
    2b14:	80 95       	com	r24
    2b16:	84 23       	and	r24, r20
    2b18:	8c 93       	st	X, r24
				Loc_u8Return_Value = E_OK;
    2b1a:	19 82       	std	Y+1, r1	; 0x01
    2b1c:	4a c0       	rjmp	.+148    	; 0x2bb2 <MCAL_DIO_u8SetPinDirection+0x1c6>
			} else if (Loc_u8PortID == PortB) {
    2b1e:	8a 81       	ldd	r24, Y+2	; 0x02
    2b20:	81 30       	cpi	r24, 0x01	; 1
    2b22:	b1 f4       	brne	.+44     	; 0x2b50 <MCAL_DIO_u8SetPinDirection+0x164>
				CLR_BIT(DDRB, Loc_u8PinID);
    2b24:	a7 e3       	ldi	r26, 0x37	; 55
    2b26:	b0 e0       	ldi	r27, 0x00	; 0
    2b28:	e7 e3       	ldi	r30, 0x37	; 55
    2b2a:	f0 e0       	ldi	r31, 0x00	; 0
    2b2c:	80 81       	ld	r24, Z
    2b2e:	48 2f       	mov	r20, r24
    2b30:	8b 81       	ldd	r24, Y+3	; 0x03
    2b32:	28 2f       	mov	r18, r24
    2b34:	30 e0       	ldi	r19, 0x00	; 0
    2b36:	81 e0       	ldi	r24, 0x01	; 1
    2b38:	90 e0       	ldi	r25, 0x00	; 0
    2b3a:	02 2e       	mov	r0, r18
    2b3c:	02 c0       	rjmp	.+4      	; 0x2b42 <MCAL_DIO_u8SetPinDirection+0x156>
    2b3e:	88 0f       	add	r24, r24
    2b40:	99 1f       	adc	r25, r25
    2b42:	0a 94       	dec	r0
    2b44:	e2 f7       	brpl	.-8      	; 0x2b3e <MCAL_DIO_u8SetPinDirection+0x152>
    2b46:	80 95       	com	r24
    2b48:	84 23       	and	r24, r20
    2b4a:	8c 93       	st	X, r24
				Loc_u8Return_Value = E_OK;
    2b4c:	19 82       	std	Y+1, r1	; 0x01
    2b4e:	31 c0       	rjmp	.+98     	; 0x2bb2 <MCAL_DIO_u8SetPinDirection+0x1c6>
			} else if (Loc_u8PortID == PortC) {
    2b50:	8a 81       	ldd	r24, Y+2	; 0x02
    2b52:	82 30       	cpi	r24, 0x02	; 2
    2b54:	b1 f4       	brne	.+44     	; 0x2b82 <MCAL_DIO_u8SetPinDirection+0x196>
				CLR_BIT(DDRC, Loc_u8PinID);
    2b56:	a4 e3       	ldi	r26, 0x34	; 52
    2b58:	b0 e0       	ldi	r27, 0x00	; 0
    2b5a:	e4 e3       	ldi	r30, 0x34	; 52
    2b5c:	f0 e0       	ldi	r31, 0x00	; 0
    2b5e:	80 81       	ld	r24, Z
    2b60:	48 2f       	mov	r20, r24
    2b62:	8b 81       	ldd	r24, Y+3	; 0x03
    2b64:	28 2f       	mov	r18, r24
    2b66:	30 e0       	ldi	r19, 0x00	; 0
    2b68:	81 e0       	ldi	r24, 0x01	; 1
    2b6a:	90 e0       	ldi	r25, 0x00	; 0
    2b6c:	02 2e       	mov	r0, r18
    2b6e:	02 c0       	rjmp	.+4      	; 0x2b74 <MCAL_DIO_u8SetPinDirection+0x188>
    2b70:	88 0f       	add	r24, r24
    2b72:	99 1f       	adc	r25, r25
    2b74:	0a 94       	dec	r0
    2b76:	e2 f7       	brpl	.-8      	; 0x2b70 <MCAL_DIO_u8SetPinDirection+0x184>
    2b78:	80 95       	com	r24
    2b7a:	84 23       	and	r24, r20
    2b7c:	8c 93       	st	X, r24
				Loc_u8Return_Value = E_OK;
    2b7e:	19 82       	std	Y+1, r1	; 0x01
    2b80:	18 c0       	rjmp	.+48     	; 0x2bb2 <MCAL_DIO_u8SetPinDirection+0x1c6>
			} else if (Loc_u8PortID == PortD) {
    2b82:	8a 81       	ldd	r24, Y+2	; 0x02
    2b84:	83 30       	cpi	r24, 0x03	; 3
    2b86:	a9 f4       	brne	.+42     	; 0x2bb2 <MCAL_DIO_u8SetPinDirection+0x1c6>
				CLR_BIT(DDRD, Loc_u8PinID);
    2b88:	a1 e3       	ldi	r26, 0x31	; 49
    2b8a:	b0 e0       	ldi	r27, 0x00	; 0
    2b8c:	e1 e3       	ldi	r30, 0x31	; 49
    2b8e:	f0 e0       	ldi	r31, 0x00	; 0
    2b90:	80 81       	ld	r24, Z
    2b92:	48 2f       	mov	r20, r24
    2b94:	8b 81       	ldd	r24, Y+3	; 0x03
    2b96:	28 2f       	mov	r18, r24
    2b98:	30 e0       	ldi	r19, 0x00	; 0
    2b9a:	81 e0       	ldi	r24, 0x01	; 1
    2b9c:	90 e0       	ldi	r25, 0x00	; 0
    2b9e:	02 2e       	mov	r0, r18
    2ba0:	02 c0       	rjmp	.+4      	; 0x2ba6 <MCAL_DIO_u8SetPinDirection+0x1ba>
    2ba2:	88 0f       	add	r24, r24
    2ba4:	99 1f       	adc	r25, r25
    2ba6:	0a 94       	dec	r0
    2ba8:	e2 f7       	brpl	.-8      	; 0x2ba2 <MCAL_DIO_u8SetPinDirection+0x1b6>
    2baa:	80 95       	com	r24
    2bac:	84 23       	and	r24, r20
    2bae:	8c 93       	st	X, r24
				Loc_u8Return_Value = E_OK;
    2bb0:	19 82       	std	Y+1, r1	; 0x01
			//Do Nothing
		}
	} else {
		//Do Nothing
	}
	return Loc_u8Return_Value;
    2bb2:	89 81       	ldd	r24, Y+1	; 0x01

}
    2bb4:	0f 90       	pop	r0
    2bb6:	0f 90       	pop	r0
    2bb8:	0f 90       	pop	r0
    2bba:	0f 90       	pop	r0
    2bbc:	cf 91       	pop	r28
    2bbe:	df 91       	pop	r29
    2bc0:	08 95       	ret

00002bc2 <MCAL_DIO_u8SetPortValue>:

STD_Type MCAL_DIO_u8SetPortValue(u8 Loc_u8PortID, u8 Loc_u8PortValue) {
    2bc2:	df 93       	push	r29
    2bc4:	cf 93       	push	r28
    2bc6:	00 d0       	rcall	.+0      	; 0x2bc8 <MCAL_DIO_u8SetPortValue+0x6>
    2bc8:	0f 92       	push	r0
    2bca:	cd b7       	in	r28, 0x3d	; 61
    2bcc:	de b7       	in	r29, 0x3e	; 62
    2bce:	8a 83       	std	Y+2, r24	; 0x02
    2bd0:	6b 83       	std	Y+3, r22	; 0x03
	u8 Loc_u8Return_Value = E_NOT_OK;
    2bd2:	81 e0       	ldi	r24, 0x01	; 1
    2bd4:	89 83       	std	Y+1, r24	; 0x01
	if (Loc_u8PortID <= PortD && Loc_u8PortValue <= PORT_OUTPUT) {
    2bd6:	8a 81       	ldd	r24, Y+2	; 0x02
    2bd8:	84 30       	cpi	r24, 0x04	; 4
    2bda:	08 f0       	brcs	.+2      	; 0x2bde <MCAL_DIO_u8SetPortValue+0x1c>
    2bdc:	6e c0       	rjmp	.+220    	; 0x2cba <MCAL_DIO_u8SetPortValue+0xf8>
		if (Loc_u8PortValue == PORT_OUTPUT) {
    2bde:	8b 81       	ldd	r24, Y+3	; 0x03
    2be0:	8f 3f       	cpi	r24, 0xFF	; 255
    2be2:	29 f5       	brne	.+74     	; 0x2c2e <MCAL_DIO_u8SetPortValue+0x6c>
			if (Loc_u8PortID == PortA) {
    2be4:	8a 81       	ldd	r24, Y+2	; 0x02
    2be6:	88 23       	and	r24, r24
    2be8:	31 f4       	brne	.+12     	; 0x2bf6 <MCAL_DIO_u8SetPortValue+0x34>
				PORTA = PORT_OUTPUT;
    2bea:	eb e3       	ldi	r30, 0x3B	; 59
    2bec:	f0 e0       	ldi	r31, 0x00	; 0
    2bee:	8f ef       	ldi	r24, 0xFF	; 255
    2bf0:	80 83       	st	Z, r24
				Loc_u8Return_Value = E_OK;
    2bf2:	19 82       	std	Y+1, r1	; 0x01
    2bf4:	62 c0       	rjmp	.+196    	; 0x2cba <MCAL_DIO_u8SetPortValue+0xf8>
			} else if (Loc_u8PortID == PortB) {
    2bf6:	8a 81       	ldd	r24, Y+2	; 0x02
    2bf8:	81 30       	cpi	r24, 0x01	; 1
    2bfa:	31 f4       	brne	.+12     	; 0x2c08 <MCAL_DIO_u8SetPortValue+0x46>
				PORTB = PORT_OUTPUT;
    2bfc:	e8 e3       	ldi	r30, 0x38	; 56
    2bfe:	f0 e0       	ldi	r31, 0x00	; 0
    2c00:	8f ef       	ldi	r24, 0xFF	; 255
    2c02:	80 83       	st	Z, r24
				Loc_u8Return_Value = E_OK;
    2c04:	19 82       	std	Y+1, r1	; 0x01
    2c06:	59 c0       	rjmp	.+178    	; 0x2cba <MCAL_DIO_u8SetPortValue+0xf8>
			} else if (Loc_u8PortID == PortC) {
    2c08:	8a 81       	ldd	r24, Y+2	; 0x02
    2c0a:	82 30       	cpi	r24, 0x02	; 2
    2c0c:	31 f4       	brne	.+12     	; 0x2c1a <MCAL_DIO_u8SetPortValue+0x58>
				PORTC = PORT_OUTPUT;
    2c0e:	e5 e3       	ldi	r30, 0x35	; 53
    2c10:	f0 e0       	ldi	r31, 0x00	; 0
    2c12:	8f ef       	ldi	r24, 0xFF	; 255
    2c14:	80 83       	st	Z, r24
				Loc_u8Return_Value = E_OK;
    2c16:	19 82       	std	Y+1, r1	; 0x01
    2c18:	50 c0       	rjmp	.+160    	; 0x2cba <MCAL_DIO_u8SetPortValue+0xf8>
			} else if (Loc_u8PortID == PortD) {
    2c1a:	8a 81       	ldd	r24, Y+2	; 0x02
    2c1c:	83 30       	cpi	r24, 0x03	; 3
    2c1e:	09 f0       	breq	.+2      	; 0x2c22 <MCAL_DIO_u8SetPortValue+0x60>
    2c20:	4c c0       	rjmp	.+152    	; 0x2cba <MCAL_DIO_u8SetPortValue+0xf8>
				PORTD = PORT_OUTPUT;
    2c22:	e2 e3       	ldi	r30, 0x32	; 50
    2c24:	f0 e0       	ldi	r31, 0x00	; 0
    2c26:	8f ef       	ldi	r24, 0xFF	; 255
    2c28:	80 83       	st	Z, r24
				Loc_u8Return_Value = E_OK;
    2c2a:	19 82       	std	Y+1, r1	; 0x01
    2c2c:	46 c0       	rjmp	.+140    	; 0x2cba <MCAL_DIO_u8SetPortValue+0xf8>
			} else {
				//Do Nothing
			}
		} else if (Loc_u8PortValue == PORT_INPUT) {
    2c2e:	8b 81       	ldd	r24, Y+3	; 0x03
    2c30:	88 23       	and	r24, r24
    2c32:	01 f5       	brne	.+64     	; 0x2c74 <MCAL_DIO_u8SetPortValue+0xb2>
			if (Loc_u8PortID == PortA) {
    2c34:	8a 81       	ldd	r24, Y+2	; 0x02
    2c36:	88 23       	and	r24, r24
    2c38:	29 f4       	brne	.+10     	; 0x2c44 <MCAL_DIO_u8SetPortValue+0x82>
				PORTA = PORT_INPUT;
    2c3a:	eb e3       	ldi	r30, 0x3B	; 59
    2c3c:	f0 e0       	ldi	r31, 0x00	; 0
    2c3e:	10 82       	st	Z, r1
				Loc_u8Return_Value = E_OK;
    2c40:	19 82       	std	Y+1, r1	; 0x01
    2c42:	3b c0       	rjmp	.+118    	; 0x2cba <MCAL_DIO_u8SetPortValue+0xf8>
			} else if (Loc_u8PortID == PortB) {
    2c44:	8a 81       	ldd	r24, Y+2	; 0x02
    2c46:	81 30       	cpi	r24, 0x01	; 1
    2c48:	29 f4       	brne	.+10     	; 0x2c54 <MCAL_DIO_u8SetPortValue+0x92>
				PORTB = PORT_INPUT;
    2c4a:	e8 e3       	ldi	r30, 0x38	; 56
    2c4c:	f0 e0       	ldi	r31, 0x00	; 0
    2c4e:	10 82       	st	Z, r1
				Loc_u8Return_Value = E_OK;
    2c50:	19 82       	std	Y+1, r1	; 0x01
    2c52:	33 c0       	rjmp	.+102    	; 0x2cba <MCAL_DIO_u8SetPortValue+0xf8>
			} else if (Loc_u8PortID == PortC) {
    2c54:	8a 81       	ldd	r24, Y+2	; 0x02
    2c56:	82 30       	cpi	r24, 0x02	; 2
    2c58:	29 f4       	brne	.+10     	; 0x2c64 <MCAL_DIO_u8SetPortValue+0xa2>
				PORTC = PORT_INPUT;
    2c5a:	e5 e3       	ldi	r30, 0x35	; 53
    2c5c:	f0 e0       	ldi	r31, 0x00	; 0
    2c5e:	10 82       	st	Z, r1
				Loc_u8Return_Value = E_OK;
    2c60:	19 82       	std	Y+1, r1	; 0x01
    2c62:	2b c0       	rjmp	.+86     	; 0x2cba <MCAL_DIO_u8SetPortValue+0xf8>
			} else if (Loc_u8PortID == PortD) {
    2c64:	8a 81       	ldd	r24, Y+2	; 0x02
    2c66:	83 30       	cpi	r24, 0x03	; 3
    2c68:	41 f5       	brne	.+80     	; 0x2cba <MCAL_DIO_u8SetPortValue+0xf8>
				PORTD = PORT_INPUT;
    2c6a:	e2 e3       	ldi	r30, 0x32	; 50
    2c6c:	f0 e0       	ldi	r31, 0x00	; 0
    2c6e:	10 82       	st	Z, r1
				Loc_u8Return_Value = E_OK;
    2c70:	19 82       	std	Y+1, r1	; 0x01
    2c72:	23 c0       	rjmp	.+70     	; 0x2cba <MCAL_DIO_u8SetPortValue+0xf8>
			} else {
				//Do Nothing
			}
		} else {
			if (Loc_u8PortID == PortA) {
    2c74:	8a 81       	ldd	r24, Y+2	; 0x02
    2c76:	88 23       	and	r24, r24
    2c78:	31 f4       	brne	.+12     	; 0x2c86 <MCAL_DIO_u8SetPortValue+0xc4>
				PORTA = Loc_u8PortValue;
    2c7a:	eb e3       	ldi	r30, 0x3B	; 59
    2c7c:	f0 e0       	ldi	r31, 0x00	; 0
    2c7e:	8b 81       	ldd	r24, Y+3	; 0x03
    2c80:	80 83       	st	Z, r24
				Loc_u8Return_Value = E_OK;
    2c82:	19 82       	std	Y+1, r1	; 0x01
    2c84:	1a c0       	rjmp	.+52     	; 0x2cba <MCAL_DIO_u8SetPortValue+0xf8>
			} else if (Loc_u8PortID == PortB) {
    2c86:	8a 81       	ldd	r24, Y+2	; 0x02
    2c88:	81 30       	cpi	r24, 0x01	; 1
    2c8a:	31 f4       	brne	.+12     	; 0x2c98 <MCAL_DIO_u8SetPortValue+0xd6>
				PORTB = Loc_u8PortValue;
    2c8c:	e8 e3       	ldi	r30, 0x38	; 56
    2c8e:	f0 e0       	ldi	r31, 0x00	; 0
    2c90:	8b 81       	ldd	r24, Y+3	; 0x03
    2c92:	80 83       	st	Z, r24
				Loc_u8Return_Value = E_OK;
    2c94:	19 82       	std	Y+1, r1	; 0x01
    2c96:	11 c0       	rjmp	.+34     	; 0x2cba <MCAL_DIO_u8SetPortValue+0xf8>
			} else if (Loc_u8PortID == PortC) {
    2c98:	8a 81       	ldd	r24, Y+2	; 0x02
    2c9a:	82 30       	cpi	r24, 0x02	; 2
    2c9c:	31 f4       	brne	.+12     	; 0x2caa <MCAL_DIO_u8SetPortValue+0xe8>
				PORTC = Loc_u8PortValue;
    2c9e:	e5 e3       	ldi	r30, 0x35	; 53
    2ca0:	f0 e0       	ldi	r31, 0x00	; 0
    2ca2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ca4:	80 83       	st	Z, r24
				Loc_u8Return_Value = E_OK;
    2ca6:	19 82       	std	Y+1, r1	; 0x01
    2ca8:	08 c0       	rjmp	.+16     	; 0x2cba <MCAL_DIO_u8SetPortValue+0xf8>
			} else if (Loc_u8PortID == PortD) {
    2caa:	8a 81       	ldd	r24, Y+2	; 0x02
    2cac:	83 30       	cpi	r24, 0x03	; 3
    2cae:	29 f4       	brne	.+10     	; 0x2cba <MCAL_DIO_u8SetPortValue+0xf8>
				PORTD = Loc_u8PortValue;
    2cb0:	e2 e3       	ldi	r30, 0x32	; 50
    2cb2:	f0 e0       	ldi	r31, 0x00	; 0
    2cb4:	8b 81       	ldd	r24, Y+3	; 0x03
    2cb6:	80 83       	st	Z, r24
				Loc_u8Return_Value = E_OK;
    2cb8:	19 82       	std	Y+1, r1	; 0x01
			}
		}
	} else {
		//Do Nothing
	}
	return Loc_u8Return_Value;
    2cba:	89 81       	ldd	r24, Y+1	; 0x01
}
    2cbc:	0f 90       	pop	r0
    2cbe:	0f 90       	pop	r0
    2cc0:	0f 90       	pop	r0
    2cc2:	cf 91       	pop	r28
    2cc4:	df 91       	pop	r29
    2cc6:	08 95       	ret

00002cc8 <MCAL_DIO_u8SetPinValue>:

STD_Type MCAL_DIO_u8SetPinValue(u8 Loc_u8PortID, u8 Loc_u8PinID,
		u8 Loc_u8PinValue) {
    2cc8:	df 93       	push	r29
    2cca:	cf 93       	push	r28
    2ccc:	00 d0       	rcall	.+0      	; 0x2cce <MCAL_DIO_u8SetPinValue+0x6>
    2cce:	00 d0       	rcall	.+0      	; 0x2cd0 <MCAL_DIO_u8SetPinValue+0x8>
    2cd0:	cd b7       	in	r28, 0x3d	; 61
    2cd2:	de b7       	in	r29, 0x3e	; 62
    2cd4:	8a 83       	std	Y+2, r24	; 0x02
    2cd6:	6b 83       	std	Y+3, r22	; 0x03
    2cd8:	4c 83       	std	Y+4, r20	; 0x04
	u8 Loc_u8Return_Value = E_NOT_OK;
    2cda:	81 e0       	ldi	r24, 0x01	; 1
    2cdc:	89 83       	std	Y+1, r24	; 0x01
	if (Loc_u8PortID <= PortD && Loc_u8PinID <= Num_Of_Pins
    2cde:	8a 81       	ldd	r24, Y+2	; 0x02
    2ce0:	84 30       	cpi	r24, 0x04	; 4
    2ce2:	08 f0       	brcs	.+2      	; 0x2ce6 <MCAL_DIO_u8SetPinValue+0x1e>
    2ce4:	d4 c0       	rjmp	.+424    	; 0x2e8e <MCAL_DIO_u8SetPinValue+0x1c6>
    2ce6:	8b 81       	ldd	r24, Y+3	; 0x03
    2ce8:	88 30       	cpi	r24, 0x08	; 8
    2cea:	08 f0       	brcs	.+2      	; 0x2cee <MCAL_DIO_u8SetPinValue+0x26>
    2cec:	d0 c0       	rjmp	.+416    	; 0x2e8e <MCAL_DIO_u8SetPinValue+0x1c6>
    2cee:	8c 81       	ldd	r24, Y+4	; 0x04
    2cf0:	82 30       	cpi	r24, 0x02	; 2
    2cf2:	08 f0       	brcs	.+2      	; 0x2cf6 <MCAL_DIO_u8SetPinValue+0x2e>
    2cf4:	cc c0       	rjmp	.+408    	; 0x2e8e <MCAL_DIO_u8SetPinValue+0x1c6>
			&& Loc_u8PinValue <= Pin_High) {
		if (Loc_u8PinValue == Pin_High) {
    2cf6:	8c 81       	ldd	r24, Y+4	; 0x04
    2cf8:	81 30       	cpi	r24, 0x01	; 1
    2cfa:	09 f0       	breq	.+2      	; 0x2cfe <MCAL_DIO_u8SetPinValue+0x36>
    2cfc:	61 c0       	rjmp	.+194    	; 0x2dc0 <MCAL_DIO_u8SetPinValue+0xf8>
			if (Loc_u8PortID == PortA) {
    2cfe:	8a 81       	ldd	r24, Y+2	; 0x02
    2d00:	88 23       	and	r24, r24
    2d02:	a9 f4       	brne	.+42     	; 0x2d2e <MCAL_DIO_u8SetPinValue+0x66>
				SET_BIT(PORTA, Loc_u8PinID);
    2d04:	ab e3       	ldi	r26, 0x3B	; 59
    2d06:	b0 e0       	ldi	r27, 0x00	; 0
    2d08:	eb e3       	ldi	r30, 0x3B	; 59
    2d0a:	f0 e0       	ldi	r31, 0x00	; 0
    2d0c:	80 81       	ld	r24, Z
    2d0e:	48 2f       	mov	r20, r24
    2d10:	8b 81       	ldd	r24, Y+3	; 0x03
    2d12:	28 2f       	mov	r18, r24
    2d14:	30 e0       	ldi	r19, 0x00	; 0
    2d16:	81 e0       	ldi	r24, 0x01	; 1
    2d18:	90 e0       	ldi	r25, 0x00	; 0
    2d1a:	02 2e       	mov	r0, r18
    2d1c:	02 c0       	rjmp	.+4      	; 0x2d22 <MCAL_DIO_u8SetPinValue+0x5a>
    2d1e:	88 0f       	add	r24, r24
    2d20:	99 1f       	adc	r25, r25
    2d22:	0a 94       	dec	r0
    2d24:	e2 f7       	brpl	.-8      	; 0x2d1e <MCAL_DIO_u8SetPinValue+0x56>
    2d26:	84 2b       	or	r24, r20
    2d28:	8c 93       	st	X, r24
				Loc_u8Return_Value = E_OK;
    2d2a:	19 82       	std	Y+1, r1	; 0x01
    2d2c:	b0 c0       	rjmp	.+352    	; 0x2e8e <MCAL_DIO_u8SetPinValue+0x1c6>
			} else if (Loc_u8PortID == PortB) {
    2d2e:	8a 81       	ldd	r24, Y+2	; 0x02
    2d30:	81 30       	cpi	r24, 0x01	; 1
    2d32:	a9 f4       	brne	.+42     	; 0x2d5e <MCAL_DIO_u8SetPinValue+0x96>
				SET_BIT(PORTB, Loc_u8PinID);
    2d34:	a8 e3       	ldi	r26, 0x38	; 56
    2d36:	b0 e0       	ldi	r27, 0x00	; 0
    2d38:	e8 e3       	ldi	r30, 0x38	; 56
    2d3a:	f0 e0       	ldi	r31, 0x00	; 0
    2d3c:	80 81       	ld	r24, Z
    2d3e:	48 2f       	mov	r20, r24
    2d40:	8b 81       	ldd	r24, Y+3	; 0x03
    2d42:	28 2f       	mov	r18, r24
    2d44:	30 e0       	ldi	r19, 0x00	; 0
    2d46:	81 e0       	ldi	r24, 0x01	; 1
    2d48:	90 e0       	ldi	r25, 0x00	; 0
    2d4a:	02 2e       	mov	r0, r18
    2d4c:	02 c0       	rjmp	.+4      	; 0x2d52 <MCAL_DIO_u8SetPinValue+0x8a>
    2d4e:	88 0f       	add	r24, r24
    2d50:	99 1f       	adc	r25, r25
    2d52:	0a 94       	dec	r0
    2d54:	e2 f7       	brpl	.-8      	; 0x2d4e <MCAL_DIO_u8SetPinValue+0x86>
    2d56:	84 2b       	or	r24, r20
    2d58:	8c 93       	st	X, r24
				Loc_u8Return_Value = E_OK;
    2d5a:	19 82       	std	Y+1, r1	; 0x01
    2d5c:	98 c0       	rjmp	.+304    	; 0x2e8e <MCAL_DIO_u8SetPinValue+0x1c6>
			} else if (Loc_u8PortID == PortC) {
    2d5e:	8a 81       	ldd	r24, Y+2	; 0x02
    2d60:	82 30       	cpi	r24, 0x02	; 2
    2d62:	a9 f4       	brne	.+42     	; 0x2d8e <MCAL_DIO_u8SetPinValue+0xc6>
				SET_BIT(PORTC, Loc_u8PinID);
    2d64:	a5 e3       	ldi	r26, 0x35	; 53
    2d66:	b0 e0       	ldi	r27, 0x00	; 0
    2d68:	e5 e3       	ldi	r30, 0x35	; 53
    2d6a:	f0 e0       	ldi	r31, 0x00	; 0
    2d6c:	80 81       	ld	r24, Z
    2d6e:	48 2f       	mov	r20, r24
    2d70:	8b 81       	ldd	r24, Y+3	; 0x03
    2d72:	28 2f       	mov	r18, r24
    2d74:	30 e0       	ldi	r19, 0x00	; 0
    2d76:	81 e0       	ldi	r24, 0x01	; 1
    2d78:	90 e0       	ldi	r25, 0x00	; 0
    2d7a:	02 2e       	mov	r0, r18
    2d7c:	02 c0       	rjmp	.+4      	; 0x2d82 <MCAL_DIO_u8SetPinValue+0xba>
    2d7e:	88 0f       	add	r24, r24
    2d80:	99 1f       	adc	r25, r25
    2d82:	0a 94       	dec	r0
    2d84:	e2 f7       	brpl	.-8      	; 0x2d7e <MCAL_DIO_u8SetPinValue+0xb6>
    2d86:	84 2b       	or	r24, r20
    2d88:	8c 93       	st	X, r24
				Loc_u8Return_Value = E_OK;
    2d8a:	19 82       	std	Y+1, r1	; 0x01
    2d8c:	80 c0       	rjmp	.+256    	; 0x2e8e <MCAL_DIO_u8SetPinValue+0x1c6>
			} else if (Loc_u8PortID == PortD) {
    2d8e:	8a 81       	ldd	r24, Y+2	; 0x02
    2d90:	83 30       	cpi	r24, 0x03	; 3
    2d92:	09 f0       	breq	.+2      	; 0x2d96 <MCAL_DIO_u8SetPinValue+0xce>
    2d94:	7c c0       	rjmp	.+248    	; 0x2e8e <MCAL_DIO_u8SetPinValue+0x1c6>
				SET_BIT(PORTD, Loc_u8PinID);
    2d96:	a2 e3       	ldi	r26, 0x32	; 50
    2d98:	b0 e0       	ldi	r27, 0x00	; 0
    2d9a:	e2 e3       	ldi	r30, 0x32	; 50
    2d9c:	f0 e0       	ldi	r31, 0x00	; 0
    2d9e:	80 81       	ld	r24, Z
    2da0:	48 2f       	mov	r20, r24
    2da2:	8b 81       	ldd	r24, Y+3	; 0x03
    2da4:	28 2f       	mov	r18, r24
    2da6:	30 e0       	ldi	r19, 0x00	; 0
    2da8:	81 e0       	ldi	r24, 0x01	; 1
    2daa:	90 e0       	ldi	r25, 0x00	; 0
    2dac:	02 2e       	mov	r0, r18
    2dae:	02 c0       	rjmp	.+4      	; 0x2db4 <MCAL_DIO_u8SetPinValue+0xec>
    2db0:	88 0f       	add	r24, r24
    2db2:	99 1f       	adc	r25, r25
    2db4:	0a 94       	dec	r0
    2db6:	e2 f7       	brpl	.-8      	; 0x2db0 <MCAL_DIO_u8SetPinValue+0xe8>
    2db8:	84 2b       	or	r24, r20
    2dba:	8c 93       	st	X, r24
				Loc_u8Return_Value = E_OK;
    2dbc:	19 82       	std	Y+1, r1	; 0x01
    2dbe:	67 c0       	rjmp	.+206    	; 0x2e8e <MCAL_DIO_u8SetPinValue+0x1c6>
			} else {
				//Do Nothing
			}
		} else if (Loc_u8PinValue == Pin_Low) {
    2dc0:	8c 81       	ldd	r24, Y+4	; 0x04
    2dc2:	88 23       	and	r24, r24
    2dc4:	09 f0       	breq	.+2      	; 0x2dc8 <MCAL_DIO_u8SetPinValue+0x100>
    2dc6:	63 c0       	rjmp	.+198    	; 0x2e8e <MCAL_DIO_u8SetPinValue+0x1c6>
			if (Loc_u8PortID == PortA) {
    2dc8:	8a 81       	ldd	r24, Y+2	; 0x02
    2dca:	88 23       	and	r24, r24
    2dcc:	b1 f4       	brne	.+44     	; 0x2dfa <MCAL_DIO_u8SetPinValue+0x132>
				CLR_BIT(PORTA, Loc_u8PinID);
    2dce:	ab e3       	ldi	r26, 0x3B	; 59
    2dd0:	b0 e0       	ldi	r27, 0x00	; 0
    2dd2:	eb e3       	ldi	r30, 0x3B	; 59
    2dd4:	f0 e0       	ldi	r31, 0x00	; 0
    2dd6:	80 81       	ld	r24, Z
    2dd8:	48 2f       	mov	r20, r24
    2dda:	8b 81       	ldd	r24, Y+3	; 0x03
    2ddc:	28 2f       	mov	r18, r24
    2dde:	30 e0       	ldi	r19, 0x00	; 0
    2de0:	81 e0       	ldi	r24, 0x01	; 1
    2de2:	90 e0       	ldi	r25, 0x00	; 0
    2de4:	02 2e       	mov	r0, r18
    2de6:	02 c0       	rjmp	.+4      	; 0x2dec <MCAL_DIO_u8SetPinValue+0x124>
    2de8:	88 0f       	add	r24, r24
    2dea:	99 1f       	adc	r25, r25
    2dec:	0a 94       	dec	r0
    2dee:	e2 f7       	brpl	.-8      	; 0x2de8 <MCAL_DIO_u8SetPinValue+0x120>
    2df0:	80 95       	com	r24
    2df2:	84 23       	and	r24, r20
    2df4:	8c 93       	st	X, r24
				Loc_u8Return_Value = E_OK;
    2df6:	19 82       	std	Y+1, r1	; 0x01
    2df8:	4a c0       	rjmp	.+148    	; 0x2e8e <MCAL_DIO_u8SetPinValue+0x1c6>
			} else if (Loc_u8PortID == PortB) {
    2dfa:	8a 81       	ldd	r24, Y+2	; 0x02
    2dfc:	81 30       	cpi	r24, 0x01	; 1
    2dfe:	b1 f4       	brne	.+44     	; 0x2e2c <MCAL_DIO_u8SetPinValue+0x164>
				CLR_BIT(PORTB, Loc_u8PinID);
    2e00:	a8 e3       	ldi	r26, 0x38	; 56
    2e02:	b0 e0       	ldi	r27, 0x00	; 0
    2e04:	e8 e3       	ldi	r30, 0x38	; 56
    2e06:	f0 e0       	ldi	r31, 0x00	; 0
    2e08:	80 81       	ld	r24, Z
    2e0a:	48 2f       	mov	r20, r24
    2e0c:	8b 81       	ldd	r24, Y+3	; 0x03
    2e0e:	28 2f       	mov	r18, r24
    2e10:	30 e0       	ldi	r19, 0x00	; 0
    2e12:	81 e0       	ldi	r24, 0x01	; 1
    2e14:	90 e0       	ldi	r25, 0x00	; 0
    2e16:	02 2e       	mov	r0, r18
    2e18:	02 c0       	rjmp	.+4      	; 0x2e1e <MCAL_DIO_u8SetPinValue+0x156>
    2e1a:	88 0f       	add	r24, r24
    2e1c:	99 1f       	adc	r25, r25
    2e1e:	0a 94       	dec	r0
    2e20:	e2 f7       	brpl	.-8      	; 0x2e1a <MCAL_DIO_u8SetPinValue+0x152>
    2e22:	80 95       	com	r24
    2e24:	84 23       	and	r24, r20
    2e26:	8c 93       	st	X, r24
				Loc_u8Return_Value = E_OK;
    2e28:	19 82       	std	Y+1, r1	; 0x01
    2e2a:	31 c0       	rjmp	.+98     	; 0x2e8e <MCAL_DIO_u8SetPinValue+0x1c6>
			} else if (Loc_u8PortID == PortC) {
    2e2c:	8a 81       	ldd	r24, Y+2	; 0x02
    2e2e:	82 30       	cpi	r24, 0x02	; 2
    2e30:	b1 f4       	brne	.+44     	; 0x2e5e <MCAL_DIO_u8SetPinValue+0x196>
				CLR_BIT(PORTC, Loc_u8PinID);
    2e32:	a5 e3       	ldi	r26, 0x35	; 53
    2e34:	b0 e0       	ldi	r27, 0x00	; 0
    2e36:	e5 e3       	ldi	r30, 0x35	; 53
    2e38:	f0 e0       	ldi	r31, 0x00	; 0
    2e3a:	80 81       	ld	r24, Z
    2e3c:	48 2f       	mov	r20, r24
    2e3e:	8b 81       	ldd	r24, Y+3	; 0x03
    2e40:	28 2f       	mov	r18, r24
    2e42:	30 e0       	ldi	r19, 0x00	; 0
    2e44:	81 e0       	ldi	r24, 0x01	; 1
    2e46:	90 e0       	ldi	r25, 0x00	; 0
    2e48:	02 2e       	mov	r0, r18
    2e4a:	02 c0       	rjmp	.+4      	; 0x2e50 <MCAL_DIO_u8SetPinValue+0x188>
    2e4c:	88 0f       	add	r24, r24
    2e4e:	99 1f       	adc	r25, r25
    2e50:	0a 94       	dec	r0
    2e52:	e2 f7       	brpl	.-8      	; 0x2e4c <MCAL_DIO_u8SetPinValue+0x184>
    2e54:	80 95       	com	r24
    2e56:	84 23       	and	r24, r20
    2e58:	8c 93       	st	X, r24
				Loc_u8Return_Value = E_OK;
    2e5a:	19 82       	std	Y+1, r1	; 0x01
    2e5c:	18 c0       	rjmp	.+48     	; 0x2e8e <MCAL_DIO_u8SetPinValue+0x1c6>
			} else if (Loc_u8PortID == PortD) {
    2e5e:	8a 81       	ldd	r24, Y+2	; 0x02
    2e60:	83 30       	cpi	r24, 0x03	; 3
    2e62:	a9 f4       	brne	.+42     	; 0x2e8e <MCAL_DIO_u8SetPinValue+0x1c6>
				CLR_BIT(PORTD, Loc_u8PinID);
    2e64:	a2 e3       	ldi	r26, 0x32	; 50
    2e66:	b0 e0       	ldi	r27, 0x00	; 0
    2e68:	e2 e3       	ldi	r30, 0x32	; 50
    2e6a:	f0 e0       	ldi	r31, 0x00	; 0
    2e6c:	80 81       	ld	r24, Z
    2e6e:	48 2f       	mov	r20, r24
    2e70:	8b 81       	ldd	r24, Y+3	; 0x03
    2e72:	28 2f       	mov	r18, r24
    2e74:	30 e0       	ldi	r19, 0x00	; 0
    2e76:	81 e0       	ldi	r24, 0x01	; 1
    2e78:	90 e0       	ldi	r25, 0x00	; 0
    2e7a:	02 2e       	mov	r0, r18
    2e7c:	02 c0       	rjmp	.+4      	; 0x2e82 <MCAL_DIO_u8SetPinValue+0x1ba>
    2e7e:	88 0f       	add	r24, r24
    2e80:	99 1f       	adc	r25, r25
    2e82:	0a 94       	dec	r0
    2e84:	e2 f7       	brpl	.-8      	; 0x2e7e <MCAL_DIO_u8SetPinValue+0x1b6>
    2e86:	80 95       	com	r24
    2e88:	84 23       	and	r24, r20
    2e8a:	8c 93       	st	X, r24
				Loc_u8Return_Value = E_OK;
    2e8c:	19 82       	std	Y+1, r1	; 0x01
			//Do Nothing
		}
	} else {
		//Do Nothing
	}
	return Loc_u8Return_Value;
    2e8e:	89 81       	ldd	r24, Y+1	; 0x01

}
    2e90:	0f 90       	pop	r0
    2e92:	0f 90       	pop	r0
    2e94:	0f 90       	pop	r0
    2e96:	0f 90       	pop	r0
    2e98:	cf 91       	pop	r28
    2e9a:	df 91       	pop	r29
    2e9c:	08 95       	ret

00002e9e <MCAL_DIO_u8SGetPortValue>:

STD_Type MCAL_DIO_u8SGetPortValue(u8 Loc_u8PortID, u8* Loc_u8PortValue) {
    2e9e:	df 93       	push	r29
    2ea0:	cf 93       	push	r28
    2ea2:	00 d0       	rcall	.+0      	; 0x2ea4 <MCAL_DIO_u8SGetPortValue+0x6>
    2ea4:	00 d0       	rcall	.+0      	; 0x2ea6 <MCAL_DIO_u8SGetPortValue+0x8>
    2ea6:	cd b7       	in	r28, 0x3d	; 61
    2ea8:	de b7       	in	r29, 0x3e	; 62
    2eaa:	8a 83       	std	Y+2, r24	; 0x02
    2eac:	7c 83       	std	Y+4, r23	; 0x04
    2eae:	6b 83       	std	Y+3, r22	; 0x03
	u8 Loc_u8Return_Value = E_NOT_OK;
    2eb0:	81 e0       	ldi	r24, 0x01	; 1
    2eb2:	89 83       	std	Y+1, r24	; 0x01
	if (Loc_u8PortID <= PortD) {
    2eb4:	8a 81       	ldd	r24, Y+2	; 0x02
    2eb6:	84 30       	cpi	r24, 0x04	; 4
    2eb8:	58 f5       	brcc	.+86     	; 0x2f10 <MCAL_DIO_u8SGetPortValue+0x72>
		if (Loc_u8PortID == PortA) {
    2eba:	8a 81       	ldd	r24, Y+2	; 0x02
    2ebc:	88 23       	and	r24, r24
    2ebe:	41 f4       	brne	.+16     	; 0x2ed0 <MCAL_DIO_u8SGetPortValue+0x32>
			*Loc_u8PortValue = PORTA;
    2ec0:	eb e3       	ldi	r30, 0x3B	; 59
    2ec2:	f0 e0       	ldi	r31, 0x00	; 0
    2ec4:	80 81       	ld	r24, Z
    2ec6:	eb 81       	ldd	r30, Y+3	; 0x03
    2ec8:	fc 81       	ldd	r31, Y+4	; 0x04
    2eca:	80 83       	st	Z, r24
			Loc_u8Return_Value = E_OK;
    2ecc:	19 82       	std	Y+1, r1	; 0x01
    2ece:	20 c0       	rjmp	.+64     	; 0x2f10 <MCAL_DIO_u8SGetPortValue+0x72>
		} else if (Loc_u8PortID == PortB) {
    2ed0:	8a 81       	ldd	r24, Y+2	; 0x02
    2ed2:	81 30       	cpi	r24, 0x01	; 1
    2ed4:	41 f4       	brne	.+16     	; 0x2ee6 <MCAL_DIO_u8SGetPortValue+0x48>
			*Loc_u8PortValue = PORTB;
    2ed6:	e8 e3       	ldi	r30, 0x38	; 56
    2ed8:	f0 e0       	ldi	r31, 0x00	; 0
    2eda:	80 81       	ld	r24, Z
    2edc:	eb 81       	ldd	r30, Y+3	; 0x03
    2ede:	fc 81       	ldd	r31, Y+4	; 0x04
    2ee0:	80 83       	st	Z, r24
			Loc_u8Return_Value = E_OK;
    2ee2:	19 82       	std	Y+1, r1	; 0x01
    2ee4:	15 c0       	rjmp	.+42     	; 0x2f10 <MCAL_DIO_u8SGetPortValue+0x72>
		} else if (Loc_u8PortID == PortC) {
    2ee6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ee8:	82 30       	cpi	r24, 0x02	; 2
    2eea:	41 f4       	brne	.+16     	; 0x2efc <MCAL_DIO_u8SGetPortValue+0x5e>
			*Loc_u8PortValue = PORTC;
    2eec:	e5 e3       	ldi	r30, 0x35	; 53
    2eee:	f0 e0       	ldi	r31, 0x00	; 0
    2ef0:	80 81       	ld	r24, Z
    2ef2:	eb 81       	ldd	r30, Y+3	; 0x03
    2ef4:	fc 81       	ldd	r31, Y+4	; 0x04
    2ef6:	80 83       	st	Z, r24
			Loc_u8Return_Value = E_OK;
    2ef8:	19 82       	std	Y+1, r1	; 0x01
    2efa:	0a c0       	rjmp	.+20     	; 0x2f10 <MCAL_DIO_u8SGetPortValue+0x72>
		} else if (Loc_u8PortID == PortD) {
    2efc:	8a 81       	ldd	r24, Y+2	; 0x02
    2efe:	83 30       	cpi	r24, 0x03	; 3
    2f00:	39 f4       	brne	.+14     	; 0x2f10 <MCAL_DIO_u8SGetPortValue+0x72>
			*Loc_u8PortValue = PORTD;
    2f02:	e2 e3       	ldi	r30, 0x32	; 50
    2f04:	f0 e0       	ldi	r31, 0x00	; 0
    2f06:	80 81       	ld	r24, Z
    2f08:	eb 81       	ldd	r30, Y+3	; 0x03
    2f0a:	fc 81       	ldd	r31, Y+4	; 0x04
    2f0c:	80 83       	st	Z, r24
			Loc_u8Return_Value = E_OK;
    2f0e:	19 82       	std	Y+1, r1	; 0x01
			//Do Nothing
		}
	} else {
		//Do Nothing
	}
	return Loc_u8Return_Value;
    2f10:	89 81       	ldd	r24, Y+1	; 0x01
}
    2f12:	0f 90       	pop	r0
    2f14:	0f 90       	pop	r0
    2f16:	0f 90       	pop	r0
    2f18:	0f 90       	pop	r0
    2f1a:	cf 91       	pop	r28
    2f1c:	df 91       	pop	r29
    2f1e:	08 95       	ret

00002f20 <MCAL_DIO_u8GetPinValue>:

STD_Type MCAL_DIO_u8GetPinValue(u8 Loc_u8PortID, u8 Loc_u8PinID,
		u8* Loc_u8PinValue) {
    2f20:	df 93       	push	r29
    2f22:	cf 93       	push	r28
    2f24:	00 d0       	rcall	.+0      	; 0x2f26 <MCAL_DIO_u8GetPinValue+0x6>
    2f26:	00 d0       	rcall	.+0      	; 0x2f28 <MCAL_DIO_u8GetPinValue+0x8>
    2f28:	0f 92       	push	r0
    2f2a:	cd b7       	in	r28, 0x3d	; 61
    2f2c:	de b7       	in	r29, 0x3e	; 62
    2f2e:	8a 83       	std	Y+2, r24	; 0x02
    2f30:	6b 83       	std	Y+3, r22	; 0x03
    2f32:	5d 83       	std	Y+5, r21	; 0x05
    2f34:	4c 83       	std	Y+4, r20	; 0x04
	u8 Loc_u8Return_Value = E_NOT_OK;
    2f36:	81 e0       	ldi	r24, 0x01	; 1
    2f38:	89 83       	std	Y+1, r24	; 0x01
	if (Loc_u8PortID <= PortD && Loc_u8PinID <= Num_Of_Pins) {
    2f3a:	8a 81       	ldd	r24, Y+2	; 0x02
    2f3c:	84 30       	cpi	r24, 0x04	; 4
    2f3e:	08 f0       	brcs	.+2      	; 0x2f42 <MCAL_DIO_u8GetPinValue+0x22>
    2f40:	63 c0       	rjmp	.+198    	; 0x3008 <MCAL_DIO_u8GetPinValue+0xe8>
    2f42:	8b 81       	ldd	r24, Y+3	; 0x03
    2f44:	88 30       	cpi	r24, 0x08	; 8
    2f46:	08 f0       	brcs	.+2      	; 0x2f4a <MCAL_DIO_u8GetPinValue+0x2a>
    2f48:	5f c0       	rjmp	.+190    	; 0x3008 <MCAL_DIO_u8GetPinValue+0xe8>
		if (Loc_u8PortID == PortA) {
    2f4a:	8a 81       	ldd	r24, Y+2	; 0x02
    2f4c:	88 23       	and	r24, r24
    2f4e:	a9 f4       	brne	.+42     	; 0x2f7a <MCAL_DIO_u8GetPinValue+0x5a>
			*Loc_u8PinValue = GET_BIT(PINA, Loc_u8PinID);
    2f50:	e9 e3       	ldi	r30, 0x39	; 57
    2f52:	f0 e0       	ldi	r31, 0x00	; 0
    2f54:	80 81       	ld	r24, Z
    2f56:	28 2f       	mov	r18, r24
    2f58:	30 e0       	ldi	r19, 0x00	; 0
    2f5a:	8b 81       	ldd	r24, Y+3	; 0x03
    2f5c:	88 2f       	mov	r24, r24
    2f5e:	90 e0       	ldi	r25, 0x00	; 0
    2f60:	a9 01       	movw	r20, r18
    2f62:	02 c0       	rjmp	.+4      	; 0x2f68 <MCAL_DIO_u8GetPinValue+0x48>
    2f64:	55 95       	asr	r21
    2f66:	47 95       	ror	r20
    2f68:	8a 95       	dec	r24
    2f6a:	e2 f7       	brpl	.-8      	; 0x2f64 <MCAL_DIO_u8GetPinValue+0x44>
    2f6c:	ca 01       	movw	r24, r20
    2f6e:	81 70       	andi	r24, 0x01	; 1
    2f70:	ec 81       	ldd	r30, Y+4	; 0x04
    2f72:	fd 81       	ldd	r31, Y+5	; 0x05
    2f74:	80 83       	st	Z, r24
			Loc_u8Return_Value = E_OK;
    2f76:	19 82       	std	Y+1, r1	; 0x01
    2f78:	47 c0       	rjmp	.+142    	; 0x3008 <MCAL_DIO_u8GetPinValue+0xe8>
		} else if (Loc_u8PortID == PortB) {
    2f7a:	8a 81       	ldd	r24, Y+2	; 0x02
    2f7c:	81 30       	cpi	r24, 0x01	; 1
    2f7e:	a9 f4       	brne	.+42     	; 0x2faa <MCAL_DIO_u8GetPinValue+0x8a>
			*Loc_u8PinValue = GET_BIT(PINB, Loc_u8PinID);
    2f80:	e6 e3       	ldi	r30, 0x36	; 54
    2f82:	f0 e0       	ldi	r31, 0x00	; 0
    2f84:	80 81       	ld	r24, Z
    2f86:	28 2f       	mov	r18, r24
    2f88:	30 e0       	ldi	r19, 0x00	; 0
    2f8a:	8b 81       	ldd	r24, Y+3	; 0x03
    2f8c:	88 2f       	mov	r24, r24
    2f8e:	90 e0       	ldi	r25, 0x00	; 0
    2f90:	a9 01       	movw	r20, r18
    2f92:	02 c0       	rjmp	.+4      	; 0x2f98 <MCAL_DIO_u8GetPinValue+0x78>
    2f94:	55 95       	asr	r21
    2f96:	47 95       	ror	r20
    2f98:	8a 95       	dec	r24
    2f9a:	e2 f7       	brpl	.-8      	; 0x2f94 <MCAL_DIO_u8GetPinValue+0x74>
    2f9c:	ca 01       	movw	r24, r20
    2f9e:	81 70       	andi	r24, 0x01	; 1
    2fa0:	ec 81       	ldd	r30, Y+4	; 0x04
    2fa2:	fd 81       	ldd	r31, Y+5	; 0x05
    2fa4:	80 83       	st	Z, r24
			Loc_u8Return_Value = E_OK;
    2fa6:	19 82       	std	Y+1, r1	; 0x01
    2fa8:	2f c0       	rjmp	.+94     	; 0x3008 <MCAL_DIO_u8GetPinValue+0xe8>
		} else if (Loc_u8PortID == PortC) {
    2faa:	8a 81       	ldd	r24, Y+2	; 0x02
    2fac:	82 30       	cpi	r24, 0x02	; 2
    2fae:	a9 f4       	brne	.+42     	; 0x2fda <MCAL_DIO_u8GetPinValue+0xba>
			*Loc_u8PinValue = GET_BIT(PINC, Loc_u8PinID);
    2fb0:	e3 e3       	ldi	r30, 0x33	; 51
    2fb2:	f0 e0       	ldi	r31, 0x00	; 0
    2fb4:	80 81       	ld	r24, Z
    2fb6:	28 2f       	mov	r18, r24
    2fb8:	30 e0       	ldi	r19, 0x00	; 0
    2fba:	8b 81       	ldd	r24, Y+3	; 0x03
    2fbc:	88 2f       	mov	r24, r24
    2fbe:	90 e0       	ldi	r25, 0x00	; 0
    2fc0:	a9 01       	movw	r20, r18
    2fc2:	02 c0       	rjmp	.+4      	; 0x2fc8 <MCAL_DIO_u8GetPinValue+0xa8>
    2fc4:	55 95       	asr	r21
    2fc6:	47 95       	ror	r20
    2fc8:	8a 95       	dec	r24
    2fca:	e2 f7       	brpl	.-8      	; 0x2fc4 <MCAL_DIO_u8GetPinValue+0xa4>
    2fcc:	ca 01       	movw	r24, r20
    2fce:	81 70       	andi	r24, 0x01	; 1
    2fd0:	ec 81       	ldd	r30, Y+4	; 0x04
    2fd2:	fd 81       	ldd	r31, Y+5	; 0x05
    2fd4:	80 83       	st	Z, r24
			Loc_u8Return_Value = E_OK;
    2fd6:	19 82       	std	Y+1, r1	; 0x01
    2fd8:	17 c0       	rjmp	.+46     	; 0x3008 <MCAL_DIO_u8GetPinValue+0xe8>
		} else if (Loc_u8PortID == PortD) {
    2fda:	8a 81       	ldd	r24, Y+2	; 0x02
    2fdc:	83 30       	cpi	r24, 0x03	; 3
    2fde:	a1 f4       	brne	.+40     	; 0x3008 <MCAL_DIO_u8GetPinValue+0xe8>
			*Loc_u8PinValue = GET_BIT(PIND, Loc_u8PinID);
    2fe0:	e0 e3       	ldi	r30, 0x30	; 48
    2fe2:	f0 e0       	ldi	r31, 0x00	; 0
    2fe4:	80 81       	ld	r24, Z
    2fe6:	28 2f       	mov	r18, r24
    2fe8:	30 e0       	ldi	r19, 0x00	; 0
    2fea:	8b 81       	ldd	r24, Y+3	; 0x03
    2fec:	88 2f       	mov	r24, r24
    2fee:	90 e0       	ldi	r25, 0x00	; 0
    2ff0:	a9 01       	movw	r20, r18
    2ff2:	02 c0       	rjmp	.+4      	; 0x2ff8 <MCAL_DIO_u8GetPinValue+0xd8>
    2ff4:	55 95       	asr	r21
    2ff6:	47 95       	ror	r20
    2ff8:	8a 95       	dec	r24
    2ffa:	e2 f7       	brpl	.-8      	; 0x2ff4 <MCAL_DIO_u8GetPinValue+0xd4>
    2ffc:	ca 01       	movw	r24, r20
    2ffe:	81 70       	andi	r24, 0x01	; 1
    3000:	ec 81       	ldd	r30, Y+4	; 0x04
    3002:	fd 81       	ldd	r31, Y+5	; 0x05
    3004:	80 83       	st	Z, r24
			Loc_u8Return_Value = E_OK;
    3006:	19 82       	std	Y+1, r1	; 0x01
			//Do Nothing
		}
	} else {
		//Do Nothing
	}
	return Loc_u8Return_Value;
    3008:	89 81       	ldd	r24, Y+1	; 0x01
}
    300a:	0f 90       	pop	r0
    300c:	0f 90       	pop	r0
    300e:	0f 90       	pop	r0
    3010:	0f 90       	pop	r0
    3012:	0f 90       	pop	r0
    3014:	cf 91       	pop	r28
    3016:	df 91       	pop	r29
    3018:	08 95       	ret

0000301a <MCAL_DIO_u8TogglePortValue>:

STD_Type MCAL_DIO_u8TogglePortValue(u8 Loc_u8PortID) {
    301a:	df 93       	push	r29
    301c:	cf 93       	push	r28
    301e:	00 d0       	rcall	.+0      	; 0x3020 <MCAL_DIO_u8TogglePortValue+0x6>
    3020:	cd b7       	in	r28, 0x3d	; 61
    3022:	de b7       	in	r29, 0x3e	; 62
    3024:	8a 83       	std	Y+2, r24	; 0x02
	u8 Loc_u8Return_Value = E_NOT_OK;
    3026:	81 e0       	ldi	r24, 0x01	; 1
    3028:	89 83       	std	Y+1, r24	; 0x01
	if (Loc_u8PortID <= PortD) {
    302a:	8a 81       	ldd	r24, Y+2	; 0x02
    302c:	84 30       	cpi	r24, 0x04	; 4
    302e:	78 f5       	brcc	.+94     	; 0x308e <MCAL_DIO_u8TogglePortValue+0x74>
		if (Loc_u8PortID == PortA) {
    3030:	8a 81       	ldd	r24, Y+2	; 0x02
    3032:	88 23       	and	r24, r24
    3034:	49 f4       	brne	.+18     	; 0x3048 <MCAL_DIO_u8TogglePortValue+0x2e>
			PORTA = ~PORTA;
    3036:	ab e3       	ldi	r26, 0x3B	; 59
    3038:	b0 e0       	ldi	r27, 0x00	; 0
    303a:	eb e3       	ldi	r30, 0x3B	; 59
    303c:	f0 e0       	ldi	r31, 0x00	; 0
    303e:	80 81       	ld	r24, Z
    3040:	80 95       	com	r24
    3042:	8c 93       	st	X, r24
			Loc_u8Return_Value = E_OK;
    3044:	19 82       	std	Y+1, r1	; 0x01
    3046:	23 c0       	rjmp	.+70     	; 0x308e <MCAL_DIO_u8TogglePortValue+0x74>
		} else if (Loc_u8PortID == PortB) {
    3048:	8a 81       	ldd	r24, Y+2	; 0x02
    304a:	81 30       	cpi	r24, 0x01	; 1
    304c:	49 f4       	brne	.+18     	; 0x3060 <MCAL_DIO_u8TogglePortValue+0x46>
			PORTB = ~PORTB;
    304e:	a8 e3       	ldi	r26, 0x38	; 56
    3050:	b0 e0       	ldi	r27, 0x00	; 0
    3052:	e8 e3       	ldi	r30, 0x38	; 56
    3054:	f0 e0       	ldi	r31, 0x00	; 0
    3056:	80 81       	ld	r24, Z
    3058:	80 95       	com	r24
    305a:	8c 93       	st	X, r24
			Loc_u8Return_Value = E_OK;
    305c:	19 82       	std	Y+1, r1	; 0x01
    305e:	17 c0       	rjmp	.+46     	; 0x308e <MCAL_DIO_u8TogglePortValue+0x74>
		} else if (Loc_u8PortID == PortC) {
    3060:	8a 81       	ldd	r24, Y+2	; 0x02
    3062:	82 30       	cpi	r24, 0x02	; 2
    3064:	49 f4       	brne	.+18     	; 0x3078 <MCAL_DIO_u8TogglePortValue+0x5e>
			PORTC = ~PORTC;
    3066:	a5 e3       	ldi	r26, 0x35	; 53
    3068:	b0 e0       	ldi	r27, 0x00	; 0
    306a:	e5 e3       	ldi	r30, 0x35	; 53
    306c:	f0 e0       	ldi	r31, 0x00	; 0
    306e:	80 81       	ld	r24, Z
    3070:	80 95       	com	r24
    3072:	8c 93       	st	X, r24
			Loc_u8Return_Value = E_OK;
    3074:	19 82       	std	Y+1, r1	; 0x01
    3076:	0b c0       	rjmp	.+22     	; 0x308e <MCAL_DIO_u8TogglePortValue+0x74>
		} else if (Loc_u8PortID == PortD) {
    3078:	8a 81       	ldd	r24, Y+2	; 0x02
    307a:	83 30       	cpi	r24, 0x03	; 3
    307c:	41 f4       	brne	.+16     	; 0x308e <MCAL_DIO_u8TogglePortValue+0x74>
			PORTD = ~PORTD;
    307e:	a2 e3       	ldi	r26, 0x32	; 50
    3080:	b0 e0       	ldi	r27, 0x00	; 0
    3082:	e2 e3       	ldi	r30, 0x32	; 50
    3084:	f0 e0       	ldi	r31, 0x00	; 0
    3086:	80 81       	ld	r24, Z
    3088:	80 95       	com	r24
    308a:	8c 93       	st	X, r24
			Loc_u8Return_Value = E_OK;
    308c:	19 82       	std	Y+1, r1	; 0x01
			//Do Nothing
		}
	} else {
		//Do Nothing
	}
	return Loc_u8Return_Value;
    308e:	89 81       	ldd	r24, Y+1	; 0x01
}
    3090:	0f 90       	pop	r0
    3092:	0f 90       	pop	r0
    3094:	cf 91       	pop	r28
    3096:	df 91       	pop	r29
    3098:	08 95       	ret

0000309a <MCAL_DIO_u8TogglePinValue>:

STD_Type MCAL_DIO_u8TogglePinValue(u8 Loc_u8PortID, u8 Loc_u8PinID) {
    309a:	df 93       	push	r29
    309c:	cf 93       	push	r28
    309e:	00 d0       	rcall	.+0      	; 0x30a0 <MCAL_DIO_u8TogglePinValue+0x6>
    30a0:	0f 92       	push	r0
    30a2:	cd b7       	in	r28, 0x3d	; 61
    30a4:	de b7       	in	r29, 0x3e	; 62
    30a6:	8a 83       	std	Y+2, r24	; 0x02
    30a8:	6b 83       	std	Y+3, r22	; 0x03
	u8 Loc_u8Return_Value = E_NOT_OK;
    30aa:	81 e0       	ldi	r24, 0x01	; 1
    30ac:	89 83       	std	Y+1, r24	; 0x01
	if (Loc_u8PortID <= PortD && Loc_u8PinID <= Num_Of_Pins) {
    30ae:	8a 81       	ldd	r24, Y+2	; 0x02
    30b0:	84 30       	cpi	r24, 0x04	; 4
    30b2:	08 f0       	brcs	.+2      	; 0x30b6 <MCAL_DIO_u8TogglePinValue+0x1c>
    30b4:	63 c0       	rjmp	.+198    	; 0x317c <MCAL_DIO_u8TogglePinValue+0xe2>
    30b6:	8b 81       	ldd	r24, Y+3	; 0x03
    30b8:	88 30       	cpi	r24, 0x08	; 8
    30ba:	08 f0       	brcs	.+2      	; 0x30be <MCAL_DIO_u8TogglePinValue+0x24>
    30bc:	5f c0       	rjmp	.+190    	; 0x317c <MCAL_DIO_u8TogglePinValue+0xe2>
		if (Loc_u8PortID == PortA) {
    30be:	8a 81       	ldd	r24, Y+2	; 0x02
    30c0:	88 23       	and	r24, r24
    30c2:	a9 f4       	brne	.+42     	; 0x30ee <MCAL_DIO_u8TogglePinValue+0x54>
			TOGGLE_BIT(PORTA, Loc_u8PinID);
    30c4:	ab e3       	ldi	r26, 0x3B	; 59
    30c6:	b0 e0       	ldi	r27, 0x00	; 0
    30c8:	eb e3       	ldi	r30, 0x3B	; 59
    30ca:	f0 e0       	ldi	r31, 0x00	; 0
    30cc:	80 81       	ld	r24, Z
    30ce:	48 2f       	mov	r20, r24
    30d0:	8b 81       	ldd	r24, Y+3	; 0x03
    30d2:	28 2f       	mov	r18, r24
    30d4:	30 e0       	ldi	r19, 0x00	; 0
    30d6:	81 e0       	ldi	r24, 0x01	; 1
    30d8:	90 e0       	ldi	r25, 0x00	; 0
    30da:	02 2e       	mov	r0, r18
    30dc:	02 c0       	rjmp	.+4      	; 0x30e2 <MCAL_DIO_u8TogglePinValue+0x48>
    30de:	88 0f       	add	r24, r24
    30e0:	99 1f       	adc	r25, r25
    30e2:	0a 94       	dec	r0
    30e4:	e2 f7       	brpl	.-8      	; 0x30de <MCAL_DIO_u8TogglePinValue+0x44>
    30e6:	84 27       	eor	r24, r20
    30e8:	8c 93       	st	X, r24
			Loc_u8Return_Value = E_OK;
    30ea:	19 82       	std	Y+1, r1	; 0x01
    30ec:	47 c0       	rjmp	.+142    	; 0x317c <MCAL_DIO_u8TogglePinValue+0xe2>
		} else if (Loc_u8PortID == PortB) {
    30ee:	8a 81       	ldd	r24, Y+2	; 0x02
    30f0:	81 30       	cpi	r24, 0x01	; 1
    30f2:	a9 f4       	brne	.+42     	; 0x311e <MCAL_DIO_u8TogglePinValue+0x84>
			TOGGLE_BIT(PORTB, Loc_u8PinID);
    30f4:	a8 e3       	ldi	r26, 0x38	; 56
    30f6:	b0 e0       	ldi	r27, 0x00	; 0
    30f8:	e8 e3       	ldi	r30, 0x38	; 56
    30fa:	f0 e0       	ldi	r31, 0x00	; 0
    30fc:	80 81       	ld	r24, Z
    30fe:	48 2f       	mov	r20, r24
    3100:	8b 81       	ldd	r24, Y+3	; 0x03
    3102:	28 2f       	mov	r18, r24
    3104:	30 e0       	ldi	r19, 0x00	; 0
    3106:	81 e0       	ldi	r24, 0x01	; 1
    3108:	90 e0       	ldi	r25, 0x00	; 0
    310a:	02 2e       	mov	r0, r18
    310c:	02 c0       	rjmp	.+4      	; 0x3112 <MCAL_DIO_u8TogglePinValue+0x78>
    310e:	88 0f       	add	r24, r24
    3110:	99 1f       	adc	r25, r25
    3112:	0a 94       	dec	r0
    3114:	e2 f7       	brpl	.-8      	; 0x310e <MCAL_DIO_u8TogglePinValue+0x74>
    3116:	84 27       	eor	r24, r20
    3118:	8c 93       	st	X, r24
			Loc_u8Return_Value = E_OK;
    311a:	19 82       	std	Y+1, r1	; 0x01
    311c:	2f c0       	rjmp	.+94     	; 0x317c <MCAL_DIO_u8TogglePinValue+0xe2>
		} else if (Loc_u8PortID == PortC) {
    311e:	8a 81       	ldd	r24, Y+2	; 0x02
    3120:	82 30       	cpi	r24, 0x02	; 2
    3122:	a9 f4       	brne	.+42     	; 0x314e <MCAL_DIO_u8TogglePinValue+0xb4>
			TOGGLE_BIT(PORTC, Loc_u8PinID);
    3124:	a5 e3       	ldi	r26, 0x35	; 53
    3126:	b0 e0       	ldi	r27, 0x00	; 0
    3128:	e5 e3       	ldi	r30, 0x35	; 53
    312a:	f0 e0       	ldi	r31, 0x00	; 0
    312c:	80 81       	ld	r24, Z
    312e:	48 2f       	mov	r20, r24
    3130:	8b 81       	ldd	r24, Y+3	; 0x03
    3132:	28 2f       	mov	r18, r24
    3134:	30 e0       	ldi	r19, 0x00	; 0
    3136:	81 e0       	ldi	r24, 0x01	; 1
    3138:	90 e0       	ldi	r25, 0x00	; 0
    313a:	02 2e       	mov	r0, r18
    313c:	02 c0       	rjmp	.+4      	; 0x3142 <MCAL_DIO_u8TogglePinValue+0xa8>
    313e:	88 0f       	add	r24, r24
    3140:	99 1f       	adc	r25, r25
    3142:	0a 94       	dec	r0
    3144:	e2 f7       	brpl	.-8      	; 0x313e <MCAL_DIO_u8TogglePinValue+0xa4>
    3146:	84 27       	eor	r24, r20
    3148:	8c 93       	st	X, r24
			Loc_u8Return_Value = E_OK;
    314a:	19 82       	std	Y+1, r1	; 0x01
    314c:	17 c0       	rjmp	.+46     	; 0x317c <MCAL_DIO_u8TogglePinValue+0xe2>
		} else if (Loc_u8PortID == PortD) {
    314e:	8a 81       	ldd	r24, Y+2	; 0x02
    3150:	83 30       	cpi	r24, 0x03	; 3
    3152:	a1 f4       	brne	.+40     	; 0x317c <MCAL_DIO_u8TogglePinValue+0xe2>
			TOGGLE_BIT(PORTD, Loc_u8PinID);
    3154:	a2 e3       	ldi	r26, 0x32	; 50
    3156:	b0 e0       	ldi	r27, 0x00	; 0
    3158:	e2 e3       	ldi	r30, 0x32	; 50
    315a:	f0 e0       	ldi	r31, 0x00	; 0
    315c:	80 81       	ld	r24, Z
    315e:	48 2f       	mov	r20, r24
    3160:	8b 81       	ldd	r24, Y+3	; 0x03
    3162:	28 2f       	mov	r18, r24
    3164:	30 e0       	ldi	r19, 0x00	; 0
    3166:	81 e0       	ldi	r24, 0x01	; 1
    3168:	90 e0       	ldi	r25, 0x00	; 0
    316a:	02 2e       	mov	r0, r18
    316c:	02 c0       	rjmp	.+4      	; 0x3172 <MCAL_DIO_u8TogglePinValue+0xd8>
    316e:	88 0f       	add	r24, r24
    3170:	99 1f       	adc	r25, r25
    3172:	0a 94       	dec	r0
    3174:	e2 f7       	brpl	.-8      	; 0x316e <MCAL_DIO_u8TogglePinValue+0xd4>
    3176:	84 27       	eor	r24, r20
    3178:	8c 93       	st	X, r24
			Loc_u8Return_Value = E_OK;
    317a:	19 82       	std	Y+1, r1	; 0x01
			//Do Nothing
		}
	} else {
		//Do Nothing
	}
	return Loc_u8Return_Value;
    317c:	89 81       	ldd	r24, Y+1	; 0x01
}
    317e:	0f 90       	pop	r0
    3180:	0f 90       	pop	r0
    3182:	0f 90       	pop	r0
    3184:	cf 91       	pop	r28
    3186:	df 91       	pop	r29
    3188:	08 95       	ret

0000318a <MCAL_ADC_u8SetRegister>:

#include "ADC.h"

void (*Gptr_ADC)(void)= '\0' ;

void MCAL_ADC_u8SetRegister(u8 Loc_u8PortID, u8 Loc_u8PortValue) {
    318a:	df 93       	push	r29
    318c:	cf 93       	push	r28
    318e:	00 d0       	rcall	.+0      	; 0x3190 <MCAL_ADC_u8SetRegister+0x6>
    3190:	cd b7       	in	r28, 0x3d	; 61
    3192:	de b7       	in	r29, 0x3e	; 62
    3194:	89 83       	std	Y+1, r24	; 0x01
    3196:	6a 83       	std	Y+2, r22	; 0x02
	if (Loc_u8PortValue == PORT_OUTPUT) {
    3198:	8a 81       	ldd	r24, Y+2	; 0x02
    319a:	8f 3f       	cpi	r24, 0xFF	; 255
    319c:	c1 f4       	brne	.+48     	; 0x31ce <MCAL_ADC_u8SetRegister+0x44>
		if (Loc_u8PortID == Admux) {
    319e:	89 81       	ldd	r24, Y+1	; 0x01
    31a0:	88 23       	and	r24, r24
    31a2:	29 f4       	brne	.+10     	; 0x31ae <MCAL_ADC_u8SetRegister+0x24>
			ADMUX = PORT_OUTPUT;
    31a4:	e7 e2       	ldi	r30, 0x27	; 39
    31a6:	f0 e0       	ldi	r31, 0x00	; 0
    31a8:	8f ef       	ldi	r24, 0xFF	; 255
    31aa:	80 83       	st	Z, r24
    31ac:	3f c0       	rjmp	.+126    	; 0x322c <MCAL_ADC_u8SetRegister+0xa2>
		} else if (Loc_u8PortID == Adcsra) {
    31ae:	89 81       	ldd	r24, Y+1	; 0x01
    31b0:	81 30       	cpi	r24, 0x01	; 1
    31b2:	29 f4       	brne	.+10     	; 0x31be <MCAL_ADC_u8SetRegister+0x34>
			ADCSRA = PORT_OUTPUT;
    31b4:	e6 e2       	ldi	r30, 0x26	; 38
    31b6:	f0 e0       	ldi	r31, 0x00	; 0
    31b8:	8f ef       	ldi	r24, 0xFF	; 255
    31ba:	80 83       	st	Z, r24
    31bc:	37 c0       	rjmp	.+110    	; 0x322c <MCAL_ADC_u8SetRegister+0xa2>
		} else if (Loc_u8PortID == Sfior) {
    31be:	89 81       	ldd	r24, Y+1	; 0x01
    31c0:	82 30       	cpi	r24, 0x02	; 2
    31c2:	a1 f5       	brne	.+104    	; 0x322c <MCAL_ADC_u8SetRegister+0xa2>
			SFIOR = PORT_OUTPUT;
    31c4:	e0 e5       	ldi	r30, 0x50	; 80
    31c6:	f0 e0       	ldi	r31, 0x00	; 0
    31c8:	8f ef       	ldi	r24, 0xFF	; 255
    31ca:	80 83       	st	Z, r24
    31cc:	2f c0       	rjmp	.+94     	; 0x322c <MCAL_ADC_u8SetRegister+0xa2>
		} else {
			//Do Nothing
		}
	} else if (Loc_u8PortValue == PORT_INPUT) {
    31ce:	8a 81       	ldd	r24, Y+2	; 0x02
    31d0:	88 23       	and	r24, r24
    31d2:	a9 f4       	brne	.+42     	; 0x31fe <MCAL_ADC_u8SetRegister+0x74>
		if (Loc_u8PortID == Admux) {
    31d4:	89 81       	ldd	r24, Y+1	; 0x01
    31d6:	88 23       	and	r24, r24
    31d8:	21 f4       	brne	.+8      	; 0x31e2 <MCAL_ADC_u8SetRegister+0x58>
			ADMUX = PORT_INPUT;
    31da:	e7 e2       	ldi	r30, 0x27	; 39
    31dc:	f0 e0       	ldi	r31, 0x00	; 0
    31de:	10 82       	st	Z, r1
    31e0:	25 c0       	rjmp	.+74     	; 0x322c <MCAL_ADC_u8SetRegister+0xa2>
		} else if (Loc_u8PortID == Adcsra) {
    31e2:	89 81       	ldd	r24, Y+1	; 0x01
    31e4:	81 30       	cpi	r24, 0x01	; 1
    31e6:	21 f4       	brne	.+8      	; 0x31f0 <MCAL_ADC_u8SetRegister+0x66>
			ADCSRA = PORT_INPUT;
    31e8:	e6 e2       	ldi	r30, 0x26	; 38
    31ea:	f0 e0       	ldi	r31, 0x00	; 0
    31ec:	10 82       	st	Z, r1
    31ee:	1e c0       	rjmp	.+60     	; 0x322c <MCAL_ADC_u8SetRegister+0xa2>
		} else if (Loc_u8PortID == Sfior) {
    31f0:	89 81       	ldd	r24, Y+1	; 0x01
    31f2:	82 30       	cpi	r24, 0x02	; 2
    31f4:	d9 f4       	brne	.+54     	; 0x322c <MCAL_ADC_u8SetRegister+0xa2>
			SFIOR = PORT_INPUT;
    31f6:	e0 e5       	ldi	r30, 0x50	; 80
    31f8:	f0 e0       	ldi	r31, 0x00	; 0
    31fa:	10 82       	st	Z, r1
    31fc:	17 c0       	rjmp	.+46     	; 0x322c <MCAL_ADC_u8SetRegister+0xa2>
		} else {
			//Do Nothing
		}
	} else {
		if (Loc_u8PortID == Admux) {
    31fe:	89 81       	ldd	r24, Y+1	; 0x01
    3200:	88 23       	and	r24, r24
    3202:	29 f4       	brne	.+10     	; 0x320e <MCAL_ADC_u8SetRegister+0x84>
			ADMUX = Loc_u8PortValue;
    3204:	e7 e2       	ldi	r30, 0x27	; 39
    3206:	f0 e0       	ldi	r31, 0x00	; 0
    3208:	8a 81       	ldd	r24, Y+2	; 0x02
    320a:	80 83       	st	Z, r24
    320c:	0f c0       	rjmp	.+30     	; 0x322c <MCAL_ADC_u8SetRegister+0xa2>
		} else if (Loc_u8PortID == Adcsra) {
    320e:	89 81       	ldd	r24, Y+1	; 0x01
    3210:	81 30       	cpi	r24, 0x01	; 1
    3212:	29 f4       	brne	.+10     	; 0x321e <MCAL_ADC_u8SetRegister+0x94>
			ADCSRA = Loc_u8PortValue;
    3214:	e6 e2       	ldi	r30, 0x26	; 38
    3216:	f0 e0       	ldi	r31, 0x00	; 0
    3218:	8a 81       	ldd	r24, Y+2	; 0x02
    321a:	80 83       	st	Z, r24
    321c:	07 c0       	rjmp	.+14     	; 0x322c <MCAL_ADC_u8SetRegister+0xa2>
		} else if (Loc_u8PortID == Sfior) {
    321e:	89 81       	ldd	r24, Y+1	; 0x01
    3220:	82 30       	cpi	r24, 0x02	; 2
    3222:	21 f4       	brne	.+8      	; 0x322c <MCAL_ADC_u8SetRegister+0xa2>
			SFIOR = Loc_u8PortValue;
    3224:	e0 e5       	ldi	r30, 0x50	; 80
    3226:	f0 e0       	ldi	r31, 0x00	; 0
    3228:	8a 81       	ldd	r24, Y+2	; 0x02
    322a:	80 83       	st	Z, r24
		}
	}
}
    322c:	0f 90       	pop	r0
    322e:	0f 90       	pop	r0
    3230:	cf 91       	pop	r28
    3232:	df 91       	pop	r29
    3234:	08 95       	ret

00003236 <MCAL_ADC_u8SetRegisterPin>:

void MCAL_ADC_u8SetRegisterPin(u8 Loc_u8PortID, u8 Loc_u8PinID,
		u8 Loc_u8PinValue) {
    3236:	df 93       	push	r29
    3238:	cf 93       	push	r28
    323a:	00 d0       	rcall	.+0      	; 0x323c <MCAL_ADC_u8SetRegisterPin+0x6>
    323c:	0f 92       	push	r0
    323e:	cd b7       	in	r28, 0x3d	; 61
    3240:	de b7       	in	r29, 0x3e	; 62
    3242:	89 83       	std	Y+1, r24	; 0x01
    3244:	6a 83       	std	Y+2, r22	; 0x02
    3246:	4b 83       	std	Y+3, r20	; 0x03
	if (Loc_u8PinValue == Pin_High) {
    3248:	8b 81       	ldd	r24, Y+3	; 0x03
    324a:	81 30       	cpi	r24, 0x01	; 1
    324c:	09 f0       	breq	.+2      	; 0x3250 <MCAL_ADC_u8SetRegisterPin+0x1a>
    324e:	46 c0       	rjmp	.+140    	; 0x32dc <MCAL_ADC_u8SetRegisterPin+0xa6>
		if (Loc_u8PortID == Admux) {
    3250:	89 81       	ldd	r24, Y+1	; 0x01
    3252:	88 23       	and	r24, r24
    3254:	a1 f4       	brne	.+40     	; 0x327e <MCAL_ADC_u8SetRegisterPin+0x48>
			SET_BIT(ADMUX, Loc_u8PinID);
    3256:	a7 e2       	ldi	r26, 0x27	; 39
    3258:	b0 e0       	ldi	r27, 0x00	; 0
    325a:	e7 e2       	ldi	r30, 0x27	; 39
    325c:	f0 e0       	ldi	r31, 0x00	; 0
    325e:	80 81       	ld	r24, Z
    3260:	48 2f       	mov	r20, r24
    3262:	8a 81       	ldd	r24, Y+2	; 0x02
    3264:	28 2f       	mov	r18, r24
    3266:	30 e0       	ldi	r19, 0x00	; 0
    3268:	81 e0       	ldi	r24, 0x01	; 1
    326a:	90 e0       	ldi	r25, 0x00	; 0
    326c:	02 2e       	mov	r0, r18
    326e:	02 c0       	rjmp	.+4      	; 0x3274 <MCAL_ADC_u8SetRegisterPin+0x3e>
    3270:	88 0f       	add	r24, r24
    3272:	99 1f       	adc	r25, r25
    3274:	0a 94       	dec	r0
    3276:	e2 f7       	brpl	.-8      	; 0x3270 <MCAL_ADC_u8SetRegisterPin+0x3a>
    3278:	84 2b       	or	r24, r20
    327a:	8c 93       	st	X, r24
    327c:	7a c0       	rjmp	.+244    	; 0x3372 <MCAL_ADC_u8SetRegisterPin+0x13c>
		} else if (Loc_u8PortID == Adcsra) {
    327e:	89 81       	ldd	r24, Y+1	; 0x01
    3280:	81 30       	cpi	r24, 0x01	; 1
    3282:	a1 f4       	brne	.+40     	; 0x32ac <MCAL_ADC_u8SetRegisterPin+0x76>
			SET_BIT(ADCSRA, Loc_u8PinID);
    3284:	a6 e2       	ldi	r26, 0x26	; 38
    3286:	b0 e0       	ldi	r27, 0x00	; 0
    3288:	e6 e2       	ldi	r30, 0x26	; 38
    328a:	f0 e0       	ldi	r31, 0x00	; 0
    328c:	80 81       	ld	r24, Z
    328e:	48 2f       	mov	r20, r24
    3290:	8a 81       	ldd	r24, Y+2	; 0x02
    3292:	28 2f       	mov	r18, r24
    3294:	30 e0       	ldi	r19, 0x00	; 0
    3296:	81 e0       	ldi	r24, 0x01	; 1
    3298:	90 e0       	ldi	r25, 0x00	; 0
    329a:	02 2e       	mov	r0, r18
    329c:	02 c0       	rjmp	.+4      	; 0x32a2 <MCAL_ADC_u8SetRegisterPin+0x6c>
    329e:	88 0f       	add	r24, r24
    32a0:	99 1f       	adc	r25, r25
    32a2:	0a 94       	dec	r0
    32a4:	e2 f7       	brpl	.-8      	; 0x329e <MCAL_ADC_u8SetRegisterPin+0x68>
    32a6:	84 2b       	or	r24, r20
    32a8:	8c 93       	st	X, r24
    32aa:	63 c0       	rjmp	.+198    	; 0x3372 <MCAL_ADC_u8SetRegisterPin+0x13c>
		} else if (Loc_u8PortID == Sfior) {
    32ac:	89 81       	ldd	r24, Y+1	; 0x01
    32ae:	82 30       	cpi	r24, 0x02	; 2
    32b0:	09 f0       	breq	.+2      	; 0x32b4 <MCAL_ADC_u8SetRegisterPin+0x7e>
    32b2:	5f c0       	rjmp	.+190    	; 0x3372 <MCAL_ADC_u8SetRegisterPin+0x13c>
			SET_BIT(SFIOR, Loc_u8PinID);
    32b4:	a0 e5       	ldi	r26, 0x50	; 80
    32b6:	b0 e0       	ldi	r27, 0x00	; 0
    32b8:	e0 e5       	ldi	r30, 0x50	; 80
    32ba:	f0 e0       	ldi	r31, 0x00	; 0
    32bc:	80 81       	ld	r24, Z
    32be:	48 2f       	mov	r20, r24
    32c0:	8a 81       	ldd	r24, Y+2	; 0x02
    32c2:	28 2f       	mov	r18, r24
    32c4:	30 e0       	ldi	r19, 0x00	; 0
    32c6:	81 e0       	ldi	r24, 0x01	; 1
    32c8:	90 e0       	ldi	r25, 0x00	; 0
    32ca:	02 2e       	mov	r0, r18
    32cc:	02 c0       	rjmp	.+4      	; 0x32d2 <MCAL_ADC_u8SetRegisterPin+0x9c>
    32ce:	88 0f       	add	r24, r24
    32d0:	99 1f       	adc	r25, r25
    32d2:	0a 94       	dec	r0
    32d4:	e2 f7       	brpl	.-8      	; 0x32ce <MCAL_ADC_u8SetRegisterPin+0x98>
    32d6:	84 2b       	or	r24, r20
    32d8:	8c 93       	st	X, r24
    32da:	4b c0       	rjmp	.+150    	; 0x3372 <MCAL_ADC_u8SetRegisterPin+0x13c>
		} else {
			//Do Nothing
		}
	} else if (Loc_u8PinValue == Pin_Low) {
    32dc:	8b 81       	ldd	r24, Y+3	; 0x03
    32de:	88 23       	and	r24, r24
    32e0:	09 f0       	breq	.+2      	; 0x32e4 <MCAL_ADC_u8SetRegisterPin+0xae>
    32e2:	47 c0       	rjmp	.+142    	; 0x3372 <MCAL_ADC_u8SetRegisterPin+0x13c>
		if (Loc_u8PortID == Admux) {
    32e4:	89 81       	ldd	r24, Y+1	; 0x01
    32e6:	88 23       	and	r24, r24
    32e8:	a9 f4       	brne	.+42     	; 0x3314 <MCAL_ADC_u8SetRegisterPin+0xde>
			CLR_BIT(ADMUX, Loc_u8PinID);
    32ea:	a7 e2       	ldi	r26, 0x27	; 39
    32ec:	b0 e0       	ldi	r27, 0x00	; 0
    32ee:	e7 e2       	ldi	r30, 0x27	; 39
    32f0:	f0 e0       	ldi	r31, 0x00	; 0
    32f2:	80 81       	ld	r24, Z
    32f4:	48 2f       	mov	r20, r24
    32f6:	8a 81       	ldd	r24, Y+2	; 0x02
    32f8:	28 2f       	mov	r18, r24
    32fa:	30 e0       	ldi	r19, 0x00	; 0
    32fc:	81 e0       	ldi	r24, 0x01	; 1
    32fe:	90 e0       	ldi	r25, 0x00	; 0
    3300:	02 2e       	mov	r0, r18
    3302:	02 c0       	rjmp	.+4      	; 0x3308 <MCAL_ADC_u8SetRegisterPin+0xd2>
    3304:	88 0f       	add	r24, r24
    3306:	99 1f       	adc	r25, r25
    3308:	0a 94       	dec	r0
    330a:	e2 f7       	brpl	.-8      	; 0x3304 <MCAL_ADC_u8SetRegisterPin+0xce>
    330c:	80 95       	com	r24
    330e:	84 23       	and	r24, r20
    3310:	8c 93       	st	X, r24
    3312:	2f c0       	rjmp	.+94     	; 0x3372 <MCAL_ADC_u8SetRegisterPin+0x13c>
		} else if (Loc_u8PortID == Adcsra) {
    3314:	89 81       	ldd	r24, Y+1	; 0x01
    3316:	81 30       	cpi	r24, 0x01	; 1
    3318:	a9 f4       	brne	.+42     	; 0x3344 <MCAL_ADC_u8SetRegisterPin+0x10e>
			CLR_BIT(ADCSRA, Loc_u8PinID);
    331a:	a6 e2       	ldi	r26, 0x26	; 38
    331c:	b0 e0       	ldi	r27, 0x00	; 0
    331e:	e6 e2       	ldi	r30, 0x26	; 38
    3320:	f0 e0       	ldi	r31, 0x00	; 0
    3322:	80 81       	ld	r24, Z
    3324:	48 2f       	mov	r20, r24
    3326:	8a 81       	ldd	r24, Y+2	; 0x02
    3328:	28 2f       	mov	r18, r24
    332a:	30 e0       	ldi	r19, 0x00	; 0
    332c:	81 e0       	ldi	r24, 0x01	; 1
    332e:	90 e0       	ldi	r25, 0x00	; 0
    3330:	02 2e       	mov	r0, r18
    3332:	02 c0       	rjmp	.+4      	; 0x3338 <MCAL_ADC_u8SetRegisterPin+0x102>
    3334:	88 0f       	add	r24, r24
    3336:	99 1f       	adc	r25, r25
    3338:	0a 94       	dec	r0
    333a:	e2 f7       	brpl	.-8      	; 0x3334 <MCAL_ADC_u8SetRegisterPin+0xfe>
    333c:	80 95       	com	r24
    333e:	84 23       	and	r24, r20
    3340:	8c 93       	st	X, r24
    3342:	17 c0       	rjmp	.+46     	; 0x3372 <MCAL_ADC_u8SetRegisterPin+0x13c>
		} else if (Loc_u8PortID == Sfior) {
    3344:	89 81       	ldd	r24, Y+1	; 0x01
    3346:	82 30       	cpi	r24, 0x02	; 2
    3348:	a1 f4       	brne	.+40     	; 0x3372 <MCAL_ADC_u8SetRegisterPin+0x13c>
			CLR_BIT(SFIOR, Loc_u8PinID);
    334a:	a0 e5       	ldi	r26, 0x50	; 80
    334c:	b0 e0       	ldi	r27, 0x00	; 0
    334e:	e0 e5       	ldi	r30, 0x50	; 80
    3350:	f0 e0       	ldi	r31, 0x00	; 0
    3352:	80 81       	ld	r24, Z
    3354:	48 2f       	mov	r20, r24
    3356:	8a 81       	ldd	r24, Y+2	; 0x02
    3358:	28 2f       	mov	r18, r24
    335a:	30 e0       	ldi	r19, 0x00	; 0
    335c:	81 e0       	ldi	r24, 0x01	; 1
    335e:	90 e0       	ldi	r25, 0x00	; 0
    3360:	02 2e       	mov	r0, r18
    3362:	02 c0       	rjmp	.+4      	; 0x3368 <MCAL_ADC_u8SetRegisterPin+0x132>
    3364:	88 0f       	add	r24, r24
    3366:	99 1f       	adc	r25, r25
    3368:	0a 94       	dec	r0
    336a:	e2 f7       	brpl	.-8      	; 0x3364 <MCAL_ADC_u8SetRegisterPin+0x12e>
    336c:	80 95       	com	r24
    336e:	84 23       	and	r24, r20
    3370:	8c 93       	st	X, r24
			//Do Nothing
		}
	} else {
		//Do Nothing
	}
}
    3372:	0f 90       	pop	r0
    3374:	0f 90       	pop	r0
    3376:	0f 90       	pop	r0
    3378:	cf 91       	pop	r28
    337a:	df 91       	pop	r29
    337c:	08 95       	ret

0000337e <MCAL_ADC_AdcInit>:

void MCAL_ADC_AdcInit(u8 Loc_u8Position) {
    337e:	df 93       	push	r29
    3380:	cf 93       	push	r28
    3382:	0f 92       	push	r0
    3384:	cd b7       	in	r28, 0x3d	; 61
    3386:	de b7       	in	r29, 0x3e	; 62
    3388:	89 83       	std	Y+1, r24	; 0x01
	MCAL_ADC_u8SetRegister(Adcsra, ADCSRA_VALUE);
    338a:	81 e0       	ldi	r24, 0x01	; 1
    338c:	6f ea       	ldi	r22, 0xAF	; 175
    338e:	0e 94 c5 18 	call	0x318a	; 0x318a <MCAL_ADC_u8SetRegister>
	MCAL_ADC_u8SetRegisterPin(Sfior, 7, Pin_Low);
    3392:	82 e0       	ldi	r24, 0x02	; 2
    3394:	67 e0       	ldi	r22, 0x07	; 7
    3396:	40 e0       	ldi	r20, 0x00	; 0
    3398:	0e 94 1b 19 	call	0x3236	; 0x3236 <MCAL_ADC_u8SetRegisterPin>
	MCAL_ADC_u8SetRegisterPin(Sfior, 6, Pin_Low);
    339c:	82 e0       	ldi	r24, 0x02	; 2
    339e:	66 e0       	ldi	r22, 0x06	; 6
    33a0:	40 e0       	ldi	r20, 0x00	; 0
    33a2:	0e 94 1b 19 	call	0x3236	; 0x3236 <MCAL_ADC_u8SetRegisterPin>
	MCAL_ADC_u8SetRegisterPin(Sfior, 5, Pin_Low);
    33a6:	82 e0       	ldi	r24, 0x02	; 2
    33a8:	65 e0       	ldi	r22, 0x05	; 5
    33aa:	40 e0       	ldi	r20, 0x00	; 0
    33ac:	0e 94 1b 19 	call	0x3236	; 0x3236 <MCAL_ADC_u8SetRegisterPin>
	MCAL_Interrupt_u8SetRegisterPin(SREG, 7, Pin_High);
    33b0:	ef e5       	ldi	r30, 0x5F	; 95
    33b2:	f0 e0       	ldi	r31, 0x00	; 0
    33b4:	80 81       	ld	r24, Z
    33b6:	88 2f       	mov	r24, r24
    33b8:	90 e0       	ldi	r25, 0x00	; 0
    33ba:	67 e0       	ldi	r22, 0x07	; 7
    33bc:	70 e0       	ldi	r23, 0x00	; 0
    33be:	41 e0       	ldi	r20, 0x01	; 1
    33c0:	50 e0       	ldi	r21, 0x00	; 0
    33c2:	0e 94 8a 12 	call	0x2514	; 0x2514 <MCAL_Interrupt_u8SetRegisterPin>
	if (Loc_u8Position == Adc_0) {
    33c6:	89 81       	ldd	r24, Y+1	; 0x01
    33c8:	88 23       	and	r24, r24
    33ca:	29 f4       	brne	.+10     	; 0x33d6 <MCAL_ADC_AdcInit+0x58>
		MCAL_ADC_u8SetRegister(Admux, ADUMX_Value_Adc0);
    33cc:	80 e0       	ldi	r24, 0x00	; 0
    33ce:	60 e4       	ldi	r22, 0x40	; 64
    33d0:	0e 94 c5 18 	call	0x318a	; 0x318a <MCAL_ADC_u8SetRegister>
    33d4:	37 c0       	rjmp	.+110    	; 0x3444 <MCAL_ADC_AdcInit+0xc6>
	} else if (Loc_u8Position == Adc_1) {
    33d6:	89 81       	ldd	r24, Y+1	; 0x01
    33d8:	81 30       	cpi	r24, 0x01	; 1
    33da:	29 f4       	brne	.+10     	; 0x33e6 <MCAL_ADC_AdcInit+0x68>
		MCAL_ADC_u8SetRegister(Admux, ADUMX_Value_Adc1);
    33dc:	80 e0       	ldi	r24, 0x00	; 0
    33de:	61 e4       	ldi	r22, 0x41	; 65
    33e0:	0e 94 c5 18 	call	0x318a	; 0x318a <MCAL_ADC_u8SetRegister>
    33e4:	2f c0       	rjmp	.+94     	; 0x3444 <MCAL_ADC_AdcInit+0xc6>
	} else if (Loc_u8Position == Adc_2) {
    33e6:	89 81       	ldd	r24, Y+1	; 0x01
    33e8:	82 30       	cpi	r24, 0x02	; 2
    33ea:	29 f4       	brne	.+10     	; 0x33f6 <MCAL_ADC_AdcInit+0x78>
		MCAL_ADC_u8SetRegister(Admux, ADUMX_Value_Adc2);
    33ec:	80 e0       	ldi	r24, 0x00	; 0
    33ee:	62 e4       	ldi	r22, 0x42	; 66
    33f0:	0e 94 c5 18 	call	0x318a	; 0x318a <MCAL_ADC_u8SetRegister>
    33f4:	27 c0       	rjmp	.+78     	; 0x3444 <MCAL_ADC_AdcInit+0xc6>
	} else if (Loc_u8Position == Adc_3) {
    33f6:	89 81       	ldd	r24, Y+1	; 0x01
    33f8:	83 30       	cpi	r24, 0x03	; 3
    33fa:	29 f4       	brne	.+10     	; 0x3406 <MCAL_ADC_AdcInit+0x88>
		MCAL_ADC_u8SetRegister(Admux, ADUMX_Value_Adc3);
    33fc:	80 e0       	ldi	r24, 0x00	; 0
    33fe:	63 e4       	ldi	r22, 0x43	; 67
    3400:	0e 94 c5 18 	call	0x318a	; 0x318a <MCAL_ADC_u8SetRegister>
    3404:	1f c0       	rjmp	.+62     	; 0x3444 <MCAL_ADC_AdcInit+0xc6>
	} else if (Loc_u8Position == Adc_4) {
    3406:	89 81       	ldd	r24, Y+1	; 0x01
    3408:	84 30       	cpi	r24, 0x04	; 4
    340a:	29 f4       	brne	.+10     	; 0x3416 <MCAL_ADC_AdcInit+0x98>
		MCAL_ADC_u8SetRegister(Admux, ADUMX_Value_Adc4);
    340c:	80 e0       	ldi	r24, 0x00	; 0
    340e:	64 e4       	ldi	r22, 0x44	; 68
    3410:	0e 94 c5 18 	call	0x318a	; 0x318a <MCAL_ADC_u8SetRegister>
    3414:	17 c0       	rjmp	.+46     	; 0x3444 <MCAL_ADC_AdcInit+0xc6>
	} else if (Loc_u8Position == Adc_5) {
    3416:	89 81       	ldd	r24, Y+1	; 0x01
    3418:	85 30       	cpi	r24, 0x05	; 5
    341a:	29 f4       	brne	.+10     	; 0x3426 <MCAL_ADC_AdcInit+0xa8>
		MCAL_ADC_u8SetRegister(Admux, ADUMX_Value_Adc5);
    341c:	80 e0       	ldi	r24, 0x00	; 0
    341e:	65 e4       	ldi	r22, 0x45	; 69
    3420:	0e 94 c5 18 	call	0x318a	; 0x318a <MCAL_ADC_u8SetRegister>
    3424:	0f c0       	rjmp	.+30     	; 0x3444 <MCAL_ADC_AdcInit+0xc6>
	} else if (Loc_u8Position == Adc_6) {
    3426:	89 81       	ldd	r24, Y+1	; 0x01
    3428:	86 30       	cpi	r24, 0x06	; 6
    342a:	29 f4       	brne	.+10     	; 0x3436 <MCAL_ADC_AdcInit+0xb8>
		MCAL_ADC_u8SetRegister(Admux, ADUMX_Value_Adc6);
    342c:	80 e0       	ldi	r24, 0x00	; 0
    342e:	66 e4       	ldi	r22, 0x46	; 70
    3430:	0e 94 c5 18 	call	0x318a	; 0x318a <MCAL_ADC_u8SetRegister>
    3434:	07 c0       	rjmp	.+14     	; 0x3444 <MCAL_ADC_AdcInit+0xc6>
	} else if (Loc_u8Position == Adc_7) {
    3436:	89 81       	ldd	r24, Y+1	; 0x01
    3438:	87 30       	cpi	r24, 0x07	; 7
    343a:	21 f4       	brne	.+8      	; 0x3444 <MCAL_ADC_AdcInit+0xc6>
		MCAL_ADC_u8SetRegister(Admux, ADUMX_Value_Adc7);
    343c:	80 e0       	ldi	r24, 0x00	; 0
    343e:	67 e4       	ldi	r22, 0x47	; 71
    3440:	0e 94 c5 18 	call	0x318a	; 0x318a <MCAL_ADC_u8SetRegister>
	} else {
		//Do Nothing
	}
}
    3444:	0f 90       	pop	r0
    3446:	cf 91       	pop	r28
    3448:	df 91       	pop	r29
    344a:	08 95       	ret

0000344c <MCAL_ADC_AdcStartConversion>:

void MCAL_ADC_AdcStartConversion(u8 Loc_u8Value) {
    344c:	df 93       	push	r29
    344e:	cf 93       	push	r28
    3450:	0f 92       	push	r0
    3452:	cd b7       	in	r28, 0x3d	; 61
    3454:	de b7       	in	r29, 0x3e	; 62
    3456:	89 83       	std	Y+1, r24	; 0x01
	if (Loc_u8Value == Enable) {
    3458:	89 81       	ldd	r24, Y+1	; 0x01
    345a:	81 30       	cpi	r24, 0x01	; 1
    345c:	31 f4       	brne	.+12     	; 0x346a <MCAL_ADC_AdcStartConversion+0x1e>
		MCAL_ADC_u8SetRegisterPin(Adcsra, 6, Enable);
    345e:	81 e0       	ldi	r24, 0x01	; 1
    3460:	66 e0       	ldi	r22, 0x06	; 6
    3462:	41 e0       	ldi	r20, 0x01	; 1
    3464:	0e 94 1b 19 	call	0x3236	; 0x3236 <MCAL_ADC_u8SetRegisterPin>
    3468:	08 c0       	rjmp	.+16     	; 0x347a <MCAL_ADC_AdcStartConversion+0x2e>
	} else if (Loc_u8Value == Disable) {
    346a:	89 81       	ldd	r24, Y+1	; 0x01
    346c:	88 23       	and	r24, r24
    346e:	29 f4       	brne	.+10     	; 0x347a <MCAL_ADC_AdcStartConversion+0x2e>
		MCAL_ADC_u8SetRegisterPin(Adcsra, 6, Disable);
    3470:	81 e0       	ldi	r24, 0x01	; 1
    3472:	66 e0       	ldi	r22, 0x06	; 6
    3474:	40 e0       	ldi	r20, 0x00	; 0
    3476:	0e 94 1b 19 	call	0x3236	; 0x3236 <MCAL_ADC_u8SetRegisterPin>
	} else {
		//NOTHING
	}
}
    347a:	0f 90       	pop	r0
    347c:	cf 91       	pop	r28
    347e:	df 91       	pop	r29
    3480:	08 95       	ret

00003482 <MCAL_ADC_u8AdcSetValue>:

u8 MCAL_ADC_u8AdcSetValue(u16 *Loc_u16Value) {
    3482:	df 93       	push	r29
    3484:	cf 93       	push	r28
    3486:	00 d0       	rcall	.+0      	; 0x3488 <MCAL_ADC_u8AdcSetValue+0x6>
    3488:	0f 92       	push	r0
    348a:	cd b7       	in	r28, 0x3d	; 61
    348c:	de b7       	in	r29, 0x3e	; 62
    348e:	9b 83       	std	Y+3, r25	; 0x03
    3490:	8a 83       	std	Y+2, r24	; 0x02
	u8 LOC_u8ReturnValue = E_NOT_OK;
    3492:	81 e0       	ldi	r24, 0x01	; 1
    3494:	89 83       	std	Y+1, r24	; 0x01
	*Loc_u16Value = (((u32) ADC * 5000) / 1024);
    3496:	e4 e2       	ldi	r30, 0x24	; 36
    3498:	f0 e0       	ldi	r31, 0x00	; 0
    349a:	80 81       	ld	r24, Z
    349c:	91 81       	ldd	r25, Z+1	; 0x01
    349e:	cc 01       	movw	r24, r24
    34a0:	a0 e0       	ldi	r26, 0x00	; 0
    34a2:	b0 e0       	ldi	r27, 0x00	; 0
    34a4:	28 e8       	ldi	r18, 0x88	; 136
    34a6:	33 e1       	ldi	r19, 0x13	; 19
    34a8:	40 e0       	ldi	r20, 0x00	; 0
    34aa:	50 e0       	ldi	r21, 0x00	; 0
    34ac:	bc 01       	movw	r22, r24
    34ae:	cd 01       	movw	r24, r26
    34b0:	0e 94 02 28 	call	0x5004	; 0x5004 <__mulsi3>
    34b4:	dc 01       	movw	r26, r24
    34b6:	cb 01       	movw	r24, r22
    34b8:	07 2e       	mov	r0, r23
    34ba:	7a e0       	ldi	r23, 0x0A	; 10
    34bc:	b6 95       	lsr	r27
    34be:	a7 95       	ror	r26
    34c0:	97 95       	ror	r25
    34c2:	87 95       	ror	r24
    34c4:	7a 95       	dec	r23
    34c6:	d1 f7       	brne	.-12     	; 0x34bc <MCAL_ADC_u8AdcSetValue+0x3a>
    34c8:	70 2d       	mov	r23, r0
    34ca:	ea 81       	ldd	r30, Y+2	; 0x02
    34cc:	fb 81       	ldd	r31, Y+3	; 0x03
    34ce:	91 83       	std	Z+1, r25	; 0x01
    34d0:	80 83       	st	Z, r24
	return LOC_u8ReturnValue;
    34d2:	89 81       	ldd	r24, Y+1	; 0x01
}
    34d4:	0f 90       	pop	r0
    34d6:	0f 90       	pop	r0
    34d8:	0f 90       	pop	r0
    34da:	cf 91       	pop	r28
    34dc:	df 91       	pop	r29
    34de:	08 95       	ret

000034e0 <MCAL_ADC_EXIT_CallBack>:

void MCAL_ADC_EXIT_CallBack(void (*ptr)(void)) {
    34e0:	df 93       	push	r29
    34e2:	cf 93       	push	r28
    34e4:	00 d0       	rcall	.+0      	; 0x34e6 <MCAL_ADC_EXIT_CallBack+0x6>
    34e6:	cd b7       	in	r28, 0x3d	; 61
    34e8:	de b7       	in	r29, 0x3e	; 62
    34ea:	9a 83       	std	Y+2, r25	; 0x02
    34ec:	89 83       	std	Y+1, r24	; 0x01
	if (ptr != '\0')
    34ee:	89 81       	ldd	r24, Y+1	; 0x01
    34f0:	9a 81       	ldd	r25, Y+2	; 0x02
    34f2:	00 97       	sbiw	r24, 0x00	; 0
    34f4:	31 f0       	breq	.+12     	; 0x3502 <MCAL_ADC_EXIT_CallBack+0x22>
		Gptr_ADC = ptr;
    34f6:	89 81       	ldd	r24, Y+1	; 0x01
    34f8:	9a 81       	ldd	r25, Y+2	; 0x02
    34fa:	90 93 81 01 	sts	0x0181, r25
    34fe:	80 93 80 01 	sts	0x0180, r24
}
    3502:	0f 90       	pop	r0
    3504:	0f 90       	pop	r0
    3506:	cf 91       	pop	r28
    3508:	df 91       	pop	r29
    350a:	08 95       	ret

0000350c <__vector_16>:

ISR(ADC_vect) {
    350c:	1f 92       	push	r1
    350e:	0f 92       	push	r0
    3510:	0f b6       	in	r0, 0x3f	; 63
    3512:	0f 92       	push	r0
    3514:	11 24       	eor	r1, r1
    3516:	2f 93       	push	r18
    3518:	3f 93       	push	r19
    351a:	4f 93       	push	r20
    351c:	5f 93       	push	r21
    351e:	6f 93       	push	r22
    3520:	7f 93       	push	r23
    3522:	8f 93       	push	r24
    3524:	9f 93       	push	r25
    3526:	af 93       	push	r26
    3528:	bf 93       	push	r27
    352a:	ef 93       	push	r30
    352c:	ff 93       	push	r31
    352e:	df 93       	push	r29
    3530:	cf 93       	push	r28
    3532:	cd b7       	in	r28, 0x3d	; 61
    3534:	de b7       	in	r29, 0x3e	; 62
	if (Gptr_ADC != '\0')
    3536:	80 91 80 01 	lds	r24, 0x0180
    353a:	90 91 81 01 	lds	r25, 0x0181
    353e:	00 97       	sbiw	r24, 0x00	; 0
    3540:	29 f0       	breq	.+10     	; 0x354c <__vector_16+0x40>
		Gptr_ADC();
    3542:	e0 91 80 01 	lds	r30, 0x0180
    3546:	f0 91 81 01 	lds	r31, 0x0181
    354a:	09 95       	icall
}
    354c:	cf 91       	pop	r28
    354e:	df 91       	pop	r29
    3550:	ff 91       	pop	r31
    3552:	ef 91       	pop	r30
    3554:	bf 91       	pop	r27
    3556:	af 91       	pop	r26
    3558:	9f 91       	pop	r25
    355a:	8f 91       	pop	r24
    355c:	7f 91       	pop	r23
    355e:	6f 91       	pop	r22
    3560:	5f 91       	pop	r21
    3562:	4f 91       	pop	r20
    3564:	3f 91       	pop	r19
    3566:	2f 91       	pop	r18
    3568:	0f 90       	pop	r0
    356a:	0f be       	out	0x3f, r0	; 63
    356c:	0f 90       	pop	r0
    356e:	1f 90       	pop	r1
    3570:	18 95       	reti

00003572 <HAL_SM_voidSMInit>:
 *
 *  Created on: Oct 29, 2023
 *      Author: TOP_WORLD
 */
#include "Servo_Motor.h"
void HAL_SM_voidSMInit(void){
    3572:	df 93       	push	r29
    3574:	cf 93       	push	r28
    3576:	00 d0       	rcall	.+0      	; 0x3578 <HAL_SM_voidSMInit+0x6>
    3578:	00 d0       	rcall	.+0      	; 0x357a <HAL_SM_voidSMInit+0x8>
    357a:	cd b7       	in	r28, 0x3d	; 61
    357c:	de b7       	in	r29, 0x3e	; 62
	f32 Tick_Time=0;
    357e:	80 e0       	ldi	r24, 0x00	; 0
    3580:	90 e0       	ldi	r25, 0x00	; 0
    3582:	a0 e0       	ldi	r26, 0x00	; 0
    3584:	b0 e0       	ldi	r27, 0x00	; 0
    3586:	89 83       	std	Y+1, r24	; 0x01
    3588:	9a 83       	std	Y+2, r25	; 0x02
    358a:	ab 83       	std	Y+3, r26	; 0x03
    358c:	bc 83       	std	Y+4, r27	; 0x04
	MCAL_T1_u8T1Init(FAST_PWM_ICR1);
    358e:	8e e0       	ldi	r24, 0x0E	; 14
    3590:	0e 94 85 08 	call	0x110a	; 0x110a <MCAL_T1_u8T1Init>
	MCAL_T1_u8T1Prescaler(PRESCALLING_64,&Tick_Time);
    3594:	83 e0       	ldi	r24, 0x03	; 3
    3596:	9e 01       	movw	r18, r28
    3598:	2f 5f       	subi	r18, 0xFF	; 255
    359a:	3f 4f       	sbci	r19, 0xFF	; 255
    359c:	b9 01       	movw	r22, r18
    359e:	0e 94 a6 0a 	call	0x154c	; 0x154c <MCAL_T1_u8T1Prescaler>
	MCAL_T1_u8T1CompareOutputMode(NON_INVERTING_MODE,CHENNEL_A);
    35a2:	80 e0       	ldi	r24, 0x00	; 0
    35a4:	60 e0       	ldi	r22, 0x00	; 0
    35a6:	0e 94 be 0b 	call	0x177c	; 0x177c <MCAL_T1_u8T1CompareOutputMode>
	MCAL_T1_voidSetICR1Value(INIT_VALUE);
    35aa:	87 e8       	ldi	r24, 0x87	; 135
    35ac:	93 e1       	ldi	r25, 0x13	; 19
    35ae:	0e 94 b0 0c 	call	0x1960	; 0x1960 <MCAL_T1_voidSetICR1Value>
	MCAL_T1_voidSetOCR1AValue(START_ZERO);
    35b2:	89 e6       	ldi	r24, 0x69	; 105
    35b4:	90 e0       	ldi	r25, 0x00	; 0
    35b6:	0e 94 8c 0c 	call	0x1918	; 0x1918 <MCAL_T1_voidSetOCR1AValue>

}
    35ba:	0f 90       	pop	r0
    35bc:	0f 90       	pop	r0
    35be:	0f 90       	pop	r0
    35c0:	0f 90       	pop	r0
    35c2:	cf 91       	pop	r28
    35c4:	df 91       	pop	r29
    35c6:	08 95       	ret

000035c8 <HAL_SM_voidSMSetAngle>:
void HAL_SM_voidSMSetAngle(u8 LOC_u8Angle){
    35c8:	df 93       	push	r29
    35ca:	cf 93       	push	r28
    35cc:	00 d0       	rcall	.+0      	; 0x35ce <HAL_SM_voidSMSetAngle+0x6>
    35ce:	0f 92       	push	r0
    35d0:	cd b7       	in	r28, 0x3d	; 61
    35d2:	de b7       	in	r29, 0x3e	; 62
    35d4:	8b 83       	std	Y+3, r24	; 0x03
	if(LOC_u8Angle<=MAX_ANGLE&&LOC_u8Angle>=MIN_ANGLE){
    35d6:	8b 81       	ldd	r24, Y+3	; 0x03
    35d8:	88 2f       	mov	r24, r24
    35da:	90 e0       	ldi	r25, 0x00	; 0
    35dc:	aa 27       	eor	r26, r26
    35de:	97 fd       	sbrc	r25, 7
    35e0:	a0 95       	com	r26
    35e2:	ba 2f       	mov	r27, r26
    35e4:	bc 01       	movw	r22, r24
    35e6:	cd 01       	movw	r24, r26
    35e8:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    35ec:	dc 01       	movw	r26, r24
    35ee:	cb 01       	movw	r24, r22
    35f0:	bc 01       	movw	r22, r24
    35f2:	cd 01       	movw	r24, r26
    35f4:	20 e0       	ldi	r18, 0x00	; 0
    35f6:	30 e0       	ldi	r19, 0x00	; 0
    35f8:	44 e3       	ldi	r20, 0x34	; 52
    35fa:	53 e4       	ldi	r21, 0x43	; 67
    35fc:	0e 94 55 04 	call	0x8aa	; 0x8aa <__lesf2>
    3600:	18 16       	cp	r1, r24
    3602:	bc f1       	brlt	.+110    	; 0x3672 <HAL_SM_voidSMSetAngle+0xaa>
	u16 SetAngle=START_ZERO+((LOC_u8Angle/MAX_ANGLE)*BETWEEN_0_180);
    3604:	8b 81       	ldd	r24, Y+3	; 0x03
    3606:	88 2f       	mov	r24, r24
    3608:	90 e0       	ldi	r25, 0x00	; 0
    360a:	aa 27       	eor	r26, r26
    360c:	97 fd       	sbrc	r25, 7
    360e:	a0 95       	com	r26
    3610:	ba 2f       	mov	r27, r26
    3612:	bc 01       	movw	r22, r24
    3614:	cd 01       	movw	r24, r26
    3616:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    361a:	dc 01       	movw	r26, r24
    361c:	cb 01       	movw	r24, r22
    361e:	bc 01       	movw	r22, r24
    3620:	cd 01       	movw	r24, r26
    3622:	20 e0       	ldi	r18, 0x00	; 0
    3624:	30 e0       	ldi	r19, 0x00	; 0
    3626:	44 e3       	ldi	r20, 0x34	; 52
    3628:	53 e4       	ldi	r21, 0x43	; 67
    362a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    362e:	dc 01       	movw	r26, r24
    3630:	cb 01       	movw	r24, r22
    3632:	bc 01       	movw	r22, r24
    3634:	cd 01       	movw	r24, r26
    3636:	20 e0       	ldi	r18, 0x00	; 0
    3638:	30 e0       	ldi	r19, 0x00	; 0
    363a:	48 ef       	ldi	r20, 0xF8	; 248
    363c:	53 e4       	ldi	r21, 0x43	; 67
    363e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3642:	dc 01       	movw	r26, r24
    3644:	cb 01       	movw	r24, r22
    3646:	bc 01       	movw	r22, r24
    3648:	cd 01       	movw	r24, r26
    364a:	20 e0       	ldi	r18, 0x00	; 0
    364c:	30 e0       	ldi	r19, 0x00	; 0
    364e:	42 ed       	ldi	r20, 0xD2	; 210
    3650:	52 e4       	ldi	r21, 0x42	; 66
    3652:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    3656:	dc 01       	movw	r26, r24
    3658:	cb 01       	movw	r24, r22
    365a:	bc 01       	movw	r22, r24
    365c:	cd 01       	movw	r24, r26
    365e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3662:	dc 01       	movw	r26, r24
    3664:	cb 01       	movw	r24, r22
    3666:	9a 83       	std	Y+2, r25	; 0x02
    3668:	89 83       	std	Y+1, r24	; 0x01
	MCAL_T1_voidSetOCR1AValue(SetAngle);
    366a:	89 81       	ldd	r24, Y+1	; 0x01
    366c:	9a 81       	ldd	r25, Y+2	; 0x02
    366e:	0e 94 8c 0c 	call	0x1918	; 0x1918 <MCAL_T1_voidSetOCR1AValue>
	}else {
		//NOTHING
	}
}
    3672:	0f 90       	pop	r0
    3674:	0f 90       	pop	r0
    3676:	0f 90       	pop	r0
    3678:	cf 91       	pop	r28
    367a:	df 91       	pop	r29
    367c:	08 95       	ret

0000367e <HAL_PushButton_u8PushButtonInit>:
u8 Glob_PB0_u8PinValue=0;
u8 Glob_PB1_u8PinValue=0;
u8 Glob_PB2_u8PinValue=0;

STD_Type HAL_PushButton_u8PushButtonInit(u8 Loc_u8PushButtonPortID,
		u8 Loc_u8PushButtonPinID) {
    367e:	df 93       	push	r29
    3680:	cf 93       	push	r28
    3682:	00 d0       	rcall	.+0      	; 0x3684 <HAL_PushButton_u8PushButtonInit+0x6>
    3684:	0f 92       	push	r0
    3686:	cd b7       	in	r28, 0x3d	; 61
    3688:	de b7       	in	r29, 0x3e	; 62
    368a:	8a 83       	std	Y+2, r24	; 0x02
    368c:	6b 83       	std	Y+3, r22	; 0x03
	u8 Loc_u8Return_Value = E_NOT_OK;
    368e:	81 e0       	ldi	r24, 0x01	; 1
    3690:	89 83       	std	Y+1, r24	; 0x01
	if (Loc_u8PushButtonPortID <= PortD && Loc_u8PushButtonPinID <= Num_Of_Pins) {
    3692:	8a 81       	ldd	r24, Y+2	; 0x02
    3694:	84 30       	cpi	r24, 0x04	; 4
    3696:	48 f4       	brcc	.+18     	; 0x36aa <HAL_PushButton_u8PushButtonInit+0x2c>
    3698:	8b 81       	ldd	r24, Y+3	; 0x03
    369a:	88 30       	cpi	r24, 0x08	; 8
    369c:	30 f4       	brcc	.+12     	; 0x36aa <HAL_PushButton_u8PushButtonInit+0x2c>
		Loc_u8Return_Value = MCAL_DIO_u8SetPinDirection(Loc_u8PushButtonPortID,
    369e:	8a 81       	ldd	r24, Y+2	; 0x02
    36a0:	6b 81       	ldd	r22, Y+3	; 0x03
    36a2:	41 e0       	ldi	r20, 0x01	; 1
    36a4:	0e 94 f6 14 	call	0x29ec	; 0x29ec <MCAL_DIO_u8SetPinDirection>
    36a8:	89 83       	std	Y+1, r24	; 0x01
				Loc_u8PushButtonPinID, Pin_High);
	} else {
		//Do Nothing
	}
	return Loc_u8Return_Value;
    36aa:	89 81       	ldd	r24, Y+1	; 0x01
}
    36ac:	0f 90       	pop	r0
    36ae:	0f 90       	pop	r0
    36b0:	0f 90       	pop	r0
    36b2:	cf 91       	pop	r28
    36b4:	df 91       	pop	r29
    36b6:	08 95       	ret

000036b8 <HAL_PushButton_u8PushButtonCheck>:

STD_Type HAL_PushButton_u8PushButtonCheck(u8 Loc_u8PushButtonPortID,
		u8 Loc_u8PushButtonPinID) {
    36b8:	df 93       	push	r29
    36ba:	cf 93       	push	r28
    36bc:	00 d0       	rcall	.+0      	; 0x36be <HAL_PushButton_u8PushButtonCheck+0x6>
    36be:	0f 92       	push	r0
    36c0:	cd b7       	in	r28, 0x3d	; 61
    36c2:	de b7       	in	r29, 0x3e	; 62
    36c4:	8a 83       	std	Y+2, r24	; 0x02
    36c6:	6b 83       	std	Y+3, r22	; 0x03
	u8 Loc_u8Return_Value = E_NOT_OK;
    36c8:	81 e0       	ldi	r24, 0x01	; 1
    36ca:	89 83       	std	Y+1, r24	; 0x01
	if (Loc_u8PushButtonPortID <= PortD && Loc_u8PushButtonPinID <= Num_Of_Pins) {
    36cc:	8a 81       	ldd	r24, Y+2	; 0x02
    36ce:	84 30       	cpi	r24, 0x04	; 4
    36d0:	30 f5       	brcc	.+76     	; 0x371e <HAL_PushButton_u8PushButtonCheck+0x66>
    36d2:	8b 81       	ldd	r24, Y+3	; 0x03
    36d4:	88 30       	cpi	r24, 0x08	; 8
    36d6:	18 f5       	brcc	.+70     	; 0x371e <HAL_PushButton_u8PushButtonCheck+0x66>
		if(Loc_u8PushButtonPinID==PushButton0_PIN){
    36d8:	8b 81       	ldd	r24, Y+3	; 0x03
    36da:	88 23       	and	r24, r24
    36dc:	49 f4       	brne	.+18     	; 0x36f0 <HAL_PushButton_u8PushButtonCheck+0x38>
			Loc_u8Return_Value = MCAL_DIO_u8GetPinValue(Loc_u8PushButtonPortID,
    36de:	22 e8       	ldi	r18, 0x82	; 130
    36e0:	31 e0       	ldi	r19, 0x01	; 1
    36e2:	8a 81       	ldd	r24, Y+2	; 0x02
    36e4:	6b 81       	ldd	r22, Y+3	; 0x03
    36e6:	a9 01       	movw	r20, r18
    36e8:	0e 94 90 17 	call	0x2f20	; 0x2f20 <MCAL_DIO_u8GetPinValue>
    36ec:	89 83       	std	Y+1, r24	; 0x01
    36ee:	17 c0       	rjmp	.+46     	; 0x371e <HAL_PushButton_u8PushButtonCheck+0x66>
					Loc_u8PushButtonPinID, &Glob_PB0_u8PinValue);
		}
		else if(Loc_u8PushButtonPinID==PushButton1_PIN){
    36f0:	8b 81       	ldd	r24, Y+3	; 0x03
    36f2:	86 30       	cpi	r24, 0x06	; 6
    36f4:	49 f4       	brne	.+18     	; 0x3708 <HAL_PushButton_u8PushButtonCheck+0x50>
			Loc_u8Return_Value = MCAL_DIO_u8GetPinValue(Loc_u8PushButtonPortID,
    36f6:	23 e8       	ldi	r18, 0x83	; 131
    36f8:	31 e0       	ldi	r19, 0x01	; 1
    36fa:	8a 81       	ldd	r24, Y+2	; 0x02
    36fc:	6b 81       	ldd	r22, Y+3	; 0x03
    36fe:	a9 01       	movw	r20, r18
    3700:	0e 94 90 17 	call	0x2f20	; 0x2f20 <MCAL_DIO_u8GetPinValue>
    3704:	89 83       	std	Y+1, r24	; 0x01
    3706:	0b c0       	rjmp	.+22     	; 0x371e <HAL_PushButton_u8PushButtonCheck+0x66>
					Loc_u8PushButtonPinID, &Glob_PB1_u8PinValue);
		}
		else if(Loc_u8PushButtonPinID==PushButton2_PIN){
    3708:	8b 81       	ldd	r24, Y+3	; 0x03
    370a:	82 30       	cpi	r24, 0x02	; 2
    370c:	41 f4       	brne	.+16     	; 0x371e <HAL_PushButton_u8PushButtonCheck+0x66>
			Loc_u8Return_Value = MCAL_DIO_u8GetPinValue(Loc_u8PushButtonPortID,
    370e:	24 e8       	ldi	r18, 0x84	; 132
    3710:	31 e0       	ldi	r19, 0x01	; 1
    3712:	8a 81       	ldd	r24, Y+2	; 0x02
    3714:	6b 81       	ldd	r22, Y+3	; 0x03
    3716:	a9 01       	movw	r20, r18
    3718:	0e 94 90 17 	call	0x2f20	; 0x2f20 <MCAL_DIO_u8GetPinValue>
    371c:	89 83       	std	Y+1, r24	; 0x01
			//Do Nothing
		}
	} else {
		//Do Nothing
	}
	return Loc_u8Return_Value;
    371e:	89 81       	ldd	r24, Y+1	; 0x01
}
    3720:	0f 90       	pop	r0
    3722:	0f 90       	pop	r0
    3724:	0f 90       	pop	r0
    3726:	cf 91       	pop	r28
    3728:	df 91       	pop	r29
    372a:	08 95       	ret

0000372c <HAL_Potentiometer_PotentiometerInit>:
 *      Author: Mohamed
 */

#include "Potentiometer.h"

void HAL_Potentiometer_PotentiometerInit(u8 Loc_u8PotPort,u8 Loc_u8PotPin) {
    372c:	df 93       	push	r29
    372e:	cf 93       	push	r28
    3730:	00 d0       	rcall	.+0      	; 0x3732 <HAL_Potentiometer_PotentiometerInit+0x6>
    3732:	cd b7       	in	r28, 0x3d	; 61
    3734:	de b7       	in	r29, 0x3e	; 62
    3736:	89 83       	std	Y+1, r24	; 0x01
    3738:	6a 83       	std	Y+2, r22	; 0x02
//	MCAL_DIO_u8SetPinDirection(Loc_u8PotPort,Loc_u8PotPin,Pin_Low);
	MCAL_ADC_AdcInit(Adc_1);
    373a:	81 e0       	ldi	r24, 0x01	; 1
    373c:	0e 94 bf 19 	call	0x337e	; 0x337e <MCAL_ADC_AdcInit>
}
    3740:	0f 90       	pop	r0
    3742:	0f 90       	pop	r0
    3744:	cf 91       	pop	r28
    3746:	df 91       	pop	r29
    3748:	08 95       	ret

0000374a <HAL_Potentiometer_PotentiometerValue>:

void HAL_Potentiometer_PotentiometerValue(u16 *Loc_u16Value) {
    374a:	df 93       	push	r29
    374c:	cf 93       	push	r28
    374e:	00 d0       	rcall	.+0      	; 0x3750 <HAL_Potentiometer_PotentiometerValue+0x6>
    3750:	cd b7       	in	r28, 0x3d	; 61
    3752:	de b7       	in	r29, 0x3e	; 62
    3754:	9a 83       	std	Y+2, r25	; 0x02
    3756:	89 83       	std	Y+1, r24	; 0x01
	MCAL_ADC_AdcStartConversion(Enable);
    3758:	81 e0       	ldi	r24, 0x01	; 1
    375a:	0e 94 26 1a 	call	0x344c	; 0x344c <MCAL_ADC_AdcStartConversion>
	MCAL_ADC_u8AdcSetValue(Loc_u16Value);
    375e:	89 81       	ldd	r24, Y+1	; 0x01
    3760:	9a 81       	ldd	r25, Y+2	; 0x02
    3762:	0e 94 41 1a 	call	0x3482	; 0x3482 <MCAL_ADC_u8AdcSetValue>
}
    3766:	0f 90       	pop	r0
    3768:	0f 90       	pop	r0
    376a:	cf 91       	pop	r28
    376c:	df 91       	pop	r29
    376e:	08 95       	ret

00003770 <HAL_LED_u8LedInit>:
 *  Created on: Sep 25, 2023
 *      Author: Mohamed
 */
#include "LED.h"

STD_Type HAL_LED_u8LedInit(u8 Loc_u8LEDPortID, u8 Loc_u8LEDPinID) {
    3770:	df 93       	push	r29
    3772:	cf 93       	push	r28
    3774:	00 d0       	rcall	.+0      	; 0x3776 <HAL_LED_u8LedInit+0x6>
    3776:	0f 92       	push	r0
    3778:	cd b7       	in	r28, 0x3d	; 61
    377a:	de b7       	in	r29, 0x3e	; 62
    377c:	8a 83       	std	Y+2, r24	; 0x02
    377e:	6b 83       	std	Y+3, r22	; 0x03
	u8 Loc_u8Return_Value = E_NOT_OK;
    3780:	81 e0       	ldi	r24, 0x01	; 1
    3782:	89 83       	std	Y+1, r24	; 0x01
	if (Loc_u8LEDPortID <= PortD && Loc_u8LEDPinID <= Num_Of_Pins) {
    3784:	8a 81       	ldd	r24, Y+2	; 0x02
    3786:	84 30       	cpi	r24, 0x04	; 4
    3788:	48 f4       	brcc	.+18     	; 0x379c <HAL_LED_u8LedInit+0x2c>
    378a:	8b 81       	ldd	r24, Y+3	; 0x03
    378c:	88 30       	cpi	r24, 0x08	; 8
    378e:	30 f4       	brcc	.+12     	; 0x379c <HAL_LED_u8LedInit+0x2c>
		Loc_u8Return_Value = MCAL_DIO_u8SetPinDirection(Loc_u8LEDPortID,
    3790:	8a 81       	ldd	r24, Y+2	; 0x02
    3792:	6b 81       	ldd	r22, Y+3	; 0x03
    3794:	41 e0       	ldi	r20, 0x01	; 1
    3796:	0e 94 f6 14 	call	0x29ec	; 0x29ec <MCAL_DIO_u8SetPinDirection>
    379a:	89 83       	std	Y+1, r24	; 0x01
				Loc_u8LEDPinID, Pin_High);
	} else {
		//Do Nothing
	}
	return Loc_u8Return_Value;
    379c:	89 81       	ldd	r24, Y+1	; 0x01
}
    379e:	0f 90       	pop	r0
    37a0:	0f 90       	pop	r0
    37a2:	0f 90       	pop	r0
    37a4:	cf 91       	pop	r28
    37a6:	df 91       	pop	r29
    37a8:	08 95       	ret

000037aa <HAL_LED_u8LedMode>:

STD_Type HAL_LED_u8LedMode(u8 Loc_u8LEDPortID, u8 Loc_u8LEDPinID,
		u8 Loc_u8LEDMode) {
    37aa:	df 93       	push	r29
    37ac:	cf 93       	push	r28
    37ae:	00 d0       	rcall	.+0      	; 0x37b0 <HAL_LED_u8LedMode+0x6>
    37b0:	00 d0       	rcall	.+0      	; 0x37b2 <HAL_LED_u8LedMode+0x8>
    37b2:	cd b7       	in	r28, 0x3d	; 61
    37b4:	de b7       	in	r29, 0x3e	; 62
    37b6:	8a 83       	std	Y+2, r24	; 0x02
    37b8:	6b 83       	std	Y+3, r22	; 0x03
    37ba:	4c 83       	std	Y+4, r20	; 0x04
	u8 Loc_u8Return_Value = E_NOT_OK;
    37bc:	81 e0       	ldi	r24, 0x01	; 1
    37be:	89 83       	std	Y+1, r24	; 0x01
	if (Loc_u8LEDPortID <= PortD && Loc_u8LEDPinID <= Num_Of_Pins
    37c0:	8a 81       	ldd	r24, Y+2	; 0x02
    37c2:	84 30       	cpi	r24, 0x04	; 4
    37c4:	10 f5       	brcc	.+68     	; 0x380a <HAL_LED_u8LedMode+0x60>
    37c6:	8b 81       	ldd	r24, Y+3	; 0x03
    37c8:	88 30       	cpi	r24, 0x08	; 8
    37ca:	f8 f4       	brcc	.+62     	; 0x380a <HAL_LED_u8LedMode+0x60>
    37cc:	8c 81       	ldd	r24, Y+4	; 0x04
    37ce:	83 30       	cpi	r24, 0x03	; 3
    37d0:	e0 f4       	brcc	.+56     	; 0x380a <HAL_LED_u8LedMode+0x60>
			&& Loc_u8LEDMode <= LED_TOG) {
		if (Loc_u8LEDMode == LED_ON) {
    37d2:	8c 81       	ldd	r24, Y+4	; 0x04
    37d4:	81 30       	cpi	r24, 0x01	; 1
    37d6:	39 f4       	brne	.+14     	; 0x37e6 <HAL_LED_u8LedMode+0x3c>
			Loc_u8Return_Value = MCAL_DIO_u8SetPinValue(Loc_u8LEDPortID,
    37d8:	8a 81       	ldd	r24, Y+2	; 0x02
    37da:	6b 81       	ldd	r22, Y+3	; 0x03
    37dc:	41 e0       	ldi	r20, 0x01	; 1
    37de:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <MCAL_DIO_u8SetPinValue>
    37e2:	89 83       	std	Y+1, r24	; 0x01
    37e4:	12 c0       	rjmp	.+36     	; 0x380a <HAL_LED_u8LedMode+0x60>
					Loc_u8LEDPinID, Pin_High);
		} else if (Loc_u8LEDMode == LED_OFF) {
    37e6:	8c 81       	ldd	r24, Y+4	; 0x04
    37e8:	88 23       	and	r24, r24
    37ea:	39 f4       	brne	.+14     	; 0x37fa <HAL_LED_u8LedMode+0x50>
			Loc_u8Return_Value = MCAL_DIO_u8SetPinValue(Loc_u8LEDPortID,
    37ec:	8a 81       	ldd	r24, Y+2	; 0x02
    37ee:	6b 81       	ldd	r22, Y+3	; 0x03
    37f0:	40 e0       	ldi	r20, 0x00	; 0
    37f2:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <MCAL_DIO_u8SetPinValue>
    37f6:	89 83       	std	Y+1, r24	; 0x01
    37f8:	08 c0       	rjmp	.+16     	; 0x380a <HAL_LED_u8LedMode+0x60>
					Loc_u8LEDPinID, Pin_Low);
		} else if (Loc_u8LEDMode == LED_TOG) {
    37fa:	8c 81       	ldd	r24, Y+4	; 0x04
    37fc:	82 30       	cpi	r24, 0x02	; 2
    37fe:	29 f4       	brne	.+10     	; 0x380a <HAL_LED_u8LedMode+0x60>
			Loc_u8Return_Value = MCAL_DIO_u8TogglePinValue(Loc_u8LEDPortID,
    3800:	8a 81       	ldd	r24, Y+2	; 0x02
    3802:	6b 81       	ldd	r22, Y+3	; 0x03
    3804:	0e 94 4d 18 	call	0x309a	; 0x309a <MCAL_DIO_u8TogglePinValue>
    3808:	89 83       	std	Y+1, r24	; 0x01
			//Do Nothing
		}
	} else {
		//Do Nothing
	}
	return Loc_u8Return_Value;
    380a:	89 81       	ldd	r24, Y+1	; 0x01
}
    380c:	0f 90       	pop	r0
    380e:	0f 90       	pop	r0
    3810:	0f 90       	pop	r0
    3812:	0f 90       	pop	r0
    3814:	cf 91       	pop	r28
    3816:	df 91       	pop	r29
    3818:	08 95       	ret

0000381a <HAL_LCD_u8LCDInit>:

#include "LCD.h"

//static u32 Counter = 0;

void HAL_LCD_u8LCDInit() {
    381a:	0f 93       	push	r16
    381c:	1f 93       	push	r17
    381e:	df 93       	push	r29
    3820:	cf 93       	push	r28
    3822:	cd b7       	in	r28, 0x3d	; 61
    3824:	de b7       	in	r29, 0x3e	; 62
    3826:	c6 54       	subi	r28, 0x46	; 70
    3828:	d0 40       	sbci	r29, 0x00	; 0
    382a:	0f b6       	in	r0, 0x3f	; 63
    382c:	f8 94       	cli
    382e:	de bf       	out	0x3e, r29	; 62
    3830:	0f be       	out	0x3f, r0	; 63
    3832:	cd bf       	out	0x3d, r28	; 61
	MCAL_DIO_u8SetPinDirection(LCD_D_PORT, LCD_D7_PIN, Pin_High);
    3834:	80 e0       	ldi	r24, 0x00	; 0
    3836:	67 e0       	ldi	r22, 0x07	; 7
    3838:	41 e0       	ldi	r20, 0x01	; 1
    383a:	0e 94 f6 14 	call	0x29ec	; 0x29ec <MCAL_DIO_u8SetPinDirection>
	MCAL_DIO_u8SetPinDirection(LCD_D_PORT, LCD_D6_PIN, Pin_High);
    383e:	80 e0       	ldi	r24, 0x00	; 0
    3840:	66 e0       	ldi	r22, 0x06	; 6
    3842:	41 e0       	ldi	r20, 0x01	; 1
    3844:	0e 94 f6 14 	call	0x29ec	; 0x29ec <MCAL_DIO_u8SetPinDirection>
	MCAL_DIO_u8SetPinDirection(LCD_D_PORT, LCD_D5_PIN, Pin_High);
    3848:	80 e0       	ldi	r24, 0x00	; 0
    384a:	65 e0       	ldi	r22, 0x05	; 5
    384c:	41 e0       	ldi	r20, 0x01	; 1
    384e:	0e 94 f6 14 	call	0x29ec	; 0x29ec <MCAL_DIO_u8SetPinDirection>
	MCAL_DIO_u8SetPinDirection(LCD_D_PORT, LCD_D4_PIN, Pin_High);
    3852:	80 e0       	ldi	r24, 0x00	; 0
    3854:	64 e0       	ldi	r22, 0x04	; 4
    3856:	41 e0       	ldi	r20, 0x01	; 1
    3858:	0e 94 f6 14 	call	0x29ec	; 0x29ec <MCAL_DIO_u8SetPinDirection>
	MCAL_DIO_u8SetPinDirection(RS_Port, RS_Pin, Pin_High);
    385c:	81 e0       	ldi	r24, 0x01	; 1
    385e:	61 e0       	ldi	r22, 0x01	; 1
    3860:	41 e0       	ldi	r20, 0x01	; 1
    3862:	0e 94 f6 14 	call	0x29ec	; 0x29ec <MCAL_DIO_u8SetPinDirection>
	MCAL_DIO_u8SetPinDirection(RW_Port, RW_Pin, Pin_High);
    3866:	81 e0       	ldi	r24, 0x01	; 1
    3868:	62 e0       	ldi	r22, 0x02	; 2
    386a:	41 e0       	ldi	r20, 0x01	; 1
    386c:	0e 94 f6 14 	call	0x29ec	; 0x29ec <MCAL_DIO_u8SetPinDirection>
	MCAL_DIO_u8SetPinDirection(Enable_PORT, Enable_PIN, Pin_High);
    3870:	81 e0       	ldi	r24, 0x01	; 1
    3872:	63 e0       	ldi	r22, 0x03	; 3
    3874:	41 e0       	ldi	r20, 0x01	; 1
    3876:	0e 94 f6 14 	call	0x29ec	; 0x29ec <MCAL_DIO_u8SetPinDirection>
    387a:	fe 01       	movw	r30, r28
    387c:	ed 5b       	subi	r30, 0xBD	; 189
    387e:	ff 4f       	sbci	r31, 0xFF	; 255
    3880:	80 e0       	ldi	r24, 0x00	; 0
    3882:	90 e0       	ldi	r25, 0x00	; 0
    3884:	a0 e0       	ldi	r26, 0x00	; 0
    3886:	b0 e4       	ldi	r27, 0x40	; 64
    3888:	80 83       	st	Z, r24
    388a:	91 83       	std	Z+1, r25	; 0x01
    388c:	a2 83       	std	Z+2, r26	; 0x02
    388e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3890:	8e 01       	movw	r16, r28
    3892:	01 5c       	subi	r16, 0xC1	; 193
    3894:	1f 4f       	sbci	r17, 0xFF	; 255
    3896:	fe 01       	movw	r30, r28
    3898:	ed 5b       	subi	r30, 0xBD	; 189
    389a:	ff 4f       	sbci	r31, 0xFF	; 255
    389c:	60 81       	ld	r22, Z
    389e:	71 81       	ldd	r23, Z+1	; 0x01
    38a0:	82 81       	ldd	r24, Z+2	; 0x02
    38a2:	93 81       	ldd	r25, Z+3	; 0x03
    38a4:	20 e0       	ldi	r18, 0x00	; 0
    38a6:	30 e0       	ldi	r19, 0x00	; 0
    38a8:	4a e7       	ldi	r20, 0x7A	; 122
    38aa:	55 e4       	ldi	r21, 0x45	; 69
    38ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38b0:	dc 01       	movw	r26, r24
    38b2:	cb 01       	movw	r24, r22
    38b4:	f8 01       	movw	r30, r16
    38b6:	80 83       	st	Z, r24
    38b8:	91 83       	std	Z+1, r25	; 0x01
    38ba:	a2 83       	std	Z+2, r26	; 0x02
    38bc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    38be:	fe 01       	movw	r30, r28
    38c0:	ff 96       	adiw	r30, 0x3f	; 63
    38c2:	60 81       	ld	r22, Z
    38c4:	71 81       	ldd	r23, Z+1	; 0x01
    38c6:	82 81       	ldd	r24, Z+2	; 0x02
    38c8:	93 81       	ldd	r25, Z+3	; 0x03
    38ca:	20 e0       	ldi	r18, 0x00	; 0
    38cc:	30 e0       	ldi	r19, 0x00	; 0
    38ce:	40 e8       	ldi	r20, 0x80	; 128
    38d0:	5f e3       	ldi	r21, 0x3F	; 63
    38d2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    38d6:	88 23       	and	r24, r24
    38d8:	2c f4       	brge	.+10     	; 0x38e4 <HAL_LCD_u8LCDInit+0xca>
		__ticks = 1;
    38da:	81 e0       	ldi	r24, 0x01	; 1
    38dc:	90 e0       	ldi	r25, 0x00	; 0
    38de:	9e af       	std	Y+62, r25	; 0x3e
    38e0:	8d af       	std	Y+61, r24	; 0x3d
    38e2:	46 c0       	rjmp	.+140    	; 0x3970 <HAL_LCD_u8LCDInit+0x156>
	else if (__tmp > 65535)
    38e4:	fe 01       	movw	r30, r28
    38e6:	ff 96       	adiw	r30, 0x3f	; 63
    38e8:	60 81       	ld	r22, Z
    38ea:	71 81       	ldd	r23, Z+1	; 0x01
    38ec:	82 81       	ldd	r24, Z+2	; 0x02
    38ee:	93 81       	ldd	r25, Z+3	; 0x03
    38f0:	20 e0       	ldi	r18, 0x00	; 0
    38f2:	3f ef       	ldi	r19, 0xFF	; 255
    38f4:	4f e7       	ldi	r20, 0x7F	; 127
    38f6:	57 e4       	ldi	r21, 0x47	; 71
    38f8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    38fc:	18 16       	cp	r1, r24
    38fe:	64 f5       	brge	.+88     	; 0x3958 <HAL_LCD_u8LCDInit+0x13e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3900:	fe 01       	movw	r30, r28
    3902:	ed 5b       	subi	r30, 0xBD	; 189
    3904:	ff 4f       	sbci	r31, 0xFF	; 255
    3906:	60 81       	ld	r22, Z
    3908:	71 81       	ldd	r23, Z+1	; 0x01
    390a:	82 81       	ldd	r24, Z+2	; 0x02
    390c:	93 81       	ldd	r25, Z+3	; 0x03
    390e:	20 e0       	ldi	r18, 0x00	; 0
    3910:	30 e0       	ldi	r19, 0x00	; 0
    3912:	40 e2       	ldi	r20, 0x20	; 32
    3914:	51 e4       	ldi	r21, 0x41	; 65
    3916:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    391a:	dc 01       	movw	r26, r24
    391c:	cb 01       	movw	r24, r22
    391e:	bc 01       	movw	r22, r24
    3920:	cd 01       	movw	r24, r26
    3922:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3926:	dc 01       	movw	r26, r24
    3928:	cb 01       	movw	r24, r22
    392a:	9e af       	std	Y+62, r25	; 0x3e
    392c:	8d af       	std	Y+61, r24	; 0x3d
    392e:	0f c0       	rjmp	.+30     	; 0x394e <HAL_LCD_u8LCDInit+0x134>
    3930:	80 e9       	ldi	r24, 0x90	; 144
    3932:	91 e0       	ldi	r25, 0x01	; 1
    3934:	9c af       	std	Y+60, r25	; 0x3c
    3936:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3938:	8b ad       	ldd	r24, Y+59	; 0x3b
    393a:	9c ad       	ldd	r25, Y+60	; 0x3c
    393c:	01 97       	sbiw	r24, 0x01	; 1
    393e:	f1 f7       	brne	.-4      	; 0x393c <HAL_LCD_u8LCDInit+0x122>
    3940:	9c af       	std	Y+60, r25	; 0x3c
    3942:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3944:	8d ad       	ldd	r24, Y+61	; 0x3d
    3946:	9e ad       	ldd	r25, Y+62	; 0x3e
    3948:	01 97       	sbiw	r24, 0x01	; 1
    394a:	9e af       	std	Y+62, r25	; 0x3e
    394c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    394e:	8d ad       	ldd	r24, Y+61	; 0x3d
    3950:	9e ad       	ldd	r25, Y+62	; 0x3e
    3952:	00 97       	sbiw	r24, 0x00	; 0
    3954:	69 f7       	brne	.-38     	; 0x3930 <HAL_LCD_u8LCDInit+0x116>
    3956:	16 c0       	rjmp	.+44     	; 0x3984 <HAL_LCD_u8LCDInit+0x16a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3958:	fe 01       	movw	r30, r28
    395a:	ff 96       	adiw	r30, 0x3f	; 63
    395c:	60 81       	ld	r22, Z
    395e:	71 81       	ldd	r23, Z+1	; 0x01
    3960:	82 81       	ldd	r24, Z+2	; 0x02
    3962:	93 81       	ldd	r25, Z+3	; 0x03
    3964:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3968:	dc 01       	movw	r26, r24
    396a:	cb 01       	movw	r24, r22
    396c:	9e af       	std	Y+62, r25	; 0x3e
    396e:	8d af       	std	Y+61, r24	; 0x3d
    3970:	8d ad       	ldd	r24, Y+61	; 0x3d
    3972:	9e ad       	ldd	r25, Y+62	; 0x3e
    3974:	9a af       	std	Y+58, r25	; 0x3a
    3976:	89 af       	std	Y+57, r24	; 0x39
    3978:	89 ad       	ldd	r24, Y+57	; 0x39
    397a:	9a ad       	ldd	r25, Y+58	; 0x3a
    397c:	01 97       	sbiw	r24, 0x01	; 1
    397e:	f1 f7       	brne	.-4      	; 0x397c <HAL_LCD_u8LCDInit+0x162>
    3980:	9a af       	std	Y+58, r25	; 0x3a
    3982:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(2);
	HAL_LCD_u8SendCommands(Reset);
    3984:	82 e0       	ldi	r24, 0x02	; 2
    3986:	0e 94 a5 1e 	call	0x3d4a	; 0x3d4a <HAL_LCD_u8SendCommands>
    398a:	80 e0       	ldi	r24, 0x00	; 0
    398c:	90 e0       	ldi	r25, 0x00	; 0
    398e:	a0 e0       	ldi	r26, 0x00	; 0
    3990:	b0 e4       	ldi	r27, 0x40	; 64
    3992:	8d ab       	std	Y+53, r24	; 0x35
    3994:	9e ab       	std	Y+54, r25	; 0x36
    3996:	af ab       	std	Y+55, r26	; 0x37
    3998:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    399a:	6d a9       	ldd	r22, Y+53	; 0x35
    399c:	7e a9       	ldd	r23, Y+54	; 0x36
    399e:	8f a9       	ldd	r24, Y+55	; 0x37
    39a0:	98 ad       	ldd	r25, Y+56	; 0x38
    39a2:	20 e0       	ldi	r18, 0x00	; 0
    39a4:	30 e0       	ldi	r19, 0x00	; 0
    39a6:	4a e7       	ldi	r20, 0x7A	; 122
    39a8:	55 e4       	ldi	r21, 0x45	; 69
    39aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39ae:	dc 01       	movw	r26, r24
    39b0:	cb 01       	movw	r24, r22
    39b2:	89 ab       	std	Y+49, r24	; 0x31
    39b4:	9a ab       	std	Y+50, r25	; 0x32
    39b6:	ab ab       	std	Y+51, r26	; 0x33
    39b8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    39ba:	69 a9       	ldd	r22, Y+49	; 0x31
    39bc:	7a a9       	ldd	r23, Y+50	; 0x32
    39be:	8b a9       	ldd	r24, Y+51	; 0x33
    39c0:	9c a9       	ldd	r25, Y+52	; 0x34
    39c2:	20 e0       	ldi	r18, 0x00	; 0
    39c4:	30 e0       	ldi	r19, 0x00	; 0
    39c6:	40 e8       	ldi	r20, 0x80	; 128
    39c8:	5f e3       	ldi	r21, 0x3F	; 63
    39ca:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    39ce:	88 23       	and	r24, r24
    39d0:	2c f4       	brge	.+10     	; 0x39dc <HAL_LCD_u8LCDInit+0x1c2>
		__ticks = 1;
    39d2:	81 e0       	ldi	r24, 0x01	; 1
    39d4:	90 e0       	ldi	r25, 0x00	; 0
    39d6:	98 ab       	std	Y+48, r25	; 0x30
    39d8:	8f a7       	std	Y+47, r24	; 0x2f
    39da:	3f c0       	rjmp	.+126    	; 0x3a5a <HAL_LCD_u8LCDInit+0x240>
	else if (__tmp > 65535)
    39dc:	69 a9       	ldd	r22, Y+49	; 0x31
    39de:	7a a9       	ldd	r23, Y+50	; 0x32
    39e0:	8b a9       	ldd	r24, Y+51	; 0x33
    39e2:	9c a9       	ldd	r25, Y+52	; 0x34
    39e4:	20 e0       	ldi	r18, 0x00	; 0
    39e6:	3f ef       	ldi	r19, 0xFF	; 255
    39e8:	4f e7       	ldi	r20, 0x7F	; 127
    39ea:	57 e4       	ldi	r21, 0x47	; 71
    39ec:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    39f0:	18 16       	cp	r1, r24
    39f2:	4c f5       	brge	.+82     	; 0x3a46 <HAL_LCD_u8LCDInit+0x22c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    39f4:	6d a9       	ldd	r22, Y+53	; 0x35
    39f6:	7e a9       	ldd	r23, Y+54	; 0x36
    39f8:	8f a9       	ldd	r24, Y+55	; 0x37
    39fa:	98 ad       	ldd	r25, Y+56	; 0x38
    39fc:	20 e0       	ldi	r18, 0x00	; 0
    39fe:	30 e0       	ldi	r19, 0x00	; 0
    3a00:	40 e2       	ldi	r20, 0x20	; 32
    3a02:	51 e4       	ldi	r21, 0x41	; 65
    3a04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a08:	dc 01       	movw	r26, r24
    3a0a:	cb 01       	movw	r24, r22
    3a0c:	bc 01       	movw	r22, r24
    3a0e:	cd 01       	movw	r24, r26
    3a10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a14:	dc 01       	movw	r26, r24
    3a16:	cb 01       	movw	r24, r22
    3a18:	98 ab       	std	Y+48, r25	; 0x30
    3a1a:	8f a7       	std	Y+47, r24	; 0x2f
    3a1c:	0f c0       	rjmp	.+30     	; 0x3a3c <HAL_LCD_u8LCDInit+0x222>
    3a1e:	80 e9       	ldi	r24, 0x90	; 144
    3a20:	91 e0       	ldi	r25, 0x01	; 1
    3a22:	9e a7       	std	Y+46, r25	; 0x2e
    3a24:	8d a7       	std	Y+45, r24	; 0x2d
    3a26:	8d a5       	ldd	r24, Y+45	; 0x2d
    3a28:	9e a5       	ldd	r25, Y+46	; 0x2e
    3a2a:	01 97       	sbiw	r24, 0x01	; 1
    3a2c:	f1 f7       	brne	.-4      	; 0x3a2a <HAL_LCD_u8LCDInit+0x210>
    3a2e:	9e a7       	std	Y+46, r25	; 0x2e
    3a30:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a32:	8f a5       	ldd	r24, Y+47	; 0x2f
    3a34:	98 a9       	ldd	r25, Y+48	; 0x30
    3a36:	01 97       	sbiw	r24, 0x01	; 1
    3a38:	98 ab       	std	Y+48, r25	; 0x30
    3a3a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a3c:	8f a5       	ldd	r24, Y+47	; 0x2f
    3a3e:	98 a9       	ldd	r25, Y+48	; 0x30
    3a40:	00 97       	sbiw	r24, 0x00	; 0
    3a42:	69 f7       	brne	.-38     	; 0x3a1e <HAL_LCD_u8LCDInit+0x204>
    3a44:	14 c0       	rjmp	.+40     	; 0x3a6e <HAL_LCD_u8LCDInit+0x254>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a46:	69 a9       	ldd	r22, Y+49	; 0x31
    3a48:	7a a9       	ldd	r23, Y+50	; 0x32
    3a4a:	8b a9       	ldd	r24, Y+51	; 0x33
    3a4c:	9c a9       	ldd	r25, Y+52	; 0x34
    3a4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a52:	dc 01       	movw	r26, r24
    3a54:	cb 01       	movw	r24, r22
    3a56:	98 ab       	std	Y+48, r25	; 0x30
    3a58:	8f a7       	std	Y+47, r24	; 0x2f
    3a5a:	8f a5       	ldd	r24, Y+47	; 0x2f
    3a5c:	98 a9       	ldd	r25, Y+48	; 0x30
    3a5e:	9c a7       	std	Y+44, r25	; 0x2c
    3a60:	8b a7       	std	Y+43, r24	; 0x2b
    3a62:	8b a5       	ldd	r24, Y+43	; 0x2b
    3a64:	9c a5       	ldd	r25, Y+44	; 0x2c
    3a66:	01 97       	sbiw	r24, 0x01	; 1
    3a68:	f1 f7       	brne	.-4      	; 0x3a66 <HAL_LCD_u8LCDInit+0x24c>
    3a6a:	9c a7       	std	Y+44, r25	; 0x2c
    3a6c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(2);
	HAL_LCD_u8SendCommands(Function_Set);
    3a6e:	88 e2       	ldi	r24, 0x28	; 40
    3a70:	0e 94 a5 1e 	call	0x3d4a	; 0x3d4a <HAL_LCD_u8SendCommands>
    3a74:	80 e0       	ldi	r24, 0x00	; 0
    3a76:	90 e0       	ldi	r25, 0x00	; 0
    3a78:	a0 e0       	ldi	r26, 0x00	; 0
    3a7a:	b0 e4       	ldi	r27, 0x40	; 64
    3a7c:	8f a3       	std	Y+39, r24	; 0x27
    3a7e:	98 a7       	std	Y+40, r25	; 0x28
    3a80:	a9 a7       	std	Y+41, r26	; 0x29
    3a82:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a84:	6f a1       	ldd	r22, Y+39	; 0x27
    3a86:	78 a5       	ldd	r23, Y+40	; 0x28
    3a88:	89 a5       	ldd	r24, Y+41	; 0x29
    3a8a:	9a a5       	ldd	r25, Y+42	; 0x2a
    3a8c:	20 e0       	ldi	r18, 0x00	; 0
    3a8e:	30 e0       	ldi	r19, 0x00	; 0
    3a90:	4a e7       	ldi	r20, 0x7A	; 122
    3a92:	55 e4       	ldi	r21, 0x45	; 69
    3a94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a98:	dc 01       	movw	r26, r24
    3a9a:	cb 01       	movw	r24, r22
    3a9c:	8b a3       	std	Y+35, r24	; 0x23
    3a9e:	9c a3       	std	Y+36, r25	; 0x24
    3aa0:	ad a3       	std	Y+37, r26	; 0x25
    3aa2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3aa4:	6b a1       	ldd	r22, Y+35	; 0x23
    3aa6:	7c a1       	ldd	r23, Y+36	; 0x24
    3aa8:	8d a1       	ldd	r24, Y+37	; 0x25
    3aaa:	9e a1       	ldd	r25, Y+38	; 0x26
    3aac:	20 e0       	ldi	r18, 0x00	; 0
    3aae:	30 e0       	ldi	r19, 0x00	; 0
    3ab0:	40 e8       	ldi	r20, 0x80	; 128
    3ab2:	5f e3       	ldi	r21, 0x3F	; 63
    3ab4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3ab8:	88 23       	and	r24, r24
    3aba:	2c f4       	brge	.+10     	; 0x3ac6 <HAL_LCD_u8LCDInit+0x2ac>
		__ticks = 1;
    3abc:	81 e0       	ldi	r24, 0x01	; 1
    3abe:	90 e0       	ldi	r25, 0x00	; 0
    3ac0:	9a a3       	std	Y+34, r25	; 0x22
    3ac2:	89 a3       	std	Y+33, r24	; 0x21
    3ac4:	3f c0       	rjmp	.+126    	; 0x3b44 <HAL_LCD_u8LCDInit+0x32a>
	else if (__tmp > 65535)
    3ac6:	6b a1       	ldd	r22, Y+35	; 0x23
    3ac8:	7c a1       	ldd	r23, Y+36	; 0x24
    3aca:	8d a1       	ldd	r24, Y+37	; 0x25
    3acc:	9e a1       	ldd	r25, Y+38	; 0x26
    3ace:	20 e0       	ldi	r18, 0x00	; 0
    3ad0:	3f ef       	ldi	r19, 0xFF	; 255
    3ad2:	4f e7       	ldi	r20, 0x7F	; 127
    3ad4:	57 e4       	ldi	r21, 0x47	; 71
    3ad6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3ada:	18 16       	cp	r1, r24
    3adc:	4c f5       	brge	.+82     	; 0x3b30 <HAL_LCD_u8LCDInit+0x316>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ade:	6f a1       	ldd	r22, Y+39	; 0x27
    3ae0:	78 a5       	ldd	r23, Y+40	; 0x28
    3ae2:	89 a5       	ldd	r24, Y+41	; 0x29
    3ae4:	9a a5       	ldd	r25, Y+42	; 0x2a
    3ae6:	20 e0       	ldi	r18, 0x00	; 0
    3ae8:	30 e0       	ldi	r19, 0x00	; 0
    3aea:	40 e2       	ldi	r20, 0x20	; 32
    3aec:	51 e4       	ldi	r21, 0x41	; 65
    3aee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3af2:	dc 01       	movw	r26, r24
    3af4:	cb 01       	movw	r24, r22
    3af6:	bc 01       	movw	r22, r24
    3af8:	cd 01       	movw	r24, r26
    3afa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3afe:	dc 01       	movw	r26, r24
    3b00:	cb 01       	movw	r24, r22
    3b02:	9a a3       	std	Y+34, r25	; 0x22
    3b04:	89 a3       	std	Y+33, r24	; 0x21
    3b06:	0f c0       	rjmp	.+30     	; 0x3b26 <HAL_LCD_u8LCDInit+0x30c>
    3b08:	80 e9       	ldi	r24, 0x90	; 144
    3b0a:	91 e0       	ldi	r25, 0x01	; 1
    3b0c:	98 a3       	std	Y+32, r25	; 0x20
    3b0e:	8f 8f       	std	Y+31, r24	; 0x1f
    3b10:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3b12:	98 a1       	ldd	r25, Y+32	; 0x20
    3b14:	01 97       	sbiw	r24, 0x01	; 1
    3b16:	f1 f7       	brne	.-4      	; 0x3b14 <HAL_LCD_u8LCDInit+0x2fa>
    3b18:	98 a3       	std	Y+32, r25	; 0x20
    3b1a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b1c:	89 a1       	ldd	r24, Y+33	; 0x21
    3b1e:	9a a1       	ldd	r25, Y+34	; 0x22
    3b20:	01 97       	sbiw	r24, 0x01	; 1
    3b22:	9a a3       	std	Y+34, r25	; 0x22
    3b24:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b26:	89 a1       	ldd	r24, Y+33	; 0x21
    3b28:	9a a1       	ldd	r25, Y+34	; 0x22
    3b2a:	00 97       	sbiw	r24, 0x00	; 0
    3b2c:	69 f7       	brne	.-38     	; 0x3b08 <HAL_LCD_u8LCDInit+0x2ee>
    3b2e:	14 c0       	rjmp	.+40     	; 0x3b58 <HAL_LCD_u8LCDInit+0x33e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b30:	6b a1       	ldd	r22, Y+35	; 0x23
    3b32:	7c a1       	ldd	r23, Y+36	; 0x24
    3b34:	8d a1       	ldd	r24, Y+37	; 0x25
    3b36:	9e a1       	ldd	r25, Y+38	; 0x26
    3b38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b3c:	dc 01       	movw	r26, r24
    3b3e:	cb 01       	movw	r24, r22
    3b40:	9a a3       	std	Y+34, r25	; 0x22
    3b42:	89 a3       	std	Y+33, r24	; 0x21
    3b44:	89 a1       	ldd	r24, Y+33	; 0x21
    3b46:	9a a1       	ldd	r25, Y+34	; 0x22
    3b48:	9e 8f       	std	Y+30, r25	; 0x1e
    3b4a:	8d 8f       	std	Y+29, r24	; 0x1d
    3b4c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3b4e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3b50:	01 97       	sbiw	r24, 0x01	; 1
    3b52:	f1 f7       	brne	.-4      	; 0x3b50 <HAL_LCD_u8LCDInit+0x336>
    3b54:	9e 8f       	std	Y+30, r25	; 0x1e
    3b56:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(2);
	HAL_LCD_u8SendCommands(Display_Mode);
    3b58:	8f e0       	ldi	r24, 0x0F	; 15
    3b5a:	0e 94 a5 1e 	call	0x3d4a	; 0x3d4a <HAL_LCD_u8SendCommands>
    3b5e:	80 e0       	ldi	r24, 0x00	; 0
    3b60:	90 e0       	ldi	r25, 0x00	; 0
    3b62:	a0 e0       	ldi	r26, 0x00	; 0
    3b64:	b0 e4       	ldi	r27, 0x40	; 64
    3b66:	89 8f       	std	Y+25, r24	; 0x19
    3b68:	9a 8f       	std	Y+26, r25	; 0x1a
    3b6a:	ab 8f       	std	Y+27, r26	; 0x1b
    3b6c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b6e:	69 8d       	ldd	r22, Y+25	; 0x19
    3b70:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3b72:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3b74:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3b76:	20 e0       	ldi	r18, 0x00	; 0
    3b78:	30 e0       	ldi	r19, 0x00	; 0
    3b7a:	4a e7       	ldi	r20, 0x7A	; 122
    3b7c:	55 e4       	ldi	r21, 0x45	; 69
    3b7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b82:	dc 01       	movw	r26, r24
    3b84:	cb 01       	movw	r24, r22
    3b86:	8d 8b       	std	Y+21, r24	; 0x15
    3b88:	9e 8b       	std	Y+22, r25	; 0x16
    3b8a:	af 8b       	std	Y+23, r26	; 0x17
    3b8c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3b8e:	6d 89       	ldd	r22, Y+21	; 0x15
    3b90:	7e 89       	ldd	r23, Y+22	; 0x16
    3b92:	8f 89       	ldd	r24, Y+23	; 0x17
    3b94:	98 8d       	ldd	r25, Y+24	; 0x18
    3b96:	20 e0       	ldi	r18, 0x00	; 0
    3b98:	30 e0       	ldi	r19, 0x00	; 0
    3b9a:	40 e8       	ldi	r20, 0x80	; 128
    3b9c:	5f e3       	ldi	r21, 0x3F	; 63
    3b9e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3ba2:	88 23       	and	r24, r24
    3ba4:	2c f4       	brge	.+10     	; 0x3bb0 <HAL_LCD_u8LCDInit+0x396>
		__ticks = 1;
    3ba6:	81 e0       	ldi	r24, 0x01	; 1
    3ba8:	90 e0       	ldi	r25, 0x00	; 0
    3baa:	9c 8b       	std	Y+20, r25	; 0x14
    3bac:	8b 8b       	std	Y+19, r24	; 0x13
    3bae:	3f c0       	rjmp	.+126    	; 0x3c2e <HAL_LCD_u8LCDInit+0x414>
	else if (__tmp > 65535)
    3bb0:	6d 89       	ldd	r22, Y+21	; 0x15
    3bb2:	7e 89       	ldd	r23, Y+22	; 0x16
    3bb4:	8f 89       	ldd	r24, Y+23	; 0x17
    3bb6:	98 8d       	ldd	r25, Y+24	; 0x18
    3bb8:	20 e0       	ldi	r18, 0x00	; 0
    3bba:	3f ef       	ldi	r19, 0xFF	; 255
    3bbc:	4f e7       	ldi	r20, 0x7F	; 127
    3bbe:	57 e4       	ldi	r21, 0x47	; 71
    3bc0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3bc4:	18 16       	cp	r1, r24
    3bc6:	4c f5       	brge	.+82     	; 0x3c1a <HAL_LCD_u8LCDInit+0x400>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3bc8:	69 8d       	ldd	r22, Y+25	; 0x19
    3bca:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3bcc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3bce:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3bd0:	20 e0       	ldi	r18, 0x00	; 0
    3bd2:	30 e0       	ldi	r19, 0x00	; 0
    3bd4:	40 e2       	ldi	r20, 0x20	; 32
    3bd6:	51 e4       	ldi	r21, 0x41	; 65
    3bd8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bdc:	dc 01       	movw	r26, r24
    3bde:	cb 01       	movw	r24, r22
    3be0:	bc 01       	movw	r22, r24
    3be2:	cd 01       	movw	r24, r26
    3be4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3be8:	dc 01       	movw	r26, r24
    3bea:	cb 01       	movw	r24, r22
    3bec:	9c 8b       	std	Y+20, r25	; 0x14
    3bee:	8b 8b       	std	Y+19, r24	; 0x13
    3bf0:	0f c0       	rjmp	.+30     	; 0x3c10 <HAL_LCD_u8LCDInit+0x3f6>
    3bf2:	80 e9       	ldi	r24, 0x90	; 144
    3bf4:	91 e0       	ldi	r25, 0x01	; 1
    3bf6:	9a 8b       	std	Y+18, r25	; 0x12
    3bf8:	89 8b       	std	Y+17, r24	; 0x11
    3bfa:	89 89       	ldd	r24, Y+17	; 0x11
    3bfc:	9a 89       	ldd	r25, Y+18	; 0x12
    3bfe:	01 97       	sbiw	r24, 0x01	; 1
    3c00:	f1 f7       	brne	.-4      	; 0x3bfe <HAL_LCD_u8LCDInit+0x3e4>
    3c02:	9a 8b       	std	Y+18, r25	; 0x12
    3c04:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c06:	8b 89       	ldd	r24, Y+19	; 0x13
    3c08:	9c 89       	ldd	r25, Y+20	; 0x14
    3c0a:	01 97       	sbiw	r24, 0x01	; 1
    3c0c:	9c 8b       	std	Y+20, r25	; 0x14
    3c0e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c10:	8b 89       	ldd	r24, Y+19	; 0x13
    3c12:	9c 89       	ldd	r25, Y+20	; 0x14
    3c14:	00 97       	sbiw	r24, 0x00	; 0
    3c16:	69 f7       	brne	.-38     	; 0x3bf2 <HAL_LCD_u8LCDInit+0x3d8>
    3c18:	14 c0       	rjmp	.+40     	; 0x3c42 <HAL_LCD_u8LCDInit+0x428>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c1a:	6d 89       	ldd	r22, Y+21	; 0x15
    3c1c:	7e 89       	ldd	r23, Y+22	; 0x16
    3c1e:	8f 89       	ldd	r24, Y+23	; 0x17
    3c20:	98 8d       	ldd	r25, Y+24	; 0x18
    3c22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c26:	dc 01       	movw	r26, r24
    3c28:	cb 01       	movw	r24, r22
    3c2a:	9c 8b       	std	Y+20, r25	; 0x14
    3c2c:	8b 8b       	std	Y+19, r24	; 0x13
    3c2e:	8b 89       	ldd	r24, Y+19	; 0x13
    3c30:	9c 89       	ldd	r25, Y+20	; 0x14
    3c32:	98 8b       	std	Y+16, r25	; 0x10
    3c34:	8f 87       	std	Y+15, r24	; 0x0f
    3c36:	8f 85       	ldd	r24, Y+15	; 0x0f
    3c38:	98 89       	ldd	r25, Y+16	; 0x10
    3c3a:	01 97       	sbiw	r24, 0x01	; 1
    3c3c:	f1 f7       	brne	.-4      	; 0x3c3a <HAL_LCD_u8LCDInit+0x420>
    3c3e:	98 8b       	std	Y+16, r25	; 0x10
    3c40:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	HAL_LCD_u8SendCommands(Display_Clear);
    3c42:	81 e0       	ldi	r24, 0x01	; 1
    3c44:	0e 94 a5 1e 	call	0x3d4a	; 0x3d4a <HAL_LCD_u8SendCommands>
    3c48:	80 e0       	ldi	r24, 0x00	; 0
    3c4a:	90 e0       	ldi	r25, 0x00	; 0
    3c4c:	a0 e0       	ldi	r26, 0x00	; 0
    3c4e:	b0 e4       	ldi	r27, 0x40	; 64
    3c50:	8b 87       	std	Y+11, r24	; 0x0b
    3c52:	9c 87       	std	Y+12, r25	; 0x0c
    3c54:	ad 87       	std	Y+13, r26	; 0x0d
    3c56:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c58:	6b 85       	ldd	r22, Y+11	; 0x0b
    3c5a:	7c 85       	ldd	r23, Y+12	; 0x0c
    3c5c:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c5e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c60:	20 e0       	ldi	r18, 0x00	; 0
    3c62:	30 e0       	ldi	r19, 0x00	; 0
    3c64:	4a e7       	ldi	r20, 0x7A	; 122
    3c66:	55 e4       	ldi	r21, 0x45	; 69
    3c68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c6c:	dc 01       	movw	r26, r24
    3c6e:	cb 01       	movw	r24, r22
    3c70:	8f 83       	std	Y+7, r24	; 0x07
    3c72:	98 87       	std	Y+8, r25	; 0x08
    3c74:	a9 87       	std	Y+9, r26	; 0x09
    3c76:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3c78:	6f 81       	ldd	r22, Y+7	; 0x07
    3c7a:	78 85       	ldd	r23, Y+8	; 0x08
    3c7c:	89 85       	ldd	r24, Y+9	; 0x09
    3c7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c80:	20 e0       	ldi	r18, 0x00	; 0
    3c82:	30 e0       	ldi	r19, 0x00	; 0
    3c84:	40 e8       	ldi	r20, 0x80	; 128
    3c86:	5f e3       	ldi	r21, 0x3F	; 63
    3c88:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3c8c:	88 23       	and	r24, r24
    3c8e:	2c f4       	brge	.+10     	; 0x3c9a <HAL_LCD_u8LCDInit+0x480>
		__ticks = 1;
    3c90:	81 e0       	ldi	r24, 0x01	; 1
    3c92:	90 e0       	ldi	r25, 0x00	; 0
    3c94:	9e 83       	std	Y+6, r25	; 0x06
    3c96:	8d 83       	std	Y+5, r24	; 0x05
    3c98:	3f c0       	rjmp	.+126    	; 0x3d18 <HAL_LCD_u8LCDInit+0x4fe>
	else if (__tmp > 65535)
    3c9a:	6f 81       	ldd	r22, Y+7	; 0x07
    3c9c:	78 85       	ldd	r23, Y+8	; 0x08
    3c9e:	89 85       	ldd	r24, Y+9	; 0x09
    3ca0:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ca2:	20 e0       	ldi	r18, 0x00	; 0
    3ca4:	3f ef       	ldi	r19, 0xFF	; 255
    3ca6:	4f e7       	ldi	r20, 0x7F	; 127
    3ca8:	57 e4       	ldi	r21, 0x47	; 71
    3caa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3cae:	18 16       	cp	r1, r24
    3cb0:	4c f5       	brge	.+82     	; 0x3d04 <HAL_LCD_u8LCDInit+0x4ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3cb2:	6b 85       	ldd	r22, Y+11	; 0x0b
    3cb4:	7c 85       	ldd	r23, Y+12	; 0x0c
    3cb6:	8d 85       	ldd	r24, Y+13	; 0x0d
    3cb8:	9e 85       	ldd	r25, Y+14	; 0x0e
    3cba:	20 e0       	ldi	r18, 0x00	; 0
    3cbc:	30 e0       	ldi	r19, 0x00	; 0
    3cbe:	40 e2       	ldi	r20, 0x20	; 32
    3cc0:	51 e4       	ldi	r21, 0x41	; 65
    3cc2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cc6:	dc 01       	movw	r26, r24
    3cc8:	cb 01       	movw	r24, r22
    3cca:	bc 01       	movw	r22, r24
    3ccc:	cd 01       	movw	r24, r26
    3cce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3cd2:	dc 01       	movw	r26, r24
    3cd4:	cb 01       	movw	r24, r22
    3cd6:	9e 83       	std	Y+6, r25	; 0x06
    3cd8:	8d 83       	std	Y+5, r24	; 0x05
    3cda:	0f c0       	rjmp	.+30     	; 0x3cfa <HAL_LCD_u8LCDInit+0x4e0>
    3cdc:	80 e9       	ldi	r24, 0x90	; 144
    3cde:	91 e0       	ldi	r25, 0x01	; 1
    3ce0:	9c 83       	std	Y+4, r25	; 0x04
    3ce2:	8b 83       	std	Y+3, r24	; 0x03
    3ce4:	8b 81       	ldd	r24, Y+3	; 0x03
    3ce6:	9c 81       	ldd	r25, Y+4	; 0x04
    3ce8:	01 97       	sbiw	r24, 0x01	; 1
    3cea:	f1 f7       	brne	.-4      	; 0x3ce8 <HAL_LCD_u8LCDInit+0x4ce>
    3cec:	9c 83       	std	Y+4, r25	; 0x04
    3cee:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3cf0:	8d 81       	ldd	r24, Y+5	; 0x05
    3cf2:	9e 81       	ldd	r25, Y+6	; 0x06
    3cf4:	01 97       	sbiw	r24, 0x01	; 1
    3cf6:	9e 83       	std	Y+6, r25	; 0x06
    3cf8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3cfa:	8d 81       	ldd	r24, Y+5	; 0x05
    3cfc:	9e 81       	ldd	r25, Y+6	; 0x06
    3cfe:	00 97       	sbiw	r24, 0x00	; 0
    3d00:	69 f7       	brne	.-38     	; 0x3cdc <HAL_LCD_u8LCDInit+0x4c2>
    3d02:	14 c0       	rjmp	.+40     	; 0x3d2c <HAL_LCD_u8LCDInit+0x512>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d04:	6f 81       	ldd	r22, Y+7	; 0x07
    3d06:	78 85       	ldd	r23, Y+8	; 0x08
    3d08:	89 85       	ldd	r24, Y+9	; 0x09
    3d0a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d10:	dc 01       	movw	r26, r24
    3d12:	cb 01       	movw	r24, r22
    3d14:	9e 83       	std	Y+6, r25	; 0x06
    3d16:	8d 83       	std	Y+5, r24	; 0x05
    3d18:	8d 81       	ldd	r24, Y+5	; 0x05
    3d1a:	9e 81       	ldd	r25, Y+6	; 0x06
    3d1c:	9a 83       	std	Y+2, r25	; 0x02
    3d1e:	89 83       	std	Y+1, r24	; 0x01
    3d20:	89 81       	ldd	r24, Y+1	; 0x01
    3d22:	9a 81       	ldd	r25, Y+2	; 0x02
    3d24:	01 97       	sbiw	r24, 0x01	; 1
    3d26:	f1 f7       	brne	.-4      	; 0x3d24 <HAL_LCD_u8LCDInit+0x50a>
    3d28:	9a 83       	std	Y+2, r25	; 0x02
    3d2a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	HAL_LCD_u8SendCommands(Entry_Mode);
    3d2c:	86 e0       	ldi	r24, 0x06	; 6
    3d2e:	0e 94 a5 1e 	call	0x3d4a	; 0x3d4a <HAL_LCD_u8SendCommands>
}
    3d32:	ca 5b       	subi	r28, 0xBA	; 186
    3d34:	df 4f       	sbci	r29, 0xFF	; 255
    3d36:	0f b6       	in	r0, 0x3f	; 63
    3d38:	f8 94       	cli
    3d3a:	de bf       	out	0x3e, r29	; 62
    3d3c:	0f be       	out	0x3f, r0	; 63
    3d3e:	cd bf       	out	0x3d, r28	; 61
    3d40:	cf 91       	pop	r28
    3d42:	df 91       	pop	r29
    3d44:	1f 91       	pop	r17
    3d46:	0f 91       	pop	r16
    3d48:	08 95       	ret

00003d4a <HAL_LCD_u8SendCommands>:

void HAL_LCD_u8SendCommands(u8 Loc_u8LCD_Command) {
    3d4a:	df 93       	push	r29
    3d4c:	cf 93       	push	r28
    3d4e:	cd b7       	in	r28, 0x3d	; 61
    3d50:	de b7       	in	r29, 0x3e	; 62
    3d52:	6d 97       	sbiw	r28, 0x1d	; 29
    3d54:	0f b6       	in	r0, 0x3f	; 63
    3d56:	f8 94       	cli
    3d58:	de bf       	out	0x3e, r29	; 62
    3d5a:	0f be       	out	0x3f, r0	; 63
    3d5c:	cd bf       	out	0x3d, r28	; 61
    3d5e:	8d 8f       	std	Y+29, r24	; 0x1d
	MCAL_DIO_u8SetPinValue(RS_Port, RS_Pin, RS_Low);
    3d60:	81 e0       	ldi	r24, 0x01	; 1
    3d62:	61 e0       	ldi	r22, 0x01	; 1
    3d64:	40 e0       	ldi	r20, 0x00	; 0
    3d66:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <MCAL_DIO_u8SetPinValue>
	MCAL_DIO_u8SetPinValue(RW_Port, RW_Pin, RW_Low);
    3d6a:	81 e0       	ldi	r24, 0x01	; 1
    3d6c:	62 e0       	ldi	r22, 0x02	; 2
    3d6e:	40 e0       	ldi	r20, 0x00	; 0
    3d70:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <MCAL_DIO_u8SetPinValue>
	MCAL_DIO_u8SetPortValue(LCD_D_PORT, Loc_u8LCD_Command);
    3d74:	80 e0       	ldi	r24, 0x00	; 0
    3d76:	6d 8d       	ldd	r22, Y+29	; 0x1d
    3d78:	0e 94 e1 15 	call	0x2bc2	; 0x2bc2 <MCAL_DIO_u8SetPortValue>
	MCAL_DIO_u8SetPinValue(Enable_PORT, Enable_PIN, Enable_High);
    3d7c:	81 e0       	ldi	r24, 0x01	; 1
    3d7e:	63 e0       	ldi	r22, 0x03	; 3
    3d80:	41 e0       	ldi	r20, 0x01	; 1
    3d82:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <MCAL_DIO_u8SetPinValue>
    3d86:	80 e0       	ldi	r24, 0x00	; 0
    3d88:	90 e0       	ldi	r25, 0x00	; 0
    3d8a:	a0 e0       	ldi	r26, 0x00	; 0
    3d8c:	b0 e4       	ldi	r27, 0x40	; 64
    3d8e:	89 8f       	std	Y+25, r24	; 0x19
    3d90:	9a 8f       	std	Y+26, r25	; 0x1a
    3d92:	ab 8f       	std	Y+27, r26	; 0x1b
    3d94:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d96:	69 8d       	ldd	r22, Y+25	; 0x19
    3d98:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3d9a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3d9c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3d9e:	20 e0       	ldi	r18, 0x00	; 0
    3da0:	30 e0       	ldi	r19, 0x00	; 0
    3da2:	4a e7       	ldi	r20, 0x7A	; 122
    3da4:	55 e4       	ldi	r21, 0x45	; 69
    3da6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3daa:	dc 01       	movw	r26, r24
    3dac:	cb 01       	movw	r24, r22
    3dae:	8d 8b       	std	Y+21, r24	; 0x15
    3db0:	9e 8b       	std	Y+22, r25	; 0x16
    3db2:	af 8b       	std	Y+23, r26	; 0x17
    3db4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3db6:	6d 89       	ldd	r22, Y+21	; 0x15
    3db8:	7e 89       	ldd	r23, Y+22	; 0x16
    3dba:	8f 89       	ldd	r24, Y+23	; 0x17
    3dbc:	98 8d       	ldd	r25, Y+24	; 0x18
    3dbe:	20 e0       	ldi	r18, 0x00	; 0
    3dc0:	30 e0       	ldi	r19, 0x00	; 0
    3dc2:	40 e8       	ldi	r20, 0x80	; 128
    3dc4:	5f e3       	ldi	r21, 0x3F	; 63
    3dc6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3dca:	88 23       	and	r24, r24
    3dcc:	2c f4       	brge	.+10     	; 0x3dd8 <HAL_LCD_u8SendCommands+0x8e>
		__ticks = 1;
    3dce:	81 e0       	ldi	r24, 0x01	; 1
    3dd0:	90 e0       	ldi	r25, 0x00	; 0
    3dd2:	9c 8b       	std	Y+20, r25	; 0x14
    3dd4:	8b 8b       	std	Y+19, r24	; 0x13
    3dd6:	3f c0       	rjmp	.+126    	; 0x3e56 <HAL_LCD_u8SendCommands+0x10c>
	else if (__tmp > 65535)
    3dd8:	6d 89       	ldd	r22, Y+21	; 0x15
    3dda:	7e 89       	ldd	r23, Y+22	; 0x16
    3ddc:	8f 89       	ldd	r24, Y+23	; 0x17
    3dde:	98 8d       	ldd	r25, Y+24	; 0x18
    3de0:	20 e0       	ldi	r18, 0x00	; 0
    3de2:	3f ef       	ldi	r19, 0xFF	; 255
    3de4:	4f e7       	ldi	r20, 0x7F	; 127
    3de6:	57 e4       	ldi	r21, 0x47	; 71
    3de8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3dec:	18 16       	cp	r1, r24
    3dee:	4c f5       	brge	.+82     	; 0x3e42 <HAL_LCD_u8SendCommands+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3df0:	69 8d       	ldd	r22, Y+25	; 0x19
    3df2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3df4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3df6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3df8:	20 e0       	ldi	r18, 0x00	; 0
    3dfa:	30 e0       	ldi	r19, 0x00	; 0
    3dfc:	40 e2       	ldi	r20, 0x20	; 32
    3dfe:	51 e4       	ldi	r21, 0x41	; 65
    3e00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e04:	dc 01       	movw	r26, r24
    3e06:	cb 01       	movw	r24, r22
    3e08:	bc 01       	movw	r22, r24
    3e0a:	cd 01       	movw	r24, r26
    3e0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e10:	dc 01       	movw	r26, r24
    3e12:	cb 01       	movw	r24, r22
    3e14:	9c 8b       	std	Y+20, r25	; 0x14
    3e16:	8b 8b       	std	Y+19, r24	; 0x13
    3e18:	0f c0       	rjmp	.+30     	; 0x3e38 <HAL_LCD_u8SendCommands+0xee>
    3e1a:	80 e9       	ldi	r24, 0x90	; 144
    3e1c:	91 e0       	ldi	r25, 0x01	; 1
    3e1e:	9a 8b       	std	Y+18, r25	; 0x12
    3e20:	89 8b       	std	Y+17, r24	; 0x11
    3e22:	89 89       	ldd	r24, Y+17	; 0x11
    3e24:	9a 89       	ldd	r25, Y+18	; 0x12
    3e26:	01 97       	sbiw	r24, 0x01	; 1
    3e28:	f1 f7       	brne	.-4      	; 0x3e26 <HAL_LCD_u8SendCommands+0xdc>
    3e2a:	9a 8b       	std	Y+18, r25	; 0x12
    3e2c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e2e:	8b 89       	ldd	r24, Y+19	; 0x13
    3e30:	9c 89       	ldd	r25, Y+20	; 0x14
    3e32:	01 97       	sbiw	r24, 0x01	; 1
    3e34:	9c 8b       	std	Y+20, r25	; 0x14
    3e36:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e38:	8b 89       	ldd	r24, Y+19	; 0x13
    3e3a:	9c 89       	ldd	r25, Y+20	; 0x14
    3e3c:	00 97       	sbiw	r24, 0x00	; 0
    3e3e:	69 f7       	brne	.-38     	; 0x3e1a <HAL_LCD_u8SendCommands+0xd0>
    3e40:	14 c0       	rjmp	.+40     	; 0x3e6a <HAL_LCD_u8SendCommands+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e42:	6d 89       	ldd	r22, Y+21	; 0x15
    3e44:	7e 89       	ldd	r23, Y+22	; 0x16
    3e46:	8f 89       	ldd	r24, Y+23	; 0x17
    3e48:	98 8d       	ldd	r25, Y+24	; 0x18
    3e4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e4e:	dc 01       	movw	r26, r24
    3e50:	cb 01       	movw	r24, r22
    3e52:	9c 8b       	std	Y+20, r25	; 0x14
    3e54:	8b 8b       	std	Y+19, r24	; 0x13
    3e56:	8b 89       	ldd	r24, Y+19	; 0x13
    3e58:	9c 89       	ldd	r25, Y+20	; 0x14
    3e5a:	98 8b       	std	Y+16, r25	; 0x10
    3e5c:	8f 87       	std	Y+15, r24	; 0x0f
    3e5e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3e60:	98 89       	ldd	r25, Y+16	; 0x10
    3e62:	01 97       	sbiw	r24, 0x01	; 1
    3e64:	f1 f7       	brne	.-4      	; 0x3e62 <HAL_LCD_u8SendCommands+0x118>
    3e66:	98 8b       	std	Y+16, r25	; 0x10
    3e68:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	MCAL_DIO_u8SetPinValue(Enable_PORT, Enable_PIN, Enable_Low);
    3e6a:	81 e0       	ldi	r24, 0x01	; 1
    3e6c:	63 e0       	ldi	r22, 0x03	; 3
    3e6e:	40 e0       	ldi	r20, 0x00	; 0
    3e70:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <MCAL_DIO_u8SetPinValue>
	MCAL_DIO_u8SetPortValue(LCD_D_PORT, (Loc_u8LCD_Command << 4));
    3e74:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3e76:	98 2f       	mov	r25, r24
    3e78:	92 95       	swap	r25
    3e7a:	90 7f       	andi	r25, 0xF0	; 240
    3e7c:	80 e0       	ldi	r24, 0x00	; 0
    3e7e:	69 2f       	mov	r22, r25
    3e80:	0e 94 e1 15 	call	0x2bc2	; 0x2bc2 <MCAL_DIO_u8SetPortValue>
	MCAL_DIO_u8SetPinValue(Enable_PORT, Enable_PIN, Enable_High);
    3e84:	81 e0       	ldi	r24, 0x01	; 1
    3e86:	63 e0       	ldi	r22, 0x03	; 3
    3e88:	41 e0       	ldi	r20, 0x01	; 1
    3e8a:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <MCAL_DIO_u8SetPinValue>
    3e8e:	80 e0       	ldi	r24, 0x00	; 0
    3e90:	90 e0       	ldi	r25, 0x00	; 0
    3e92:	a0 e0       	ldi	r26, 0x00	; 0
    3e94:	b0 e4       	ldi	r27, 0x40	; 64
    3e96:	8b 87       	std	Y+11, r24	; 0x0b
    3e98:	9c 87       	std	Y+12, r25	; 0x0c
    3e9a:	ad 87       	std	Y+13, r26	; 0x0d
    3e9c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e9e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3ea0:	7c 85       	ldd	r23, Y+12	; 0x0c
    3ea2:	8d 85       	ldd	r24, Y+13	; 0x0d
    3ea4:	9e 85       	ldd	r25, Y+14	; 0x0e
    3ea6:	20 e0       	ldi	r18, 0x00	; 0
    3ea8:	30 e0       	ldi	r19, 0x00	; 0
    3eaa:	4a e7       	ldi	r20, 0x7A	; 122
    3eac:	55 e4       	ldi	r21, 0x45	; 69
    3eae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3eb2:	dc 01       	movw	r26, r24
    3eb4:	cb 01       	movw	r24, r22
    3eb6:	8f 83       	std	Y+7, r24	; 0x07
    3eb8:	98 87       	std	Y+8, r25	; 0x08
    3eba:	a9 87       	std	Y+9, r26	; 0x09
    3ebc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3ebe:	6f 81       	ldd	r22, Y+7	; 0x07
    3ec0:	78 85       	ldd	r23, Y+8	; 0x08
    3ec2:	89 85       	ldd	r24, Y+9	; 0x09
    3ec4:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ec6:	20 e0       	ldi	r18, 0x00	; 0
    3ec8:	30 e0       	ldi	r19, 0x00	; 0
    3eca:	40 e8       	ldi	r20, 0x80	; 128
    3ecc:	5f e3       	ldi	r21, 0x3F	; 63
    3ece:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3ed2:	88 23       	and	r24, r24
    3ed4:	2c f4       	brge	.+10     	; 0x3ee0 <HAL_LCD_u8SendCommands+0x196>
		__ticks = 1;
    3ed6:	81 e0       	ldi	r24, 0x01	; 1
    3ed8:	90 e0       	ldi	r25, 0x00	; 0
    3eda:	9e 83       	std	Y+6, r25	; 0x06
    3edc:	8d 83       	std	Y+5, r24	; 0x05
    3ede:	3f c0       	rjmp	.+126    	; 0x3f5e <HAL_LCD_u8SendCommands+0x214>
	else if (__tmp > 65535)
    3ee0:	6f 81       	ldd	r22, Y+7	; 0x07
    3ee2:	78 85       	ldd	r23, Y+8	; 0x08
    3ee4:	89 85       	ldd	r24, Y+9	; 0x09
    3ee6:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ee8:	20 e0       	ldi	r18, 0x00	; 0
    3eea:	3f ef       	ldi	r19, 0xFF	; 255
    3eec:	4f e7       	ldi	r20, 0x7F	; 127
    3eee:	57 e4       	ldi	r21, 0x47	; 71
    3ef0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3ef4:	18 16       	cp	r1, r24
    3ef6:	4c f5       	brge	.+82     	; 0x3f4a <HAL_LCD_u8SendCommands+0x200>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ef8:	6b 85       	ldd	r22, Y+11	; 0x0b
    3efa:	7c 85       	ldd	r23, Y+12	; 0x0c
    3efc:	8d 85       	ldd	r24, Y+13	; 0x0d
    3efe:	9e 85       	ldd	r25, Y+14	; 0x0e
    3f00:	20 e0       	ldi	r18, 0x00	; 0
    3f02:	30 e0       	ldi	r19, 0x00	; 0
    3f04:	40 e2       	ldi	r20, 0x20	; 32
    3f06:	51 e4       	ldi	r21, 0x41	; 65
    3f08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f0c:	dc 01       	movw	r26, r24
    3f0e:	cb 01       	movw	r24, r22
    3f10:	bc 01       	movw	r22, r24
    3f12:	cd 01       	movw	r24, r26
    3f14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f18:	dc 01       	movw	r26, r24
    3f1a:	cb 01       	movw	r24, r22
    3f1c:	9e 83       	std	Y+6, r25	; 0x06
    3f1e:	8d 83       	std	Y+5, r24	; 0x05
    3f20:	0f c0       	rjmp	.+30     	; 0x3f40 <HAL_LCD_u8SendCommands+0x1f6>
    3f22:	80 e9       	ldi	r24, 0x90	; 144
    3f24:	91 e0       	ldi	r25, 0x01	; 1
    3f26:	9c 83       	std	Y+4, r25	; 0x04
    3f28:	8b 83       	std	Y+3, r24	; 0x03
    3f2a:	8b 81       	ldd	r24, Y+3	; 0x03
    3f2c:	9c 81       	ldd	r25, Y+4	; 0x04
    3f2e:	01 97       	sbiw	r24, 0x01	; 1
    3f30:	f1 f7       	brne	.-4      	; 0x3f2e <HAL_LCD_u8SendCommands+0x1e4>
    3f32:	9c 83       	std	Y+4, r25	; 0x04
    3f34:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f36:	8d 81       	ldd	r24, Y+5	; 0x05
    3f38:	9e 81       	ldd	r25, Y+6	; 0x06
    3f3a:	01 97       	sbiw	r24, 0x01	; 1
    3f3c:	9e 83       	std	Y+6, r25	; 0x06
    3f3e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f40:	8d 81       	ldd	r24, Y+5	; 0x05
    3f42:	9e 81       	ldd	r25, Y+6	; 0x06
    3f44:	00 97       	sbiw	r24, 0x00	; 0
    3f46:	69 f7       	brne	.-38     	; 0x3f22 <HAL_LCD_u8SendCommands+0x1d8>
    3f48:	14 c0       	rjmp	.+40     	; 0x3f72 <HAL_LCD_u8SendCommands+0x228>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f4a:	6f 81       	ldd	r22, Y+7	; 0x07
    3f4c:	78 85       	ldd	r23, Y+8	; 0x08
    3f4e:	89 85       	ldd	r24, Y+9	; 0x09
    3f50:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f56:	dc 01       	movw	r26, r24
    3f58:	cb 01       	movw	r24, r22
    3f5a:	9e 83       	std	Y+6, r25	; 0x06
    3f5c:	8d 83       	std	Y+5, r24	; 0x05
    3f5e:	8d 81       	ldd	r24, Y+5	; 0x05
    3f60:	9e 81       	ldd	r25, Y+6	; 0x06
    3f62:	9a 83       	std	Y+2, r25	; 0x02
    3f64:	89 83       	std	Y+1, r24	; 0x01
    3f66:	89 81       	ldd	r24, Y+1	; 0x01
    3f68:	9a 81       	ldd	r25, Y+2	; 0x02
    3f6a:	01 97       	sbiw	r24, 0x01	; 1
    3f6c:	f1 f7       	brne	.-4      	; 0x3f6a <HAL_LCD_u8SendCommands+0x220>
    3f6e:	9a 83       	std	Y+2, r25	; 0x02
    3f70:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	MCAL_DIO_u8SetPinValue(Enable_PORT, Enable_PIN, Enable_Low);
    3f72:	81 e0       	ldi	r24, 0x01	; 1
    3f74:	63 e0       	ldi	r22, 0x03	; 3
    3f76:	40 e0       	ldi	r20, 0x00	; 0
    3f78:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <MCAL_DIO_u8SetPinValue>
}
    3f7c:	6d 96       	adiw	r28, 0x1d	; 29
    3f7e:	0f b6       	in	r0, 0x3f	; 63
    3f80:	f8 94       	cli
    3f82:	de bf       	out	0x3e, r29	; 62
    3f84:	0f be       	out	0x3f, r0	; 63
    3f86:	cd bf       	out	0x3d, r28	; 61
    3f88:	cf 91       	pop	r28
    3f8a:	df 91       	pop	r29
    3f8c:	08 95       	ret

00003f8e <HAL_LCD_u8SendChar>:

void HAL_LCD_u8SendChar(u8 Loc_u8LCD_Char) {
    3f8e:	df 93       	push	r29
    3f90:	cf 93       	push	r28
    3f92:	cd b7       	in	r28, 0x3d	; 61
    3f94:	de b7       	in	r29, 0x3e	; 62
    3f96:	6d 97       	sbiw	r28, 0x1d	; 29
    3f98:	0f b6       	in	r0, 0x3f	; 63
    3f9a:	f8 94       	cli
    3f9c:	de bf       	out	0x3e, r29	; 62
    3f9e:	0f be       	out	0x3f, r0	; 63
    3fa0:	cd bf       	out	0x3d, r28	; 61
    3fa2:	8d 8f       	std	Y+29, r24	; 0x1d
	MCAL_DIO_u8SetPinValue(RS_Port, RS_Pin, RS_High);
    3fa4:	81 e0       	ldi	r24, 0x01	; 1
    3fa6:	61 e0       	ldi	r22, 0x01	; 1
    3fa8:	41 e0       	ldi	r20, 0x01	; 1
    3faa:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <MCAL_DIO_u8SetPinValue>
	MCAL_DIO_u8SetPinValue(RW_Port, RW_Pin, RW_Low);
    3fae:	81 e0       	ldi	r24, 0x01	; 1
    3fb0:	62 e0       	ldi	r22, 0x02	; 2
    3fb2:	40 e0       	ldi	r20, 0x00	; 0
    3fb4:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <MCAL_DIO_u8SetPinValue>
	MCAL_DIO_u8SetPortValue(LCD_D_PORT, Loc_u8LCD_Char);
    3fb8:	80 e0       	ldi	r24, 0x00	; 0
    3fba:	6d 8d       	ldd	r22, Y+29	; 0x1d
    3fbc:	0e 94 e1 15 	call	0x2bc2	; 0x2bc2 <MCAL_DIO_u8SetPortValue>
	MCAL_DIO_u8SetPinValue(Enable_PORT, Enable_PIN, Enable_High);
    3fc0:	81 e0       	ldi	r24, 0x01	; 1
    3fc2:	63 e0       	ldi	r22, 0x03	; 3
    3fc4:	41 e0       	ldi	r20, 0x01	; 1
    3fc6:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <MCAL_DIO_u8SetPinValue>
    3fca:	80 e0       	ldi	r24, 0x00	; 0
    3fcc:	90 e0       	ldi	r25, 0x00	; 0
    3fce:	a0 e0       	ldi	r26, 0x00	; 0
    3fd0:	b0 e4       	ldi	r27, 0x40	; 64
    3fd2:	89 8f       	std	Y+25, r24	; 0x19
    3fd4:	9a 8f       	std	Y+26, r25	; 0x1a
    3fd6:	ab 8f       	std	Y+27, r26	; 0x1b
    3fd8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3fda:	69 8d       	ldd	r22, Y+25	; 0x19
    3fdc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3fde:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3fe0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3fe2:	20 e0       	ldi	r18, 0x00	; 0
    3fe4:	30 e0       	ldi	r19, 0x00	; 0
    3fe6:	4a e7       	ldi	r20, 0x7A	; 122
    3fe8:	55 e4       	ldi	r21, 0x45	; 69
    3fea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3fee:	dc 01       	movw	r26, r24
    3ff0:	cb 01       	movw	r24, r22
    3ff2:	8d 8b       	std	Y+21, r24	; 0x15
    3ff4:	9e 8b       	std	Y+22, r25	; 0x16
    3ff6:	af 8b       	std	Y+23, r26	; 0x17
    3ff8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3ffa:	6d 89       	ldd	r22, Y+21	; 0x15
    3ffc:	7e 89       	ldd	r23, Y+22	; 0x16
    3ffe:	8f 89       	ldd	r24, Y+23	; 0x17
    4000:	98 8d       	ldd	r25, Y+24	; 0x18
    4002:	20 e0       	ldi	r18, 0x00	; 0
    4004:	30 e0       	ldi	r19, 0x00	; 0
    4006:	40 e8       	ldi	r20, 0x80	; 128
    4008:	5f e3       	ldi	r21, 0x3F	; 63
    400a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    400e:	88 23       	and	r24, r24
    4010:	2c f4       	brge	.+10     	; 0x401c <HAL_LCD_u8SendChar+0x8e>
		__ticks = 1;
    4012:	81 e0       	ldi	r24, 0x01	; 1
    4014:	90 e0       	ldi	r25, 0x00	; 0
    4016:	9c 8b       	std	Y+20, r25	; 0x14
    4018:	8b 8b       	std	Y+19, r24	; 0x13
    401a:	3f c0       	rjmp	.+126    	; 0x409a <HAL_LCD_u8SendChar+0x10c>
	else if (__tmp > 65535)
    401c:	6d 89       	ldd	r22, Y+21	; 0x15
    401e:	7e 89       	ldd	r23, Y+22	; 0x16
    4020:	8f 89       	ldd	r24, Y+23	; 0x17
    4022:	98 8d       	ldd	r25, Y+24	; 0x18
    4024:	20 e0       	ldi	r18, 0x00	; 0
    4026:	3f ef       	ldi	r19, 0xFF	; 255
    4028:	4f e7       	ldi	r20, 0x7F	; 127
    402a:	57 e4       	ldi	r21, 0x47	; 71
    402c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4030:	18 16       	cp	r1, r24
    4032:	4c f5       	brge	.+82     	; 0x4086 <HAL_LCD_u8SendChar+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4034:	69 8d       	ldd	r22, Y+25	; 0x19
    4036:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4038:	8b 8d       	ldd	r24, Y+27	; 0x1b
    403a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    403c:	20 e0       	ldi	r18, 0x00	; 0
    403e:	30 e0       	ldi	r19, 0x00	; 0
    4040:	40 e2       	ldi	r20, 0x20	; 32
    4042:	51 e4       	ldi	r21, 0x41	; 65
    4044:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4048:	dc 01       	movw	r26, r24
    404a:	cb 01       	movw	r24, r22
    404c:	bc 01       	movw	r22, r24
    404e:	cd 01       	movw	r24, r26
    4050:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4054:	dc 01       	movw	r26, r24
    4056:	cb 01       	movw	r24, r22
    4058:	9c 8b       	std	Y+20, r25	; 0x14
    405a:	8b 8b       	std	Y+19, r24	; 0x13
    405c:	0f c0       	rjmp	.+30     	; 0x407c <HAL_LCD_u8SendChar+0xee>
    405e:	80 e9       	ldi	r24, 0x90	; 144
    4060:	91 e0       	ldi	r25, 0x01	; 1
    4062:	9a 8b       	std	Y+18, r25	; 0x12
    4064:	89 8b       	std	Y+17, r24	; 0x11
    4066:	89 89       	ldd	r24, Y+17	; 0x11
    4068:	9a 89       	ldd	r25, Y+18	; 0x12
    406a:	01 97       	sbiw	r24, 0x01	; 1
    406c:	f1 f7       	brne	.-4      	; 0x406a <HAL_LCD_u8SendChar+0xdc>
    406e:	9a 8b       	std	Y+18, r25	; 0x12
    4070:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4072:	8b 89       	ldd	r24, Y+19	; 0x13
    4074:	9c 89       	ldd	r25, Y+20	; 0x14
    4076:	01 97       	sbiw	r24, 0x01	; 1
    4078:	9c 8b       	std	Y+20, r25	; 0x14
    407a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    407c:	8b 89       	ldd	r24, Y+19	; 0x13
    407e:	9c 89       	ldd	r25, Y+20	; 0x14
    4080:	00 97       	sbiw	r24, 0x00	; 0
    4082:	69 f7       	brne	.-38     	; 0x405e <HAL_LCD_u8SendChar+0xd0>
    4084:	14 c0       	rjmp	.+40     	; 0x40ae <HAL_LCD_u8SendChar+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4086:	6d 89       	ldd	r22, Y+21	; 0x15
    4088:	7e 89       	ldd	r23, Y+22	; 0x16
    408a:	8f 89       	ldd	r24, Y+23	; 0x17
    408c:	98 8d       	ldd	r25, Y+24	; 0x18
    408e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4092:	dc 01       	movw	r26, r24
    4094:	cb 01       	movw	r24, r22
    4096:	9c 8b       	std	Y+20, r25	; 0x14
    4098:	8b 8b       	std	Y+19, r24	; 0x13
    409a:	8b 89       	ldd	r24, Y+19	; 0x13
    409c:	9c 89       	ldd	r25, Y+20	; 0x14
    409e:	98 8b       	std	Y+16, r25	; 0x10
    40a0:	8f 87       	std	Y+15, r24	; 0x0f
    40a2:	8f 85       	ldd	r24, Y+15	; 0x0f
    40a4:	98 89       	ldd	r25, Y+16	; 0x10
    40a6:	01 97       	sbiw	r24, 0x01	; 1
    40a8:	f1 f7       	brne	.-4      	; 0x40a6 <HAL_LCD_u8SendChar+0x118>
    40aa:	98 8b       	std	Y+16, r25	; 0x10
    40ac:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	MCAL_DIO_u8SetPinValue(Enable_PORT, Enable_PIN, Enable_Low);
    40ae:	81 e0       	ldi	r24, 0x01	; 1
    40b0:	63 e0       	ldi	r22, 0x03	; 3
    40b2:	40 e0       	ldi	r20, 0x00	; 0
    40b4:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <MCAL_DIO_u8SetPinValue>
	MCAL_DIO_u8SetPortValue(LCD_D_PORT, (Loc_u8LCD_Char << 4));
    40b8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    40ba:	98 2f       	mov	r25, r24
    40bc:	92 95       	swap	r25
    40be:	90 7f       	andi	r25, 0xF0	; 240
    40c0:	80 e0       	ldi	r24, 0x00	; 0
    40c2:	69 2f       	mov	r22, r25
    40c4:	0e 94 e1 15 	call	0x2bc2	; 0x2bc2 <MCAL_DIO_u8SetPortValue>
	MCAL_DIO_u8SetPinValue(Enable_PORT, Enable_PIN, Enable_High);
    40c8:	81 e0       	ldi	r24, 0x01	; 1
    40ca:	63 e0       	ldi	r22, 0x03	; 3
    40cc:	41 e0       	ldi	r20, 0x01	; 1
    40ce:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <MCAL_DIO_u8SetPinValue>
    40d2:	80 e0       	ldi	r24, 0x00	; 0
    40d4:	90 e0       	ldi	r25, 0x00	; 0
    40d6:	a0 e0       	ldi	r26, 0x00	; 0
    40d8:	b0 e4       	ldi	r27, 0x40	; 64
    40da:	8b 87       	std	Y+11, r24	; 0x0b
    40dc:	9c 87       	std	Y+12, r25	; 0x0c
    40de:	ad 87       	std	Y+13, r26	; 0x0d
    40e0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    40e2:	6b 85       	ldd	r22, Y+11	; 0x0b
    40e4:	7c 85       	ldd	r23, Y+12	; 0x0c
    40e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    40e8:	9e 85       	ldd	r25, Y+14	; 0x0e
    40ea:	20 e0       	ldi	r18, 0x00	; 0
    40ec:	30 e0       	ldi	r19, 0x00	; 0
    40ee:	4a e7       	ldi	r20, 0x7A	; 122
    40f0:	55 e4       	ldi	r21, 0x45	; 69
    40f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40f6:	dc 01       	movw	r26, r24
    40f8:	cb 01       	movw	r24, r22
    40fa:	8f 83       	std	Y+7, r24	; 0x07
    40fc:	98 87       	std	Y+8, r25	; 0x08
    40fe:	a9 87       	std	Y+9, r26	; 0x09
    4100:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4102:	6f 81       	ldd	r22, Y+7	; 0x07
    4104:	78 85       	ldd	r23, Y+8	; 0x08
    4106:	89 85       	ldd	r24, Y+9	; 0x09
    4108:	9a 85       	ldd	r25, Y+10	; 0x0a
    410a:	20 e0       	ldi	r18, 0x00	; 0
    410c:	30 e0       	ldi	r19, 0x00	; 0
    410e:	40 e8       	ldi	r20, 0x80	; 128
    4110:	5f e3       	ldi	r21, 0x3F	; 63
    4112:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4116:	88 23       	and	r24, r24
    4118:	2c f4       	brge	.+10     	; 0x4124 <HAL_LCD_u8SendChar+0x196>
		__ticks = 1;
    411a:	81 e0       	ldi	r24, 0x01	; 1
    411c:	90 e0       	ldi	r25, 0x00	; 0
    411e:	9e 83       	std	Y+6, r25	; 0x06
    4120:	8d 83       	std	Y+5, r24	; 0x05
    4122:	3f c0       	rjmp	.+126    	; 0x41a2 <HAL_LCD_u8SendChar+0x214>
	else if (__tmp > 65535)
    4124:	6f 81       	ldd	r22, Y+7	; 0x07
    4126:	78 85       	ldd	r23, Y+8	; 0x08
    4128:	89 85       	ldd	r24, Y+9	; 0x09
    412a:	9a 85       	ldd	r25, Y+10	; 0x0a
    412c:	20 e0       	ldi	r18, 0x00	; 0
    412e:	3f ef       	ldi	r19, 0xFF	; 255
    4130:	4f e7       	ldi	r20, 0x7F	; 127
    4132:	57 e4       	ldi	r21, 0x47	; 71
    4134:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4138:	18 16       	cp	r1, r24
    413a:	4c f5       	brge	.+82     	; 0x418e <HAL_LCD_u8SendChar+0x200>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    413c:	6b 85       	ldd	r22, Y+11	; 0x0b
    413e:	7c 85       	ldd	r23, Y+12	; 0x0c
    4140:	8d 85       	ldd	r24, Y+13	; 0x0d
    4142:	9e 85       	ldd	r25, Y+14	; 0x0e
    4144:	20 e0       	ldi	r18, 0x00	; 0
    4146:	30 e0       	ldi	r19, 0x00	; 0
    4148:	40 e2       	ldi	r20, 0x20	; 32
    414a:	51 e4       	ldi	r21, 0x41	; 65
    414c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4150:	dc 01       	movw	r26, r24
    4152:	cb 01       	movw	r24, r22
    4154:	bc 01       	movw	r22, r24
    4156:	cd 01       	movw	r24, r26
    4158:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    415c:	dc 01       	movw	r26, r24
    415e:	cb 01       	movw	r24, r22
    4160:	9e 83       	std	Y+6, r25	; 0x06
    4162:	8d 83       	std	Y+5, r24	; 0x05
    4164:	0f c0       	rjmp	.+30     	; 0x4184 <HAL_LCD_u8SendChar+0x1f6>
    4166:	80 e9       	ldi	r24, 0x90	; 144
    4168:	91 e0       	ldi	r25, 0x01	; 1
    416a:	9c 83       	std	Y+4, r25	; 0x04
    416c:	8b 83       	std	Y+3, r24	; 0x03
    416e:	8b 81       	ldd	r24, Y+3	; 0x03
    4170:	9c 81       	ldd	r25, Y+4	; 0x04
    4172:	01 97       	sbiw	r24, 0x01	; 1
    4174:	f1 f7       	brne	.-4      	; 0x4172 <HAL_LCD_u8SendChar+0x1e4>
    4176:	9c 83       	std	Y+4, r25	; 0x04
    4178:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    417a:	8d 81       	ldd	r24, Y+5	; 0x05
    417c:	9e 81       	ldd	r25, Y+6	; 0x06
    417e:	01 97       	sbiw	r24, 0x01	; 1
    4180:	9e 83       	std	Y+6, r25	; 0x06
    4182:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4184:	8d 81       	ldd	r24, Y+5	; 0x05
    4186:	9e 81       	ldd	r25, Y+6	; 0x06
    4188:	00 97       	sbiw	r24, 0x00	; 0
    418a:	69 f7       	brne	.-38     	; 0x4166 <HAL_LCD_u8SendChar+0x1d8>
    418c:	14 c0       	rjmp	.+40     	; 0x41b6 <HAL_LCD_u8SendChar+0x228>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    418e:	6f 81       	ldd	r22, Y+7	; 0x07
    4190:	78 85       	ldd	r23, Y+8	; 0x08
    4192:	89 85       	ldd	r24, Y+9	; 0x09
    4194:	9a 85       	ldd	r25, Y+10	; 0x0a
    4196:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    419a:	dc 01       	movw	r26, r24
    419c:	cb 01       	movw	r24, r22
    419e:	9e 83       	std	Y+6, r25	; 0x06
    41a0:	8d 83       	std	Y+5, r24	; 0x05
    41a2:	8d 81       	ldd	r24, Y+5	; 0x05
    41a4:	9e 81       	ldd	r25, Y+6	; 0x06
    41a6:	9a 83       	std	Y+2, r25	; 0x02
    41a8:	89 83       	std	Y+1, r24	; 0x01
    41aa:	89 81       	ldd	r24, Y+1	; 0x01
    41ac:	9a 81       	ldd	r25, Y+2	; 0x02
    41ae:	01 97       	sbiw	r24, 0x01	; 1
    41b0:	f1 f7       	brne	.-4      	; 0x41ae <HAL_LCD_u8SendChar+0x220>
    41b2:	9a 83       	std	Y+2, r25	; 0x02
    41b4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	MCAL_DIO_u8SetPinValue(Enable_PORT, Enable_PIN, Enable_Low);
    41b6:	81 e0       	ldi	r24, 0x01	; 1
    41b8:	63 e0       	ldi	r22, 0x03	; 3
    41ba:	40 e0       	ldi	r20, 0x00	; 0
    41bc:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <MCAL_DIO_u8SetPinValue>
}
    41c0:	6d 96       	adiw	r28, 0x1d	; 29
    41c2:	0f b6       	in	r0, 0x3f	; 63
    41c4:	f8 94       	cli
    41c6:	de bf       	out	0x3e, r29	; 62
    41c8:	0f be       	out	0x3f, r0	; 63
    41ca:	cd bf       	out	0x3d, r28	; 61
    41cc:	cf 91       	pop	r28
    41ce:	df 91       	pop	r29
    41d0:	08 95       	ret

000041d2 <HAL_LCD_u8SendString>:

void HAL_LCD_u8SendString(u8* Loc_u8LCD_String) {
    41d2:	df 93       	push	r29
    41d4:	cf 93       	push	r28
    41d6:	00 d0       	rcall	.+0      	; 0x41d8 <HAL_LCD_u8SendString+0x6>
    41d8:	00 d0       	rcall	.+0      	; 0x41da <HAL_LCD_u8SendString+0x8>
    41da:	00 d0       	rcall	.+0      	; 0x41dc <HAL_LCD_u8SendString+0xa>
    41dc:	cd b7       	in	r28, 0x3d	; 61
    41de:	de b7       	in	r29, 0x3e	; 62
    41e0:	9e 83       	std	Y+6, r25	; 0x06
    41e2:	8d 83       	std	Y+5, r24	; 0x05
	for (u32 count = 0; Loc_u8LCD_String[count] != '\0'; count++) {
    41e4:	19 82       	std	Y+1, r1	; 0x01
    41e6:	1a 82       	std	Y+2, r1	; 0x02
    41e8:	1b 82       	std	Y+3, r1	; 0x03
    41ea:	1c 82       	std	Y+4, r1	; 0x04
    41ec:	15 c0       	rjmp	.+42     	; 0x4218 <HAL_LCD_u8SendString+0x46>
		HAL_LCD_u8SendChar(Loc_u8LCD_String[count]);
    41ee:	29 81       	ldd	r18, Y+1	; 0x01
    41f0:	3a 81       	ldd	r19, Y+2	; 0x02
    41f2:	8d 81       	ldd	r24, Y+5	; 0x05
    41f4:	9e 81       	ldd	r25, Y+6	; 0x06
    41f6:	fc 01       	movw	r30, r24
    41f8:	e2 0f       	add	r30, r18
    41fa:	f3 1f       	adc	r31, r19
    41fc:	80 81       	ld	r24, Z
    41fe:	0e 94 c7 1f 	call	0x3f8e	; 0x3f8e <HAL_LCD_u8SendChar>
	_delay_ms(2);
	MCAL_DIO_u8SetPinValue(Enable_PORT, Enable_PIN, Enable_Low);
}

void HAL_LCD_u8SendString(u8* Loc_u8LCD_String) {
	for (u32 count = 0; Loc_u8LCD_String[count] != '\0'; count++) {
    4202:	89 81       	ldd	r24, Y+1	; 0x01
    4204:	9a 81       	ldd	r25, Y+2	; 0x02
    4206:	ab 81       	ldd	r26, Y+3	; 0x03
    4208:	bc 81       	ldd	r27, Y+4	; 0x04
    420a:	01 96       	adiw	r24, 0x01	; 1
    420c:	a1 1d       	adc	r26, r1
    420e:	b1 1d       	adc	r27, r1
    4210:	89 83       	std	Y+1, r24	; 0x01
    4212:	9a 83       	std	Y+2, r25	; 0x02
    4214:	ab 83       	std	Y+3, r26	; 0x03
    4216:	bc 83       	std	Y+4, r27	; 0x04
    4218:	29 81       	ldd	r18, Y+1	; 0x01
    421a:	3a 81       	ldd	r19, Y+2	; 0x02
    421c:	8d 81       	ldd	r24, Y+5	; 0x05
    421e:	9e 81       	ldd	r25, Y+6	; 0x06
    4220:	fc 01       	movw	r30, r24
    4222:	e2 0f       	add	r30, r18
    4224:	f3 1f       	adc	r31, r19
    4226:	80 81       	ld	r24, Z
    4228:	88 23       	and	r24, r24
    422a:	09 f7       	brne	.-62     	; 0x41ee <HAL_LCD_u8SendString+0x1c>
		HAL_LCD_u8SendChar(Loc_u8LCD_String[count]);
	}
}
    422c:	26 96       	adiw	r28, 0x06	; 6
    422e:	0f b6       	in	r0, 0x3f	; 63
    4230:	f8 94       	cli
    4232:	de bf       	out	0x3e, r29	; 62
    4234:	0f be       	out	0x3f, r0	; 63
    4236:	cd bf       	out	0x3d, r28	; 61
    4238:	cf 91       	pop	r28
    423a:	df 91       	pop	r29
    423c:	08 95       	ret

0000423e <HAL_LCD_u8SendNumber>:

void HAL_LCD_u8SendNumber(u16 Loc_u8LCD_Number) {
    423e:	df 93       	push	r29
    4240:	cf 93       	push	r28
    4242:	cd b7       	in	r28, 0x3d	; 61
    4244:	de b7       	in	r29, 0x3e	; 62
    4246:	2c 97       	sbiw	r28, 0x0c	; 12
    4248:	0f b6       	in	r0, 0x3f	; 63
    424a:	f8 94       	cli
    424c:	de bf       	out	0x3e, r29	; 62
    424e:	0f be       	out	0x3f, r0	; 63
    4250:	cd bf       	out	0x3d, r28	; 61
    4252:	9c 87       	std	Y+12, r25	; 0x0c
    4254:	8b 87       	std	Y+11, r24	; 0x0b
	u8 str[10];
	itoa(Loc_u8LCD_Number, str, 10);
    4256:	8b 85       	ldd	r24, Y+11	; 0x0b
    4258:	9c 85       	ldd	r25, Y+12	; 0x0c
    425a:	9e 01       	movw	r18, r28
    425c:	2f 5f       	subi	r18, 0xFF	; 255
    425e:	3f 4f       	sbci	r19, 0xFF	; 255
    4260:	b9 01       	movw	r22, r18
    4262:	4a e0       	ldi	r20, 0x0A	; 10
    4264:	50 e0       	ldi	r21, 0x00	; 0
    4266:	0e 94 7a 28 	call	0x50f4	; 0x50f4 <itoa>
	HAL_LCD_u8SendString(str);
    426a:	ce 01       	movw	r24, r28
    426c:	01 96       	adiw	r24, 0x01	; 1
    426e:	0e 94 e9 20 	call	0x41d2	; 0x41d2 <HAL_LCD_u8SendString>
}
    4272:	2c 96       	adiw	r28, 0x0c	; 12
    4274:	0f b6       	in	r0, 0x3f	; 63
    4276:	f8 94       	cli
    4278:	de bf       	out	0x3e, r29	; 62
    427a:	0f be       	out	0x3f, r0	; 63
    427c:	cd bf       	out	0x3d, r28	; 61
    427e:	cf 91       	pop	r28
    4280:	df 91       	pop	r29
    4282:	08 95       	ret

00004284 <HAL_LCD_u8GoTo>:

void HAL_LCD_u8GoTo(u8 Loc_u8TypeOfShift, u8 Loc_u8NumOfShift) {
    4284:	df 93       	push	r29
    4286:	cf 93       	push	r28
    4288:	cd b7       	in	r28, 0x3d	; 61
    428a:	de b7       	in	r29, 0x3e	; 62
    428c:	c2 54       	subi	r28, 0x42	; 66
    428e:	d0 40       	sbci	r29, 0x00	; 0
    4290:	0f b6       	in	r0, 0x3f	; 63
    4292:	f8 94       	cli
    4294:	de bf       	out	0x3e, r29	; 62
    4296:	0f be       	out	0x3f, r0	; 63
    4298:	cd bf       	out	0x3d, r28	; 61
    429a:	fe 01       	movw	r30, r28
    429c:	ef 5b       	subi	r30, 0xBF	; 191
    429e:	ff 4f       	sbci	r31, 0xFF	; 255
    42a0:	80 83       	st	Z, r24
    42a2:	fe 01       	movw	r30, r28
    42a4:	ee 5b       	subi	r30, 0xBE	; 190
    42a6:	ff 4f       	sbci	r31, 0xFF	; 255
    42a8:	60 83       	st	Z, r22
	if (Loc_u8TypeOfShift == Right_Shift) {
    42aa:	fe 01       	movw	r30, r28
    42ac:	ef 5b       	subi	r30, 0xBF	; 191
    42ae:	ff 4f       	sbci	r31, 0xFF	; 255
    42b0:	80 81       	ld	r24, Z
    42b2:	81 30       	cpi	r24, 0x01	; 1
    42b4:	09 f0       	breq	.+2      	; 0x42b8 <HAL_LCD_u8GoTo+0x34>
    42b6:	a0 c0       	rjmp	.+320    	; 0x43f8 <HAL_LCD_u8GoTo+0x174>
		for (u32 count = 0; count < Loc_u8NumOfShift; count++) {
    42b8:	fe 01       	movw	r30, r28
    42ba:	fd 96       	adiw	r30, 0x3d	; 61
    42bc:	10 82       	st	Z, r1
    42be:	11 82       	std	Z+1, r1	; 0x01
    42c0:	12 82       	std	Z+2, r1	; 0x02
    42c2:	13 82       	std	Z+3, r1	; 0x03
    42c4:	84 c0       	rjmp	.+264    	; 0x43ce <HAL_LCD_u8GoTo+0x14a>
    42c6:	80 e0       	ldi	r24, 0x00	; 0
    42c8:	90 e0       	ldi	r25, 0x00	; 0
    42ca:	a0 e0       	ldi	r26, 0x00	; 0
    42cc:	b0 e4       	ldi	r27, 0x40	; 64
    42ce:	8d ab       	std	Y+53, r24	; 0x35
    42d0:	9e ab       	std	Y+54, r25	; 0x36
    42d2:	af ab       	std	Y+55, r26	; 0x37
    42d4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    42d6:	6d a9       	ldd	r22, Y+53	; 0x35
    42d8:	7e a9       	ldd	r23, Y+54	; 0x36
    42da:	8f a9       	ldd	r24, Y+55	; 0x37
    42dc:	98 ad       	ldd	r25, Y+56	; 0x38
    42de:	20 e0       	ldi	r18, 0x00	; 0
    42e0:	30 e0       	ldi	r19, 0x00	; 0
    42e2:	4a e7       	ldi	r20, 0x7A	; 122
    42e4:	55 e4       	ldi	r21, 0x45	; 69
    42e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    42ea:	dc 01       	movw	r26, r24
    42ec:	cb 01       	movw	r24, r22
    42ee:	89 ab       	std	Y+49, r24	; 0x31
    42f0:	9a ab       	std	Y+50, r25	; 0x32
    42f2:	ab ab       	std	Y+51, r26	; 0x33
    42f4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    42f6:	69 a9       	ldd	r22, Y+49	; 0x31
    42f8:	7a a9       	ldd	r23, Y+50	; 0x32
    42fa:	8b a9       	ldd	r24, Y+51	; 0x33
    42fc:	9c a9       	ldd	r25, Y+52	; 0x34
    42fe:	20 e0       	ldi	r18, 0x00	; 0
    4300:	30 e0       	ldi	r19, 0x00	; 0
    4302:	40 e8       	ldi	r20, 0x80	; 128
    4304:	5f e3       	ldi	r21, 0x3F	; 63
    4306:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    430a:	88 23       	and	r24, r24
    430c:	2c f4       	brge	.+10     	; 0x4318 <HAL_LCD_u8GoTo+0x94>
		__ticks = 1;
    430e:	81 e0       	ldi	r24, 0x01	; 1
    4310:	90 e0       	ldi	r25, 0x00	; 0
    4312:	98 ab       	std	Y+48, r25	; 0x30
    4314:	8f a7       	std	Y+47, r24	; 0x2f
    4316:	3f c0       	rjmp	.+126    	; 0x4396 <HAL_LCD_u8GoTo+0x112>
	else if (__tmp > 65535)
    4318:	69 a9       	ldd	r22, Y+49	; 0x31
    431a:	7a a9       	ldd	r23, Y+50	; 0x32
    431c:	8b a9       	ldd	r24, Y+51	; 0x33
    431e:	9c a9       	ldd	r25, Y+52	; 0x34
    4320:	20 e0       	ldi	r18, 0x00	; 0
    4322:	3f ef       	ldi	r19, 0xFF	; 255
    4324:	4f e7       	ldi	r20, 0x7F	; 127
    4326:	57 e4       	ldi	r21, 0x47	; 71
    4328:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    432c:	18 16       	cp	r1, r24
    432e:	4c f5       	brge	.+82     	; 0x4382 <HAL_LCD_u8GoTo+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4330:	6d a9       	ldd	r22, Y+53	; 0x35
    4332:	7e a9       	ldd	r23, Y+54	; 0x36
    4334:	8f a9       	ldd	r24, Y+55	; 0x37
    4336:	98 ad       	ldd	r25, Y+56	; 0x38
    4338:	20 e0       	ldi	r18, 0x00	; 0
    433a:	30 e0       	ldi	r19, 0x00	; 0
    433c:	40 e2       	ldi	r20, 0x20	; 32
    433e:	51 e4       	ldi	r21, 0x41	; 65
    4340:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4344:	dc 01       	movw	r26, r24
    4346:	cb 01       	movw	r24, r22
    4348:	bc 01       	movw	r22, r24
    434a:	cd 01       	movw	r24, r26
    434c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4350:	dc 01       	movw	r26, r24
    4352:	cb 01       	movw	r24, r22
    4354:	98 ab       	std	Y+48, r25	; 0x30
    4356:	8f a7       	std	Y+47, r24	; 0x2f
    4358:	0f c0       	rjmp	.+30     	; 0x4378 <HAL_LCD_u8GoTo+0xf4>
    435a:	80 e9       	ldi	r24, 0x90	; 144
    435c:	91 e0       	ldi	r25, 0x01	; 1
    435e:	9e a7       	std	Y+46, r25	; 0x2e
    4360:	8d a7       	std	Y+45, r24	; 0x2d
    4362:	8d a5       	ldd	r24, Y+45	; 0x2d
    4364:	9e a5       	ldd	r25, Y+46	; 0x2e
    4366:	01 97       	sbiw	r24, 0x01	; 1
    4368:	f1 f7       	brne	.-4      	; 0x4366 <HAL_LCD_u8GoTo+0xe2>
    436a:	9e a7       	std	Y+46, r25	; 0x2e
    436c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    436e:	8f a5       	ldd	r24, Y+47	; 0x2f
    4370:	98 a9       	ldd	r25, Y+48	; 0x30
    4372:	01 97       	sbiw	r24, 0x01	; 1
    4374:	98 ab       	std	Y+48, r25	; 0x30
    4376:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4378:	8f a5       	ldd	r24, Y+47	; 0x2f
    437a:	98 a9       	ldd	r25, Y+48	; 0x30
    437c:	00 97       	sbiw	r24, 0x00	; 0
    437e:	69 f7       	brne	.-38     	; 0x435a <HAL_LCD_u8GoTo+0xd6>
    4380:	14 c0       	rjmp	.+40     	; 0x43aa <HAL_LCD_u8GoTo+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4382:	69 a9       	ldd	r22, Y+49	; 0x31
    4384:	7a a9       	ldd	r23, Y+50	; 0x32
    4386:	8b a9       	ldd	r24, Y+51	; 0x33
    4388:	9c a9       	ldd	r25, Y+52	; 0x34
    438a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    438e:	dc 01       	movw	r26, r24
    4390:	cb 01       	movw	r24, r22
    4392:	98 ab       	std	Y+48, r25	; 0x30
    4394:	8f a7       	std	Y+47, r24	; 0x2f
    4396:	8f a5       	ldd	r24, Y+47	; 0x2f
    4398:	98 a9       	ldd	r25, Y+48	; 0x30
    439a:	9c a7       	std	Y+44, r25	; 0x2c
    439c:	8b a7       	std	Y+43, r24	; 0x2b
    439e:	8b a5       	ldd	r24, Y+43	; 0x2b
    43a0:	9c a5       	ldd	r25, Y+44	; 0x2c
    43a2:	01 97       	sbiw	r24, 0x01	; 1
    43a4:	f1 f7       	brne	.-4      	; 0x43a2 <HAL_LCD_u8GoTo+0x11e>
    43a6:	9c a7       	std	Y+44, r25	; 0x2c
    43a8:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(2);
			HAL_LCD_u8SendCommands(Right_Shift_Command);
    43aa:	8c e1       	ldi	r24, 0x1C	; 28
    43ac:	0e 94 a5 1e 	call	0x3d4a	; 0x3d4a <HAL_LCD_u8SendCommands>
	HAL_LCD_u8SendString(str);
}

void HAL_LCD_u8GoTo(u8 Loc_u8TypeOfShift, u8 Loc_u8NumOfShift) {
	if (Loc_u8TypeOfShift == Right_Shift) {
		for (u32 count = 0; count < Loc_u8NumOfShift; count++) {
    43b0:	fe 01       	movw	r30, r28
    43b2:	fd 96       	adiw	r30, 0x3d	; 61
    43b4:	80 81       	ld	r24, Z
    43b6:	91 81       	ldd	r25, Z+1	; 0x01
    43b8:	a2 81       	ldd	r26, Z+2	; 0x02
    43ba:	b3 81       	ldd	r27, Z+3	; 0x03
    43bc:	01 96       	adiw	r24, 0x01	; 1
    43be:	a1 1d       	adc	r26, r1
    43c0:	b1 1d       	adc	r27, r1
    43c2:	fe 01       	movw	r30, r28
    43c4:	fd 96       	adiw	r30, 0x3d	; 61
    43c6:	80 83       	st	Z, r24
    43c8:	91 83       	std	Z+1, r25	; 0x01
    43ca:	a2 83       	std	Z+2, r26	; 0x02
    43cc:	b3 83       	std	Z+3, r27	; 0x03
    43ce:	fe 01       	movw	r30, r28
    43d0:	ee 5b       	subi	r30, 0xBE	; 190
    43d2:	ff 4f       	sbci	r31, 0xFF	; 255
    43d4:	80 81       	ld	r24, Z
    43d6:	28 2f       	mov	r18, r24
    43d8:	30 e0       	ldi	r19, 0x00	; 0
    43da:	40 e0       	ldi	r20, 0x00	; 0
    43dc:	50 e0       	ldi	r21, 0x00	; 0
    43de:	fe 01       	movw	r30, r28
    43e0:	fd 96       	adiw	r30, 0x3d	; 61
    43e2:	80 81       	ld	r24, Z
    43e4:	91 81       	ldd	r25, Z+1	; 0x01
    43e6:	a2 81       	ldd	r26, Z+2	; 0x02
    43e8:	b3 81       	ldd	r27, Z+3	; 0x03
    43ea:	82 17       	cp	r24, r18
    43ec:	93 07       	cpc	r25, r19
    43ee:	a4 07       	cpc	r26, r20
    43f0:	b5 07       	cpc	r27, r21
    43f2:	08 f4       	brcc	.+2      	; 0x43f6 <HAL_LCD_u8GoTo+0x172>
    43f4:	68 cf       	rjmp	.-304    	; 0x42c6 <HAL_LCD_u8GoTo+0x42>
    43f6:	98 c1       	rjmp	.+816    	; 0x4728 <HAL_LCD_u8GoTo+0x4a4>
			_delay_ms(2);
			HAL_LCD_u8SendCommands(Right_Shift_Command);
		}
	} else if (Loc_u8TypeOfShift == Left_Shift) {
    43f8:	fe 01       	movw	r30, r28
    43fa:	ef 5b       	subi	r30, 0xBF	; 191
    43fc:	ff 4f       	sbci	r31, 0xFF	; 255
    43fe:	80 81       	ld	r24, Z
    4400:	88 23       	and	r24, r24
    4402:	09 f0       	breq	.+2      	; 0x4406 <HAL_LCD_u8GoTo+0x182>
    4404:	98 c0       	rjmp	.+304    	; 0x4536 <HAL_LCD_u8GoTo+0x2b2>
		for (u32 count = 0; count < Loc_u8NumOfShift; count++) {
    4406:	19 ae       	std	Y+57, r1	; 0x39
    4408:	1a ae       	std	Y+58, r1	; 0x3a
    440a:	1b ae       	std	Y+59, r1	; 0x3b
    440c:	1c ae       	std	Y+60, r1	; 0x3c
    440e:	80 c0       	rjmp	.+256    	; 0x4510 <HAL_LCD_u8GoTo+0x28c>
    4410:	80 e0       	ldi	r24, 0x00	; 0
    4412:	90 e0       	ldi	r25, 0x00	; 0
    4414:	a0 e0       	ldi	r26, 0x00	; 0
    4416:	b0 e4       	ldi	r27, 0x40	; 64
    4418:	8f a3       	std	Y+39, r24	; 0x27
    441a:	98 a7       	std	Y+40, r25	; 0x28
    441c:	a9 a7       	std	Y+41, r26	; 0x29
    441e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4420:	6f a1       	ldd	r22, Y+39	; 0x27
    4422:	78 a5       	ldd	r23, Y+40	; 0x28
    4424:	89 a5       	ldd	r24, Y+41	; 0x29
    4426:	9a a5       	ldd	r25, Y+42	; 0x2a
    4428:	20 e0       	ldi	r18, 0x00	; 0
    442a:	30 e0       	ldi	r19, 0x00	; 0
    442c:	4a e7       	ldi	r20, 0x7A	; 122
    442e:	55 e4       	ldi	r21, 0x45	; 69
    4430:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4434:	dc 01       	movw	r26, r24
    4436:	cb 01       	movw	r24, r22
    4438:	8b a3       	std	Y+35, r24	; 0x23
    443a:	9c a3       	std	Y+36, r25	; 0x24
    443c:	ad a3       	std	Y+37, r26	; 0x25
    443e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4440:	6b a1       	ldd	r22, Y+35	; 0x23
    4442:	7c a1       	ldd	r23, Y+36	; 0x24
    4444:	8d a1       	ldd	r24, Y+37	; 0x25
    4446:	9e a1       	ldd	r25, Y+38	; 0x26
    4448:	20 e0       	ldi	r18, 0x00	; 0
    444a:	30 e0       	ldi	r19, 0x00	; 0
    444c:	40 e8       	ldi	r20, 0x80	; 128
    444e:	5f e3       	ldi	r21, 0x3F	; 63
    4450:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4454:	88 23       	and	r24, r24
    4456:	2c f4       	brge	.+10     	; 0x4462 <HAL_LCD_u8GoTo+0x1de>
		__ticks = 1;
    4458:	81 e0       	ldi	r24, 0x01	; 1
    445a:	90 e0       	ldi	r25, 0x00	; 0
    445c:	9a a3       	std	Y+34, r25	; 0x22
    445e:	89 a3       	std	Y+33, r24	; 0x21
    4460:	3f c0       	rjmp	.+126    	; 0x44e0 <HAL_LCD_u8GoTo+0x25c>
	else if (__tmp > 65535)
    4462:	6b a1       	ldd	r22, Y+35	; 0x23
    4464:	7c a1       	ldd	r23, Y+36	; 0x24
    4466:	8d a1       	ldd	r24, Y+37	; 0x25
    4468:	9e a1       	ldd	r25, Y+38	; 0x26
    446a:	20 e0       	ldi	r18, 0x00	; 0
    446c:	3f ef       	ldi	r19, 0xFF	; 255
    446e:	4f e7       	ldi	r20, 0x7F	; 127
    4470:	57 e4       	ldi	r21, 0x47	; 71
    4472:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4476:	18 16       	cp	r1, r24
    4478:	4c f5       	brge	.+82     	; 0x44cc <HAL_LCD_u8GoTo+0x248>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    447a:	6f a1       	ldd	r22, Y+39	; 0x27
    447c:	78 a5       	ldd	r23, Y+40	; 0x28
    447e:	89 a5       	ldd	r24, Y+41	; 0x29
    4480:	9a a5       	ldd	r25, Y+42	; 0x2a
    4482:	20 e0       	ldi	r18, 0x00	; 0
    4484:	30 e0       	ldi	r19, 0x00	; 0
    4486:	40 e2       	ldi	r20, 0x20	; 32
    4488:	51 e4       	ldi	r21, 0x41	; 65
    448a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    448e:	dc 01       	movw	r26, r24
    4490:	cb 01       	movw	r24, r22
    4492:	bc 01       	movw	r22, r24
    4494:	cd 01       	movw	r24, r26
    4496:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    449a:	dc 01       	movw	r26, r24
    449c:	cb 01       	movw	r24, r22
    449e:	9a a3       	std	Y+34, r25	; 0x22
    44a0:	89 a3       	std	Y+33, r24	; 0x21
    44a2:	0f c0       	rjmp	.+30     	; 0x44c2 <HAL_LCD_u8GoTo+0x23e>
    44a4:	80 e9       	ldi	r24, 0x90	; 144
    44a6:	91 e0       	ldi	r25, 0x01	; 1
    44a8:	98 a3       	std	Y+32, r25	; 0x20
    44aa:	8f 8f       	std	Y+31, r24	; 0x1f
    44ac:	8f 8d       	ldd	r24, Y+31	; 0x1f
    44ae:	98 a1       	ldd	r25, Y+32	; 0x20
    44b0:	01 97       	sbiw	r24, 0x01	; 1
    44b2:	f1 f7       	brne	.-4      	; 0x44b0 <HAL_LCD_u8GoTo+0x22c>
    44b4:	98 a3       	std	Y+32, r25	; 0x20
    44b6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    44b8:	89 a1       	ldd	r24, Y+33	; 0x21
    44ba:	9a a1       	ldd	r25, Y+34	; 0x22
    44bc:	01 97       	sbiw	r24, 0x01	; 1
    44be:	9a a3       	std	Y+34, r25	; 0x22
    44c0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    44c2:	89 a1       	ldd	r24, Y+33	; 0x21
    44c4:	9a a1       	ldd	r25, Y+34	; 0x22
    44c6:	00 97       	sbiw	r24, 0x00	; 0
    44c8:	69 f7       	brne	.-38     	; 0x44a4 <HAL_LCD_u8GoTo+0x220>
    44ca:	14 c0       	rjmp	.+40     	; 0x44f4 <HAL_LCD_u8GoTo+0x270>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    44cc:	6b a1       	ldd	r22, Y+35	; 0x23
    44ce:	7c a1       	ldd	r23, Y+36	; 0x24
    44d0:	8d a1       	ldd	r24, Y+37	; 0x25
    44d2:	9e a1       	ldd	r25, Y+38	; 0x26
    44d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    44d8:	dc 01       	movw	r26, r24
    44da:	cb 01       	movw	r24, r22
    44dc:	9a a3       	std	Y+34, r25	; 0x22
    44de:	89 a3       	std	Y+33, r24	; 0x21
    44e0:	89 a1       	ldd	r24, Y+33	; 0x21
    44e2:	9a a1       	ldd	r25, Y+34	; 0x22
    44e4:	9e 8f       	std	Y+30, r25	; 0x1e
    44e6:	8d 8f       	std	Y+29, r24	; 0x1d
    44e8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    44ea:	9e 8d       	ldd	r25, Y+30	; 0x1e
    44ec:	01 97       	sbiw	r24, 0x01	; 1
    44ee:	f1 f7       	brne	.-4      	; 0x44ec <HAL_LCD_u8GoTo+0x268>
    44f0:	9e 8f       	std	Y+30, r25	; 0x1e
    44f2:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(2);
			HAL_LCD_u8SendCommands(Left_Shift_Command);
    44f4:	88 e1       	ldi	r24, 0x18	; 24
    44f6:	0e 94 a5 1e 	call	0x3d4a	; 0x3d4a <HAL_LCD_u8SendCommands>
		for (u32 count = 0; count < Loc_u8NumOfShift; count++) {
			_delay_ms(2);
			HAL_LCD_u8SendCommands(Right_Shift_Command);
		}
	} else if (Loc_u8TypeOfShift == Left_Shift) {
		for (u32 count = 0; count < Loc_u8NumOfShift; count++) {
    44fa:	89 ad       	ldd	r24, Y+57	; 0x39
    44fc:	9a ad       	ldd	r25, Y+58	; 0x3a
    44fe:	ab ad       	ldd	r26, Y+59	; 0x3b
    4500:	bc ad       	ldd	r27, Y+60	; 0x3c
    4502:	01 96       	adiw	r24, 0x01	; 1
    4504:	a1 1d       	adc	r26, r1
    4506:	b1 1d       	adc	r27, r1
    4508:	89 af       	std	Y+57, r24	; 0x39
    450a:	9a af       	std	Y+58, r25	; 0x3a
    450c:	ab af       	std	Y+59, r26	; 0x3b
    450e:	bc af       	std	Y+60, r27	; 0x3c
    4510:	fe 01       	movw	r30, r28
    4512:	ee 5b       	subi	r30, 0xBE	; 190
    4514:	ff 4f       	sbci	r31, 0xFF	; 255
    4516:	80 81       	ld	r24, Z
    4518:	28 2f       	mov	r18, r24
    451a:	30 e0       	ldi	r19, 0x00	; 0
    451c:	40 e0       	ldi	r20, 0x00	; 0
    451e:	50 e0       	ldi	r21, 0x00	; 0
    4520:	89 ad       	ldd	r24, Y+57	; 0x39
    4522:	9a ad       	ldd	r25, Y+58	; 0x3a
    4524:	ab ad       	ldd	r26, Y+59	; 0x3b
    4526:	bc ad       	ldd	r27, Y+60	; 0x3c
    4528:	82 17       	cp	r24, r18
    452a:	93 07       	cpc	r25, r19
    452c:	a4 07       	cpc	r26, r20
    452e:	b5 07       	cpc	r27, r21
    4530:	08 f4       	brcc	.+2      	; 0x4534 <HAL_LCD_u8GoTo+0x2b0>
    4532:	6e cf       	rjmp	.-292    	; 0x4410 <HAL_LCD_u8GoTo+0x18c>
    4534:	f9 c0       	rjmp	.+498    	; 0x4728 <HAL_LCD_u8GoTo+0x4a4>
			_delay_ms(2);
			HAL_LCD_u8SendCommands(Left_Shift_Command);
		}
	} else if (Loc_u8TypeOfShift == First_Line) {
    4536:	fe 01       	movw	r30, r28
    4538:	ef 5b       	subi	r30, 0xBF	; 191
    453a:	ff 4f       	sbci	r31, 0xFF	; 255
    453c:	80 81       	ld	r24, Z
    453e:	82 30       	cpi	r24, 0x02	; 2
    4540:	09 f0       	breq	.+2      	; 0x4544 <HAL_LCD_u8GoTo+0x2c0>
    4542:	76 c0       	rjmp	.+236    	; 0x4630 <HAL_LCD_u8GoTo+0x3ac>
    4544:	80 e0       	ldi	r24, 0x00	; 0
    4546:	90 e0       	ldi	r25, 0x00	; 0
    4548:	a0 e0       	ldi	r26, 0x00	; 0
    454a:	b0 e4       	ldi	r27, 0x40	; 64
    454c:	89 8f       	std	Y+25, r24	; 0x19
    454e:	9a 8f       	std	Y+26, r25	; 0x1a
    4550:	ab 8f       	std	Y+27, r26	; 0x1b
    4552:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4554:	69 8d       	ldd	r22, Y+25	; 0x19
    4556:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4558:	8b 8d       	ldd	r24, Y+27	; 0x1b
    455a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    455c:	20 e0       	ldi	r18, 0x00	; 0
    455e:	30 e0       	ldi	r19, 0x00	; 0
    4560:	4a e7       	ldi	r20, 0x7A	; 122
    4562:	55 e4       	ldi	r21, 0x45	; 69
    4564:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4568:	dc 01       	movw	r26, r24
    456a:	cb 01       	movw	r24, r22
    456c:	8d 8b       	std	Y+21, r24	; 0x15
    456e:	9e 8b       	std	Y+22, r25	; 0x16
    4570:	af 8b       	std	Y+23, r26	; 0x17
    4572:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4574:	6d 89       	ldd	r22, Y+21	; 0x15
    4576:	7e 89       	ldd	r23, Y+22	; 0x16
    4578:	8f 89       	ldd	r24, Y+23	; 0x17
    457a:	98 8d       	ldd	r25, Y+24	; 0x18
    457c:	20 e0       	ldi	r18, 0x00	; 0
    457e:	30 e0       	ldi	r19, 0x00	; 0
    4580:	40 e8       	ldi	r20, 0x80	; 128
    4582:	5f e3       	ldi	r21, 0x3F	; 63
    4584:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4588:	88 23       	and	r24, r24
    458a:	2c f4       	brge	.+10     	; 0x4596 <HAL_LCD_u8GoTo+0x312>
		__ticks = 1;
    458c:	81 e0       	ldi	r24, 0x01	; 1
    458e:	90 e0       	ldi	r25, 0x00	; 0
    4590:	9c 8b       	std	Y+20, r25	; 0x14
    4592:	8b 8b       	std	Y+19, r24	; 0x13
    4594:	3f c0       	rjmp	.+126    	; 0x4614 <HAL_LCD_u8GoTo+0x390>
	else if (__tmp > 65535)
    4596:	6d 89       	ldd	r22, Y+21	; 0x15
    4598:	7e 89       	ldd	r23, Y+22	; 0x16
    459a:	8f 89       	ldd	r24, Y+23	; 0x17
    459c:	98 8d       	ldd	r25, Y+24	; 0x18
    459e:	20 e0       	ldi	r18, 0x00	; 0
    45a0:	3f ef       	ldi	r19, 0xFF	; 255
    45a2:	4f e7       	ldi	r20, 0x7F	; 127
    45a4:	57 e4       	ldi	r21, 0x47	; 71
    45a6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    45aa:	18 16       	cp	r1, r24
    45ac:	4c f5       	brge	.+82     	; 0x4600 <HAL_LCD_u8GoTo+0x37c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    45ae:	69 8d       	ldd	r22, Y+25	; 0x19
    45b0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    45b2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    45b4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    45b6:	20 e0       	ldi	r18, 0x00	; 0
    45b8:	30 e0       	ldi	r19, 0x00	; 0
    45ba:	40 e2       	ldi	r20, 0x20	; 32
    45bc:	51 e4       	ldi	r21, 0x41	; 65
    45be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    45c2:	dc 01       	movw	r26, r24
    45c4:	cb 01       	movw	r24, r22
    45c6:	bc 01       	movw	r22, r24
    45c8:	cd 01       	movw	r24, r26
    45ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    45ce:	dc 01       	movw	r26, r24
    45d0:	cb 01       	movw	r24, r22
    45d2:	9c 8b       	std	Y+20, r25	; 0x14
    45d4:	8b 8b       	std	Y+19, r24	; 0x13
    45d6:	0f c0       	rjmp	.+30     	; 0x45f6 <HAL_LCD_u8GoTo+0x372>
    45d8:	80 e9       	ldi	r24, 0x90	; 144
    45da:	91 e0       	ldi	r25, 0x01	; 1
    45dc:	9a 8b       	std	Y+18, r25	; 0x12
    45de:	89 8b       	std	Y+17, r24	; 0x11
    45e0:	89 89       	ldd	r24, Y+17	; 0x11
    45e2:	9a 89       	ldd	r25, Y+18	; 0x12
    45e4:	01 97       	sbiw	r24, 0x01	; 1
    45e6:	f1 f7       	brne	.-4      	; 0x45e4 <HAL_LCD_u8GoTo+0x360>
    45e8:	9a 8b       	std	Y+18, r25	; 0x12
    45ea:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    45ec:	8b 89       	ldd	r24, Y+19	; 0x13
    45ee:	9c 89       	ldd	r25, Y+20	; 0x14
    45f0:	01 97       	sbiw	r24, 0x01	; 1
    45f2:	9c 8b       	std	Y+20, r25	; 0x14
    45f4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    45f6:	8b 89       	ldd	r24, Y+19	; 0x13
    45f8:	9c 89       	ldd	r25, Y+20	; 0x14
    45fa:	00 97       	sbiw	r24, 0x00	; 0
    45fc:	69 f7       	brne	.-38     	; 0x45d8 <HAL_LCD_u8GoTo+0x354>
    45fe:	14 c0       	rjmp	.+40     	; 0x4628 <HAL_LCD_u8GoTo+0x3a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4600:	6d 89       	ldd	r22, Y+21	; 0x15
    4602:	7e 89       	ldd	r23, Y+22	; 0x16
    4604:	8f 89       	ldd	r24, Y+23	; 0x17
    4606:	98 8d       	ldd	r25, Y+24	; 0x18
    4608:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    460c:	dc 01       	movw	r26, r24
    460e:	cb 01       	movw	r24, r22
    4610:	9c 8b       	std	Y+20, r25	; 0x14
    4612:	8b 8b       	std	Y+19, r24	; 0x13
    4614:	8b 89       	ldd	r24, Y+19	; 0x13
    4616:	9c 89       	ldd	r25, Y+20	; 0x14
    4618:	98 8b       	std	Y+16, r25	; 0x10
    461a:	8f 87       	std	Y+15, r24	; 0x0f
    461c:	8f 85       	ldd	r24, Y+15	; 0x0f
    461e:	98 89       	ldd	r25, Y+16	; 0x10
    4620:	01 97       	sbiw	r24, 0x01	; 1
    4622:	f1 f7       	brne	.-4      	; 0x4620 <HAL_LCD_u8GoTo+0x39c>
    4624:	98 8b       	std	Y+16, r25	; 0x10
    4626:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(2);
		HAL_LCD_u8SendCommands(beginning_1stLine);
    4628:	80 e8       	ldi	r24, 0x80	; 128
    462a:	0e 94 a5 1e 	call	0x3d4a	; 0x3d4a <HAL_LCD_u8SendCommands>
    462e:	7c c0       	rjmp	.+248    	; 0x4728 <HAL_LCD_u8GoTo+0x4a4>
	} else if (Loc_u8TypeOfShift == Second_Line) {
    4630:	fe 01       	movw	r30, r28
    4632:	ef 5b       	subi	r30, 0xBF	; 191
    4634:	ff 4f       	sbci	r31, 0xFF	; 255
    4636:	80 81       	ld	r24, Z
    4638:	83 30       	cpi	r24, 0x03	; 3
    463a:	09 f0       	breq	.+2      	; 0x463e <HAL_LCD_u8GoTo+0x3ba>
    463c:	75 c0       	rjmp	.+234    	; 0x4728 <HAL_LCD_u8GoTo+0x4a4>
    463e:	80 e0       	ldi	r24, 0x00	; 0
    4640:	90 e0       	ldi	r25, 0x00	; 0
    4642:	a0 e0       	ldi	r26, 0x00	; 0
    4644:	b0 e4       	ldi	r27, 0x40	; 64
    4646:	8b 87       	std	Y+11, r24	; 0x0b
    4648:	9c 87       	std	Y+12, r25	; 0x0c
    464a:	ad 87       	std	Y+13, r26	; 0x0d
    464c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    464e:	6b 85       	ldd	r22, Y+11	; 0x0b
    4650:	7c 85       	ldd	r23, Y+12	; 0x0c
    4652:	8d 85       	ldd	r24, Y+13	; 0x0d
    4654:	9e 85       	ldd	r25, Y+14	; 0x0e
    4656:	20 e0       	ldi	r18, 0x00	; 0
    4658:	30 e0       	ldi	r19, 0x00	; 0
    465a:	4a e7       	ldi	r20, 0x7A	; 122
    465c:	55 e4       	ldi	r21, 0x45	; 69
    465e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4662:	dc 01       	movw	r26, r24
    4664:	cb 01       	movw	r24, r22
    4666:	8f 83       	std	Y+7, r24	; 0x07
    4668:	98 87       	std	Y+8, r25	; 0x08
    466a:	a9 87       	std	Y+9, r26	; 0x09
    466c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    466e:	6f 81       	ldd	r22, Y+7	; 0x07
    4670:	78 85       	ldd	r23, Y+8	; 0x08
    4672:	89 85       	ldd	r24, Y+9	; 0x09
    4674:	9a 85       	ldd	r25, Y+10	; 0x0a
    4676:	20 e0       	ldi	r18, 0x00	; 0
    4678:	30 e0       	ldi	r19, 0x00	; 0
    467a:	40 e8       	ldi	r20, 0x80	; 128
    467c:	5f e3       	ldi	r21, 0x3F	; 63
    467e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4682:	88 23       	and	r24, r24
    4684:	2c f4       	brge	.+10     	; 0x4690 <HAL_LCD_u8GoTo+0x40c>
		__ticks = 1;
    4686:	81 e0       	ldi	r24, 0x01	; 1
    4688:	90 e0       	ldi	r25, 0x00	; 0
    468a:	9e 83       	std	Y+6, r25	; 0x06
    468c:	8d 83       	std	Y+5, r24	; 0x05
    468e:	3f c0       	rjmp	.+126    	; 0x470e <HAL_LCD_u8GoTo+0x48a>
	else if (__tmp > 65535)
    4690:	6f 81       	ldd	r22, Y+7	; 0x07
    4692:	78 85       	ldd	r23, Y+8	; 0x08
    4694:	89 85       	ldd	r24, Y+9	; 0x09
    4696:	9a 85       	ldd	r25, Y+10	; 0x0a
    4698:	20 e0       	ldi	r18, 0x00	; 0
    469a:	3f ef       	ldi	r19, 0xFF	; 255
    469c:	4f e7       	ldi	r20, 0x7F	; 127
    469e:	57 e4       	ldi	r21, 0x47	; 71
    46a0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    46a4:	18 16       	cp	r1, r24
    46a6:	4c f5       	brge	.+82     	; 0x46fa <HAL_LCD_u8GoTo+0x476>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    46a8:	6b 85       	ldd	r22, Y+11	; 0x0b
    46aa:	7c 85       	ldd	r23, Y+12	; 0x0c
    46ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    46ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    46b0:	20 e0       	ldi	r18, 0x00	; 0
    46b2:	30 e0       	ldi	r19, 0x00	; 0
    46b4:	40 e2       	ldi	r20, 0x20	; 32
    46b6:	51 e4       	ldi	r21, 0x41	; 65
    46b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    46bc:	dc 01       	movw	r26, r24
    46be:	cb 01       	movw	r24, r22
    46c0:	bc 01       	movw	r22, r24
    46c2:	cd 01       	movw	r24, r26
    46c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    46c8:	dc 01       	movw	r26, r24
    46ca:	cb 01       	movw	r24, r22
    46cc:	9e 83       	std	Y+6, r25	; 0x06
    46ce:	8d 83       	std	Y+5, r24	; 0x05
    46d0:	0f c0       	rjmp	.+30     	; 0x46f0 <HAL_LCD_u8GoTo+0x46c>
    46d2:	80 e9       	ldi	r24, 0x90	; 144
    46d4:	91 e0       	ldi	r25, 0x01	; 1
    46d6:	9c 83       	std	Y+4, r25	; 0x04
    46d8:	8b 83       	std	Y+3, r24	; 0x03
    46da:	8b 81       	ldd	r24, Y+3	; 0x03
    46dc:	9c 81       	ldd	r25, Y+4	; 0x04
    46de:	01 97       	sbiw	r24, 0x01	; 1
    46e0:	f1 f7       	brne	.-4      	; 0x46de <HAL_LCD_u8GoTo+0x45a>
    46e2:	9c 83       	std	Y+4, r25	; 0x04
    46e4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    46e6:	8d 81       	ldd	r24, Y+5	; 0x05
    46e8:	9e 81       	ldd	r25, Y+6	; 0x06
    46ea:	01 97       	sbiw	r24, 0x01	; 1
    46ec:	9e 83       	std	Y+6, r25	; 0x06
    46ee:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    46f0:	8d 81       	ldd	r24, Y+5	; 0x05
    46f2:	9e 81       	ldd	r25, Y+6	; 0x06
    46f4:	00 97       	sbiw	r24, 0x00	; 0
    46f6:	69 f7       	brne	.-38     	; 0x46d2 <HAL_LCD_u8GoTo+0x44e>
    46f8:	14 c0       	rjmp	.+40     	; 0x4722 <HAL_LCD_u8GoTo+0x49e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    46fa:	6f 81       	ldd	r22, Y+7	; 0x07
    46fc:	78 85       	ldd	r23, Y+8	; 0x08
    46fe:	89 85       	ldd	r24, Y+9	; 0x09
    4700:	9a 85       	ldd	r25, Y+10	; 0x0a
    4702:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4706:	dc 01       	movw	r26, r24
    4708:	cb 01       	movw	r24, r22
    470a:	9e 83       	std	Y+6, r25	; 0x06
    470c:	8d 83       	std	Y+5, r24	; 0x05
    470e:	8d 81       	ldd	r24, Y+5	; 0x05
    4710:	9e 81       	ldd	r25, Y+6	; 0x06
    4712:	9a 83       	std	Y+2, r25	; 0x02
    4714:	89 83       	std	Y+1, r24	; 0x01
    4716:	89 81       	ldd	r24, Y+1	; 0x01
    4718:	9a 81       	ldd	r25, Y+2	; 0x02
    471a:	01 97       	sbiw	r24, 0x01	; 1
    471c:	f1 f7       	brne	.-4      	; 0x471a <HAL_LCD_u8GoTo+0x496>
    471e:	9a 83       	std	Y+2, r25	; 0x02
    4720:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2);
		HAL_LCD_u8SendCommands(beginning_2stLine);
    4722:	80 ec       	ldi	r24, 0xC0	; 192
    4724:	0e 94 a5 1e 	call	0x3d4a	; 0x3d4a <HAL_LCD_u8SendCommands>
	}
}
    4728:	ce 5b       	subi	r28, 0xBE	; 190
    472a:	df 4f       	sbci	r29, 0xFF	; 255
    472c:	0f b6       	in	r0, 0x3f	; 63
    472e:	f8 94       	cli
    4730:	de bf       	out	0x3e, r29	; 62
    4732:	0f be       	out	0x3f, r0	; 63
    4734:	cd bf       	out	0x3d, r28	; 61
    4736:	cf 91       	pop	r28
    4738:	df 91       	pop	r29
    473a:	08 95       	ret

0000473c <HAL_LCD_u8Clear>:

void HAL_LCD_u8Clear() {
    473c:	df 93       	push	r29
    473e:	cf 93       	push	r28
    4740:	cd b7       	in	r28, 0x3d	; 61
    4742:	de b7       	in	r29, 0x3e	; 62
    4744:	2e 97       	sbiw	r28, 0x0e	; 14
    4746:	0f b6       	in	r0, 0x3f	; 63
    4748:	f8 94       	cli
    474a:	de bf       	out	0x3e, r29	; 62
    474c:	0f be       	out	0x3f, r0	; 63
    474e:	cd bf       	out	0x3d, r28	; 61
    4750:	80 e0       	ldi	r24, 0x00	; 0
    4752:	90 e0       	ldi	r25, 0x00	; 0
    4754:	a0 e0       	ldi	r26, 0x00	; 0
    4756:	b0 e4       	ldi	r27, 0x40	; 64
    4758:	8b 87       	std	Y+11, r24	; 0x0b
    475a:	9c 87       	std	Y+12, r25	; 0x0c
    475c:	ad 87       	std	Y+13, r26	; 0x0d
    475e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4760:	6b 85       	ldd	r22, Y+11	; 0x0b
    4762:	7c 85       	ldd	r23, Y+12	; 0x0c
    4764:	8d 85       	ldd	r24, Y+13	; 0x0d
    4766:	9e 85       	ldd	r25, Y+14	; 0x0e
    4768:	20 e0       	ldi	r18, 0x00	; 0
    476a:	30 e0       	ldi	r19, 0x00	; 0
    476c:	4a e7       	ldi	r20, 0x7A	; 122
    476e:	55 e4       	ldi	r21, 0x45	; 69
    4770:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4774:	dc 01       	movw	r26, r24
    4776:	cb 01       	movw	r24, r22
    4778:	8f 83       	std	Y+7, r24	; 0x07
    477a:	98 87       	std	Y+8, r25	; 0x08
    477c:	a9 87       	std	Y+9, r26	; 0x09
    477e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4780:	6f 81       	ldd	r22, Y+7	; 0x07
    4782:	78 85       	ldd	r23, Y+8	; 0x08
    4784:	89 85       	ldd	r24, Y+9	; 0x09
    4786:	9a 85       	ldd	r25, Y+10	; 0x0a
    4788:	20 e0       	ldi	r18, 0x00	; 0
    478a:	30 e0       	ldi	r19, 0x00	; 0
    478c:	40 e8       	ldi	r20, 0x80	; 128
    478e:	5f e3       	ldi	r21, 0x3F	; 63
    4790:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4794:	88 23       	and	r24, r24
    4796:	2c f4       	brge	.+10     	; 0x47a2 <HAL_LCD_u8Clear+0x66>
		__ticks = 1;
    4798:	81 e0       	ldi	r24, 0x01	; 1
    479a:	90 e0       	ldi	r25, 0x00	; 0
    479c:	9e 83       	std	Y+6, r25	; 0x06
    479e:	8d 83       	std	Y+5, r24	; 0x05
    47a0:	3f c0       	rjmp	.+126    	; 0x4820 <HAL_LCD_u8Clear+0xe4>
	else if (__tmp > 65535)
    47a2:	6f 81       	ldd	r22, Y+7	; 0x07
    47a4:	78 85       	ldd	r23, Y+8	; 0x08
    47a6:	89 85       	ldd	r24, Y+9	; 0x09
    47a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    47aa:	20 e0       	ldi	r18, 0x00	; 0
    47ac:	3f ef       	ldi	r19, 0xFF	; 255
    47ae:	4f e7       	ldi	r20, 0x7F	; 127
    47b0:	57 e4       	ldi	r21, 0x47	; 71
    47b2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    47b6:	18 16       	cp	r1, r24
    47b8:	4c f5       	brge	.+82     	; 0x480c <HAL_LCD_u8Clear+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    47ba:	6b 85       	ldd	r22, Y+11	; 0x0b
    47bc:	7c 85       	ldd	r23, Y+12	; 0x0c
    47be:	8d 85       	ldd	r24, Y+13	; 0x0d
    47c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    47c2:	20 e0       	ldi	r18, 0x00	; 0
    47c4:	30 e0       	ldi	r19, 0x00	; 0
    47c6:	40 e2       	ldi	r20, 0x20	; 32
    47c8:	51 e4       	ldi	r21, 0x41	; 65
    47ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    47ce:	dc 01       	movw	r26, r24
    47d0:	cb 01       	movw	r24, r22
    47d2:	bc 01       	movw	r22, r24
    47d4:	cd 01       	movw	r24, r26
    47d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    47da:	dc 01       	movw	r26, r24
    47dc:	cb 01       	movw	r24, r22
    47de:	9e 83       	std	Y+6, r25	; 0x06
    47e0:	8d 83       	std	Y+5, r24	; 0x05
    47e2:	0f c0       	rjmp	.+30     	; 0x4802 <HAL_LCD_u8Clear+0xc6>
    47e4:	80 e9       	ldi	r24, 0x90	; 144
    47e6:	91 e0       	ldi	r25, 0x01	; 1
    47e8:	9c 83       	std	Y+4, r25	; 0x04
    47ea:	8b 83       	std	Y+3, r24	; 0x03
    47ec:	8b 81       	ldd	r24, Y+3	; 0x03
    47ee:	9c 81       	ldd	r25, Y+4	; 0x04
    47f0:	01 97       	sbiw	r24, 0x01	; 1
    47f2:	f1 f7       	brne	.-4      	; 0x47f0 <HAL_LCD_u8Clear+0xb4>
    47f4:	9c 83       	std	Y+4, r25	; 0x04
    47f6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    47f8:	8d 81       	ldd	r24, Y+5	; 0x05
    47fa:	9e 81       	ldd	r25, Y+6	; 0x06
    47fc:	01 97       	sbiw	r24, 0x01	; 1
    47fe:	9e 83       	std	Y+6, r25	; 0x06
    4800:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4802:	8d 81       	ldd	r24, Y+5	; 0x05
    4804:	9e 81       	ldd	r25, Y+6	; 0x06
    4806:	00 97       	sbiw	r24, 0x00	; 0
    4808:	69 f7       	brne	.-38     	; 0x47e4 <HAL_LCD_u8Clear+0xa8>
    480a:	14 c0       	rjmp	.+40     	; 0x4834 <HAL_LCD_u8Clear+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    480c:	6f 81       	ldd	r22, Y+7	; 0x07
    480e:	78 85       	ldd	r23, Y+8	; 0x08
    4810:	89 85       	ldd	r24, Y+9	; 0x09
    4812:	9a 85       	ldd	r25, Y+10	; 0x0a
    4814:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4818:	dc 01       	movw	r26, r24
    481a:	cb 01       	movw	r24, r22
    481c:	9e 83       	std	Y+6, r25	; 0x06
    481e:	8d 83       	std	Y+5, r24	; 0x05
    4820:	8d 81       	ldd	r24, Y+5	; 0x05
    4822:	9e 81       	ldd	r25, Y+6	; 0x06
    4824:	9a 83       	std	Y+2, r25	; 0x02
    4826:	89 83       	std	Y+1, r24	; 0x01
    4828:	89 81       	ldd	r24, Y+1	; 0x01
    482a:	9a 81       	ldd	r25, Y+2	; 0x02
    482c:	01 97       	sbiw	r24, 0x01	; 1
    482e:	f1 f7       	brne	.-4      	; 0x482c <HAL_LCD_u8Clear+0xf0>
    4830:	9a 83       	std	Y+2, r25	; 0x02
    4832:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	HAL_LCD_u8SendCommands(Display_Clear);
    4834:	81 e0       	ldi	r24, 0x01	; 1
    4836:	0e 94 a5 1e 	call	0x3d4a	; 0x3d4a <HAL_LCD_u8SendCommands>
}
    483a:	2e 96       	adiw	r28, 0x0e	; 14
    483c:	0f b6       	in	r0, 0x3f	; 63
    483e:	f8 94       	cli
    4840:	de bf       	out	0x3e, r29	; 62
    4842:	0f be       	out	0x3f, r0	; 63
    4844:	cd bf       	out	0x3d, r28	; 61
    4846:	cf 91       	pop	r28
    4848:	df 91       	pop	r29
    484a:	08 95       	ret

0000484c <HAL_LCD_u8CustomChar>:

void HAL_LCD_u8CustomChar(u8 Loc_u8Location, u8* Loc_u8msg) {
    484c:	df 93       	push	r29
    484e:	cf 93       	push	r28
    4850:	00 d0       	rcall	.+0      	; 0x4852 <HAL_LCD_u8CustomChar+0x6>
    4852:	00 d0       	rcall	.+0      	; 0x4854 <HAL_LCD_u8CustomChar+0x8>
    4854:	cd b7       	in	r28, 0x3d	; 61
    4856:	de b7       	in	r29, 0x3e	; 62
    4858:	8a 83       	std	Y+2, r24	; 0x02
    485a:	7c 83       	std	Y+4, r23	; 0x04
    485c:	6b 83       	std	Y+3, r22	; 0x03
	if (Loc_u8Location < 8) {
    485e:	8a 81       	ldd	r24, Y+2	; 0x02
    4860:	88 30       	cpi	r24, 0x08	; 8
    4862:	f8 f4       	brcc	.+62     	; 0x48a2 <HAL_LCD_u8CustomChar+0x56>
		HAL_LCD_u8SendCommands(0x40 + (Loc_u8Location*8));
    4864:	8a 81       	ldd	r24, Y+2	; 0x02
    4866:	88 2f       	mov	r24, r24
    4868:	90 e0       	ldi	r25, 0x00	; 0
    486a:	08 96       	adiw	r24, 0x08	; 8
    486c:	88 0f       	add	r24, r24
    486e:	99 1f       	adc	r25, r25
    4870:	88 0f       	add	r24, r24
    4872:	99 1f       	adc	r25, r25
    4874:	88 0f       	add	r24, r24
    4876:	99 1f       	adc	r25, r25
    4878:	0e 94 a5 1e 	call	0x3d4a	; 0x3d4a <HAL_LCD_u8SendCommands>
		for( u8 count = 0; count < 8; count++)
    487c:	19 82       	std	Y+1, r1	; 0x01
    487e:	0e c0       	rjmp	.+28     	; 0x489c <HAL_LCD_u8CustomChar+0x50>
			HAL_LCD_u8SendChar(Loc_u8msg[count]);
    4880:	89 81       	ldd	r24, Y+1	; 0x01
    4882:	28 2f       	mov	r18, r24
    4884:	30 e0       	ldi	r19, 0x00	; 0
    4886:	8b 81       	ldd	r24, Y+3	; 0x03
    4888:	9c 81       	ldd	r25, Y+4	; 0x04
    488a:	fc 01       	movw	r30, r24
    488c:	e2 0f       	add	r30, r18
    488e:	f3 1f       	adc	r31, r19
    4890:	80 81       	ld	r24, Z
    4892:	0e 94 c7 1f 	call	0x3f8e	; 0x3f8e <HAL_LCD_u8SendChar>
}

void HAL_LCD_u8CustomChar(u8 Loc_u8Location, u8* Loc_u8msg) {
	if (Loc_u8Location < 8) {
		HAL_LCD_u8SendCommands(0x40 + (Loc_u8Location*8));
		for( u8 count = 0; count < 8; count++)
    4896:	89 81       	ldd	r24, Y+1	; 0x01
    4898:	8f 5f       	subi	r24, 0xFF	; 255
    489a:	89 83       	std	Y+1, r24	; 0x01
    489c:	89 81       	ldd	r24, Y+1	; 0x01
    489e:	88 30       	cpi	r24, 0x08	; 8
    48a0:	78 f3       	brcs	.-34     	; 0x4880 <HAL_LCD_u8CustomChar+0x34>
			HAL_LCD_u8SendChar(Loc_u8msg[count]);
	}
	HAL_LCD_u8SendCommands(0x02);
    48a2:	82 e0       	ldi	r24, 0x02	; 2
    48a4:	0e 94 a5 1e 	call	0x3d4a	; 0x3d4a <HAL_LCD_u8SendCommands>
}
    48a8:	0f 90       	pop	r0
    48aa:	0f 90       	pop	r0
    48ac:	0f 90       	pop	r0
    48ae:	0f 90       	pop	r0
    48b0:	cf 91       	pop	r28
    48b2:	df 91       	pop	r29
    48b4:	08 95       	ret

000048b6 <HAL_KeyPad_u8KeyPadInit>:

u8 array[4][4] = { { '1', '2', '3', 'A' }, { '4', '5', '6', 'B' }, { '7', '8',
		'9', 'C' }, { '*', '0', '#', 'D' } };
u8 KetPadValue = 0;

void HAL_KeyPad_u8KeyPadInit() {
    48b6:	df 93       	push	r29
    48b8:	cf 93       	push	r28
    48ba:	cd b7       	in	r28, 0x3d	; 61
    48bc:	de b7       	in	r29, 0x3e	; 62
	MCAL_DIO_u8SetPortDirection(2, 0x0F);
    48be:	82 e0       	ldi	r24, 0x02	; 2
    48c0:	6f e0       	ldi	r22, 0x0F	; 15
    48c2:	0e 94 73 14 	call	0x28e6	; 0x28e6 <MCAL_DIO_u8SetPortDirection>
	MCAL_DIO_u8SetPortValue(2, PORT_OUTPUT);
    48c6:	82 e0       	ldi	r24, 0x02	; 2
    48c8:	6f ef       	ldi	r22, 0xFF	; 255
    48ca:	0e 94 e1 15 	call	0x2bc2	; 0x2bc2 <MCAL_DIO_u8SetPortValue>
}
    48ce:	cf 91       	pop	r28
    48d0:	df 91       	pop	r29
    48d2:	08 95       	ret

000048d4 <HAL_KeyPad_u8GetKeyPressed>:
//		c--;
//		MCAL_DIO_u8SetPinValue(2, col, 1);
//	}
//}

void HAL_KeyPad_u8GetKeyPressed(u8 *Button) {
    48d4:	df 93       	push	r29
    48d6:	cf 93       	push	r28
    48d8:	cd b7       	in	r28, 0x3d	; 61
    48da:	de b7       	in	r29, 0x3e	; 62
    48dc:	a2 97       	sbiw	r28, 0x22	; 34
    48de:	0f b6       	in	r0, 0x3f	; 63
    48e0:	f8 94       	cli
    48e2:	de bf       	out	0x3e, r29	; 62
    48e4:	0f be       	out	0x3f, r0	; 63
    48e6:	cd bf       	out	0x3d, r28	; 61
    48e8:	9a a3       	std	Y+34, r25	; 0x22
    48ea:	89 a3       	std	Y+33, r24	; 0x21

	u8 LOC_u8Col, LOC_u8Row, LOC_u8Status = 7, LOC_u8PinValue;
    48ec:	87 e0       	ldi	r24, 0x07	; 7
    48ee:	8d 8f       	std	Y+29, r24	; 0x1d
	*Button = 0;
    48f0:	e9 a1       	ldd	r30, Y+33	; 0x21
    48f2:	fa a1       	ldd	r31, Y+34	; 0x22
    48f4:	10 82       	st	Z, r1
	for (LOC_u8Row = 0; LOC_u8Row < 4; LOC_u8Row++) {
    48f6:	1e 8e       	std	Y+30, r1	; 0x1e
    48f8:	2f c1       	rjmp	.+606    	; 0x4b58 <HAL_KeyPad_u8GetKeyPressed+0x284>
		//  LOC_u8Return_Value = MCAL_DIO_u8SetPinValue(KeyPad_Port,R0,Pin_HIGH);
		//  LOC_u8Return_Value = MCAL_DIO_u8SetPinValue(KeyPad_Port,R1,Pin_HIGH);
		//  LOC_u8Return_Value = MCAL_DIO_u8SetPinValue(KeyPad_Port,R2,Pin_HIGH);
		//  LOC_u8Return_Value = MCAL_DIO_u8SetPinValue(KeyPad_Port,R3,Pin_HIGH);
		MCAL_DIO_u8SetPinValue(2, LOC_u8Row, 0);
    48fa:	82 e0       	ldi	r24, 0x02	; 2
    48fc:	6e 8d       	ldd	r22, Y+30	; 0x1e
    48fe:	40 e0       	ldi	r20, 0x00	; 0
    4900:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <MCAL_DIO_u8SetPinValue>
		for (LOC_u8Col = 0; LOC_u8Col < 4; LOC_u8Col++) {
    4904:	1f 8e       	std	Y+31, r1	; 0x1f
    4906:	1c c1       	rjmp	.+568    	; 0x4b40 <HAL_KeyPad_u8GetKeyPressed+0x26c>
			MCAL_DIO_u8GetPinValue(2, (LOC_u8Col + 4), &LOC_u8PinValue);
    4908:	8f 8d       	ldd	r24, Y+31	; 0x1f
    490a:	98 2f       	mov	r25, r24
    490c:	9c 5f       	subi	r25, 0xFC	; 252
    490e:	9e 01       	movw	r18, r28
    4910:	20 5e       	subi	r18, 0xE0	; 224
    4912:	3f 4f       	sbci	r19, 0xFF	; 255
    4914:	82 e0       	ldi	r24, 0x02	; 2
    4916:	69 2f       	mov	r22, r25
    4918:	a9 01       	movw	r20, r18
    491a:	0e 94 90 17 	call	0x2f20	; 0x2f20 <MCAL_DIO_u8GetPinValue>
			LOC_u8Status = LOC_u8PinValue; //new
    491e:	88 a1       	ldd	r24, Y+32	; 0x20
    4920:	8d 8f       	std	Y+29, r24	; 0x1d
			if (LOC_u8PinValue == 0) {
    4922:	88 a1       	ldd	r24, Y+32	; 0x20
    4924:	88 23       	and	r24, r24
    4926:	09 f0       	breq	.+2      	; 0x492a <HAL_KeyPad_u8GetKeyPressed+0x56>
    4928:	08 c1       	rjmp	.+528    	; 0x4b3a <HAL_KeyPad_u8GetKeyPressed+0x266>
    492a:	80 e0       	ldi	r24, 0x00	; 0
    492c:	90 e0       	ldi	r25, 0x00	; 0
    492e:	a0 ea       	ldi	r26, 0xA0	; 160
    4930:	b0 e4       	ldi	r27, 0x40	; 64
    4932:	89 8f       	std	Y+25, r24	; 0x19
    4934:	9a 8f       	std	Y+26, r25	; 0x1a
    4936:	ab 8f       	std	Y+27, r26	; 0x1b
    4938:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    493a:	69 8d       	ldd	r22, Y+25	; 0x19
    493c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    493e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4940:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4942:	20 e0       	ldi	r18, 0x00	; 0
    4944:	30 e0       	ldi	r19, 0x00	; 0
    4946:	4a e7       	ldi	r20, 0x7A	; 122
    4948:	55 e4       	ldi	r21, 0x45	; 69
    494a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    494e:	dc 01       	movw	r26, r24
    4950:	cb 01       	movw	r24, r22
    4952:	8d 8b       	std	Y+21, r24	; 0x15
    4954:	9e 8b       	std	Y+22, r25	; 0x16
    4956:	af 8b       	std	Y+23, r26	; 0x17
    4958:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    495a:	6d 89       	ldd	r22, Y+21	; 0x15
    495c:	7e 89       	ldd	r23, Y+22	; 0x16
    495e:	8f 89       	ldd	r24, Y+23	; 0x17
    4960:	98 8d       	ldd	r25, Y+24	; 0x18
    4962:	20 e0       	ldi	r18, 0x00	; 0
    4964:	30 e0       	ldi	r19, 0x00	; 0
    4966:	40 e8       	ldi	r20, 0x80	; 128
    4968:	5f e3       	ldi	r21, 0x3F	; 63
    496a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    496e:	88 23       	and	r24, r24
    4970:	2c f4       	brge	.+10     	; 0x497c <HAL_KeyPad_u8GetKeyPressed+0xa8>
		__ticks = 1;
    4972:	81 e0       	ldi	r24, 0x01	; 1
    4974:	90 e0       	ldi	r25, 0x00	; 0
    4976:	9c 8b       	std	Y+20, r25	; 0x14
    4978:	8b 8b       	std	Y+19, r24	; 0x13
    497a:	3f c0       	rjmp	.+126    	; 0x49fa <HAL_KeyPad_u8GetKeyPressed+0x126>
	else if (__tmp > 65535)
    497c:	6d 89       	ldd	r22, Y+21	; 0x15
    497e:	7e 89       	ldd	r23, Y+22	; 0x16
    4980:	8f 89       	ldd	r24, Y+23	; 0x17
    4982:	98 8d       	ldd	r25, Y+24	; 0x18
    4984:	20 e0       	ldi	r18, 0x00	; 0
    4986:	3f ef       	ldi	r19, 0xFF	; 255
    4988:	4f e7       	ldi	r20, 0x7F	; 127
    498a:	57 e4       	ldi	r21, 0x47	; 71
    498c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4990:	18 16       	cp	r1, r24
    4992:	4c f5       	brge	.+82     	; 0x49e6 <HAL_KeyPad_u8GetKeyPressed+0x112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4994:	69 8d       	ldd	r22, Y+25	; 0x19
    4996:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4998:	8b 8d       	ldd	r24, Y+27	; 0x1b
    499a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    499c:	20 e0       	ldi	r18, 0x00	; 0
    499e:	30 e0       	ldi	r19, 0x00	; 0
    49a0:	40 e2       	ldi	r20, 0x20	; 32
    49a2:	51 e4       	ldi	r21, 0x41	; 65
    49a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    49a8:	dc 01       	movw	r26, r24
    49aa:	cb 01       	movw	r24, r22
    49ac:	bc 01       	movw	r22, r24
    49ae:	cd 01       	movw	r24, r26
    49b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    49b4:	dc 01       	movw	r26, r24
    49b6:	cb 01       	movw	r24, r22
    49b8:	9c 8b       	std	Y+20, r25	; 0x14
    49ba:	8b 8b       	std	Y+19, r24	; 0x13
    49bc:	0f c0       	rjmp	.+30     	; 0x49dc <HAL_KeyPad_u8GetKeyPressed+0x108>
    49be:	80 e9       	ldi	r24, 0x90	; 144
    49c0:	91 e0       	ldi	r25, 0x01	; 1
    49c2:	9a 8b       	std	Y+18, r25	; 0x12
    49c4:	89 8b       	std	Y+17, r24	; 0x11
    49c6:	89 89       	ldd	r24, Y+17	; 0x11
    49c8:	9a 89       	ldd	r25, Y+18	; 0x12
    49ca:	01 97       	sbiw	r24, 0x01	; 1
    49cc:	f1 f7       	brne	.-4      	; 0x49ca <HAL_KeyPad_u8GetKeyPressed+0xf6>
    49ce:	9a 8b       	std	Y+18, r25	; 0x12
    49d0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    49d2:	8b 89       	ldd	r24, Y+19	; 0x13
    49d4:	9c 89       	ldd	r25, Y+20	; 0x14
    49d6:	01 97       	sbiw	r24, 0x01	; 1
    49d8:	9c 8b       	std	Y+20, r25	; 0x14
    49da:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    49dc:	8b 89       	ldd	r24, Y+19	; 0x13
    49de:	9c 89       	ldd	r25, Y+20	; 0x14
    49e0:	00 97       	sbiw	r24, 0x00	; 0
    49e2:	69 f7       	brne	.-38     	; 0x49be <HAL_KeyPad_u8GetKeyPressed+0xea>
    49e4:	14 c0       	rjmp	.+40     	; 0x4a0e <HAL_KeyPad_u8GetKeyPressed+0x13a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    49e6:	6d 89       	ldd	r22, Y+21	; 0x15
    49e8:	7e 89       	ldd	r23, Y+22	; 0x16
    49ea:	8f 89       	ldd	r24, Y+23	; 0x17
    49ec:	98 8d       	ldd	r25, Y+24	; 0x18
    49ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    49f2:	dc 01       	movw	r26, r24
    49f4:	cb 01       	movw	r24, r22
    49f6:	9c 8b       	std	Y+20, r25	; 0x14
    49f8:	8b 8b       	std	Y+19, r24	; 0x13
    49fa:	8b 89       	ldd	r24, Y+19	; 0x13
    49fc:	9c 89       	ldd	r25, Y+20	; 0x14
    49fe:	98 8b       	std	Y+16, r25	; 0x10
    4a00:	8f 87       	std	Y+15, r24	; 0x0f
    4a02:	8f 85       	ldd	r24, Y+15	; 0x0f
    4a04:	98 89       	ldd	r25, Y+16	; 0x10
    4a06:	01 97       	sbiw	r24, 0x01	; 1
    4a08:	f1 f7       	brne	.-4      	; 0x4a06 <HAL_KeyPad_u8GetKeyPressed+0x132>
    4a0a:	98 8b       	std	Y+16, r25	; 0x10
    4a0c:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(5); //new
				MCAL_DIO_u8GetPinValue(2, (LOC_u8Col + 4), &LOC_u8PinValue); //new
    4a0e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4a10:	98 2f       	mov	r25, r24
    4a12:	9c 5f       	subi	r25, 0xFC	; 252
    4a14:	9e 01       	movw	r18, r28
    4a16:	20 5e       	subi	r18, 0xE0	; 224
    4a18:	3f 4f       	sbci	r19, 0xFF	; 255
    4a1a:	82 e0       	ldi	r24, 0x02	; 2
    4a1c:	69 2f       	mov	r22, r25
    4a1e:	a9 01       	movw	r20, r18
    4a20:	0e 94 90 17 	call	0x2f20	; 0x2f20 <MCAL_DIO_u8GetPinValue>
				if (LOC_u8PinValue == 1) //new
    4a24:	88 a1       	ldd	r24, Y+32	; 0x20
    4a26:	81 30       	cpi	r24, 0x01	; 1
    4a28:	09 f0       	breq	.+2      	; 0x4a2c <HAL_KeyPad_u8GetKeyPressed+0x158>
    4a2a:	8e c0       	rjmp	.+284    	; 0x4b48 <HAL_KeyPad_u8GetKeyPressed+0x274>
    4a2c:	80 e0       	ldi	r24, 0x00	; 0
    4a2e:	90 e0       	ldi	r25, 0x00	; 0
    4a30:	a0 ea       	ldi	r26, 0xA0	; 160
    4a32:	b0 e4       	ldi	r27, 0x40	; 64
    4a34:	8b 87       	std	Y+11, r24	; 0x0b
    4a36:	9c 87       	std	Y+12, r25	; 0x0c
    4a38:	ad 87       	std	Y+13, r26	; 0x0d
    4a3a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4a3c:	6b 85       	ldd	r22, Y+11	; 0x0b
    4a3e:	7c 85       	ldd	r23, Y+12	; 0x0c
    4a40:	8d 85       	ldd	r24, Y+13	; 0x0d
    4a42:	9e 85       	ldd	r25, Y+14	; 0x0e
    4a44:	20 e0       	ldi	r18, 0x00	; 0
    4a46:	30 e0       	ldi	r19, 0x00	; 0
    4a48:	4a e7       	ldi	r20, 0x7A	; 122
    4a4a:	55 e4       	ldi	r21, 0x45	; 69
    4a4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a50:	dc 01       	movw	r26, r24
    4a52:	cb 01       	movw	r24, r22
    4a54:	8f 83       	std	Y+7, r24	; 0x07
    4a56:	98 87       	std	Y+8, r25	; 0x08
    4a58:	a9 87       	std	Y+9, r26	; 0x09
    4a5a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4a5c:	6f 81       	ldd	r22, Y+7	; 0x07
    4a5e:	78 85       	ldd	r23, Y+8	; 0x08
    4a60:	89 85       	ldd	r24, Y+9	; 0x09
    4a62:	9a 85       	ldd	r25, Y+10	; 0x0a
    4a64:	20 e0       	ldi	r18, 0x00	; 0
    4a66:	30 e0       	ldi	r19, 0x00	; 0
    4a68:	40 e8       	ldi	r20, 0x80	; 128
    4a6a:	5f e3       	ldi	r21, 0x3F	; 63
    4a6c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4a70:	88 23       	and	r24, r24
    4a72:	2c f4       	brge	.+10     	; 0x4a7e <HAL_KeyPad_u8GetKeyPressed+0x1aa>
		__ticks = 1;
    4a74:	81 e0       	ldi	r24, 0x01	; 1
    4a76:	90 e0       	ldi	r25, 0x00	; 0
    4a78:	9e 83       	std	Y+6, r25	; 0x06
    4a7a:	8d 83       	std	Y+5, r24	; 0x05
    4a7c:	3f c0       	rjmp	.+126    	; 0x4afc <HAL_KeyPad_u8GetKeyPressed+0x228>
	else if (__tmp > 65535)
    4a7e:	6f 81       	ldd	r22, Y+7	; 0x07
    4a80:	78 85       	ldd	r23, Y+8	; 0x08
    4a82:	89 85       	ldd	r24, Y+9	; 0x09
    4a84:	9a 85       	ldd	r25, Y+10	; 0x0a
    4a86:	20 e0       	ldi	r18, 0x00	; 0
    4a88:	3f ef       	ldi	r19, 0xFF	; 255
    4a8a:	4f e7       	ldi	r20, 0x7F	; 127
    4a8c:	57 e4       	ldi	r21, 0x47	; 71
    4a8e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4a92:	18 16       	cp	r1, r24
    4a94:	4c f5       	brge	.+82     	; 0x4ae8 <HAL_KeyPad_u8GetKeyPressed+0x214>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4a96:	6b 85       	ldd	r22, Y+11	; 0x0b
    4a98:	7c 85       	ldd	r23, Y+12	; 0x0c
    4a9a:	8d 85       	ldd	r24, Y+13	; 0x0d
    4a9c:	9e 85       	ldd	r25, Y+14	; 0x0e
    4a9e:	20 e0       	ldi	r18, 0x00	; 0
    4aa0:	30 e0       	ldi	r19, 0x00	; 0
    4aa2:	40 e2       	ldi	r20, 0x20	; 32
    4aa4:	51 e4       	ldi	r21, 0x41	; 65
    4aa6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4aaa:	dc 01       	movw	r26, r24
    4aac:	cb 01       	movw	r24, r22
    4aae:	bc 01       	movw	r22, r24
    4ab0:	cd 01       	movw	r24, r26
    4ab2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ab6:	dc 01       	movw	r26, r24
    4ab8:	cb 01       	movw	r24, r22
    4aba:	9e 83       	std	Y+6, r25	; 0x06
    4abc:	8d 83       	std	Y+5, r24	; 0x05
    4abe:	0f c0       	rjmp	.+30     	; 0x4ade <HAL_KeyPad_u8GetKeyPressed+0x20a>
    4ac0:	80 e9       	ldi	r24, 0x90	; 144
    4ac2:	91 e0       	ldi	r25, 0x01	; 1
    4ac4:	9c 83       	std	Y+4, r25	; 0x04
    4ac6:	8b 83       	std	Y+3, r24	; 0x03
    4ac8:	8b 81       	ldd	r24, Y+3	; 0x03
    4aca:	9c 81       	ldd	r25, Y+4	; 0x04
    4acc:	01 97       	sbiw	r24, 0x01	; 1
    4ace:	f1 f7       	brne	.-4      	; 0x4acc <HAL_KeyPad_u8GetKeyPressed+0x1f8>
    4ad0:	9c 83       	std	Y+4, r25	; 0x04
    4ad2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4ad4:	8d 81       	ldd	r24, Y+5	; 0x05
    4ad6:	9e 81       	ldd	r25, Y+6	; 0x06
    4ad8:	01 97       	sbiw	r24, 0x01	; 1
    4ada:	9e 83       	std	Y+6, r25	; 0x06
    4adc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4ade:	8d 81       	ldd	r24, Y+5	; 0x05
    4ae0:	9e 81       	ldd	r25, Y+6	; 0x06
    4ae2:	00 97       	sbiw	r24, 0x00	; 0
    4ae4:	69 f7       	brne	.-38     	; 0x4ac0 <HAL_KeyPad_u8GetKeyPressed+0x1ec>
    4ae6:	14 c0       	rjmp	.+40     	; 0x4b10 <HAL_KeyPad_u8GetKeyPressed+0x23c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4ae8:	6f 81       	ldd	r22, Y+7	; 0x07
    4aea:	78 85       	ldd	r23, Y+8	; 0x08
    4aec:	89 85       	ldd	r24, Y+9	; 0x09
    4aee:	9a 85       	ldd	r25, Y+10	; 0x0a
    4af0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4af4:	dc 01       	movw	r26, r24
    4af6:	cb 01       	movw	r24, r22
    4af8:	9e 83       	std	Y+6, r25	; 0x06
    4afa:	8d 83       	std	Y+5, r24	; 0x05
    4afc:	8d 81       	ldd	r24, Y+5	; 0x05
    4afe:	9e 81       	ldd	r25, Y+6	; 0x06
    4b00:	9a 83       	std	Y+2, r25	; 0x02
    4b02:	89 83       	std	Y+1, r24	; 0x01
    4b04:	89 81       	ldd	r24, Y+1	; 0x01
    4b06:	9a 81       	ldd	r25, Y+2	; 0x02
    4b08:	01 97       	sbiw	r24, 0x01	; 1
    4b0a:	f1 f7       	brne	.-4      	; 0x4b08 <HAL_KeyPad_u8GetKeyPressed+0x234>
    4b0c:	9a 83       	std	Y+2, r25	; 0x02
    4b0e:	89 83       	std	Y+1, r24	; 0x01
						{
					_delay_ms(5);
					*Button = array[LOC_u8Row][LOC_u8Col];
    4b10:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4b12:	48 2f       	mov	r20, r24
    4b14:	50 e0       	ldi	r21, 0x00	; 0
    4b16:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4b18:	28 2f       	mov	r18, r24
    4b1a:	30 e0       	ldi	r19, 0x00	; 0
    4b1c:	ca 01       	movw	r24, r20
    4b1e:	88 0f       	add	r24, r24
    4b20:	99 1f       	adc	r25, r25
    4b22:	88 0f       	add	r24, r24
    4b24:	99 1f       	adc	r25, r25
    4b26:	82 0f       	add	r24, r18
    4b28:	93 1f       	adc	r25, r19
    4b2a:	fc 01       	movw	r30, r24
    4b2c:	e8 59       	subi	r30, 0x98	; 152
    4b2e:	fe 4f       	sbci	r31, 0xFE	; 254
    4b30:	80 81       	ld	r24, Z
    4b32:	e9 a1       	ldd	r30, Y+33	; 0x21
    4b34:	fa a1       	ldd	r31, Y+34	; 0x22
    4b36:	80 83       	st	Z, r24
    4b38:	07 c0       	rjmp	.+14     	; 0x4b48 <HAL_KeyPad_u8GetKeyPressed+0x274>
		//  LOC_u8Return_Value = MCAL_DIO_u8SetPinValue(KeyPad_Port,R0,Pin_HIGH);
		//  LOC_u8Return_Value = MCAL_DIO_u8SetPinValue(KeyPad_Port,R1,Pin_HIGH);
		//  LOC_u8Return_Value = MCAL_DIO_u8SetPinValue(KeyPad_Port,R2,Pin_HIGH);
		//  LOC_u8Return_Value = MCAL_DIO_u8SetPinValue(KeyPad_Port,R3,Pin_HIGH);
		MCAL_DIO_u8SetPinValue(2, LOC_u8Row, 0);
		for (LOC_u8Col = 0; LOC_u8Col < 4; LOC_u8Col++) {
    4b3a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4b3c:	8f 5f       	subi	r24, 0xFF	; 255
    4b3e:	8f 8f       	std	Y+31, r24	; 0x1f
    4b40:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4b42:	84 30       	cpi	r24, 0x04	; 4
    4b44:	08 f4       	brcc	.+2      	; 0x4b48 <HAL_KeyPad_u8GetKeyPressed+0x274>
    4b46:	e0 ce       	rjmp	.-576    	; 0x4908 <HAL_KeyPad_u8GetKeyPressed+0x34>
					*Button = array[LOC_u8Row][LOC_u8Col];
				}
				break;
			}
		}
		MCAL_DIO_u8SetPinValue(2, LOC_u8Row, 1);
    4b48:	82 e0       	ldi	r24, 0x02	; 2
    4b4a:	6e 8d       	ldd	r22, Y+30	; 0x1e
    4b4c:	41 e0       	ldi	r20, 0x01	; 1
    4b4e:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <MCAL_DIO_u8SetPinValue>

void HAL_KeyPad_u8GetKeyPressed(u8 *Button) {

	u8 LOC_u8Col, LOC_u8Row, LOC_u8Status = 7, LOC_u8PinValue;
	*Button = 0;
	for (LOC_u8Row = 0; LOC_u8Row < 4; LOC_u8Row++) {
    4b52:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4b54:	8f 5f       	subi	r24, 0xFF	; 255
    4b56:	8e 8f       	std	Y+30, r24	; 0x1e
    4b58:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4b5a:	84 30       	cpi	r24, 0x04	; 4
    4b5c:	08 f4       	brcc	.+2      	; 0x4b60 <HAL_KeyPad_u8GetKeyPressed+0x28c>
    4b5e:	cd ce       	rjmp	.-614    	; 0x48fa <HAL_KeyPad_u8GetKeyPressed+0x26>
		 {
		 break;
		 }
		 */
	}
}
    4b60:	a2 96       	adiw	r28, 0x22	; 34
    4b62:	0f b6       	in	r0, 0x3f	; 63
    4b64:	f8 94       	cli
    4b66:	de bf       	out	0x3e, r29	; 62
    4b68:	0f be       	out	0x3f, r0	; 63
    4b6a:	cd bf       	out	0x3d, r28	; 61
    4b6c:	cf 91       	pop	r28
    4b6e:	df 91       	pop	r29
    4b70:	08 95       	ret

00004b72 <HAL_void_H_BridgeInit>:
 *      Author: Mohamed
 */

#include "H_Bridge.h"

void HAL_void_H_BridgeInit() {
    4b72:	df 93       	push	r29
    4b74:	cf 93       	push	r28
    4b76:	cd b7       	in	r28, 0x3d	; 61
    4b78:	de b7       	in	r29, 0x3e	; 62
	MCAL_DIO_u8SetPinDirection(PortC, 3, Pin_High);
    4b7a:	82 e0       	ldi	r24, 0x02	; 2
    4b7c:	63 e0       	ldi	r22, 0x03	; 3
    4b7e:	41 e0       	ldi	r20, 0x01	; 1
    4b80:	0e 94 f6 14 	call	0x29ec	; 0x29ec <MCAL_DIO_u8SetPinDirection>
	MCAL_DIO_u8SetPinDirection(PortC, 4, Pin_High);
    4b84:	82 e0       	ldi	r24, 0x02	; 2
    4b86:	64 e0       	ldi	r22, 0x04	; 4
    4b88:	41 e0       	ldi	r20, 0x01	; 1
    4b8a:	0e 94 f6 14 	call	0x29ec	; 0x29ec <MCAL_DIO_u8SetPinDirection>
	MCAL_DIO_u8SetPinDirection(PortC, 5, Pin_High);
    4b8e:	82 e0       	ldi	r24, 0x02	; 2
    4b90:	65 e0       	ldi	r22, 0x05	; 5
    4b92:	41 e0       	ldi	r20, 0x01	; 1
    4b94:	0e 94 f6 14 	call	0x29ec	; 0x29ec <MCAL_DIO_u8SetPinDirection>
	MCAL_DIO_u8SetPinDirection(PortC, 6, Pin_High);
    4b98:	82 e0       	ldi	r24, 0x02	; 2
    4b9a:	66 e0       	ldi	r22, 0x06	; 6
    4b9c:	41 e0       	ldi	r20, 0x01	; 1
    4b9e:	0e 94 f6 14 	call	0x29ec	; 0x29ec <MCAL_DIO_u8SetPinDirection>
}
    4ba2:	cf 91       	pop	r28
    4ba4:	df 91       	pop	r29
    4ba6:	08 95       	ret

00004ba8 <HAL_void_H_BridgeCW>:

void HAL_void_H_BridgeCW(u8 copy_u8_speed) {
    4ba8:	df 93       	push	r29
    4baa:	cf 93       	push	r28
    4bac:	0f 92       	push	r0
    4bae:	cd b7       	in	r28, 0x3d	; 61
    4bb0:	de b7       	in	r29, 0x3e	; 62
    4bb2:	89 83       	std	Y+1, r24	; 0x01
	MCAL_T1_FPWM_10bitRES(CHENNEL_B, copy_u8_speed);
    4bb4:	81 e0       	ldi	r24, 0x01	; 1
    4bb6:	69 81       	ldd	r22, Y+1	; 0x01
    4bb8:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <MCAL_T1_FPWM_10bitRES>
	MCAL_T1_FPWM_10bitRES(CHENNEL_A, copy_u8_speed);
    4bbc:	80 e0       	ldi	r24, 0x00	; 0
    4bbe:	69 81       	ldd	r22, Y+1	; 0x01
    4bc0:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <MCAL_T1_FPWM_10bitRES>
	MCAL_DIO_u8SetPinValue(PortC, Pin3, Pin_Low);
    4bc4:	82 e0       	ldi	r24, 0x02	; 2
    4bc6:	63 e0       	ldi	r22, 0x03	; 3
    4bc8:	40 e0       	ldi	r20, 0x00	; 0
    4bca:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <MCAL_DIO_u8SetPinValue>
	MCAL_DIO_u8SetPinValue(PortC, Pin4, Pin_Low);
    4bce:	82 e0       	ldi	r24, 0x02	; 2
    4bd0:	64 e0       	ldi	r22, 0x04	; 4
    4bd2:	40 e0       	ldi	r20, 0x00	; 0
    4bd4:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <MCAL_DIO_u8SetPinValue>
	MCAL_DIO_u8SetPinValue(PortC, Pin3, Pin_High);
    4bd8:	82 e0       	ldi	r24, 0x02	; 2
    4bda:	63 e0       	ldi	r22, 0x03	; 3
    4bdc:	41 e0       	ldi	r20, 0x01	; 1
    4bde:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <MCAL_DIO_u8SetPinValue>
	MCAL_DIO_u8SetPinValue(PortC, Pin4, Pin_Low);
    4be2:	82 e0       	ldi	r24, 0x02	; 2
    4be4:	64 e0       	ldi	r22, 0x04	; 4
    4be6:	40 e0       	ldi	r20, 0x00	; 0
    4be8:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <MCAL_DIO_u8SetPinValue>
}
    4bec:	0f 90       	pop	r0
    4bee:	cf 91       	pop	r28
    4bf0:	df 91       	pop	r29
    4bf2:	08 95       	ret

00004bf4 <HAL_void_H_BridgeFront>:
void HAL_void_H_BridgeFront(u8 copy_u8_speed) {
    4bf4:	df 93       	push	r29
    4bf6:	cf 93       	push	r28
    4bf8:	0f 92       	push	r0
    4bfa:	cd b7       	in	r28, 0x3d	; 61
    4bfc:	de b7       	in	r29, 0x3e	; 62
    4bfe:	89 83       	std	Y+1, r24	; 0x01
	MCAL_T1_FPWM_10bitRES(CHENNEL_B, copy_u8_speed);
    4c00:	81 e0       	ldi	r24, 0x01	; 1
    4c02:	69 81       	ldd	r22, Y+1	; 0x01
    4c04:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <MCAL_T1_FPWM_10bitRES>
	MCAL_T1_FPWM_10bitRES(CHENNEL_A, copy_u8_speed);
    4c08:	80 e0       	ldi	r24, 0x00	; 0
    4c0a:	69 81       	ldd	r22, Y+1	; 0x01
    4c0c:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <MCAL_T1_FPWM_10bitRES>
	MCAL_DIO_u8SetPinValue(PortC, Pin3, Pin_High);
    4c10:	82 e0       	ldi	r24, 0x02	; 2
    4c12:	63 e0       	ldi	r22, 0x03	; 3
    4c14:	41 e0       	ldi	r20, 0x01	; 1
    4c16:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <MCAL_DIO_u8SetPinValue>
	MCAL_DIO_u8SetPinValue(PortC, Pin4, Pin_Low);
    4c1a:	82 e0       	ldi	r24, 0x02	; 2
    4c1c:	64 e0       	ldi	r22, 0x04	; 4
    4c1e:	40 e0       	ldi	r20, 0x00	; 0
    4c20:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <MCAL_DIO_u8SetPinValue>
	MCAL_DIO_u8SetPinValue(PortC, Pin5, Pin_High);
    4c24:	82 e0       	ldi	r24, 0x02	; 2
    4c26:	65 e0       	ldi	r22, 0x05	; 5
    4c28:	41 e0       	ldi	r20, 0x01	; 1
    4c2a:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <MCAL_DIO_u8SetPinValue>
	MCAL_DIO_u8SetPinValue(PortC, Pin6, Pin_Low);
    4c2e:	82 e0       	ldi	r24, 0x02	; 2
    4c30:	66 e0       	ldi	r22, 0x06	; 6
    4c32:	40 e0       	ldi	r20, 0x00	; 0
    4c34:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <MCAL_DIO_u8SetPinValue>
}
    4c38:	0f 90       	pop	r0
    4c3a:	cf 91       	pop	r28
    4c3c:	df 91       	pop	r29
    4c3e:	08 95       	ret

00004c40 <HAL_void_H_BridgeBack>:
void HAL_void_H_BridgeBack(u8 copy_u8_speed) {
    4c40:	df 93       	push	r29
    4c42:	cf 93       	push	r28
    4c44:	0f 92       	push	r0
    4c46:	cd b7       	in	r28, 0x3d	; 61
    4c48:	de b7       	in	r29, 0x3e	; 62
    4c4a:	89 83       	std	Y+1, r24	; 0x01
	MCAL_T1_FPWM_10bitRES(CHENNEL_B, copy_u8_speed);
    4c4c:	81 e0       	ldi	r24, 0x01	; 1
    4c4e:	69 81       	ldd	r22, Y+1	; 0x01
    4c50:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <MCAL_T1_FPWM_10bitRES>
	MCAL_T1_FPWM_10bitRES(CHENNEL_A, copy_u8_speed);
    4c54:	80 e0       	ldi	r24, 0x00	; 0
    4c56:	69 81       	ldd	r22, Y+1	; 0x01
    4c58:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <MCAL_T1_FPWM_10bitRES>
	MCAL_DIO_u8SetPinValue(PortC, Pin3, Pin_Low);
    4c5c:	82 e0       	ldi	r24, 0x02	; 2
    4c5e:	63 e0       	ldi	r22, 0x03	; 3
    4c60:	40 e0       	ldi	r20, 0x00	; 0
    4c62:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <MCAL_DIO_u8SetPinValue>
	MCAL_DIO_u8SetPinValue(PortC, Pin4, Pin_High);
    4c66:	82 e0       	ldi	r24, 0x02	; 2
    4c68:	64 e0       	ldi	r22, 0x04	; 4
    4c6a:	41 e0       	ldi	r20, 0x01	; 1
    4c6c:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <MCAL_DIO_u8SetPinValue>
	MCAL_DIO_u8SetPinValue(PortC, Pin5, Pin_Low);
    4c70:	82 e0       	ldi	r24, 0x02	; 2
    4c72:	65 e0       	ldi	r22, 0x05	; 5
    4c74:	40 e0       	ldi	r20, 0x00	; 0
    4c76:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <MCAL_DIO_u8SetPinValue>
	MCAL_DIO_u8SetPinValue(PortC, Pin6, Pin_High);
    4c7a:	82 e0       	ldi	r24, 0x02	; 2
    4c7c:	66 e0       	ldi	r22, 0x06	; 6
    4c7e:	41 e0       	ldi	r20, 0x01	; 1
    4c80:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <MCAL_DIO_u8SetPinValue>
}
    4c84:	0f 90       	pop	r0
    4c86:	cf 91       	pop	r28
    4c88:	df 91       	pop	r29
    4c8a:	08 95       	ret

00004c8c <HAL_void_H_BridgeCCW>:
void HAL_void_H_BridgeCCW(u8 copy_u8_speed) {
    4c8c:	df 93       	push	r29
    4c8e:	cf 93       	push	r28
    4c90:	0f 92       	push	r0
    4c92:	cd b7       	in	r28, 0x3d	; 61
    4c94:	de b7       	in	r29, 0x3e	; 62
    4c96:	89 83       	std	Y+1, r24	; 0x01
	MCAL_T1_FPWM_10bitRES(CHENNEL_B, copy_u8_speed);
    4c98:	81 e0       	ldi	r24, 0x01	; 1
    4c9a:	69 81       	ldd	r22, Y+1	; 0x01
    4c9c:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <MCAL_T1_FPWM_10bitRES>
	MCAL_T1_FPWM_10bitRES(CHENNEL_A, copy_u8_speed);
    4ca0:	80 e0       	ldi	r24, 0x00	; 0
    4ca2:	69 81       	ldd	r22, Y+1	; 0x01
    4ca4:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <MCAL_T1_FPWM_10bitRES>
	MCAL_DIO_u8SetPinValue(PortC, Pin3, Pin_High);
    4ca8:	82 e0       	ldi	r24, 0x02	; 2
    4caa:	63 e0       	ldi	r22, 0x03	; 3
    4cac:	41 e0       	ldi	r20, 0x01	; 1
    4cae:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <MCAL_DIO_u8SetPinValue>
	MCAL_DIO_u8SetPinValue(PortC, Pin4, Pin_Low);
    4cb2:	82 e0       	ldi	r24, 0x02	; 2
    4cb4:	64 e0       	ldi	r22, 0x04	; 4
    4cb6:	40 e0       	ldi	r20, 0x00	; 0
    4cb8:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <MCAL_DIO_u8SetPinValue>
	MCAL_DIO_u8SetPinValue(PortC, Pin5, Pin_Low);
    4cbc:	82 e0       	ldi	r24, 0x02	; 2
    4cbe:	65 e0       	ldi	r22, 0x05	; 5
    4cc0:	40 e0       	ldi	r20, 0x00	; 0
    4cc2:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <MCAL_DIO_u8SetPinValue>
	MCAL_DIO_u8SetPinValue(PortC, Pin6, Pin_Low);
    4cc6:	82 e0       	ldi	r24, 0x02	; 2
    4cc8:	66 e0       	ldi	r22, 0x06	; 6
    4cca:	40 e0       	ldi	r20, 0x00	; 0
    4ccc:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <MCAL_DIO_u8SetPinValue>
}
    4cd0:	0f 90       	pop	r0
    4cd2:	cf 91       	pop	r28
    4cd4:	df 91       	pop	r29
    4cd6:	08 95       	ret

00004cd8 <HAL_void_H_BridgeStop>:

void HAL_void_H_BridgeStop(u8 copy_u8_speed) {
    4cd8:	df 93       	push	r29
    4cda:	cf 93       	push	r28
    4cdc:	0f 92       	push	r0
    4cde:	cd b7       	in	r28, 0x3d	; 61
    4ce0:	de b7       	in	r29, 0x3e	; 62
    4ce2:	89 83       	std	Y+1, r24	; 0x01
	MCAL_T1_FPWM_10bitRES(CHENNEL_B, copy_u8_speed);
    4ce4:	81 e0       	ldi	r24, 0x01	; 1
    4ce6:	69 81       	ldd	r22, Y+1	; 0x01
    4ce8:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <MCAL_T1_FPWM_10bitRES>
	MCAL_T1_FPWM_10bitRES(CHENNEL_A, copy_u8_speed);
    4cec:	80 e0       	ldi	r24, 0x00	; 0
    4cee:	69 81       	ldd	r22, Y+1	; 0x01
    4cf0:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <MCAL_T1_FPWM_10bitRES>
	MCAL_DIO_u8SetPinValue(PortC, Pin3, Pin_Low);
    4cf4:	82 e0       	ldi	r24, 0x02	; 2
    4cf6:	63 e0       	ldi	r22, 0x03	; 3
    4cf8:	40 e0       	ldi	r20, 0x00	; 0
    4cfa:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <MCAL_DIO_u8SetPinValue>
	MCAL_DIO_u8SetPinValue(PortC, Pin4, Pin_Low);
    4cfe:	82 e0       	ldi	r24, 0x02	; 2
    4d00:	64 e0       	ldi	r22, 0x04	; 4
    4d02:	40 e0       	ldi	r20, 0x00	; 0
    4d04:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <MCAL_DIO_u8SetPinValue>
	MCAL_DIO_u8SetPinValue(PortC, Pin5, Pin_Low);
    4d08:	82 e0       	ldi	r24, 0x02	; 2
    4d0a:	65 e0       	ldi	r22, 0x05	; 5
    4d0c:	40 e0       	ldi	r20, 0x00	; 0
    4d0e:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <MCAL_DIO_u8SetPinValue>
	MCAL_DIO_u8SetPinValue(PortC, Pin6, Pin_Low);
    4d12:	82 e0       	ldi	r24, 0x02	; 2
    4d14:	66 e0       	ldi	r22, 0x06	; 6
    4d16:	40 e0       	ldi	r20, 0x00	; 0
    4d18:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <MCAL_DIO_u8SetPinValue>
}
    4d1c:	0f 90       	pop	r0
    4d1e:	cf 91       	pop	r28
    4d20:	df 91       	pop	r29
    4d22:	08 95       	ret

00004d24 <HAL_Buzzer_u8BuzzerInit>:
 *      Author: Mohamed
 */

#include "Buzzer.h"

STD_Type HAL_Buzzer_u8BuzzerInit(u8 Loc_u8BuzzerPortID, u8 Loc_u8BuzzerPinID) {
    4d24:	df 93       	push	r29
    4d26:	cf 93       	push	r28
    4d28:	00 d0       	rcall	.+0      	; 0x4d2a <HAL_Buzzer_u8BuzzerInit+0x6>
    4d2a:	0f 92       	push	r0
    4d2c:	cd b7       	in	r28, 0x3d	; 61
    4d2e:	de b7       	in	r29, 0x3e	; 62
    4d30:	8a 83       	std	Y+2, r24	; 0x02
    4d32:	6b 83       	std	Y+3, r22	; 0x03
	u8 Loc_u8Return_Value = E_NOT_OK;
    4d34:	81 e0       	ldi	r24, 0x01	; 1
    4d36:	89 83       	std	Y+1, r24	; 0x01
	if (Loc_u8BuzzerPortID <= PortD && Loc_u8BuzzerPinID <= Num_Of_Pins) {
    4d38:	8a 81       	ldd	r24, Y+2	; 0x02
    4d3a:	84 30       	cpi	r24, 0x04	; 4
    4d3c:	48 f4       	brcc	.+18     	; 0x4d50 <HAL_Buzzer_u8BuzzerInit+0x2c>
    4d3e:	8b 81       	ldd	r24, Y+3	; 0x03
    4d40:	88 30       	cpi	r24, 0x08	; 8
    4d42:	30 f4       	brcc	.+12     	; 0x4d50 <HAL_Buzzer_u8BuzzerInit+0x2c>
		Loc_u8Return_Value=Loc_u8Return_Value = MCAL_DIO_u8SetPinDirection(Loc_u8BuzzerPortID,
    4d44:	8a 81       	ldd	r24, Y+2	; 0x02
    4d46:	6b 81       	ldd	r22, Y+3	; 0x03
    4d48:	41 e0       	ldi	r20, 0x01	; 1
    4d4a:	0e 94 f6 14 	call	0x29ec	; 0x29ec <MCAL_DIO_u8SetPinDirection>
    4d4e:	89 83       	std	Y+1, r24	; 0x01
				Loc_u8BuzzerPinID, Pin_High);
	} else {
		//Do Nothing
	}
	return Loc_u8Return_Value;
    4d50:	89 81       	ldd	r24, Y+1	; 0x01
}
    4d52:	0f 90       	pop	r0
    4d54:	0f 90       	pop	r0
    4d56:	0f 90       	pop	r0
    4d58:	cf 91       	pop	r28
    4d5a:	df 91       	pop	r29
    4d5c:	08 95       	ret

00004d5e <HAL_Buzzer_u8BuzzerMode>:

STD_Type HAL_Buzzer_u8BuzzerMode(u8 Loc_u8BuzzerPortID, u8 Loc_u8BuzzerPinID,
		u8 Loc_u8BuzzerMode) {
    4d5e:	df 93       	push	r29
    4d60:	cf 93       	push	r28
    4d62:	00 d0       	rcall	.+0      	; 0x4d64 <HAL_Buzzer_u8BuzzerMode+0x6>
    4d64:	00 d0       	rcall	.+0      	; 0x4d66 <HAL_Buzzer_u8BuzzerMode+0x8>
    4d66:	cd b7       	in	r28, 0x3d	; 61
    4d68:	de b7       	in	r29, 0x3e	; 62
    4d6a:	8a 83       	std	Y+2, r24	; 0x02
    4d6c:	6b 83       	std	Y+3, r22	; 0x03
    4d6e:	4c 83       	std	Y+4, r20	; 0x04
	u8 Loc_u8Return_Value = E_NOT_OK;
    4d70:	81 e0       	ldi	r24, 0x01	; 1
    4d72:	89 83       	std	Y+1, r24	; 0x01
	if (Loc_u8BuzzerPortID <= PortD && Loc_u8BuzzerPinID <= Num_Of_Pins
    4d74:	8a 81       	ldd	r24, Y+2	; 0x02
    4d76:	84 30       	cpi	r24, 0x04	; 4
    4d78:	10 f5       	brcc	.+68     	; 0x4dbe <HAL_Buzzer_u8BuzzerMode+0x60>
    4d7a:	8b 81       	ldd	r24, Y+3	; 0x03
    4d7c:	88 30       	cpi	r24, 0x08	; 8
    4d7e:	f8 f4       	brcc	.+62     	; 0x4dbe <HAL_Buzzer_u8BuzzerMode+0x60>
    4d80:	8c 81       	ldd	r24, Y+4	; 0x04
    4d82:	83 30       	cpi	r24, 0x03	; 3
    4d84:	e0 f4       	brcc	.+56     	; 0x4dbe <HAL_Buzzer_u8BuzzerMode+0x60>
			&& Loc_u8BuzzerMode <= Buzzer_TOG) {
		if (Loc_u8BuzzerMode == Buzzer_ON) {
    4d86:	8c 81       	ldd	r24, Y+4	; 0x04
    4d88:	81 30       	cpi	r24, 0x01	; 1
    4d8a:	39 f4       	brne	.+14     	; 0x4d9a <HAL_Buzzer_u8BuzzerMode+0x3c>
			Loc_u8Return_Value=MCAL_DIO_u8SetPinValue(Loc_u8BuzzerPortID, Loc_u8BuzzerPinID, Pin_High);
    4d8c:	8a 81       	ldd	r24, Y+2	; 0x02
    4d8e:	6b 81       	ldd	r22, Y+3	; 0x03
    4d90:	41 e0       	ldi	r20, 0x01	; 1
    4d92:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <MCAL_DIO_u8SetPinValue>
    4d96:	89 83       	std	Y+1, r24	; 0x01
    4d98:	12 c0       	rjmp	.+36     	; 0x4dbe <HAL_Buzzer_u8BuzzerMode+0x60>
		} else if (Loc_u8BuzzerMode == Buzzer_OFF) {
    4d9a:	8c 81       	ldd	r24, Y+4	; 0x04
    4d9c:	88 23       	and	r24, r24
    4d9e:	39 f4       	brne	.+14     	; 0x4dae <HAL_Buzzer_u8BuzzerMode+0x50>
			Loc_u8Return_Value=MCAL_DIO_u8SetPinValue(Loc_u8BuzzerPortID, Loc_u8BuzzerPinID, Pin_Low);
    4da0:	8a 81       	ldd	r24, Y+2	; 0x02
    4da2:	6b 81       	ldd	r22, Y+3	; 0x03
    4da4:	40 e0       	ldi	r20, 0x00	; 0
    4da6:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <MCAL_DIO_u8SetPinValue>
    4daa:	89 83       	std	Y+1, r24	; 0x01
    4dac:	08 c0       	rjmp	.+16     	; 0x4dbe <HAL_Buzzer_u8BuzzerMode+0x60>
		} else if (Loc_u8BuzzerMode == Buzzer_TOG) {
    4dae:	8c 81       	ldd	r24, Y+4	; 0x04
    4db0:	82 30       	cpi	r24, 0x02	; 2
    4db2:	29 f4       	brne	.+10     	; 0x4dbe <HAL_Buzzer_u8BuzzerMode+0x60>
			Loc_u8Return_Value=MCAL_DIO_u8TogglePinValue(Loc_u8BuzzerPortID,Loc_u8BuzzerPinID);
    4db4:	8a 81       	ldd	r24, Y+2	; 0x02
    4db6:	6b 81       	ldd	r22, Y+3	; 0x03
    4db8:	0e 94 4d 18 	call	0x309a	; 0x309a <MCAL_DIO_u8TogglePinValue>
    4dbc:	89 83       	std	Y+1, r24	; 0x01
			//Do Nothing
		}
	} else {
		//Do Nothing
	}
	return Loc_u8Return_Value;
    4dbe:	89 81       	ldd	r24, Y+1	; 0x01
}
    4dc0:	0f 90       	pop	r0
    4dc2:	0f 90       	pop	r0
    4dc4:	0f 90       	pop	r0
    4dc6:	0f 90       	pop	r0
    4dc8:	cf 91       	pop	r28
    4dca:	df 91       	pop	r29
    4dcc:	08 95       	ret

00004dce <main>:
 *      Author: Mohamed
 */

#include "main.h"

void main(void) {
    4dce:	df 93       	push	r29
    4dd0:	cf 93       	push	r28
    4dd2:	cd b7       	in	r28, 0x3d	; 61
    4dd4:	de b7       	in	r29, 0x3e	; 62
    4dd6:	a0 97       	sbiw	r28, 0x20	; 32
    4dd8:	0f b6       	in	r0, 0x3f	; 63
    4dda:	f8 94       	cli
    4ddc:	de bf       	out	0x3e, r29	; 62
    4dde:	0f be       	out	0x3f, r0	; 63
    4de0:	cd bf       	out	0x3d, r28	; 61
	HAL_SM_voidSMInit();
    4de2:	0e 94 b9 1a 	call	0x3572	; 0x3572 <HAL_SM_voidSMInit>
	while (1) {
		for (int i = 0; i <= 180; i += 5) {
    4de6:	18 a2       	std	Y+32, r1	; 0x20
    4de8:	1f 8e       	std	Y+31, r1	; 0x1f
    4dea:	05 c1       	rjmp	.+522    	; 0x4ff6 <main+0x228>
			HAL_SM_voidSMSetAngle(i);
    4dec:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4dee:	0e 94 e4 1a 	call	0x35c8	; 0x35c8 <HAL_SM_voidSMSetAngle>
    4df2:	80 e0       	ldi	r24, 0x00	; 0
    4df4:	90 e0       	ldi	r25, 0x00	; 0
    4df6:	a0 e2       	ldi	r26, 0x20	; 32
    4df8:	b2 e4       	ldi	r27, 0x42	; 66
    4dfa:	89 8f       	std	Y+25, r24	; 0x19
    4dfc:	9a 8f       	std	Y+26, r25	; 0x1a
    4dfe:	ab 8f       	std	Y+27, r26	; 0x1b
    4e00:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4e02:	69 8d       	ldd	r22, Y+25	; 0x19
    4e04:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4e06:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4e08:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4e0a:	20 e0       	ldi	r18, 0x00	; 0
    4e0c:	30 e0       	ldi	r19, 0x00	; 0
    4e0e:	4a e7       	ldi	r20, 0x7A	; 122
    4e10:	55 e4       	ldi	r21, 0x45	; 69
    4e12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4e16:	dc 01       	movw	r26, r24
    4e18:	cb 01       	movw	r24, r22
    4e1a:	8d 8b       	std	Y+21, r24	; 0x15
    4e1c:	9e 8b       	std	Y+22, r25	; 0x16
    4e1e:	af 8b       	std	Y+23, r26	; 0x17
    4e20:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4e22:	6d 89       	ldd	r22, Y+21	; 0x15
    4e24:	7e 89       	ldd	r23, Y+22	; 0x16
    4e26:	8f 89       	ldd	r24, Y+23	; 0x17
    4e28:	98 8d       	ldd	r25, Y+24	; 0x18
    4e2a:	20 e0       	ldi	r18, 0x00	; 0
    4e2c:	30 e0       	ldi	r19, 0x00	; 0
    4e2e:	40 e8       	ldi	r20, 0x80	; 128
    4e30:	5f e3       	ldi	r21, 0x3F	; 63
    4e32:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4e36:	88 23       	and	r24, r24
    4e38:	2c f4       	brge	.+10     	; 0x4e44 <main+0x76>
		__ticks = 1;
    4e3a:	81 e0       	ldi	r24, 0x01	; 1
    4e3c:	90 e0       	ldi	r25, 0x00	; 0
    4e3e:	9c 8b       	std	Y+20, r25	; 0x14
    4e40:	8b 8b       	std	Y+19, r24	; 0x13
    4e42:	3f c0       	rjmp	.+126    	; 0x4ec2 <main+0xf4>
	else if (__tmp > 65535)
    4e44:	6d 89       	ldd	r22, Y+21	; 0x15
    4e46:	7e 89       	ldd	r23, Y+22	; 0x16
    4e48:	8f 89       	ldd	r24, Y+23	; 0x17
    4e4a:	98 8d       	ldd	r25, Y+24	; 0x18
    4e4c:	20 e0       	ldi	r18, 0x00	; 0
    4e4e:	3f ef       	ldi	r19, 0xFF	; 255
    4e50:	4f e7       	ldi	r20, 0x7F	; 127
    4e52:	57 e4       	ldi	r21, 0x47	; 71
    4e54:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4e58:	18 16       	cp	r1, r24
    4e5a:	4c f5       	brge	.+82     	; 0x4eae <main+0xe0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4e5c:	69 8d       	ldd	r22, Y+25	; 0x19
    4e5e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4e60:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4e62:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4e64:	20 e0       	ldi	r18, 0x00	; 0
    4e66:	30 e0       	ldi	r19, 0x00	; 0
    4e68:	40 e2       	ldi	r20, 0x20	; 32
    4e6a:	51 e4       	ldi	r21, 0x41	; 65
    4e6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4e70:	dc 01       	movw	r26, r24
    4e72:	cb 01       	movw	r24, r22
    4e74:	bc 01       	movw	r22, r24
    4e76:	cd 01       	movw	r24, r26
    4e78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4e7c:	dc 01       	movw	r26, r24
    4e7e:	cb 01       	movw	r24, r22
    4e80:	9c 8b       	std	Y+20, r25	; 0x14
    4e82:	8b 8b       	std	Y+19, r24	; 0x13
    4e84:	0f c0       	rjmp	.+30     	; 0x4ea4 <main+0xd6>
    4e86:	80 e9       	ldi	r24, 0x90	; 144
    4e88:	91 e0       	ldi	r25, 0x01	; 1
    4e8a:	9a 8b       	std	Y+18, r25	; 0x12
    4e8c:	89 8b       	std	Y+17, r24	; 0x11
    4e8e:	89 89       	ldd	r24, Y+17	; 0x11
    4e90:	9a 89       	ldd	r25, Y+18	; 0x12
    4e92:	01 97       	sbiw	r24, 0x01	; 1
    4e94:	f1 f7       	brne	.-4      	; 0x4e92 <main+0xc4>
    4e96:	9a 8b       	std	Y+18, r25	; 0x12
    4e98:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4e9a:	8b 89       	ldd	r24, Y+19	; 0x13
    4e9c:	9c 89       	ldd	r25, Y+20	; 0x14
    4e9e:	01 97       	sbiw	r24, 0x01	; 1
    4ea0:	9c 8b       	std	Y+20, r25	; 0x14
    4ea2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4ea4:	8b 89       	ldd	r24, Y+19	; 0x13
    4ea6:	9c 89       	ldd	r25, Y+20	; 0x14
    4ea8:	00 97       	sbiw	r24, 0x00	; 0
    4eaa:	69 f7       	brne	.-38     	; 0x4e86 <main+0xb8>
    4eac:	14 c0       	rjmp	.+40     	; 0x4ed6 <main+0x108>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4eae:	6d 89       	ldd	r22, Y+21	; 0x15
    4eb0:	7e 89       	ldd	r23, Y+22	; 0x16
    4eb2:	8f 89       	ldd	r24, Y+23	; 0x17
    4eb4:	98 8d       	ldd	r25, Y+24	; 0x18
    4eb6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4eba:	dc 01       	movw	r26, r24
    4ebc:	cb 01       	movw	r24, r22
    4ebe:	9c 8b       	std	Y+20, r25	; 0x14
    4ec0:	8b 8b       	std	Y+19, r24	; 0x13
    4ec2:	8b 89       	ldd	r24, Y+19	; 0x13
    4ec4:	9c 89       	ldd	r25, Y+20	; 0x14
    4ec6:	98 8b       	std	Y+16, r25	; 0x10
    4ec8:	8f 87       	std	Y+15, r24	; 0x0f
    4eca:	8f 85       	ldd	r24, Y+15	; 0x0f
    4ecc:	98 89       	ldd	r25, Y+16	; 0x10
    4ece:	01 97       	sbiw	r24, 0x01	; 1
    4ed0:	f1 f7       	brne	.-4      	; 0x4ece <main+0x100>
    4ed2:	98 8b       	std	Y+16, r25	; 0x10
    4ed4:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(40);
			if (i == 180) {
    4ed6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4ed8:	98 a1       	ldd	r25, Y+32	; 0x20
    4eda:	84 3b       	cpi	r24, 0xB4	; 180
    4edc:	91 05       	cpc	r25, r1
    4ede:	09 f0       	breq	.+2      	; 0x4ee2 <main+0x114>
    4ee0:	85 c0       	rjmp	.+266    	; 0x4fec <main+0x21e>
				for (int i = 180; i > 0; i -= 5) {
    4ee2:	84 eb       	ldi	r24, 0xB4	; 180
    4ee4:	90 e0       	ldi	r25, 0x00	; 0
    4ee6:	9e 8f       	std	Y+30, r25	; 0x1e
    4ee8:	8d 8f       	std	Y+29, r24	; 0x1d
    4eea:	7a c0       	rjmp	.+244    	; 0x4fe0 <main+0x212>
					HAL_SM_voidSMSetAngle(i);
    4eec:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4eee:	0e 94 e4 1a 	call	0x35c8	; 0x35c8 <HAL_SM_voidSMSetAngle>
    4ef2:	80 e0       	ldi	r24, 0x00	; 0
    4ef4:	90 e0       	ldi	r25, 0x00	; 0
    4ef6:	a0 e2       	ldi	r26, 0x20	; 32
    4ef8:	b2 e4       	ldi	r27, 0x42	; 66
    4efa:	8b 87       	std	Y+11, r24	; 0x0b
    4efc:	9c 87       	std	Y+12, r25	; 0x0c
    4efe:	ad 87       	std	Y+13, r26	; 0x0d
    4f00:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4f02:	6b 85       	ldd	r22, Y+11	; 0x0b
    4f04:	7c 85       	ldd	r23, Y+12	; 0x0c
    4f06:	8d 85       	ldd	r24, Y+13	; 0x0d
    4f08:	9e 85       	ldd	r25, Y+14	; 0x0e
    4f0a:	20 e0       	ldi	r18, 0x00	; 0
    4f0c:	30 e0       	ldi	r19, 0x00	; 0
    4f0e:	4a e7       	ldi	r20, 0x7A	; 122
    4f10:	55 e4       	ldi	r21, 0x45	; 69
    4f12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4f16:	dc 01       	movw	r26, r24
    4f18:	cb 01       	movw	r24, r22
    4f1a:	8f 83       	std	Y+7, r24	; 0x07
    4f1c:	98 87       	std	Y+8, r25	; 0x08
    4f1e:	a9 87       	std	Y+9, r26	; 0x09
    4f20:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4f22:	6f 81       	ldd	r22, Y+7	; 0x07
    4f24:	78 85       	ldd	r23, Y+8	; 0x08
    4f26:	89 85       	ldd	r24, Y+9	; 0x09
    4f28:	9a 85       	ldd	r25, Y+10	; 0x0a
    4f2a:	20 e0       	ldi	r18, 0x00	; 0
    4f2c:	30 e0       	ldi	r19, 0x00	; 0
    4f2e:	40 e8       	ldi	r20, 0x80	; 128
    4f30:	5f e3       	ldi	r21, 0x3F	; 63
    4f32:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4f36:	88 23       	and	r24, r24
    4f38:	2c f4       	brge	.+10     	; 0x4f44 <main+0x176>
		__ticks = 1;
    4f3a:	81 e0       	ldi	r24, 0x01	; 1
    4f3c:	90 e0       	ldi	r25, 0x00	; 0
    4f3e:	9e 83       	std	Y+6, r25	; 0x06
    4f40:	8d 83       	std	Y+5, r24	; 0x05
    4f42:	3f c0       	rjmp	.+126    	; 0x4fc2 <main+0x1f4>
	else if (__tmp > 65535)
    4f44:	6f 81       	ldd	r22, Y+7	; 0x07
    4f46:	78 85       	ldd	r23, Y+8	; 0x08
    4f48:	89 85       	ldd	r24, Y+9	; 0x09
    4f4a:	9a 85       	ldd	r25, Y+10	; 0x0a
    4f4c:	20 e0       	ldi	r18, 0x00	; 0
    4f4e:	3f ef       	ldi	r19, 0xFF	; 255
    4f50:	4f e7       	ldi	r20, 0x7F	; 127
    4f52:	57 e4       	ldi	r21, 0x47	; 71
    4f54:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4f58:	18 16       	cp	r1, r24
    4f5a:	4c f5       	brge	.+82     	; 0x4fae <main+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4f5c:	6b 85       	ldd	r22, Y+11	; 0x0b
    4f5e:	7c 85       	ldd	r23, Y+12	; 0x0c
    4f60:	8d 85       	ldd	r24, Y+13	; 0x0d
    4f62:	9e 85       	ldd	r25, Y+14	; 0x0e
    4f64:	20 e0       	ldi	r18, 0x00	; 0
    4f66:	30 e0       	ldi	r19, 0x00	; 0
    4f68:	40 e2       	ldi	r20, 0x20	; 32
    4f6a:	51 e4       	ldi	r21, 0x41	; 65
    4f6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4f70:	dc 01       	movw	r26, r24
    4f72:	cb 01       	movw	r24, r22
    4f74:	bc 01       	movw	r22, r24
    4f76:	cd 01       	movw	r24, r26
    4f78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4f7c:	dc 01       	movw	r26, r24
    4f7e:	cb 01       	movw	r24, r22
    4f80:	9e 83       	std	Y+6, r25	; 0x06
    4f82:	8d 83       	std	Y+5, r24	; 0x05
    4f84:	0f c0       	rjmp	.+30     	; 0x4fa4 <main+0x1d6>
    4f86:	80 e9       	ldi	r24, 0x90	; 144
    4f88:	91 e0       	ldi	r25, 0x01	; 1
    4f8a:	9c 83       	std	Y+4, r25	; 0x04
    4f8c:	8b 83       	std	Y+3, r24	; 0x03
    4f8e:	8b 81       	ldd	r24, Y+3	; 0x03
    4f90:	9c 81       	ldd	r25, Y+4	; 0x04
    4f92:	01 97       	sbiw	r24, 0x01	; 1
    4f94:	f1 f7       	brne	.-4      	; 0x4f92 <main+0x1c4>
    4f96:	9c 83       	std	Y+4, r25	; 0x04
    4f98:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4f9a:	8d 81       	ldd	r24, Y+5	; 0x05
    4f9c:	9e 81       	ldd	r25, Y+6	; 0x06
    4f9e:	01 97       	sbiw	r24, 0x01	; 1
    4fa0:	9e 83       	std	Y+6, r25	; 0x06
    4fa2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4fa4:	8d 81       	ldd	r24, Y+5	; 0x05
    4fa6:	9e 81       	ldd	r25, Y+6	; 0x06
    4fa8:	00 97       	sbiw	r24, 0x00	; 0
    4faa:	69 f7       	brne	.-38     	; 0x4f86 <main+0x1b8>
    4fac:	14 c0       	rjmp	.+40     	; 0x4fd6 <main+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4fae:	6f 81       	ldd	r22, Y+7	; 0x07
    4fb0:	78 85       	ldd	r23, Y+8	; 0x08
    4fb2:	89 85       	ldd	r24, Y+9	; 0x09
    4fb4:	9a 85       	ldd	r25, Y+10	; 0x0a
    4fb6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4fba:	dc 01       	movw	r26, r24
    4fbc:	cb 01       	movw	r24, r22
    4fbe:	9e 83       	std	Y+6, r25	; 0x06
    4fc0:	8d 83       	std	Y+5, r24	; 0x05
    4fc2:	8d 81       	ldd	r24, Y+5	; 0x05
    4fc4:	9e 81       	ldd	r25, Y+6	; 0x06
    4fc6:	9a 83       	std	Y+2, r25	; 0x02
    4fc8:	89 83       	std	Y+1, r24	; 0x01
    4fca:	89 81       	ldd	r24, Y+1	; 0x01
    4fcc:	9a 81       	ldd	r25, Y+2	; 0x02
    4fce:	01 97       	sbiw	r24, 0x01	; 1
    4fd0:	f1 f7       	brne	.-4      	; 0x4fce <main+0x200>
    4fd2:	9a 83       	std	Y+2, r25	; 0x02
    4fd4:	89 83       	std	Y+1, r24	; 0x01
	while (1) {
		for (int i = 0; i <= 180; i += 5) {
			HAL_SM_voidSMSetAngle(i);
			_delay_ms(40);
			if (i == 180) {
				for (int i = 180; i > 0; i -= 5) {
    4fd6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4fd8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4fda:	05 97       	sbiw	r24, 0x05	; 5
    4fdc:	9e 8f       	std	Y+30, r25	; 0x1e
    4fde:	8d 8f       	std	Y+29, r24	; 0x1d
    4fe0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4fe2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4fe4:	18 16       	cp	r1, r24
    4fe6:	19 06       	cpc	r1, r25
    4fe8:	0c f4       	brge	.+2      	; 0x4fec <main+0x21e>
    4fea:	80 cf       	rjmp	.-256    	; 0x4eec <main+0x11e>
#include "main.h"

void main(void) {
	HAL_SM_voidSMInit();
	while (1) {
		for (int i = 0; i <= 180; i += 5) {
    4fec:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4fee:	98 a1       	ldd	r25, Y+32	; 0x20
    4ff0:	05 96       	adiw	r24, 0x05	; 5
    4ff2:	98 a3       	std	Y+32, r25	; 0x20
    4ff4:	8f 8f       	std	Y+31, r24	; 0x1f
    4ff6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4ff8:	98 a1       	ldd	r25, Y+32	; 0x20
    4ffa:	85 3b       	cpi	r24, 0xB5	; 181
    4ffc:	91 05       	cpc	r25, r1
    4ffe:	0c f4       	brge	.+2      	; 0x5002 <main+0x234>
    5000:	f5 ce       	rjmp	.-534    	; 0x4dec <main+0x1e>
    5002:	f1 ce       	rjmp	.-542    	; 0x4de6 <main+0x18>

00005004 <__mulsi3>:
    5004:	62 9f       	mul	r22, r18
    5006:	d0 01       	movw	r26, r0
    5008:	73 9f       	mul	r23, r19
    500a:	f0 01       	movw	r30, r0
    500c:	82 9f       	mul	r24, r18
    500e:	e0 0d       	add	r30, r0
    5010:	f1 1d       	adc	r31, r1
    5012:	64 9f       	mul	r22, r20
    5014:	e0 0d       	add	r30, r0
    5016:	f1 1d       	adc	r31, r1
    5018:	92 9f       	mul	r25, r18
    501a:	f0 0d       	add	r31, r0
    501c:	83 9f       	mul	r24, r19
    501e:	f0 0d       	add	r31, r0
    5020:	74 9f       	mul	r23, r20
    5022:	f0 0d       	add	r31, r0
    5024:	65 9f       	mul	r22, r21
    5026:	f0 0d       	add	r31, r0
    5028:	99 27       	eor	r25, r25
    502a:	72 9f       	mul	r23, r18
    502c:	b0 0d       	add	r27, r0
    502e:	e1 1d       	adc	r30, r1
    5030:	f9 1f       	adc	r31, r25
    5032:	63 9f       	mul	r22, r19
    5034:	b0 0d       	add	r27, r0
    5036:	e1 1d       	adc	r30, r1
    5038:	f9 1f       	adc	r31, r25
    503a:	bd 01       	movw	r22, r26
    503c:	cf 01       	movw	r24, r30
    503e:	11 24       	eor	r1, r1
    5040:	08 95       	ret

00005042 <__udivmodsi4>:
    5042:	a1 e2       	ldi	r26, 0x21	; 33
    5044:	1a 2e       	mov	r1, r26
    5046:	aa 1b       	sub	r26, r26
    5048:	bb 1b       	sub	r27, r27
    504a:	fd 01       	movw	r30, r26
    504c:	0d c0       	rjmp	.+26     	; 0x5068 <__udivmodsi4_ep>

0000504e <__udivmodsi4_loop>:
    504e:	aa 1f       	adc	r26, r26
    5050:	bb 1f       	adc	r27, r27
    5052:	ee 1f       	adc	r30, r30
    5054:	ff 1f       	adc	r31, r31
    5056:	a2 17       	cp	r26, r18
    5058:	b3 07       	cpc	r27, r19
    505a:	e4 07       	cpc	r30, r20
    505c:	f5 07       	cpc	r31, r21
    505e:	20 f0       	brcs	.+8      	; 0x5068 <__udivmodsi4_ep>
    5060:	a2 1b       	sub	r26, r18
    5062:	b3 0b       	sbc	r27, r19
    5064:	e4 0b       	sbc	r30, r20
    5066:	f5 0b       	sbc	r31, r21

00005068 <__udivmodsi4_ep>:
    5068:	66 1f       	adc	r22, r22
    506a:	77 1f       	adc	r23, r23
    506c:	88 1f       	adc	r24, r24
    506e:	99 1f       	adc	r25, r25
    5070:	1a 94       	dec	r1
    5072:	69 f7       	brne	.-38     	; 0x504e <__udivmodsi4_loop>
    5074:	60 95       	com	r22
    5076:	70 95       	com	r23
    5078:	80 95       	com	r24
    507a:	90 95       	com	r25
    507c:	9b 01       	movw	r18, r22
    507e:	ac 01       	movw	r20, r24
    5080:	bd 01       	movw	r22, r26
    5082:	cf 01       	movw	r24, r30
    5084:	08 95       	ret

00005086 <__prologue_saves__>:
    5086:	2f 92       	push	r2
    5088:	3f 92       	push	r3
    508a:	4f 92       	push	r4
    508c:	5f 92       	push	r5
    508e:	6f 92       	push	r6
    5090:	7f 92       	push	r7
    5092:	8f 92       	push	r8
    5094:	9f 92       	push	r9
    5096:	af 92       	push	r10
    5098:	bf 92       	push	r11
    509a:	cf 92       	push	r12
    509c:	df 92       	push	r13
    509e:	ef 92       	push	r14
    50a0:	ff 92       	push	r15
    50a2:	0f 93       	push	r16
    50a4:	1f 93       	push	r17
    50a6:	cf 93       	push	r28
    50a8:	df 93       	push	r29
    50aa:	cd b7       	in	r28, 0x3d	; 61
    50ac:	de b7       	in	r29, 0x3e	; 62
    50ae:	ca 1b       	sub	r28, r26
    50b0:	db 0b       	sbc	r29, r27
    50b2:	0f b6       	in	r0, 0x3f	; 63
    50b4:	f8 94       	cli
    50b6:	de bf       	out	0x3e, r29	; 62
    50b8:	0f be       	out	0x3f, r0	; 63
    50ba:	cd bf       	out	0x3d, r28	; 61
    50bc:	09 94       	ijmp

000050be <__epilogue_restores__>:
    50be:	2a 88       	ldd	r2, Y+18	; 0x12
    50c0:	39 88       	ldd	r3, Y+17	; 0x11
    50c2:	48 88       	ldd	r4, Y+16	; 0x10
    50c4:	5f 84       	ldd	r5, Y+15	; 0x0f
    50c6:	6e 84       	ldd	r6, Y+14	; 0x0e
    50c8:	7d 84       	ldd	r7, Y+13	; 0x0d
    50ca:	8c 84       	ldd	r8, Y+12	; 0x0c
    50cc:	9b 84       	ldd	r9, Y+11	; 0x0b
    50ce:	aa 84       	ldd	r10, Y+10	; 0x0a
    50d0:	b9 84       	ldd	r11, Y+9	; 0x09
    50d2:	c8 84       	ldd	r12, Y+8	; 0x08
    50d4:	df 80       	ldd	r13, Y+7	; 0x07
    50d6:	ee 80       	ldd	r14, Y+6	; 0x06
    50d8:	fd 80       	ldd	r15, Y+5	; 0x05
    50da:	0c 81       	ldd	r16, Y+4	; 0x04
    50dc:	1b 81       	ldd	r17, Y+3	; 0x03
    50de:	aa 81       	ldd	r26, Y+2	; 0x02
    50e0:	b9 81       	ldd	r27, Y+1	; 0x01
    50e2:	ce 0f       	add	r28, r30
    50e4:	d1 1d       	adc	r29, r1
    50e6:	0f b6       	in	r0, 0x3f	; 63
    50e8:	f8 94       	cli
    50ea:	de bf       	out	0x3e, r29	; 62
    50ec:	0f be       	out	0x3f, r0	; 63
    50ee:	cd bf       	out	0x3d, r28	; 61
    50f0:	ed 01       	movw	r28, r26
    50f2:	08 95       	ret

000050f4 <itoa>:
    50f4:	fb 01       	movw	r30, r22
    50f6:	9f 01       	movw	r18, r30
    50f8:	e8 94       	clt
    50fa:	42 30       	cpi	r20, 0x02	; 2
    50fc:	c4 f0       	brlt	.+48     	; 0x512e <itoa+0x3a>
    50fe:	45 32       	cpi	r20, 0x25	; 37
    5100:	b4 f4       	brge	.+44     	; 0x512e <itoa+0x3a>
    5102:	4a 30       	cpi	r20, 0x0A	; 10
    5104:	29 f4       	brne	.+10     	; 0x5110 <itoa+0x1c>
    5106:	97 fb       	bst	r25, 7
    5108:	1e f4       	brtc	.+6      	; 0x5110 <itoa+0x1c>
    510a:	90 95       	com	r25
    510c:	81 95       	neg	r24
    510e:	9f 4f       	sbci	r25, 0xFF	; 255
    5110:	64 2f       	mov	r22, r20
    5112:	77 27       	eor	r23, r23
    5114:	0e 94 ab 28 	call	0x5156	; 0x5156 <__udivmodhi4>
    5118:	80 5d       	subi	r24, 0xD0	; 208
    511a:	8a 33       	cpi	r24, 0x3A	; 58
    511c:	0c f0       	brlt	.+2      	; 0x5120 <itoa+0x2c>
    511e:	89 5d       	subi	r24, 0xD9	; 217
    5120:	81 93       	st	Z+, r24
    5122:	cb 01       	movw	r24, r22
    5124:	00 97       	sbiw	r24, 0x00	; 0
    5126:	a1 f7       	brne	.-24     	; 0x5110 <itoa+0x1c>
    5128:	16 f4       	brtc	.+4      	; 0x512e <itoa+0x3a>
    512a:	5d e2       	ldi	r21, 0x2D	; 45
    512c:	51 93       	st	Z+, r21
    512e:	10 82       	st	Z, r1
    5130:	c9 01       	movw	r24, r18
    5132:	0c 94 9b 28 	jmp	0x5136	; 0x5136 <strrev>

00005136 <strrev>:
    5136:	dc 01       	movw	r26, r24
    5138:	fc 01       	movw	r30, r24
    513a:	67 2f       	mov	r22, r23
    513c:	71 91       	ld	r23, Z+
    513e:	77 23       	and	r23, r23
    5140:	e1 f7       	brne	.-8      	; 0x513a <strrev+0x4>
    5142:	32 97       	sbiw	r30, 0x02	; 2
    5144:	04 c0       	rjmp	.+8      	; 0x514e <strrev+0x18>
    5146:	7c 91       	ld	r23, X
    5148:	6d 93       	st	X+, r22
    514a:	70 83       	st	Z, r23
    514c:	62 91       	ld	r22, -Z
    514e:	ae 17       	cp	r26, r30
    5150:	bf 07       	cpc	r27, r31
    5152:	c8 f3       	brcs	.-14     	; 0x5146 <strrev+0x10>
    5154:	08 95       	ret

00005156 <__udivmodhi4>:
    5156:	aa 1b       	sub	r26, r26
    5158:	bb 1b       	sub	r27, r27
    515a:	51 e1       	ldi	r21, 0x11	; 17
    515c:	07 c0       	rjmp	.+14     	; 0x516c <__udivmodhi4_ep>

0000515e <__udivmodhi4_loop>:
    515e:	aa 1f       	adc	r26, r26
    5160:	bb 1f       	adc	r27, r27
    5162:	a6 17       	cp	r26, r22
    5164:	b7 07       	cpc	r27, r23
    5166:	10 f0       	brcs	.+4      	; 0x516c <__udivmodhi4_ep>
    5168:	a6 1b       	sub	r26, r22
    516a:	b7 0b       	sbc	r27, r23

0000516c <__udivmodhi4_ep>:
    516c:	88 1f       	adc	r24, r24
    516e:	99 1f       	adc	r25, r25
    5170:	5a 95       	dec	r21
    5172:	a9 f7       	brne	.-22     	; 0x515e <__udivmodhi4_loop>
    5174:	80 95       	com	r24
    5176:	90 95       	com	r25
    5178:	bc 01       	movw	r22, r24
    517a:	cd 01       	movw	r24, r26
    517c:	08 95       	ret

0000517e <_exit>:
    517e:	f8 94       	cli

00005180 <__stop_program>:
    5180:	ff cf       	rjmp	.-2      	; 0x5180 <__stop_program>
