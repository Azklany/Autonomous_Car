
Autonomous_Car.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000048c4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000010a  00800060  000048c4  00004958  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000022  0080016a  0080016a  00004a62  2**0
                  ALLOC
  3 .stab         0000579c  00000000  00000000  00004a64  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002765  00000000  00000000  0000a200  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001e0  00000000  00000000  0000c965  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000232  00000000  00000000  0000cb45  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002891  00000000  00000000  0000cd77  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001628  00000000  00000000  0000f608  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000013de  00000000  00000000  00010c30  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000200  00000000  00000000  00012010  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000030f  00000000  00000000  00012210  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a56  00000000  00000000  0001251f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00012f75  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 de 10 	jmp	0x21bc	; 0x21bc <__vector_1>
       8:	0c 94 11 11 	jmp	0x2222	; 0x2222 <__vector_2>
       c:	0c 94 44 11 	jmp	0x2288	; 0x2288 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 eb 0a 	jmp	0x15d6	; 0x15d6 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 b8 0a 	jmp	0x1570	; 0x1570 <__vector_8>
      24:	0c 94 85 0a 	jmp	0x150a	; 0x150a <__vector_9>
      28:	0c 94 e1 0e 	jmp	0x1dc2	; 0x1dc2 <__vector_10>
      2c:	0c 94 a5 0e 	jmp	0x1d4a	; 0x1d4a <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 ec       	ldi	r30, 0xC4	; 196
      68:	f8 e4       	ldi	r31, 0x48	; 72
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 36       	cpi	r26, 0x6A	; 106
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	aa e6       	ldi	r26, 0x6A	; 106
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 38       	cpi	r26, 0x8C	; 140
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 d7 23 	call	0x47ae	; 0x47ae <main>
      8a:	0c 94 60 24 	jmp	0x48c0	; 0x48c0 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 e4 23 	jmp	0x47c8	; 0x47c8 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 00 24 	jmp	0x4800	; 0x4800 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 f0 23 	jmp	0x47e0	; 0x47e0 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 0c 24 	jmp	0x4818	; 0x4818 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 f0 23 	jmp	0x47e0	; 0x47e0 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 0c 24 	jmp	0x4818	; 0x4818 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 e4 23 	jmp	0x47c8	; 0x47c8 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 00 24 	jmp	0x4800	; 0x4800 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 ec 23 	jmp	0x47d8	; 0x47d8 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 08 24 	jmp	0x4810	; 0x4810 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 f0 23 	jmp	0x47e0	; 0x47e0 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 0c 24 	jmp	0x4818	; 0x4818 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 f0 23 	jmp	0x47e0	; 0x47e0 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 0c 24 	jmp	0x4818	; 0x4818 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 f0 23 	jmp	0x47e0	; 0x47e0 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 0c 24 	jmp	0x4818	; 0x4818 <__epilogue_restores__+0x18>

000008aa <__lesf2>:
     8aa:	a8 e1       	ldi	r26, 0x18	; 24
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 f0 23 	jmp	0x47e0	; 0x47e0 <__prologue_saves__+0x18>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	2d 83       	std	Y+5, r18	; 0x05
     8c0:	3e 83       	std	Y+6, r19	; 0x06
     8c2:	4f 83       	std	Y+7, r20	; 0x07
     8c4:	58 87       	std	Y+8, r21	; 0x08
     8c6:	89 e0       	ldi	r24, 0x09	; 9
     8c8:	e8 2e       	mov	r14, r24
     8ca:	f1 2c       	mov	r15, r1
     8cc:	ec 0e       	add	r14, r28
     8ce:	fd 1e       	adc	r15, r29
     8d0:	ce 01       	movw	r24, r28
     8d2:	01 96       	adiw	r24, 0x01	; 1
     8d4:	b7 01       	movw	r22, r14
     8d6:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     8da:	8e 01       	movw	r16, r28
     8dc:	0f 5e       	subi	r16, 0xEF	; 239
     8de:	1f 4f       	sbci	r17, 0xFF	; 255
     8e0:	ce 01       	movw	r24, r28
     8e2:	05 96       	adiw	r24, 0x05	; 5
     8e4:	b8 01       	movw	r22, r16
     8e6:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     8ea:	89 85       	ldd	r24, Y+9	; 0x09
     8ec:	82 30       	cpi	r24, 0x02	; 2
     8ee:	40 f0       	brcs	.+16     	; 0x900 <__lesf2+0x56>
     8f0:	89 89       	ldd	r24, Y+17	; 0x11
     8f2:	82 30       	cpi	r24, 0x02	; 2
     8f4:	28 f0       	brcs	.+10     	; 0x900 <__lesf2+0x56>
     8f6:	c7 01       	movw	r24, r14
     8f8:	b8 01       	movw	r22, r16
     8fa:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fpcmp_parts_f>
     8fe:	01 c0       	rjmp	.+2      	; 0x902 <__lesf2+0x58>
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	68 96       	adiw	r28, 0x18	; 24
     904:	e6 e0       	ldi	r30, 0x06	; 6
     906:	0c 94 0c 24 	jmp	0x4818	; 0x4818 <__epilogue_restores__+0x18>

0000090a <__floatsisf>:
     90a:	a8 e0       	ldi	r26, 0x08	; 8
     90c:	b0 e0       	ldi	r27, 0x00	; 0
     90e:	eb e8       	ldi	r30, 0x8B	; 139
     910:	f4 e0       	ldi	r31, 0x04	; 4
     912:	0c 94 ed 23 	jmp	0x47da	; 0x47da <__prologue_saves__+0x12>
     916:	9b 01       	movw	r18, r22
     918:	ac 01       	movw	r20, r24
     91a:	83 e0       	ldi	r24, 0x03	; 3
     91c:	89 83       	std	Y+1, r24	; 0x01
     91e:	da 01       	movw	r26, r20
     920:	c9 01       	movw	r24, r18
     922:	88 27       	eor	r24, r24
     924:	b7 fd       	sbrc	r27, 7
     926:	83 95       	inc	r24
     928:	99 27       	eor	r25, r25
     92a:	aa 27       	eor	r26, r26
     92c:	bb 27       	eor	r27, r27
     92e:	b8 2e       	mov	r11, r24
     930:	21 15       	cp	r18, r1
     932:	31 05       	cpc	r19, r1
     934:	41 05       	cpc	r20, r1
     936:	51 05       	cpc	r21, r1
     938:	19 f4       	brne	.+6      	; 0x940 <__floatsisf+0x36>
     93a:	82 e0       	ldi	r24, 0x02	; 2
     93c:	89 83       	std	Y+1, r24	; 0x01
     93e:	3a c0       	rjmp	.+116    	; 0x9b4 <__floatsisf+0xaa>
     940:	88 23       	and	r24, r24
     942:	a9 f0       	breq	.+42     	; 0x96e <__floatsisf+0x64>
     944:	20 30       	cpi	r18, 0x00	; 0
     946:	80 e0       	ldi	r24, 0x00	; 0
     948:	38 07       	cpc	r19, r24
     94a:	80 e0       	ldi	r24, 0x00	; 0
     94c:	48 07       	cpc	r20, r24
     94e:	80 e8       	ldi	r24, 0x80	; 128
     950:	58 07       	cpc	r21, r24
     952:	29 f4       	brne	.+10     	; 0x95e <__floatsisf+0x54>
     954:	60 e0       	ldi	r22, 0x00	; 0
     956:	70 e0       	ldi	r23, 0x00	; 0
     958:	80 e0       	ldi	r24, 0x00	; 0
     95a:	9f ec       	ldi	r25, 0xCF	; 207
     95c:	30 c0       	rjmp	.+96     	; 0x9be <__floatsisf+0xb4>
     95e:	ee 24       	eor	r14, r14
     960:	ff 24       	eor	r15, r15
     962:	87 01       	movw	r16, r14
     964:	e2 1a       	sub	r14, r18
     966:	f3 0a       	sbc	r15, r19
     968:	04 0b       	sbc	r16, r20
     96a:	15 0b       	sbc	r17, r21
     96c:	02 c0       	rjmp	.+4      	; 0x972 <__floatsisf+0x68>
     96e:	79 01       	movw	r14, r18
     970:	8a 01       	movw	r16, r20
     972:	8e e1       	ldi	r24, 0x1E	; 30
     974:	c8 2e       	mov	r12, r24
     976:	d1 2c       	mov	r13, r1
     978:	dc 82       	std	Y+4, r13	; 0x04
     97a:	cb 82       	std	Y+3, r12	; 0x03
     97c:	ed 82       	std	Y+5, r14	; 0x05
     97e:	fe 82       	std	Y+6, r15	; 0x06
     980:	0f 83       	std	Y+7, r16	; 0x07
     982:	18 87       	std	Y+8, r17	; 0x08
     984:	c8 01       	movw	r24, r16
     986:	b7 01       	movw	r22, r14
     988:	0e 94 b0 05 	call	0xb60	; 0xb60 <__clzsi2>
     98c:	01 97       	sbiw	r24, 0x01	; 1
     98e:	18 16       	cp	r1, r24
     990:	19 06       	cpc	r1, r25
     992:	84 f4       	brge	.+32     	; 0x9b4 <__floatsisf+0xaa>
     994:	08 2e       	mov	r0, r24
     996:	04 c0       	rjmp	.+8      	; 0x9a0 <__floatsisf+0x96>
     998:	ee 0c       	add	r14, r14
     99a:	ff 1c       	adc	r15, r15
     99c:	00 1f       	adc	r16, r16
     99e:	11 1f       	adc	r17, r17
     9a0:	0a 94       	dec	r0
     9a2:	d2 f7       	brpl	.-12     	; 0x998 <__floatsisf+0x8e>
     9a4:	ed 82       	std	Y+5, r14	; 0x05
     9a6:	fe 82       	std	Y+6, r15	; 0x06
     9a8:	0f 83       	std	Y+7, r16	; 0x07
     9aa:	18 87       	std	Y+8, r17	; 0x08
     9ac:	c8 1a       	sub	r12, r24
     9ae:	d9 0a       	sbc	r13, r25
     9b0:	dc 82       	std	Y+4, r13	; 0x04
     9b2:	cb 82       	std	Y+3, r12	; 0x03
     9b4:	ba 82       	std	Y+2, r11	; 0x02
     9b6:	ce 01       	movw	r24, r28
     9b8:	01 96       	adiw	r24, 0x01	; 1
     9ba:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     9be:	28 96       	adiw	r28, 0x08	; 8
     9c0:	e9 e0       	ldi	r30, 0x09	; 9
     9c2:	0c 94 09 24 	jmp	0x4812	; 0x4812 <__epilogue_restores__+0x12>

000009c6 <__fixsfsi>:
     9c6:	ac e0       	ldi	r26, 0x0C	; 12
     9c8:	b0 e0       	ldi	r27, 0x00	; 0
     9ca:	e9 ee       	ldi	r30, 0xE9	; 233
     9cc:	f4 e0       	ldi	r31, 0x04	; 4
     9ce:	0c 94 f4 23 	jmp	0x47e8	; 0x47e8 <__prologue_saves__+0x20>
     9d2:	69 83       	std	Y+1, r22	; 0x01
     9d4:	7a 83       	std	Y+2, r23	; 0x02
     9d6:	8b 83       	std	Y+3, r24	; 0x03
     9d8:	9c 83       	std	Y+4, r25	; 0x04
     9da:	ce 01       	movw	r24, r28
     9dc:	01 96       	adiw	r24, 0x01	; 1
     9de:	be 01       	movw	r22, r28
     9e0:	6b 5f       	subi	r22, 0xFB	; 251
     9e2:	7f 4f       	sbci	r23, 0xFF	; 255
     9e4:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     9e8:	8d 81       	ldd	r24, Y+5	; 0x05
     9ea:	82 30       	cpi	r24, 0x02	; 2
     9ec:	61 f1       	breq	.+88     	; 0xa46 <__fixsfsi+0x80>
     9ee:	82 30       	cpi	r24, 0x02	; 2
     9f0:	50 f1       	brcs	.+84     	; 0xa46 <__fixsfsi+0x80>
     9f2:	84 30       	cpi	r24, 0x04	; 4
     9f4:	21 f4       	brne	.+8      	; 0x9fe <__fixsfsi+0x38>
     9f6:	8e 81       	ldd	r24, Y+6	; 0x06
     9f8:	88 23       	and	r24, r24
     9fa:	51 f1       	breq	.+84     	; 0xa50 <__fixsfsi+0x8a>
     9fc:	2e c0       	rjmp	.+92     	; 0xa5a <__fixsfsi+0x94>
     9fe:	2f 81       	ldd	r18, Y+7	; 0x07
     a00:	38 85       	ldd	r19, Y+8	; 0x08
     a02:	37 fd       	sbrc	r19, 7
     a04:	20 c0       	rjmp	.+64     	; 0xa46 <__fixsfsi+0x80>
     a06:	6e 81       	ldd	r22, Y+6	; 0x06
     a08:	2f 31       	cpi	r18, 0x1F	; 31
     a0a:	31 05       	cpc	r19, r1
     a0c:	1c f0       	brlt	.+6      	; 0xa14 <__fixsfsi+0x4e>
     a0e:	66 23       	and	r22, r22
     a10:	f9 f0       	breq	.+62     	; 0xa50 <__fixsfsi+0x8a>
     a12:	23 c0       	rjmp	.+70     	; 0xa5a <__fixsfsi+0x94>
     a14:	8e e1       	ldi	r24, 0x1E	; 30
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	82 1b       	sub	r24, r18
     a1a:	93 0b       	sbc	r25, r19
     a1c:	29 85       	ldd	r18, Y+9	; 0x09
     a1e:	3a 85       	ldd	r19, Y+10	; 0x0a
     a20:	4b 85       	ldd	r20, Y+11	; 0x0b
     a22:	5c 85       	ldd	r21, Y+12	; 0x0c
     a24:	04 c0       	rjmp	.+8      	; 0xa2e <__fixsfsi+0x68>
     a26:	56 95       	lsr	r21
     a28:	47 95       	ror	r20
     a2a:	37 95       	ror	r19
     a2c:	27 95       	ror	r18
     a2e:	8a 95       	dec	r24
     a30:	d2 f7       	brpl	.-12     	; 0xa26 <__fixsfsi+0x60>
     a32:	66 23       	and	r22, r22
     a34:	b1 f0       	breq	.+44     	; 0xa62 <__fixsfsi+0x9c>
     a36:	50 95       	com	r21
     a38:	40 95       	com	r20
     a3a:	30 95       	com	r19
     a3c:	21 95       	neg	r18
     a3e:	3f 4f       	sbci	r19, 0xFF	; 255
     a40:	4f 4f       	sbci	r20, 0xFF	; 255
     a42:	5f 4f       	sbci	r21, 0xFF	; 255
     a44:	0e c0       	rjmp	.+28     	; 0xa62 <__fixsfsi+0x9c>
     a46:	20 e0       	ldi	r18, 0x00	; 0
     a48:	30 e0       	ldi	r19, 0x00	; 0
     a4a:	40 e0       	ldi	r20, 0x00	; 0
     a4c:	50 e0       	ldi	r21, 0x00	; 0
     a4e:	09 c0       	rjmp	.+18     	; 0xa62 <__fixsfsi+0x9c>
     a50:	2f ef       	ldi	r18, 0xFF	; 255
     a52:	3f ef       	ldi	r19, 0xFF	; 255
     a54:	4f ef       	ldi	r20, 0xFF	; 255
     a56:	5f e7       	ldi	r21, 0x7F	; 127
     a58:	04 c0       	rjmp	.+8      	; 0xa62 <__fixsfsi+0x9c>
     a5a:	20 e0       	ldi	r18, 0x00	; 0
     a5c:	30 e0       	ldi	r19, 0x00	; 0
     a5e:	40 e0       	ldi	r20, 0x00	; 0
     a60:	50 e8       	ldi	r21, 0x80	; 128
     a62:	b9 01       	movw	r22, r18
     a64:	ca 01       	movw	r24, r20
     a66:	2c 96       	adiw	r28, 0x0c	; 12
     a68:	e2 e0       	ldi	r30, 0x02	; 2
     a6a:	0c 94 10 24 	jmp	0x4820	; 0x4820 <__epilogue_restores__+0x20>

00000a6e <__floatunsisf>:
     a6e:	a8 e0       	ldi	r26, 0x08	; 8
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	ed e3       	ldi	r30, 0x3D	; 61
     a74:	f5 e0       	ldi	r31, 0x05	; 5
     a76:	0c 94 ec 23 	jmp	0x47d8	; 0x47d8 <__prologue_saves__+0x10>
     a7a:	7b 01       	movw	r14, r22
     a7c:	8c 01       	movw	r16, r24
     a7e:	61 15       	cp	r22, r1
     a80:	71 05       	cpc	r23, r1
     a82:	81 05       	cpc	r24, r1
     a84:	91 05       	cpc	r25, r1
     a86:	19 f4       	brne	.+6      	; 0xa8e <__floatunsisf+0x20>
     a88:	82 e0       	ldi	r24, 0x02	; 2
     a8a:	89 83       	std	Y+1, r24	; 0x01
     a8c:	60 c0       	rjmp	.+192    	; 0xb4e <__floatunsisf+0xe0>
     a8e:	83 e0       	ldi	r24, 0x03	; 3
     a90:	89 83       	std	Y+1, r24	; 0x01
     a92:	8e e1       	ldi	r24, 0x1E	; 30
     a94:	c8 2e       	mov	r12, r24
     a96:	d1 2c       	mov	r13, r1
     a98:	dc 82       	std	Y+4, r13	; 0x04
     a9a:	cb 82       	std	Y+3, r12	; 0x03
     a9c:	ed 82       	std	Y+5, r14	; 0x05
     a9e:	fe 82       	std	Y+6, r15	; 0x06
     aa0:	0f 83       	std	Y+7, r16	; 0x07
     aa2:	18 87       	std	Y+8, r17	; 0x08
     aa4:	c8 01       	movw	r24, r16
     aa6:	b7 01       	movw	r22, r14
     aa8:	0e 94 b0 05 	call	0xb60	; 0xb60 <__clzsi2>
     aac:	fc 01       	movw	r30, r24
     aae:	31 97       	sbiw	r30, 0x01	; 1
     ab0:	f7 ff       	sbrs	r31, 7
     ab2:	3b c0       	rjmp	.+118    	; 0xb2a <__floatunsisf+0xbc>
     ab4:	22 27       	eor	r18, r18
     ab6:	33 27       	eor	r19, r19
     ab8:	2e 1b       	sub	r18, r30
     aba:	3f 0b       	sbc	r19, r31
     abc:	57 01       	movw	r10, r14
     abe:	68 01       	movw	r12, r16
     ac0:	02 2e       	mov	r0, r18
     ac2:	04 c0       	rjmp	.+8      	; 0xacc <__floatunsisf+0x5e>
     ac4:	d6 94       	lsr	r13
     ac6:	c7 94       	ror	r12
     ac8:	b7 94       	ror	r11
     aca:	a7 94       	ror	r10
     acc:	0a 94       	dec	r0
     ace:	d2 f7       	brpl	.-12     	; 0xac4 <__floatunsisf+0x56>
     ad0:	40 e0       	ldi	r20, 0x00	; 0
     ad2:	50 e0       	ldi	r21, 0x00	; 0
     ad4:	60 e0       	ldi	r22, 0x00	; 0
     ad6:	70 e0       	ldi	r23, 0x00	; 0
     ad8:	81 e0       	ldi	r24, 0x01	; 1
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	a0 e0       	ldi	r26, 0x00	; 0
     ade:	b0 e0       	ldi	r27, 0x00	; 0
     ae0:	04 c0       	rjmp	.+8      	; 0xaea <__floatunsisf+0x7c>
     ae2:	88 0f       	add	r24, r24
     ae4:	99 1f       	adc	r25, r25
     ae6:	aa 1f       	adc	r26, r26
     ae8:	bb 1f       	adc	r27, r27
     aea:	2a 95       	dec	r18
     aec:	d2 f7       	brpl	.-12     	; 0xae2 <__floatunsisf+0x74>
     aee:	01 97       	sbiw	r24, 0x01	; 1
     af0:	a1 09       	sbc	r26, r1
     af2:	b1 09       	sbc	r27, r1
     af4:	8e 21       	and	r24, r14
     af6:	9f 21       	and	r25, r15
     af8:	a0 23       	and	r26, r16
     afa:	b1 23       	and	r27, r17
     afc:	00 97       	sbiw	r24, 0x00	; 0
     afe:	a1 05       	cpc	r26, r1
     b00:	b1 05       	cpc	r27, r1
     b02:	21 f0       	breq	.+8      	; 0xb0c <__floatunsisf+0x9e>
     b04:	41 e0       	ldi	r20, 0x01	; 1
     b06:	50 e0       	ldi	r21, 0x00	; 0
     b08:	60 e0       	ldi	r22, 0x00	; 0
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	4a 29       	or	r20, r10
     b0e:	5b 29       	or	r21, r11
     b10:	6c 29       	or	r22, r12
     b12:	7d 29       	or	r23, r13
     b14:	4d 83       	std	Y+5, r20	; 0x05
     b16:	5e 83       	std	Y+6, r21	; 0x06
     b18:	6f 83       	std	Y+7, r22	; 0x07
     b1a:	78 87       	std	Y+8, r23	; 0x08
     b1c:	8e e1       	ldi	r24, 0x1E	; 30
     b1e:	90 e0       	ldi	r25, 0x00	; 0
     b20:	8e 1b       	sub	r24, r30
     b22:	9f 0b       	sbc	r25, r31
     b24:	9c 83       	std	Y+4, r25	; 0x04
     b26:	8b 83       	std	Y+3, r24	; 0x03
     b28:	12 c0       	rjmp	.+36     	; 0xb4e <__floatunsisf+0xe0>
     b2a:	30 97       	sbiw	r30, 0x00	; 0
     b2c:	81 f0       	breq	.+32     	; 0xb4e <__floatunsisf+0xe0>
     b2e:	0e 2e       	mov	r0, r30
     b30:	04 c0       	rjmp	.+8      	; 0xb3a <__floatunsisf+0xcc>
     b32:	ee 0c       	add	r14, r14
     b34:	ff 1c       	adc	r15, r15
     b36:	00 1f       	adc	r16, r16
     b38:	11 1f       	adc	r17, r17
     b3a:	0a 94       	dec	r0
     b3c:	d2 f7       	brpl	.-12     	; 0xb32 <__floatunsisf+0xc4>
     b3e:	ed 82       	std	Y+5, r14	; 0x05
     b40:	fe 82       	std	Y+6, r15	; 0x06
     b42:	0f 83       	std	Y+7, r16	; 0x07
     b44:	18 87       	std	Y+8, r17	; 0x08
     b46:	ce 1a       	sub	r12, r30
     b48:	df 0a       	sbc	r13, r31
     b4a:	dc 82       	std	Y+4, r13	; 0x04
     b4c:	cb 82       	std	Y+3, r12	; 0x03
     b4e:	1a 82       	std	Y+2, r1	; 0x02
     b50:	ce 01       	movw	r24, r28
     b52:	01 96       	adiw	r24, 0x01	; 1
     b54:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     b58:	28 96       	adiw	r28, 0x08	; 8
     b5a:	ea e0       	ldi	r30, 0x0A	; 10
     b5c:	0c 94 08 24 	jmp	0x4810	; 0x4810 <__epilogue_restores__+0x10>

00000b60 <__clzsi2>:
     b60:	ef 92       	push	r14
     b62:	ff 92       	push	r15
     b64:	0f 93       	push	r16
     b66:	1f 93       	push	r17
     b68:	7b 01       	movw	r14, r22
     b6a:	8c 01       	movw	r16, r24
     b6c:	80 e0       	ldi	r24, 0x00	; 0
     b6e:	e8 16       	cp	r14, r24
     b70:	80 e0       	ldi	r24, 0x00	; 0
     b72:	f8 06       	cpc	r15, r24
     b74:	81 e0       	ldi	r24, 0x01	; 1
     b76:	08 07       	cpc	r16, r24
     b78:	80 e0       	ldi	r24, 0x00	; 0
     b7a:	18 07       	cpc	r17, r24
     b7c:	88 f4       	brcc	.+34     	; 0xba0 <__clzsi2+0x40>
     b7e:	8f ef       	ldi	r24, 0xFF	; 255
     b80:	e8 16       	cp	r14, r24
     b82:	f1 04       	cpc	r15, r1
     b84:	01 05       	cpc	r16, r1
     b86:	11 05       	cpc	r17, r1
     b88:	31 f0       	breq	.+12     	; 0xb96 <__clzsi2+0x36>
     b8a:	28 f0       	brcs	.+10     	; 0xb96 <__clzsi2+0x36>
     b8c:	88 e0       	ldi	r24, 0x08	; 8
     b8e:	90 e0       	ldi	r25, 0x00	; 0
     b90:	a0 e0       	ldi	r26, 0x00	; 0
     b92:	b0 e0       	ldi	r27, 0x00	; 0
     b94:	17 c0       	rjmp	.+46     	; 0xbc4 <__clzsi2+0x64>
     b96:	80 e0       	ldi	r24, 0x00	; 0
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	a0 e0       	ldi	r26, 0x00	; 0
     b9c:	b0 e0       	ldi	r27, 0x00	; 0
     b9e:	12 c0       	rjmp	.+36     	; 0xbc4 <__clzsi2+0x64>
     ba0:	80 e0       	ldi	r24, 0x00	; 0
     ba2:	e8 16       	cp	r14, r24
     ba4:	80 e0       	ldi	r24, 0x00	; 0
     ba6:	f8 06       	cpc	r15, r24
     ba8:	80 e0       	ldi	r24, 0x00	; 0
     baa:	08 07       	cpc	r16, r24
     bac:	81 e0       	ldi	r24, 0x01	; 1
     bae:	18 07       	cpc	r17, r24
     bb0:	28 f0       	brcs	.+10     	; 0xbbc <__clzsi2+0x5c>
     bb2:	88 e1       	ldi	r24, 0x18	; 24
     bb4:	90 e0       	ldi	r25, 0x00	; 0
     bb6:	a0 e0       	ldi	r26, 0x00	; 0
     bb8:	b0 e0       	ldi	r27, 0x00	; 0
     bba:	04 c0       	rjmp	.+8      	; 0xbc4 <__clzsi2+0x64>
     bbc:	80 e1       	ldi	r24, 0x10	; 16
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	a0 e0       	ldi	r26, 0x00	; 0
     bc2:	b0 e0       	ldi	r27, 0x00	; 0
     bc4:	20 e2       	ldi	r18, 0x20	; 32
     bc6:	30 e0       	ldi	r19, 0x00	; 0
     bc8:	40 e0       	ldi	r20, 0x00	; 0
     bca:	50 e0       	ldi	r21, 0x00	; 0
     bcc:	28 1b       	sub	r18, r24
     bce:	39 0b       	sbc	r19, r25
     bd0:	4a 0b       	sbc	r20, r26
     bd2:	5b 0b       	sbc	r21, r27
     bd4:	04 c0       	rjmp	.+8      	; 0xbde <__clzsi2+0x7e>
     bd6:	16 95       	lsr	r17
     bd8:	07 95       	ror	r16
     bda:	f7 94       	ror	r15
     bdc:	e7 94       	ror	r14
     bde:	8a 95       	dec	r24
     be0:	d2 f7       	brpl	.-12     	; 0xbd6 <__clzsi2+0x76>
     be2:	f7 01       	movw	r30, r14
     be4:	e8 59       	subi	r30, 0x98	; 152
     be6:	ff 4f       	sbci	r31, 0xFF	; 255
     be8:	80 81       	ld	r24, Z
     bea:	28 1b       	sub	r18, r24
     bec:	31 09       	sbc	r19, r1
     bee:	41 09       	sbc	r20, r1
     bf0:	51 09       	sbc	r21, r1
     bf2:	c9 01       	movw	r24, r18
     bf4:	1f 91       	pop	r17
     bf6:	0f 91       	pop	r16
     bf8:	ff 90       	pop	r15
     bfa:	ef 90       	pop	r14
     bfc:	08 95       	ret

00000bfe <__pack_f>:
     bfe:	df 92       	push	r13
     c00:	ef 92       	push	r14
     c02:	ff 92       	push	r15
     c04:	0f 93       	push	r16
     c06:	1f 93       	push	r17
     c08:	fc 01       	movw	r30, r24
     c0a:	e4 80       	ldd	r14, Z+4	; 0x04
     c0c:	f5 80       	ldd	r15, Z+5	; 0x05
     c0e:	06 81       	ldd	r16, Z+6	; 0x06
     c10:	17 81       	ldd	r17, Z+7	; 0x07
     c12:	d1 80       	ldd	r13, Z+1	; 0x01
     c14:	80 81       	ld	r24, Z
     c16:	82 30       	cpi	r24, 0x02	; 2
     c18:	48 f4       	brcc	.+18     	; 0xc2c <__pack_f+0x2e>
     c1a:	80 e0       	ldi	r24, 0x00	; 0
     c1c:	90 e0       	ldi	r25, 0x00	; 0
     c1e:	a0 e1       	ldi	r26, 0x10	; 16
     c20:	b0 e0       	ldi	r27, 0x00	; 0
     c22:	e8 2a       	or	r14, r24
     c24:	f9 2a       	or	r15, r25
     c26:	0a 2b       	or	r16, r26
     c28:	1b 2b       	or	r17, r27
     c2a:	a5 c0       	rjmp	.+330    	; 0xd76 <__pack_f+0x178>
     c2c:	84 30       	cpi	r24, 0x04	; 4
     c2e:	09 f4       	brne	.+2      	; 0xc32 <__pack_f+0x34>
     c30:	9f c0       	rjmp	.+318    	; 0xd70 <__pack_f+0x172>
     c32:	82 30       	cpi	r24, 0x02	; 2
     c34:	21 f4       	brne	.+8      	; 0xc3e <__pack_f+0x40>
     c36:	ee 24       	eor	r14, r14
     c38:	ff 24       	eor	r15, r15
     c3a:	87 01       	movw	r16, r14
     c3c:	05 c0       	rjmp	.+10     	; 0xc48 <__pack_f+0x4a>
     c3e:	e1 14       	cp	r14, r1
     c40:	f1 04       	cpc	r15, r1
     c42:	01 05       	cpc	r16, r1
     c44:	11 05       	cpc	r17, r1
     c46:	19 f4       	brne	.+6      	; 0xc4e <__pack_f+0x50>
     c48:	e0 e0       	ldi	r30, 0x00	; 0
     c4a:	f0 e0       	ldi	r31, 0x00	; 0
     c4c:	96 c0       	rjmp	.+300    	; 0xd7a <__pack_f+0x17c>
     c4e:	62 81       	ldd	r22, Z+2	; 0x02
     c50:	73 81       	ldd	r23, Z+3	; 0x03
     c52:	9f ef       	ldi	r25, 0xFF	; 255
     c54:	62 38       	cpi	r22, 0x82	; 130
     c56:	79 07       	cpc	r23, r25
     c58:	0c f0       	brlt	.+2      	; 0xc5c <__pack_f+0x5e>
     c5a:	5b c0       	rjmp	.+182    	; 0xd12 <__pack_f+0x114>
     c5c:	22 e8       	ldi	r18, 0x82	; 130
     c5e:	3f ef       	ldi	r19, 0xFF	; 255
     c60:	26 1b       	sub	r18, r22
     c62:	37 0b       	sbc	r19, r23
     c64:	2a 31       	cpi	r18, 0x1A	; 26
     c66:	31 05       	cpc	r19, r1
     c68:	2c f0       	brlt	.+10     	; 0xc74 <__pack_f+0x76>
     c6a:	20 e0       	ldi	r18, 0x00	; 0
     c6c:	30 e0       	ldi	r19, 0x00	; 0
     c6e:	40 e0       	ldi	r20, 0x00	; 0
     c70:	50 e0       	ldi	r21, 0x00	; 0
     c72:	2a c0       	rjmp	.+84     	; 0xcc8 <__pack_f+0xca>
     c74:	b8 01       	movw	r22, r16
     c76:	a7 01       	movw	r20, r14
     c78:	02 2e       	mov	r0, r18
     c7a:	04 c0       	rjmp	.+8      	; 0xc84 <__pack_f+0x86>
     c7c:	76 95       	lsr	r23
     c7e:	67 95       	ror	r22
     c80:	57 95       	ror	r21
     c82:	47 95       	ror	r20
     c84:	0a 94       	dec	r0
     c86:	d2 f7       	brpl	.-12     	; 0xc7c <__pack_f+0x7e>
     c88:	81 e0       	ldi	r24, 0x01	; 1
     c8a:	90 e0       	ldi	r25, 0x00	; 0
     c8c:	a0 e0       	ldi	r26, 0x00	; 0
     c8e:	b0 e0       	ldi	r27, 0x00	; 0
     c90:	04 c0       	rjmp	.+8      	; 0xc9a <__pack_f+0x9c>
     c92:	88 0f       	add	r24, r24
     c94:	99 1f       	adc	r25, r25
     c96:	aa 1f       	adc	r26, r26
     c98:	bb 1f       	adc	r27, r27
     c9a:	2a 95       	dec	r18
     c9c:	d2 f7       	brpl	.-12     	; 0xc92 <__pack_f+0x94>
     c9e:	01 97       	sbiw	r24, 0x01	; 1
     ca0:	a1 09       	sbc	r26, r1
     ca2:	b1 09       	sbc	r27, r1
     ca4:	8e 21       	and	r24, r14
     ca6:	9f 21       	and	r25, r15
     ca8:	a0 23       	and	r26, r16
     caa:	b1 23       	and	r27, r17
     cac:	00 97       	sbiw	r24, 0x00	; 0
     cae:	a1 05       	cpc	r26, r1
     cb0:	b1 05       	cpc	r27, r1
     cb2:	21 f0       	breq	.+8      	; 0xcbc <__pack_f+0xbe>
     cb4:	81 e0       	ldi	r24, 0x01	; 1
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	a0 e0       	ldi	r26, 0x00	; 0
     cba:	b0 e0       	ldi	r27, 0x00	; 0
     cbc:	9a 01       	movw	r18, r20
     cbe:	ab 01       	movw	r20, r22
     cc0:	28 2b       	or	r18, r24
     cc2:	39 2b       	or	r19, r25
     cc4:	4a 2b       	or	r20, r26
     cc6:	5b 2b       	or	r21, r27
     cc8:	da 01       	movw	r26, r20
     cca:	c9 01       	movw	r24, r18
     ccc:	8f 77       	andi	r24, 0x7F	; 127
     cce:	90 70       	andi	r25, 0x00	; 0
     cd0:	a0 70       	andi	r26, 0x00	; 0
     cd2:	b0 70       	andi	r27, 0x00	; 0
     cd4:	80 34       	cpi	r24, 0x40	; 64
     cd6:	91 05       	cpc	r25, r1
     cd8:	a1 05       	cpc	r26, r1
     cda:	b1 05       	cpc	r27, r1
     cdc:	39 f4       	brne	.+14     	; 0xcec <__pack_f+0xee>
     cde:	27 ff       	sbrs	r18, 7
     ce0:	09 c0       	rjmp	.+18     	; 0xcf4 <__pack_f+0xf6>
     ce2:	20 5c       	subi	r18, 0xC0	; 192
     ce4:	3f 4f       	sbci	r19, 0xFF	; 255
     ce6:	4f 4f       	sbci	r20, 0xFF	; 255
     ce8:	5f 4f       	sbci	r21, 0xFF	; 255
     cea:	04 c0       	rjmp	.+8      	; 0xcf4 <__pack_f+0xf6>
     cec:	21 5c       	subi	r18, 0xC1	; 193
     cee:	3f 4f       	sbci	r19, 0xFF	; 255
     cf0:	4f 4f       	sbci	r20, 0xFF	; 255
     cf2:	5f 4f       	sbci	r21, 0xFF	; 255
     cf4:	e0 e0       	ldi	r30, 0x00	; 0
     cf6:	f0 e0       	ldi	r31, 0x00	; 0
     cf8:	20 30       	cpi	r18, 0x00	; 0
     cfa:	a0 e0       	ldi	r26, 0x00	; 0
     cfc:	3a 07       	cpc	r19, r26
     cfe:	a0 e0       	ldi	r26, 0x00	; 0
     d00:	4a 07       	cpc	r20, r26
     d02:	a0 e4       	ldi	r26, 0x40	; 64
     d04:	5a 07       	cpc	r21, r26
     d06:	10 f0       	brcs	.+4      	; 0xd0c <__pack_f+0x10e>
     d08:	e1 e0       	ldi	r30, 0x01	; 1
     d0a:	f0 e0       	ldi	r31, 0x00	; 0
     d0c:	79 01       	movw	r14, r18
     d0e:	8a 01       	movw	r16, r20
     d10:	27 c0       	rjmp	.+78     	; 0xd60 <__pack_f+0x162>
     d12:	60 38       	cpi	r22, 0x80	; 128
     d14:	71 05       	cpc	r23, r1
     d16:	64 f5       	brge	.+88     	; 0xd70 <__pack_f+0x172>
     d18:	fb 01       	movw	r30, r22
     d1a:	e1 58       	subi	r30, 0x81	; 129
     d1c:	ff 4f       	sbci	r31, 0xFF	; 255
     d1e:	d8 01       	movw	r26, r16
     d20:	c7 01       	movw	r24, r14
     d22:	8f 77       	andi	r24, 0x7F	; 127
     d24:	90 70       	andi	r25, 0x00	; 0
     d26:	a0 70       	andi	r26, 0x00	; 0
     d28:	b0 70       	andi	r27, 0x00	; 0
     d2a:	80 34       	cpi	r24, 0x40	; 64
     d2c:	91 05       	cpc	r25, r1
     d2e:	a1 05       	cpc	r26, r1
     d30:	b1 05       	cpc	r27, r1
     d32:	39 f4       	brne	.+14     	; 0xd42 <__pack_f+0x144>
     d34:	e7 fe       	sbrs	r14, 7
     d36:	0d c0       	rjmp	.+26     	; 0xd52 <__pack_f+0x154>
     d38:	80 e4       	ldi	r24, 0x40	; 64
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	a0 e0       	ldi	r26, 0x00	; 0
     d3e:	b0 e0       	ldi	r27, 0x00	; 0
     d40:	04 c0       	rjmp	.+8      	; 0xd4a <__pack_f+0x14c>
     d42:	8f e3       	ldi	r24, 0x3F	; 63
     d44:	90 e0       	ldi	r25, 0x00	; 0
     d46:	a0 e0       	ldi	r26, 0x00	; 0
     d48:	b0 e0       	ldi	r27, 0x00	; 0
     d4a:	e8 0e       	add	r14, r24
     d4c:	f9 1e       	adc	r15, r25
     d4e:	0a 1f       	adc	r16, r26
     d50:	1b 1f       	adc	r17, r27
     d52:	17 ff       	sbrs	r17, 7
     d54:	05 c0       	rjmp	.+10     	; 0xd60 <__pack_f+0x162>
     d56:	16 95       	lsr	r17
     d58:	07 95       	ror	r16
     d5a:	f7 94       	ror	r15
     d5c:	e7 94       	ror	r14
     d5e:	31 96       	adiw	r30, 0x01	; 1
     d60:	87 e0       	ldi	r24, 0x07	; 7
     d62:	16 95       	lsr	r17
     d64:	07 95       	ror	r16
     d66:	f7 94       	ror	r15
     d68:	e7 94       	ror	r14
     d6a:	8a 95       	dec	r24
     d6c:	d1 f7       	brne	.-12     	; 0xd62 <__pack_f+0x164>
     d6e:	05 c0       	rjmp	.+10     	; 0xd7a <__pack_f+0x17c>
     d70:	ee 24       	eor	r14, r14
     d72:	ff 24       	eor	r15, r15
     d74:	87 01       	movw	r16, r14
     d76:	ef ef       	ldi	r30, 0xFF	; 255
     d78:	f0 e0       	ldi	r31, 0x00	; 0
     d7a:	6e 2f       	mov	r22, r30
     d7c:	67 95       	ror	r22
     d7e:	66 27       	eor	r22, r22
     d80:	67 95       	ror	r22
     d82:	90 2f       	mov	r25, r16
     d84:	9f 77       	andi	r25, 0x7F	; 127
     d86:	d7 94       	ror	r13
     d88:	dd 24       	eor	r13, r13
     d8a:	d7 94       	ror	r13
     d8c:	8e 2f       	mov	r24, r30
     d8e:	86 95       	lsr	r24
     d90:	49 2f       	mov	r20, r25
     d92:	46 2b       	or	r20, r22
     d94:	58 2f       	mov	r21, r24
     d96:	5d 29       	or	r21, r13
     d98:	b7 01       	movw	r22, r14
     d9a:	ca 01       	movw	r24, r20
     d9c:	1f 91       	pop	r17
     d9e:	0f 91       	pop	r16
     da0:	ff 90       	pop	r15
     da2:	ef 90       	pop	r14
     da4:	df 90       	pop	r13
     da6:	08 95       	ret

00000da8 <__unpack_f>:
     da8:	fc 01       	movw	r30, r24
     daa:	db 01       	movw	r26, r22
     dac:	40 81       	ld	r20, Z
     dae:	51 81       	ldd	r21, Z+1	; 0x01
     db0:	22 81       	ldd	r18, Z+2	; 0x02
     db2:	62 2f       	mov	r22, r18
     db4:	6f 77       	andi	r22, 0x7F	; 127
     db6:	70 e0       	ldi	r23, 0x00	; 0
     db8:	22 1f       	adc	r18, r18
     dba:	22 27       	eor	r18, r18
     dbc:	22 1f       	adc	r18, r18
     dbe:	93 81       	ldd	r25, Z+3	; 0x03
     dc0:	89 2f       	mov	r24, r25
     dc2:	88 0f       	add	r24, r24
     dc4:	82 2b       	or	r24, r18
     dc6:	28 2f       	mov	r18, r24
     dc8:	30 e0       	ldi	r19, 0x00	; 0
     dca:	99 1f       	adc	r25, r25
     dcc:	99 27       	eor	r25, r25
     dce:	99 1f       	adc	r25, r25
     dd0:	11 96       	adiw	r26, 0x01	; 1
     dd2:	9c 93       	st	X, r25
     dd4:	11 97       	sbiw	r26, 0x01	; 1
     dd6:	21 15       	cp	r18, r1
     dd8:	31 05       	cpc	r19, r1
     dda:	a9 f5       	brne	.+106    	; 0xe46 <__unpack_f+0x9e>
     ddc:	41 15       	cp	r20, r1
     dde:	51 05       	cpc	r21, r1
     de0:	61 05       	cpc	r22, r1
     de2:	71 05       	cpc	r23, r1
     de4:	11 f4       	brne	.+4      	; 0xdea <__unpack_f+0x42>
     de6:	82 e0       	ldi	r24, 0x02	; 2
     de8:	37 c0       	rjmp	.+110    	; 0xe58 <__unpack_f+0xb0>
     dea:	82 e8       	ldi	r24, 0x82	; 130
     dec:	9f ef       	ldi	r25, 0xFF	; 255
     dee:	13 96       	adiw	r26, 0x03	; 3
     df0:	9c 93       	st	X, r25
     df2:	8e 93       	st	-X, r24
     df4:	12 97       	sbiw	r26, 0x02	; 2
     df6:	9a 01       	movw	r18, r20
     df8:	ab 01       	movw	r20, r22
     dfa:	67 e0       	ldi	r22, 0x07	; 7
     dfc:	22 0f       	add	r18, r18
     dfe:	33 1f       	adc	r19, r19
     e00:	44 1f       	adc	r20, r20
     e02:	55 1f       	adc	r21, r21
     e04:	6a 95       	dec	r22
     e06:	d1 f7       	brne	.-12     	; 0xdfc <__unpack_f+0x54>
     e08:	83 e0       	ldi	r24, 0x03	; 3
     e0a:	8c 93       	st	X, r24
     e0c:	0d c0       	rjmp	.+26     	; 0xe28 <__unpack_f+0x80>
     e0e:	22 0f       	add	r18, r18
     e10:	33 1f       	adc	r19, r19
     e12:	44 1f       	adc	r20, r20
     e14:	55 1f       	adc	r21, r21
     e16:	12 96       	adiw	r26, 0x02	; 2
     e18:	8d 91       	ld	r24, X+
     e1a:	9c 91       	ld	r25, X
     e1c:	13 97       	sbiw	r26, 0x03	; 3
     e1e:	01 97       	sbiw	r24, 0x01	; 1
     e20:	13 96       	adiw	r26, 0x03	; 3
     e22:	9c 93       	st	X, r25
     e24:	8e 93       	st	-X, r24
     e26:	12 97       	sbiw	r26, 0x02	; 2
     e28:	20 30       	cpi	r18, 0x00	; 0
     e2a:	80 e0       	ldi	r24, 0x00	; 0
     e2c:	38 07       	cpc	r19, r24
     e2e:	80 e0       	ldi	r24, 0x00	; 0
     e30:	48 07       	cpc	r20, r24
     e32:	80 e4       	ldi	r24, 0x40	; 64
     e34:	58 07       	cpc	r21, r24
     e36:	58 f3       	brcs	.-42     	; 0xe0e <__unpack_f+0x66>
     e38:	14 96       	adiw	r26, 0x04	; 4
     e3a:	2d 93       	st	X+, r18
     e3c:	3d 93       	st	X+, r19
     e3e:	4d 93       	st	X+, r20
     e40:	5c 93       	st	X, r21
     e42:	17 97       	sbiw	r26, 0x07	; 7
     e44:	08 95       	ret
     e46:	2f 3f       	cpi	r18, 0xFF	; 255
     e48:	31 05       	cpc	r19, r1
     e4a:	79 f4       	brne	.+30     	; 0xe6a <__unpack_f+0xc2>
     e4c:	41 15       	cp	r20, r1
     e4e:	51 05       	cpc	r21, r1
     e50:	61 05       	cpc	r22, r1
     e52:	71 05       	cpc	r23, r1
     e54:	19 f4       	brne	.+6      	; 0xe5c <__unpack_f+0xb4>
     e56:	84 e0       	ldi	r24, 0x04	; 4
     e58:	8c 93       	st	X, r24
     e5a:	08 95       	ret
     e5c:	64 ff       	sbrs	r22, 4
     e5e:	03 c0       	rjmp	.+6      	; 0xe66 <__unpack_f+0xbe>
     e60:	81 e0       	ldi	r24, 0x01	; 1
     e62:	8c 93       	st	X, r24
     e64:	12 c0       	rjmp	.+36     	; 0xe8a <__unpack_f+0xe2>
     e66:	1c 92       	st	X, r1
     e68:	10 c0       	rjmp	.+32     	; 0xe8a <__unpack_f+0xe2>
     e6a:	2f 57       	subi	r18, 0x7F	; 127
     e6c:	30 40       	sbci	r19, 0x00	; 0
     e6e:	13 96       	adiw	r26, 0x03	; 3
     e70:	3c 93       	st	X, r19
     e72:	2e 93       	st	-X, r18
     e74:	12 97       	sbiw	r26, 0x02	; 2
     e76:	83 e0       	ldi	r24, 0x03	; 3
     e78:	8c 93       	st	X, r24
     e7a:	87 e0       	ldi	r24, 0x07	; 7
     e7c:	44 0f       	add	r20, r20
     e7e:	55 1f       	adc	r21, r21
     e80:	66 1f       	adc	r22, r22
     e82:	77 1f       	adc	r23, r23
     e84:	8a 95       	dec	r24
     e86:	d1 f7       	brne	.-12     	; 0xe7c <__unpack_f+0xd4>
     e88:	70 64       	ori	r23, 0x40	; 64
     e8a:	14 96       	adiw	r26, 0x04	; 4
     e8c:	4d 93       	st	X+, r20
     e8e:	5d 93       	st	X+, r21
     e90:	6d 93       	st	X+, r22
     e92:	7c 93       	st	X, r23
     e94:	17 97       	sbiw	r26, 0x07	; 7
     e96:	08 95       	ret

00000e98 <__fpcmp_parts_f>:
     e98:	1f 93       	push	r17
     e9a:	dc 01       	movw	r26, r24
     e9c:	fb 01       	movw	r30, r22
     e9e:	9c 91       	ld	r25, X
     ea0:	92 30       	cpi	r25, 0x02	; 2
     ea2:	08 f4       	brcc	.+2      	; 0xea6 <__fpcmp_parts_f+0xe>
     ea4:	47 c0       	rjmp	.+142    	; 0xf34 <__fpcmp_parts_f+0x9c>
     ea6:	80 81       	ld	r24, Z
     ea8:	82 30       	cpi	r24, 0x02	; 2
     eaa:	08 f4       	brcc	.+2      	; 0xeae <__fpcmp_parts_f+0x16>
     eac:	43 c0       	rjmp	.+134    	; 0xf34 <__fpcmp_parts_f+0x9c>
     eae:	94 30       	cpi	r25, 0x04	; 4
     eb0:	51 f4       	brne	.+20     	; 0xec6 <__fpcmp_parts_f+0x2e>
     eb2:	11 96       	adiw	r26, 0x01	; 1
     eb4:	1c 91       	ld	r17, X
     eb6:	84 30       	cpi	r24, 0x04	; 4
     eb8:	99 f5       	brne	.+102    	; 0xf20 <__fpcmp_parts_f+0x88>
     eba:	81 81       	ldd	r24, Z+1	; 0x01
     ebc:	68 2f       	mov	r22, r24
     ebe:	70 e0       	ldi	r23, 0x00	; 0
     ec0:	61 1b       	sub	r22, r17
     ec2:	71 09       	sbc	r23, r1
     ec4:	3f c0       	rjmp	.+126    	; 0xf44 <__fpcmp_parts_f+0xac>
     ec6:	84 30       	cpi	r24, 0x04	; 4
     ec8:	21 f0       	breq	.+8      	; 0xed2 <__fpcmp_parts_f+0x3a>
     eca:	92 30       	cpi	r25, 0x02	; 2
     ecc:	31 f4       	brne	.+12     	; 0xeda <__fpcmp_parts_f+0x42>
     ece:	82 30       	cpi	r24, 0x02	; 2
     ed0:	b9 f1       	breq	.+110    	; 0xf40 <__fpcmp_parts_f+0xa8>
     ed2:	81 81       	ldd	r24, Z+1	; 0x01
     ed4:	88 23       	and	r24, r24
     ed6:	89 f1       	breq	.+98     	; 0xf3a <__fpcmp_parts_f+0xa2>
     ed8:	2d c0       	rjmp	.+90     	; 0xf34 <__fpcmp_parts_f+0x9c>
     eda:	11 96       	adiw	r26, 0x01	; 1
     edc:	1c 91       	ld	r17, X
     ede:	11 97       	sbiw	r26, 0x01	; 1
     ee0:	82 30       	cpi	r24, 0x02	; 2
     ee2:	f1 f0       	breq	.+60     	; 0xf20 <__fpcmp_parts_f+0x88>
     ee4:	81 81       	ldd	r24, Z+1	; 0x01
     ee6:	18 17       	cp	r17, r24
     ee8:	d9 f4       	brne	.+54     	; 0xf20 <__fpcmp_parts_f+0x88>
     eea:	12 96       	adiw	r26, 0x02	; 2
     eec:	2d 91       	ld	r18, X+
     eee:	3c 91       	ld	r19, X
     ef0:	13 97       	sbiw	r26, 0x03	; 3
     ef2:	82 81       	ldd	r24, Z+2	; 0x02
     ef4:	93 81       	ldd	r25, Z+3	; 0x03
     ef6:	82 17       	cp	r24, r18
     ef8:	93 07       	cpc	r25, r19
     efa:	94 f0       	brlt	.+36     	; 0xf20 <__fpcmp_parts_f+0x88>
     efc:	28 17       	cp	r18, r24
     efe:	39 07       	cpc	r19, r25
     f00:	bc f0       	brlt	.+46     	; 0xf30 <__fpcmp_parts_f+0x98>
     f02:	14 96       	adiw	r26, 0x04	; 4
     f04:	8d 91       	ld	r24, X+
     f06:	9d 91       	ld	r25, X+
     f08:	0d 90       	ld	r0, X+
     f0a:	bc 91       	ld	r27, X
     f0c:	a0 2d       	mov	r26, r0
     f0e:	24 81       	ldd	r18, Z+4	; 0x04
     f10:	35 81       	ldd	r19, Z+5	; 0x05
     f12:	46 81       	ldd	r20, Z+6	; 0x06
     f14:	57 81       	ldd	r21, Z+7	; 0x07
     f16:	28 17       	cp	r18, r24
     f18:	39 07       	cpc	r19, r25
     f1a:	4a 07       	cpc	r20, r26
     f1c:	5b 07       	cpc	r21, r27
     f1e:	18 f4       	brcc	.+6      	; 0xf26 <__fpcmp_parts_f+0x8e>
     f20:	11 23       	and	r17, r17
     f22:	41 f0       	breq	.+16     	; 0xf34 <__fpcmp_parts_f+0x9c>
     f24:	0a c0       	rjmp	.+20     	; 0xf3a <__fpcmp_parts_f+0xa2>
     f26:	82 17       	cp	r24, r18
     f28:	93 07       	cpc	r25, r19
     f2a:	a4 07       	cpc	r26, r20
     f2c:	b5 07       	cpc	r27, r21
     f2e:	40 f4       	brcc	.+16     	; 0xf40 <__fpcmp_parts_f+0xa8>
     f30:	11 23       	and	r17, r17
     f32:	19 f0       	breq	.+6      	; 0xf3a <__fpcmp_parts_f+0xa2>
     f34:	61 e0       	ldi	r22, 0x01	; 1
     f36:	70 e0       	ldi	r23, 0x00	; 0
     f38:	05 c0       	rjmp	.+10     	; 0xf44 <__fpcmp_parts_f+0xac>
     f3a:	6f ef       	ldi	r22, 0xFF	; 255
     f3c:	7f ef       	ldi	r23, 0xFF	; 255
     f3e:	02 c0       	rjmp	.+4      	; 0xf44 <__fpcmp_parts_f+0xac>
     f40:	60 e0       	ldi	r22, 0x00	; 0
     f42:	70 e0       	ldi	r23, 0x00	; 0
     f44:	cb 01       	movw	r24, r22
     f46:	1f 91       	pop	r17
     f48:	08 95       	ret

00000f4a <MCAL_T1_u8T1Init>:
 *      Author: TOP_WORLD
 */
#include "Timer1.h"
void (*Gptr_3)(void)='\0';

u8 MCAL_T1_u8T1Init(u8 LOC_u8Timer1Mode) {
     f4a:	df 93       	push	r29
     f4c:	cf 93       	push	r28
     f4e:	00 d0       	rcall	.+0      	; 0xf50 <MCAL_T1_u8T1Init+0x6>
     f50:	cd b7       	in	r28, 0x3d	; 61
     f52:	de b7       	in	r29, 0x3e	; 62
     f54:	8a 83       	std	Y+2, r24	; 0x02
	u8 LOC_u8ReturnValue = E_NOT_OK;
     f56:	81 e0       	ldi	r24, 0x01	; 1
     f58:	89 83       	std	Y+1, r24	; 0x01
	if (LOC_u8Timer1Mode <= FAST_PWM_OCR1A) {
     f5a:	8a 81       	ldd	r24, Y+2	; 0x02
     f5c:	80 31       	cpi	r24, 0x10	; 16
     f5e:	08 f0       	brcs	.+2      	; 0xf62 <MCAL_T1_u8T1Init+0x18>
     f60:	83 c0       	rjmp	.+262    	; 0x1068 <MCAL_T1_u8T1Init+0x11e>
		if (LOC_u8Timer1Mode == NORMAL_MODE) {
     f62:	8a 81       	ldd	r24, Y+2	; 0x02
     f64:	88 23       	and	r24, r24
     f66:	f1 f4       	brne	.+60     	; 0xfa4 <MCAL_T1_u8T1Init+0x5a>
			CLR_BIT(TCCR1A, Pin0);
     f68:	af e4       	ldi	r26, 0x4F	; 79
     f6a:	b0 e0       	ldi	r27, 0x00	; 0
     f6c:	ef e4       	ldi	r30, 0x4F	; 79
     f6e:	f0 e0       	ldi	r31, 0x00	; 0
     f70:	80 81       	ld	r24, Z
     f72:	8e 7f       	andi	r24, 0xFE	; 254
     f74:	8c 93       	st	X, r24
			CLR_BIT(TCCR1A, Pin1);
     f76:	af e4       	ldi	r26, 0x4F	; 79
     f78:	b0 e0       	ldi	r27, 0x00	; 0
     f7a:	ef e4       	ldi	r30, 0x4F	; 79
     f7c:	f0 e0       	ldi	r31, 0x00	; 0
     f7e:	80 81       	ld	r24, Z
     f80:	8d 7f       	andi	r24, 0xFD	; 253
     f82:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B, Pin3);
     f84:	ae e4       	ldi	r26, 0x4E	; 78
     f86:	b0 e0       	ldi	r27, 0x00	; 0
     f88:	ee e4       	ldi	r30, 0x4E	; 78
     f8a:	f0 e0       	ldi	r31, 0x00	; 0
     f8c:	80 81       	ld	r24, Z
     f8e:	87 7f       	andi	r24, 0xF7	; 247
     f90:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B, Pin4);
     f92:	ae e4       	ldi	r26, 0x4E	; 78
     f94:	b0 e0       	ldi	r27, 0x00	; 0
     f96:	ee e4       	ldi	r30, 0x4E	; 78
     f98:	f0 e0       	ldi	r31, 0x00	; 0
     f9a:	80 81       	ld	r24, Z
     f9c:	8f 7e       	andi	r24, 0xEF	; 239
     f9e:	8c 93       	st	X, r24
			LOC_u8ReturnValue = E_OK;
     fa0:	19 82       	std	Y+1, r1	; 0x01
     fa2:	62 c0       	rjmp	.+196    	; 0x1068 <MCAL_T1_u8T1Init+0x11e>
		}    else if (LOC_u8Timer1Mode == FAST_PWM_10bit) {
     fa4:	8a 81       	ldd	r24, Y+2	; 0x02
     fa6:	87 30       	cpi	r24, 0x07	; 7
     fa8:	f1 f4       	brne	.+60     	; 0xfe6 <MCAL_T1_u8T1Init+0x9c>
			SET_BIT(TCCR1A, Pin0);
     faa:	af e4       	ldi	r26, 0x4F	; 79
     fac:	b0 e0       	ldi	r27, 0x00	; 0
     fae:	ef e4       	ldi	r30, 0x4F	; 79
     fb0:	f0 e0       	ldi	r31, 0x00	; 0
     fb2:	80 81       	ld	r24, Z
     fb4:	81 60       	ori	r24, 0x01	; 1
     fb6:	8c 93       	st	X, r24
			SET_BIT(TCCR1A, Pin1);
     fb8:	af e4       	ldi	r26, 0x4F	; 79
     fba:	b0 e0       	ldi	r27, 0x00	; 0
     fbc:	ef e4       	ldi	r30, 0x4F	; 79
     fbe:	f0 e0       	ldi	r31, 0x00	; 0
     fc0:	80 81       	ld	r24, Z
     fc2:	82 60       	ori	r24, 0x02	; 2
     fc4:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, Pin3);
     fc6:	ae e4       	ldi	r26, 0x4E	; 78
     fc8:	b0 e0       	ldi	r27, 0x00	; 0
     fca:	ee e4       	ldi	r30, 0x4E	; 78
     fcc:	f0 e0       	ldi	r31, 0x00	; 0
     fce:	80 81       	ld	r24, Z
     fd0:	88 60       	ori	r24, 0x08	; 8
     fd2:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B, Pin4);
     fd4:	ae e4       	ldi	r26, 0x4E	; 78
     fd6:	b0 e0       	ldi	r27, 0x00	; 0
     fd8:	ee e4       	ldi	r30, 0x4E	; 78
     fda:	f0 e0       	ldi	r31, 0x00	; 0
     fdc:	80 81       	ld	r24, Z
     fde:	8f 7e       	andi	r24, 0xEF	; 239
     fe0:	8c 93       	st	X, r24
			LOC_u8ReturnValue = E_OK;
     fe2:	19 82       	std	Y+1, r1	; 0x01
     fe4:	41 c0       	rjmp	.+130    	; 0x1068 <MCAL_T1_u8T1Init+0x11e>
		} else if (LOC_u8Timer1Mode == FAST_PWM_ICR1) {
     fe6:	8a 81       	ldd	r24, Y+2	; 0x02
     fe8:	8e 30       	cpi	r24, 0x0E	; 14
     fea:	f1 f4       	brne	.+60     	; 0x1028 <MCAL_T1_u8T1Init+0xde>
			CLR_BIT(TCCR1A, Pin0);
     fec:	af e4       	ldi	r26, 0x4F	; 79
     fee:	b0 e0       	ldi	r27, 0x00	; 0
     ff0:	ef e4       	ldi	r30, 0x4F	; 79
     ff2:	f0 e0       	ldi	r31, 0x00	; 0
     ff4:	80 81       	ld	r24, Z
     ff6:	8e 7f       	andi	r24, 0xFE	; 254
     ff8:	8c 93       	st	X, r24
			SET_BIT(TCCR1A, Pin1);
     ffa:	af e4       	ldi	r26, 0x4F	; 79
     ffc:	b0 e0       	ldi	r27, 0x00	; 0
     ffe:	ef e4       	ldi	r30, 0x4F	; 79
    1000:	f0 e0       	ldi	r31, 0x00	; 0
    1002:	80 81       	ld	r24, Z
    1004:	82 60       	ori	r24, 0x02	; 2
    1006:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, Pin3);
    1008:	ae e4       	ldi	r26, 0x4E	; 78
    100a:	b0 e0       	ldi	r27, 0x00	; 0
    100c:	ee e4       	ldi	r30, 0x4E	; 78
    100e:	f0 e0       	ldi	r31, 0x00	; 0
    1010:	80 81       	ld	r24, Z
    1012:	88 60       	ori	r24, 0x08	; 8
    1014:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, Pin4);
    1016:	ae e4       	ldi	r26, 0x4E	; 78
    1018:	b0 e0       	ldi	r27, 0x00	; 0
    101a:	ee e4       	ldi	r30, 0x4E	; 78
    101c:	f0 e0       	ldi	r31, 0x00	; 0
    101e:	80 81       	ld	r24, Z
    1020:	80 61       	ori	r24, 0x10	; 16
    1022:	8c 93       	st	X, r24
			LOC_u8ReturnValue = E_OK;
    1024:	19 82       	std	Y+1, r1	; 0x01
    1026:	20 c0       	rjmp	.+64     	; 0x1068 <MCAL_T1_u8T1Init+0x11e>
		} else if (LOC_u8Timer1Mode == FAST_PWM_OCR1A) {
    1028:	8a 81       	ldd	r24, Y+2	; 0x02
    102a:	8f 30       	cpi	r24, 0x0F	; 15
    102c:	e9 f4       	brne	.+58     	; 0x1068 <MCAL_T1_u8T1Init+0x11e>
			SET_BIT(TCCR1A, Pin0);
    102e:	af e4       	ldi	r26, 0x4F	; 79
    1030:	b0 e0       	ldi	r27, 0x00	; 0
    1032:	ef e4       	ldi	r30, 0x4F	; 79
    1034:	f0 e0       	ldi	r31, 0x00	; 0
    1036:	80 81       	ld	r24, Z
    1038:	81 60       	ori	r24, 0x01	; 1
    103a:	8c 93       	st	X, r24
			SET_BIT(TCCR1A, Pin1);
    103c:	af e4       	ldi	r26, 0x4F	; 79
    103e:	b0 e0       	ldi	r27, 0x00	; 0
    1040:	ef e4       	ldi	r30, 0x4F	; 79
    1042:	f0 e0       	ldi	r31, 0x00	; 0
    1044:	80 81       	ld	r24, Z
    1046:	82 60       	ori	r24, 0x02	; 2
    1048:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, Pin3);
    104a:	ae e4       	ldi	r26, 0x4E	; 78
    104c:	b0 e0       	ldi	r27, 0x00	; 0
    104e:	ee e4       	ldi	r30, 0x4E	; 78
    1050:	f0 e0       	ldi	r31, 0x00	; 0
    1052:	80 81       	ld	r24, Z
    1054:	88 60       	ori	r24, 0x08	; 8
    1056:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, Pin4);
    1058:	ae e4       	ldi	r26, 0x4E	; 78
    105a:	b0 e0       	ldi	r27, 0x00	; 0
    105c:	ee e4       	ldi	r30, 0x4E	; 78
    105e:	f0 e0       	ldi	r31, 0x00	; 0
    1060:	80 81       	ld	r24, Z
    1062:	80 61       	ori	r24, 0x10	; 16
    1064:	8c 93       	st	X, r24
			LOC_u8ReturnValue = E_OK;
    1066:	19 82       	std	Y+1, r1	; 0x01
			//NOTHING
		}
	} else {
		//NOTHING
	}
	return LOC_u8ReturnValue;
    1068:	89 81       	ldd	r24, Y+1	; 0x01
}
    106a:	0f 90       	pop	r0
    106c:	0f 90       	pop	r0
    106e:	cf 91       	pop	r28
    1070:	df 91       	pop	r29
    1072:	08 95       	ret

00001074 <MCAL_T1_u8T1Prescaler>:
u8 MCAL_T1_u8T1Prescaler(u8 LOC_u8Clock_Selection, f32 *LOC_pf32TickTime) {
    1074:	df 93       	push	r29
    1076:	cf 93       	push	r28
    1078:	00 d0       	rcall	.+0      	; 0x107a <MCAL_T1_u8T1Prescaler+0x6>
    107a:	00 d0       	rcall	.+0      	; 0x107c <MCAL_T1_u8T1Prescaler+0x8>
    107c:	cd b7       	in	r28, 0x3d	; 61
    107e:	de b7       	in	r29, 0x3e	; 62
    1080:	8a 83       	std	Y+2, r24	; 0x02
    1082:	7c 83       	std	Y+4, r23	; 0x04
    1084:	6b 83       	std	Y+3, r22	; 0x03
	u8 LOC_u8ReturnValue = E_NOT_OK;
    1086:	81 e0       	ldi	r24, 0x01	; 1
    1088:	89 83       	std	Y+1, r24	; 0x01
	if (LOC_u8Clock_Selection <= EXTERNAL_RISING_EDGE) {
    108a:	8a 81       	ldd	r24, Y+2	; 0x02
    108c:	88 30       	cpi	r24, 0x08	; 8
    108e:	08 f0       	brcs	.+2      	; 0x1092 <MCAL_T1_u8T1Prescaler+0x1e>
    1090:	6b c0       	rjmp	.+214    	; 0x1168 <MCAL_T1_u8T1Prescaler+0xf4>
		 if (LOC_u8Clock_Selection == PRESCALLING_8) {
    1092:	8a 81       	ldd	r24, Y+2	; 0x02
    1094:	82 30       	cpi	r24, 0x02	; 2
    1096:	09 f5       	brne	.+66     	; 0x10da <MCAL_T1_u8T1Prescaler+0x66>
			CLR_BIT(TCCR1B, Pin0);
    1098:	ae e4       	ldi	r26, 0x4E	; 78
    109a:	b0 e0       	ldi	r27, 0x00	; 0
    109c:	ee e4       	ldi	r30, 0x4E	; 78
    109e:	f0 e0       	ldi	r31, 0x00	; 0
    10a0:	80 81       	ld	r24, Z
    10a2:	8e 7f       	andi	r24, 0xFE	; 254
    10a4:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, Pin1);
    10a6:	ae e4       	ldi	r26, 0x4E	; 78
    10a8:	b0 e0       	ldi	r27, 0x00	; 0
    10aa:	ee e4       	ldi	r30, 0x4E	; 78
    10ac:	f0 e0       	ldi	r31, 0x00	; 0
    10ae:	80 81       	ld	r24, Z
    10b0:	82 60       	ori	r24, 0x02	; 2
    10b2:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B, Pin2);
    10b4:	ae e4       	ldi	r26, 0x4E	; 78
    10b6:	b0 e0       	ldi	r27, 0x00	; 0
    10b8:	ee e4       	ldi	r30, 0x4E	; 78
    10ba:	f0 e0       	ldi	r31, 0x00	; 0
    10bc:	80 81       	ld	r24, Z
    10be:	8b 7f       	andi	r24, 0xFB	; 251
    10c0:	8c 93       	st	X, r24
			*LOC_pf32TickTime = PRESCALLING8 / (f32) CPU_FREQUNCY;
    10c2:	eb 81       	ldd	r30, Y+3	; 0x03
    10c4:	fc 81       	ldd	r31, Y+4	; 0x04
    10c6:	8d eb       	ldi	r24, 0xBD	; 189
    10c8:	97 e3       	ldi	r25, 0x37	; 55
    10ca:	a6 e0       	ldi	r26, 0x06	; 6
    10cc:	b5 e3       	ldi	r27, 0x35	; 53
    10ce:	80 83       	st	Z, r24
    10d0:	91 83       	std	Z+1, r25	; 0x01
    10d2:	a2 83       	std	Z+2, r26	; 0x02
    10d4:	b3 83       	std	Z+3, r27	; 0x03
			LOC_u8ReturnValue = E_OK;
    10d6:	19 82       	std	Y+1, r1	; 0x01
    10d8:	47 c0       	rjmp	.+142    	; 0x1168 <MCAL_T1_u8T1Prescaler+0xf4>
		} else if (LOC_u8Clock_Selection == PRESCALLING_64) {
    10da:	8a 81       	ldd	r24, Y+2	; 0x02
    10dc:	83 30       	cpi	r24, 0x03	; 3
    10de:	09 f5       	brne	.+66     	; 0x1122 <MCAL_T1_u8T1Prescaler+0xae>
			SET_BIT(TCCR1B, Pin0);
    10e0:	ae e4       	ldi	r26, 0x4E	; 78
    10e2:	b0 e0       	ldi	r27, 0x00	; 0
    10e4:	ee e4       	ldi	r30, 0x4E	; 78
    10e6:	f0 e0       	ldi	r31, 0x00	; 0
    10e8:	80 81       	ld	r24, Z
    10ea:	81 60       	ori	r24, 0x01	; 1
    10ec:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, Pin1);
    10ee:	ae e4       	ldi	r26, 0x4E	; 78
    10f0:	b0 e0       	ldi	r27, 0x00	; 0
    10f2:	ee e4       	ldi	r30, 0x4E	; 78
    10f4:	f0 e0       	ldi	r31, 0x00	; 0
    10f6:	80 81       	ld	r24, Z
    10f8:	82 60       	ori	r24, 0x02	; 2
    10fa:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B, Pin2);
    10fc:	ae e4       	ldi	r26, 0x4E	; 78
    10fe:	b0 e0       	ldi	r27, 0x00	; 0
    1100:	ee e4       	ldi	r30, 0x4E	; 78
    1102:	f0 e0       	ldi	r31, 0x00	; 0
    1104:	80 81       	ld	r24, Z
    1106:	8b 7f       	andi	r24, 0xFB	; 251
    1108:	8c 93       	st	X, r24
			*LOC_pf32TickTime = PRESCALLING64 / (f32) CPU_FREQUNCY;
    110a:	eb 81       	ldd	r30, Y+3	; 0x03
    110c:	fc 81       	ldd	r31, Y+4	; 0x04
    110e:	8d eb       	ldi	r24, 0xBD	; 189
    1110:	97 e3       	ldi	r25, 0x37	; 55
    1112:	a6 e8       	ldi	r26, 0x86	; 134
    1114:	b6 e3       	ldi	r27, 0x36	; 54
    1116:	80 83       	st	Z, r24
    1118:	91 83       	std	Z+1, r25	; 0x01
    111a:	a2 83       	std	Z+2, r26	; 0x02
    111c:	b3 83       	std	Z+3, r27	; 0x03
			LOC_u8ReturnValue = E_OK;
    111e:	19 82       	std	Y+1, r1	; 0x01
    1120:	23 c0       	rjmp	.+70     	; 0x1168 <MCAL_T1_u8T1Prescaler+0xf4>
		}  else if (LOC_u8Clock_Selection == PRESCALLING_1024) {
    1122:	8a 81       	ldd	r24, Y+2	; 0x02
    1124:	85 30       	cpi	r24, 0x05	; 5
    1126:	01 f5       	brne	.+64     	; 0x1168 <MCAL_T1_u8T1Prescaler+0xf4>
			SET_BIT(TCCR1B, Pin0);
    1128:	ae e4       	ldi	r26, 0x4E	; 78
    112a:	b0 e0       	ldi	r27, 0x00	; 0
    112c:	ee e4       	ldi	r30, 0x4E	; 78
    112e:	f0 e0       	ldi	r31, 0x00	; 0
    1130:	80 81       	ld	r24, Z
    1132:	81 60       	ori	r24, 0x01	; 1
    1134:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B, Pin1);
    1136:	ae e4       	ldi	r26, 0x4E	; 78
    1138:	b0 e0       	ldi	r27, 0x00	; 0
    113a:	ee e4       	ldi	r30, 0x4E	; 78
    113c:	f0 e0       	ldi	r31, 0x00	; 0
    113e:	80 81       	ld	r24, Z
    1140:	8d 7f       	andi	r24, 0xFD	; 253
    1142:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, Pin2);
    1144:	ae e4       	ldi	r26, 0x4E	; 78
    1146:	b0 e0       	ldi	r27, 0x00	; 0
    1148:	ee e4       	ldi	r30, 0x4E	; 78
    114a:	f0 e0       	ldi	r31, 0x00	; 0
    114c:	80 81       	ld	r24, Z
    114e:	84 60       	ori	r24, 0x04	; 4
    1150:	8c 93       	st	X, r24
			*LOC_pf32TickTime = PRESCALLING1024 / (f32) CPU_FREQUNCY;
    1152:	eb 81       	ldd	r30, Y+3	; 0x03
    1154:	fc 81       	ldd	r31, Y+4	; 0x04
    1156:	8d eb       	ldi	r24, 0xBD	; 189
    1158:	97 e3       	ldi	r25, 0x37	; 55
    115a:	a6 e8       	ldi	r26, 0x86	; 134
    115c:	b8 e3       	ldi	r27, 0x38	; 56
    115e:	80 83       	st	Z, r24
    1160:	91 83       	std	Z+1, r25	; 0x01
    1162:	a2 83       	std	Z+2, r26	; 0x02
    1164:	b3 83       	std	Z+3, r27	; 0x03
			LOC_u8ReturnValue = E_OK;
    1166:	19 82       	std	Y+1, r1	; 0x01
			//NOTHING
		}
	} else {
		//NOTHING
	}
	return LOC_u8ReturnValue;
    1168:	89 81       	ldd	r24, Y+1	; 0x01
}
    116a:	0f 90       	pop	r0
    116c:	0f 90       	pop	r0
    116e:	0f 90       	pop	r0
    1170:	0f 90       	pop	r0
    1172:	cf 91       	pop	r28
    1174:	df 91       	pop	r29
    1176:	08 95       	ret

00001178 <MCAL_T1_u8T1CompareOutputMode>:
//Fast MODE PWM & PHASE CORRECT
u8 MCAL_T1_u8T1CompareOutputMode(u8 LOC_u8OutputMode, u8 LOC_u8Channel) {
    1178:	df 93       	push	r29
    117a:	cf 93       	push	r28
    117c:	00 d0       	rcall	.+0      	; 0x117e <MCAL_T1_u8T1CompareOutputMode+0x6>
    117e:	0f 92       	push	r0
    1180:	cd b7       	in	r28, 0x3d	; 61
    1182:	de b7       	in	r29, 0x3e	; 62
    1184:	8a 83       	std	Y+2, r24	; 0x02
    1186:	6b 83       	std	Y+3, r22	; 0x03
	u8 LOC_u8ReturnValue = E_NOT_OK;
    1188:	81 e0       	ldi	r24, 0x01	; 1
    118a:	89 83       	std	Y+1, r24	; 0x01
	if (LOC_u8OutputMode <= INVERTING_MODE && LOC_u8Channel <= CHENNEL_B) {
    118c:	8a 81       	ldd	r24, Y+2	; 0x02
    118e:	82 30       	cpi	r24, 0x02	; 2
    1190:	08 f0       	brcs	.+2      	; 0x1194 <MCAL_T1_u8T1CompareOutputMode+0x1c>
    1192:	72 c0       	rjmp	.+228    	; 0x1278 <MCAL_T1_u8T1CompareOutputMode+0x100>
    1194:	8b 81       	ldd	r24, Y+3	; 0x03
    1196:	82 30       	cpi	r24, 0x02	; 2
    1198:	08 f0       	brcs	.+2      	; 0x119c <MCAL_T1_u8T1CompareOutputMode+0x24>
    119a:	6e c0       	rjmp	.+220    	; 0x1278 <MCAL_T1_u8T1CompareOutputMode+0x100>
		if (LOC_u8Channel == CHENNEL_A) {
    119c:	8b 81       	ldd	r24, Y+3	; 0x03
    119e:	88 23       	and	r24, r24
    11a0:	a9 f5       	brne	.+106    	; 0x120c <MCAL_T1_u8T1CompareOutputMode+0x94>
			if (LOC_u8OutputMode == NON_INVERTING_MODE) {
    11a2:	8a 81       	ldd	r24, Y+2	; 0x02
    11a4:	88 23       	and	r24, r24
    11a6:	b9 f4       	brne	.+46     	; 0x11d6 <MCAL_T1_u8T1CompareOutputMode+0x5e>
				CLR_BIT(TCCR1A, Pin6);
    11a8:	af e4       	ldi	r26, 0x4F	; 79
    11aa:	b0 e0       	ldi	r27, 0x00	; 0
    11ac:	ef e4       	ldi	r30, 0x4F	; 79
    11ae:	f0 e0       	ldi	r31, 0x00	; 0
    11b0:	80 81       	ld	r24, Z
    11b2:	8f 7b       	andi	r24, 0xBF	; 191
    11b4:	8c 93       	st	X, r24
				SET_BIT(TCCR1A, Pin7);
    11b6:	af e4       	ldi	r26, 0x4F	; 79
    11b8:	b0 e0       	ldi	r27, 0x00	; 0
    11ba:	ef e4       	ldi	r30, 0x4F	; 79
    11bc:	f0 e0       	ldi	r31, 0x00	; 0
    11be:	80 81       	ld	r24, Z
    11c0:	80 68       	ori	r24, 0x80	; 128
    11c2:	8c 93       	st	X, r24
				SET_BIT(DDRD, Pin5);
    11c4:	a1 e3       	ldi	r26, 0x31	; 49
    11c6:	b0 e0       	ldi	r27, 0x00	; 0
    11c8:	e1 e3       	ldi	r30, 0x31	; 49
    11ca:	f0 e0       	ldi	r31, 0x00	; 0
    11cc:	80 81       	ld	r24, Z
    11ce:	80 62       	ori	r24, 0x20	; 32
    11d0:	8c 93       	st	X, r24
				LOC_u8ReturnValue = E_OK;
    11d2:	19 82       	std	Y+1, r1	; 0x01
    11d4:	51 c0       	rjmp	.+162    	; 0x1278 <MCAL_T1_u8T1CompareOutputMode+0x100>
			} else if (LOC_u8OutputMode == INVERTING_MODE) {
    11d6:	8a 81       	ldd	r24, Y+2	; 0x02
    11d8:	81 30       	cpi	r24, 0x01	; 1
    11da:	09 f0       	breq	.+2      	; 0x11de <MCAL_T1_u8T1CompareOutputMode+0x66>
    11dc:	4d c0       	rjmp	.+154    	; 0x1278 <MCAL_T1_u8T1CompareOutputMode+0x100>
				SET_BIT(TCCR1A, Pin6);
    11de:	af e4       	ldi	r26, 0x4F	; 79
    11e0:	b0 e0       	ldi	r27, 0x00	; 0
    11e2:	ef e4       	ldi	r30, 0x4F	; 79
    11e4:	f0 e0       	ldi	r31, 0x00	; 0
    11e6:	80 81       	ld	r24, Z
    11e8:	80 64       	ori	r24, 0x40	; 64
    11ea:	8c 93       	st	X, r24
				SET_BIT(TCCR1A, Pin7);
    11ec:	af e4       	ldi	r26, 0x4F	; 79
    11ee:	b0 e0       	ldi	r27, 0x00	; 0
    11f0:	ef e4       	ldi	r30, 0x4F	; 79
    11f2:	f0 e0       	ldi	r31, 0x00	; 0
    11f4:	80 81       	ld	r24, Z
    11f6:	80 68       	ori	r24, 0x80	; 128
    11f8:	8c 93       	st	X, r24
				SET_BIT(DDRD, Pin5);
    11fa:	a1 e3       	ldi	r26, 0x31	; 49
    11fc:	b0 e0       	ldi	r27, 0x00	; 0
    11fe:	e1 e3       	ldi	r30, 0x31	; 49
    1200:	f0 e0       	ldi	r31, 0x00	; 0
    1202:	80 81       	ld	r24, Z
    1204:	80 62       	ori	r24, 0x20	; 32
    1206:	8c 93       	st	X, r24
				LOC_u8ReturnValue = E_OK;
    1208:	19 82       	std	Y+1, r1	; 0x01
    120a:	36 c0       	rjmp	.+108    	; 0x1278 <MCAL_T1_u8T1CompareOutputMode+0x100>
			} else {
				//NOTHING
			}
		} else if (LOC_u8Channel == CHENNEL_B) {
    120c:	8b 81       	ldd	r24, Y+3	; 0x03
    120e:	81 30       	cpi	r24, 0x01	; 1
    1210:	99 f5       	brne	.+102    	; 0x1278 <MCAL_T1_u8T1CompareOutputMode+0x100>
			if (LOC_u8OutputMode == NON_INVERTING_MODE) {
    1212:	8a 81       	ldd	r24, Y+2	; 0x02
    1214:	88 23       	and	r24, r24
    1216:	b9 f4       	brne	.+46     	; 0x1246 <MCAL_T1_u8T1CompareOutputMode+0xce>
				CLR_BIT(TCCR1A, Pin4);
    1218:	af e4       	ldi	r26, 0x4F	; 79
    121a:	b0 e0       	ldi	r27, 0x00	; 0
    121c:	ef e4       	ldi	r30, 0x4F	; 79
    121e:	f0 e0       	ldi	r31, 0x00	; 0
    1220:	80 81       	ld	r24, Z
    1222:	8f 7e       	andi	r24, 0xEF	; 239
    1224:	8c 93       	st	X, r24
				SET_BIT(TCCR1A, Pin5);
    1226:	af e4       	ldi	r26, 0x4F	; 79
    1228:	b0 e0       	ldi	r27, 0x00	; 0
    122a:	ef e4       	ldi	r30, 0x4F	; 79
    122c:	f0 e0       	ldi	r31, 0x00	; 0
    122e:	80 81       	ld	r24, Z
    1230:	80 62       	ori	r24, 0x20	; 32
    1232:	8c 93       	st	X, r24
				SET_BIT(DDRD, Pin4);
    1234:	a1 e3       	ldi	r26, 0x31	; 49
    1236:	b0 e0       	ldi	r27, 0x00	; 0
    1238:	e1 e3       	ldi	r30, 0x31	; 49
    123a:	f0 e0       	ldi	r31, 0x00	; 0
    123c:	80 81       	ld	r24, Z
    123e:	80 61       	ori	r24, 0x10	; 16
    1240:	8c 93       	st	X, r24
				LOC_u8ReturnValue = E_OK;
    1242:	19 82       	std	Y+1, r1	; 0x01
    1244:	19 c0       	rjmp	.+50     	; 0x1278 <MCAL_T1_u8T1CompareOutputMode+0x100>
			} else if (LOC_u8OutputMode == INVERTING_MODE) {
    1246:	8a 81       	ldd	r24, Y+2	; 0x02
    1248:	81 30       	cpi	r24, 0x01	; 1
    124a:	b1 f4       	brne	.+44     	; 0x1278 <MCAL_T1_u8T1CompareOutputMode+0x100>
				SET_BIT(TCCR1A, Pin4);
    124c:	af e4       	ldi	r26, 0x4F	; 79
    124e:	b0 e0       	ldi	r27, 0x00	; 0
    1250:	ef e4       	ldi	r30, 0x4F	; 79
    1252:	f0 e0       	ldi	r31, 0x00	; 0
    1254:	80 81       	ld	r24, Z
    1256:	80 61       	ori	r24, 0x10	; 16
    1258:	8c 93       	st	X, r24
				SET_BIT(TCCR1A, Pin5);
    125a:	af e4       	ldi	r26, 0x4F	; 79
    125c:	b0 e0       	ldi	r27, 0x00	; 0
    125e:	ef e4       	ldi	r30, 0x4F	; 79
    1260:	f0 e0       	ldi	r31, 0x00	; 0
    1262:	80 81       	ld	r24, Z
    1264:	80 62       	ori	r24, 0x20	; 32
    1266:	8c 93       	st	X, r24
				SET_BIT(DDRD, Pin4);
    1268:	a1 e3       	ldi	r26, 0x31	; 49
    126a:	b0 e0       	ldi	r27, 0x00	; 0
    126c:	e1 e3       	ldi	r30, 0x31	; 49
    126e:	f0 e0       	ldi	r31, 0x00	; 0
    1270:	80 81       	ld	r24, Z
    1272:	80 61       	ori	r24, 0x10	; 16
    1274:	8c 93       	st	X, r24
				LOC_u8ReturnValue = E_OK;
    1276:	19 82       	std	Y+1, r1	; 0x01
			//NOTHING
		}
	} else {
		//NOTHING
	}
	return LOC_u8ReturnValue;
    1278:	89 81       	ldd	r24, Y+1	; 0x01
}
    127a:	0f 90       	pop	r0
    127c:	0f 90       	pop	r0
    127e:	0f 90       	pop	r0
    1280:	cf 91       	pop	r28
    1282:	df 91       	pop	r29
    1284:	08 95       	ret

00001286 <MCAL_T1_voidSetTCNT1Value>:

//Set TCNT1 Value
void MCAL_T1_voidSetTCNT1Value(u16 LOC_u16Value) {
    1286:	df 93       	push	r29
    1288:	cf 93       	push	r28
    128a:	00 d0       	rcall	.+0      	; 0x128c <MCAL_T1_voidSetTCNT1Value+0x6>
    128c:	cd b7       	in	r28, 0x3d	; 61
    128e:	de b7       	in	r29, 0x3e	; 62
    1290:	9a 83       	std	Y+2, r25	; 0x02
    1292:	89 83       	std	Y+1, r24	; 0x01
	if (LOC_u16Value <= SIXTEEN_BIT_MAX_VALUE) {
		TCNT1 = LOC_u16Value;
    1294:	ec e4       	ldi	r30, 0x4C	; 76
    1296:	f0 e0       	ldi	r31, 0x00	; 0
    1298:	89 81       	ldd	r24, Y+1	; 0x01
    129a:	9a 81       	ldd	r25, Y+2	; 0x02
    129c:	91 83       	std	Z+1, r25	; 0x01
    129e:	80 83       	st	Z, r24
	} else {
		//NOTHING
	}
}
    12a0:	0f 90       	pop	r0
    12a2:	0f 90       	pop	r0
    12a4:	cf 91       	pop	r28
    12a6:	df 91       	pop	r29
    12a8:	08 95       	ret

000012aa <MCAL_T1_voidGetTCNT1Value>:
//GIT TCNT1
void MCAL_T1_voidGetTCNT1Value(u16 *LOC_pu16Value) {
    12aa:	df 93       	push	r29
    12ac:	cf 93       	push	r28
    12ae:	00 d0       	rcall	.+0      	; 0x12b0 <MCAL_T1_voidGetTCNT1Value+0x6>
    12b0:	cd b7       	in	r28, 0x3d	; 61
    12b2:	de b7       	in	r29, 0x3e	; 62
    12b4:	9a 83       	std	Y+2, r25	; 0x02
    12b6:	89 83       	std	Y+1, r24	; 0x01
	if (LOC_pu16Value) {
    12b8:	89 81       	ldd	r24, Y+1	; 0x01
    12ba:	9a 81       	ldd	r25, Y+2	; 0x02
    12bc:	00 97       	sbiw	r24, 0x00	; 0
    12be:	41 f0       	breq	.+16     	; 0x12d0 <MCAL_T1_voidGetTCNT1Value+0x26>
		*LOC_pu16Value = TCNT1;
    12c0:	ec e4       	ldi	r30, 0x4C	; 76
    12c2:	f0 e0       	ldi	r31, 0x00	; 0
    12c4:	80 81       	ld	r24, Z
    12c6:	91 81       	ldd	r25, Z+1	; 0x01
    12c8:	e9 81       	ldd	r30, Y+1	; 0x01
    12ca:	fa 81       	ldd	r31, Y+2	; 0x02
    12cc:	91 83       	std	Z+1, r25	; 0x01
    12ce:	80 83       	st	Z, r24
	}
}
    12d0:	0f 90       	pop	r0
    12d2:	0f 90       	pop	r0
    12d4:	cf 91       	pop	r28
    12d6:	df 91       	pop	r29
    12d8:	08 95       	ret

000012da <MCAL_T1_voidSetOCR1AValue>:
//Set OCR1A
void MCAL_T1_voidSetOCR1AValue(u16 LOC_u16Value) {
    12da:	df 93       	push	r29
    12dc:	cf 93       	push	r28
    12de:	00 d0       	rcall	.+0      	; 0x12e0 <MCAL_T1_voidSetOCR1AValue+0x6>
    12e0:	cd b7       	in	r28, 0x3d	; 61
    12e2:	de b7       	in	r29, 0x3e	; 62
    12e4:	9a 83       	std	Y+2, r25	; 0x02
    12e6:	89 83       	std	Y+1, r24	; 0x01
	if (LOC_u16Value <= SIXTEEN_BIT_MAX_VALUE) {
		OCR1A = LOC_u16Value;
    12e8:	ea e4       	ldi	r30, 0x4A	; 74
    12ea:	f0 e0       	ldi	r31, 0x00	; 0
    12ec:	89 81       	ldd	r24, Y+1	; 0x01
    12ee:	9a 81       	ldd	r25, Y+2	; 0x02
    12f0:	91 83       	std	Z+1, r25	; 0x01
    12f2:	80 83       	st	Z, r24
	} else {
		//NOTHING
	}
}
    12f4:	0f 90       	pop	r0
    12f6:	0f 90       	pop	r0
    12f8:	cf 91       	pop	r28
    12fa:	df 91       	pop	r29
    12fc:	08 95       	ret

000012fe <MCAL_T1_voidSetOCR1BValue>:
//SET OCR1B
void MCAL_T1_voidSetOCR1BValue(u16 LOC_u16Value) {
    12fe:	df 93       	push	r29
    1300:	cf 93       	push	r28
    1302:	00 d0       	rcall	.+0      	; 0x1304 <MCAL_T1_voidSetOCR1BValue+0x6>
    1304:	cd b7       	in	r28, 0x3d	; 61
    1306:	de b7       	in	r29, 0x3e	; 62
    1308:	9a 83       	std	Y+2, r25	; 0x02
    130a:	89 83       	std	Y+1, r24	; 0x01
	if (LOC_u16Value <= SIXTEEN_BIT_MAX_VALUE) {
		OCR1B = LOC_u16Value;
    130c:	e8 e4       	ldi	r30, 0x48	; 72
    130e:	f0 e0       	ldi	r31, 0x00	; 0
    1310:	89 81       	ldd	r24, Y+1	; 0x01
    1312:	9a 81       	ldd	r25, Y+2	; 0x02
    1314:	91 83       	std	Z+1, r25	; 0x01
    1316:	80 83       	st	Z, r24
	} else {
		//NOTHING
	}
}
    1318:	0f 90       	pop	r0
    131a:	0f 90       	pop	r0
    131c:	cf 91       	pop	r28
    131e:	df 91       	pop	r29
    1320:	08 95       	ret

00001322 <MCAL_T1_voidSetICR1Value>:
//SET ICR1
void MCAL_T1_voidSetICR1Value(u16 LOC_u16Value) {
    1322:	df 93       	push	r29
    1324:	cf 93       	push	r28
    1326:	00 d0       	rcall	.+0      	; 0x1328 <MCAL_T1_voidSetICR1Value+0x6>
    1328:	cd b7       	in	r28, 0x3d	; 61
    132a:	de b7       	in	r29, 0x3e	; 62
    132c:	9a 83       	std	Y+2, r25	; 0x02
    132e:	89 83       	std	Y+1, r24	; 0x01
	if (LOC_u16Value <= SIXTEEN_BIT_MAX_VALUE) {
		ICR1 = LOC_u16Value;
    1330:	e6 e4       	ldi	r30, 0x46	; 70
    1332:	f0 e0       	ldi	r31, 0x00	; 0
    1334:	89 81       	ldd	r24, Y+1	; 0x01
    1336:	9a 81       	ldd	r25, Y+2	; 0x02
    1338:	91 83       	std	Z+1, r25	; 0x01
    133a:	80 83       	st	Z, r24
	} else {
		//NOTHING
	}
}
    133c:	0f 90       	pop	r0
    133e:	0f 90       	pop	r0
    1340:	cf 91       	pop	r28
    1342:	df 91       	pop	r29
    1344:	08 95       	ret

00001346 <MCAL_T1_voidGetICR1Value>:
//Get ICR1
void MCAL_T1_voidGetICR1Value(u16 *LOC_pu16Value) {
    1346:	df 93       	push	r29
    1348:	cf 93       	push	r28
    134a:	00 d0       	rcall	.+0      	; 0x134c <MCAL_T1_voidGetICR1Value+0x6>
    134c:	cd b7       	in	r28, 0x3d	; 61
    134e:	de b7       	in	r29, 0x3e	; 62
    1350:	9a 83       	std	Y+2, r25	; 0x02
    1352:	89 83       	std	Y+1, r24	; 0x01
	if (LOC_pu16Value) {
    1354:	89 81       	ldd	r24, Y+1	; 0x01
    1356:	9a 81       	ldd	r25, Y+2	; 0x02
    1358:	00 97       	sbiw	r24, 0x00	; 0
    135a:	41 f0       	breq	.+16     	; 0x136c <MCAL_T1_voidGetICR1Value+0x26>
		*LOC_pu16Value = ICR1;
    135c:	e6 e4       	ldi	r30, 0x46	; 70
    135e:	f0 e0       	ldi	r31, 0x00	; 0
    1360:	80 81       	ld	r24, Z
    1362:	91 81       	ldd	r25, Z+1	; 0x01
    1364:	e9 81       	ldd	r30, Y+1	; 0x01
    1366:	fa 81       	ldd	r31, Y+2	; 0x02
    1368:	91 83       	std	Z+1, r25	; 0x01
    136a:	80 83       	st	Z, r24
	}
}
    136c:	0f 90       	pop	r0
    136e:	0f 90       	pop	r0
    1370:	cf 91       	pop	r28
    1372:	df 91       	pop	r29
    1374:	08 95       	ret

00001376 <MCAL_T1_voidTCNT1_GIEEnable>:
//TCNT1 PIE
void MCAL_T1_voidTCNT1_GIEEnable(void) {
    1376:	df 93       	push	r29
    1378:	cf 93       	push	r28
    137a:	cd b7       	in	r28, 0x3d	; 61
    137c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG, Pin7);
    137e:	af e5       	ldi	r26, 0x5F	; 95
    1380:	b0 e0       	ldi	r27, 0x00	; 0
    1382:	ef e5       	ldi	r30, 0x5F	; 95
    1384:	f0 e0       	ldi	r31, 0x00	; 0
    1386:	80 81       	ld	r24, Z
    1388:	80 68       	ori	r24, 0x80	; 128
    138a:	8c 93       	st	X, r24
	SET_BIT(TIMSK, Pin2);
    138c:	a9 e5       	ldi	r26, 0x59	; 89
    138e:	b0 e0       	ldi	r27, 0x00	; 0
    1390:	e9 e5       	ldi	r30, 0x59	; 89
    1392:	f0 e0       	ldi	r31, 0x00	; 0
    1394:	80 81       	ld	r24, Z
    1396:	84 60       	ori	r24, 0x04	; 4
    1398:	8c 93       	st	X, r24
}
    139a:	cf 91       	pop	r28
    139c:	df 91       	pop	r29
    139e:	08 95       	ret

000013a0 <MCAL_T1_voidTCNT1_GIEDisable>:
void MCAL_T1_voidTCNT1_GIEDisable(void) {
    13a0:	df 93       	push	r29
    13a2:	cf 93       	push	r28
    13a4:	cd b7       	in	r28, 0x3d	; 61
    13a6:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK, Pin2);
    13a8:	a9 e5       	ldi	r26, 0x59	; 89
    13aa:	b0 e0       	ldi	r27, 0x00	; 0
    13ac:	e9 e5       	ldi	r30, 0x59	; 89
    13ae:	f0 e0       	ldi	r31, 0x00	; 0
    13b0:	80 81       	ld	r24, Z
    13b2:	8b 7f       	andi	r24, 0xFB	; 251
    13b4:	8c 93       	st	X, r24
}
    13b6:	cf 91       	pop	r28
    13b8:	df 91       	pop	r29
    13ba:	08 95       	ret

000013bc <MCAL_T1_voidOCR1B_GIEEnable>:
//OCR1B PIE
void MCAL_T1_voidOCR1B_GIEEnable(void) {
    13bc:	df 93       	push	r29
    13be:	cf 93       	push	r28
    13c0:	cd b7       	in	r28, 0x3d	; 61
    13c2:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG, Pin7);
    13c4:	af e5       	ldi	r26, 0x5F	; 95
    13c6:	b0 e0       	ldi	r27, 0x00	; 0
    13c8:	ef e5       	ldi	r30, 0x5F	; 95
    13ca:	f0 e0       	ldi	r31, 0x00	; 0
    13cc:	80 81       	ld	r24, Z
    13ce:	80 68       	ori	r24, 0x80	; 128
    13d0:	8c 93       	st	X, r24
	SET_BIT(TIMSK, Pin3);
    13d2:	a9 e5       	ldi	r26, 0x59	; 89
    13d4:	b0 e0       	ldi	r27, 0x00	; 0
    13d6:	e9 e5       	ldi	r30, 0x59	; 89
    13d8:	f0 e0       	ldi	r31, 0x00	; 0
    13da:	80 81       	ld	r24, Z
    13dc:	88 60       	ori	r24, 0x08	; 8
    13de:	8c 93       	st	X, r24
}
    13e0:	cf 91       	pop	r28
    13e2:	df 91       	pop	r29
    13e4:	08 95       	ret

000013e6 <MCAL_T1_voidOCR1B_GIEDisable>:
void MCAL_T1_voidOCR1B_GIEDisable(void) {
    13e6:	df 93       	push	r29
    13e8:	cf 93       	push	r28
    13ea:	cd b7       	in	r28, 0x3d	; 61
    13ec:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK, Pin3);
    13ee:	a9 e5       	ldi	r26, 0x59	; 89
    13f0:	b0 e0       	ldi	r27, 0x00	; 0
    13f2:	e9 e5       	ldi	r30, 0x59	; 89
    13f4:	f0 e0       	ldi	r31, 0x00	; 0
    13f6:	80 81       	ld	r24, Z
    13f8:	87 7f       	andi	r24, 0xF7	; 247
    13fa:	8c 93       	st	X, r24
}
    13fc:	cf 91       	pop	r28
    13fe:	df 91       	pop	r29
    1400:	08 95       	ret

00001402 <MCAL_T1_voidOCR1A_GIEEnable>:
//OCR1A PIE
void MCAL_T1_voidOCR1A_GIEEnable(void) {
    1402:	df 93       	push	r29
    1404:	cf 93       	push	r28
    1406:	cd b7       	in	r28, 0x3d	; 61
    1408:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG, Pin7);
    140a:	af e5       	ldi	r26, 0x5F	; 95
    140c:	b0 e0       	ldi	r27, 0x00	; 0
    140e:	ef e5       	ldi	r30, 0x5F	; 95
    1410:	f0 e0       	ldi	r31, 0x00	; 0
    1412:	80 81       	ld	r24, Z
    1414:	80 68       	ori	r24, 0x80	; 128
    1416:	8c 93       	st	X, r24
	SET_BIT(TIMSK, Pin4);
    1418:	a9 e5       	ldi	r26, 0x59	; 89
    141a:	b0 e0       	ldi	r27, 0x00	; 0
    141c:	e9 e5       	ldi	r30, 0x59	; 89
    141e:	f0 e0       	ldi	r31, 0x00	; 0
    1420:	80 81       	ld	r24, Z
    1422:	80 61       	ori	r24, 0x10	; 16
    1424:	8c 93       	st	X, r24
}
    1426:	cf 91       	pop	r28
    1428:	df 91       	pop	r29
    142a:	08 95       	ret

0000142c <MCAL_T1_voidOCR1A_GIEDisable>:
void MCAL_T1_voidOCR1A_GIEDisable(void) {
    142c:	df 93       	push	r29
    142e:	cf 93       	push	r28
    1430:	cd b7       	in	r28, 0x3d	; 61
    1432:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK, Pin4);
    1434:	a9 e5       	ldi	r26, 0x59	; 89
    1436:	b0 e0       	ldi	r27, 0x00	; 0
    1438:	e9 e5       	ldi	r30, 0x59	; 89
    143a:	f0 e0       	ldi	r31, 0x00	; 0
    143c:	80 81       	ld	r24, Z
    143e:	8f 7e       	andi	r24, 0xEF	; 239
    1440:	8c 93       	st	X, r24
}
    1442:	cf 91       	pop	r28
    1444:	df 91       	pop	r29
    1446:	08 95       	ret

00001448 <MCAL_T1_voidICR1_GIEEnable>:
//ICR1 PIE
void MCAL_T1_voidICR1_GIEEnable(void) {
    1448:	df 93       	push	r29
    144a:	cf 93       	push	r28
    144c:	cd b7       	in	r28, 0x3d	; 61
    144e:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG, Pin7);
    1450:	af e5       	ldi	r26, 0x5F	; 95
    1452:	b0 e0       	ldi	r27, 0x00	; 0
    1454:	ef e5       	ldi	r30, 0x5F	; 95
    1456:	f0 e0       	ldi	r31, 0x00	; 0
    1458:	80 81       	ld	r24, Z
    145a:	80 68       	ori	r24, 0x80	; 128
    145c:	8c 93       	st	X, r24
	SET_BIT(TIMSK, Pin5);
    145e:	a9 e5       	ldi	r26, 0x59	; 89
    1460:	b0 e0       	ldi	r27, 0x00	; 0
    1462:	e9 e5       	ldi	r30, 0x59	; 89
    1464:	f0 e0       	ldi	r31, 0x00	; 0
    1466:	80 81       	ld	r24, Z
    1468:	80 62       	ori	r24, 0x20	; 32
    146a:	8c 93       	st	X, r24
}
    146c:	cf 91       	pop	r28
    146e:	df 91       	pop	r29
    1470:	08 95       	ret

00001472 <MCAL_T1_voidICR1_GIEDisable>:
void MCAL_T1_voidICR1_GIEDisable(void) {
    1472:	df 93       	push	r29
    1474:	cf 93       	push	r28
    1476:	cd b7       	in	r28, 0x3d	; 61
    1478:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK, Pin5);
    147a:	a9 e5       	ldi	r26, 0x59	; 89
    147c:	b0 e0       	ldi	r27, 0x00	; 0
    147e:	e9 e5       	ldi	r30, 0x59	; 89
    1480:	f0 e0       	ldi	r31, 0x00	; 0
    1482:	80 81       	ld	r24, Z
    1484:	8f 7d       	andi	r24, 0xDF	; 223
    1486:	8c 93       	st	X, r24
}
    1488:	cf 91       	pop	r28
    148a:	df 91       	pop	r29
    148c:	08 95       	ret

0000148e <MCAL_T1_voidSetTriggerEdge>:



//ICU EDGE
void MCAL_T1_voidSetTriggerEdge(u8 LOC_u8TriggerEdge) {
    148e:	df 93       	push	r29
    1490:	cf 93       	push	r28
    1492:	0f 92       	push	r0
    1494:	cd b7       	in	r28, 0x3d	; 61
    1496:	de b7       	in	r29, 0x3e	; 62
    1498:	89 83       	std	Y+1, r24	; 0x01
	if (LOC_u8TriggerEdge <= RISING_EDGE) {
    149a:	89 81       	ldd	r24, Y+1	; 0x01
    149c:	82 30       	cpi	r24, 0x02	; 2
    149e:	a8 f4       	brcc	.+42     	; 0x14ca <MCAL_T1_voidSetTriggerEdge+0x3c>
		if (LOC_u8TriggerEdge == RISING_EDGE) {
    14a0:	89 81       	ldd	r24, Y+1	; 0x01
    14a2:	81 30       	cpi	r24, 0x01	; 1
    14a4:	41 f4       	brne	.+16     	; 0x14b6 <MCAL_T1_voidSetTriggerEdge+0x28>
			SET_BIT(TCCR1B, Pin6);
    14a6:	ae e4       	ldi	r26, 0x4E	; 78
    14a8:	b0 e0       	ldi	r27, 0x00	; 0
    14aa:	ee e4       	ldi	r30, 0x4E	; 78
    14ac:	f0 e0       	ldi	r31, 0x00	; 0
    14ae:	80 81       	ld	r24, Z
    14b0:	80 64       	ori	r24, 0x40	; 64
    14b2:	8c 93       	st	X, r24
    14b4:	0a c0       	rjmp	.+20     	; 0x14ca <MCAL_T1_voidSetTriggerEdge+0x3c>
		} else if (LOC_u8TriggerEdge == FALLING_EDGE) {
    14b6:	89 81       	ldd	r24, Y+1	; 0x01
    14b8:	88 23       	and	r24, r24
    14ba:	39 f4       	brne	.+14     	; 0x14ca <MCAL_T1_voidSetTriggerEdge+0x3c>
			CLR_BIT(TCCR1B, Pin6);
    14bc:	ae e4       	ldi	r26, 0x4E	; 78
    14be:	b0 e0       	ldi	r27, 0x00	; 0
    14c0:	ee e4       	ldi	r30, 0x4E	; 78
    14c2:	f0 e0       	ldi	r31, 0x00	; 0
    14c4:	80 81       	ld	r24, Z
    14c6:	8f 7b       	andi	r24, 0xBF	; 191
    14c8:	8c 93       	st	X, r24
			//NOTHING
		}
	} else {
		//NOTHING
	}
}
    14ca:	0f 90       	pop	r0
    14cc:	cf 91       	pop	r28
    14ce:	df 91       	pop	r29
    14d0:	08 95       	ret

000014d2 <MCAL_T1_u8T1_Callback>:
u8 MCAL_T1_u8T1_Callback(void (*ptr)(void)) {
    14d2:	df 93       	push	r29
    14d4:	cf 93       	push	r28
    14d6:	00 d0       	rcall	.+0      	; 0x14d8 <MCAL_T1_u8T1_Callback+0x6>
    14d8:	0f 92       	push	r0
    14da:	cd b7       	in	r28, 0x3d	; 61
    14dc:	de b7       	in	r29, 0x3e	; 62
    14de:	9b 83       	std	Y+3, r25	; 0x03
    14e0:	8a 83       	std	Y+2, r24	; 0x02
	u8 LOC_u8ReturnValue = E_NOT_OK;
    14e2:	81 e0       	ldi	r24, 0x01	; 1
    14e4:	89 83       	std	Y+1, r24	; 0x01
	if (ptr != '\0') {
    14e6:	8a 81       	ldd	r24, Y+2	; 0x02
    14e8:	9b 81       	ldd	r25, Y+3	; 0x03
    14ea:	00 97       	sbiw	r24, 0x00	; 0
    14ec:	39 f0       	breq	.+14     	; 0x14fc <MCAL_T1_u8T1_Callback+0x2a>
		Gptr_3 = ptr;
    14ee:	8a 81       	ldd	r24, Y+2	; 0x02
    14f0:	9b 81       	ldd	r25, Y+3	; 0x03
    14f2:	90 93 6b 01 	sts	0x016B, r25
    14f6:	80 93 6a 01 	sts	0x016A, r24
		LOC_u8ReturnValue = E_OK;
    14fa:	19 82       	std	Y+1, r1	; 0x01
	}
	return LOC_u8ReturnValue;
    14fc:	89 81       	ldd	r24, Y+1	; 0x01
}
    14fe:	0f 90       	pop	r0
    1500:	0f 90       	pop	r0
    1502:	0f 90       	pop	r0
    1504:	cf 91       	pop	r28
    1506:	df 91       	pop	r29
    1508:	08 95       	ret

0000150a <__vector_9>:

ISR(TIMER1_OVF_vect) {
    150a:	1f 92       	push	r1
    150c:	0f 92       	push	r0
    150e:	0f b6       	in	r0, 0x3f	; 63
    1510:	0f 92       	push	r0
    1512:	11 24       	eor	r1, r1
    1514:	2f 93       	push	r18
    1516:	3f 93       	push	r19
    1518:	4f 93       	push	r20
    151a:	5f 93       	push	r21
    151c:	6f 93       	push	r22
    151e:	7f 93       	push	r23
    1520:	8f 93       	push	r24
    1522:	9f 93       	push	r25
    1524:	af 93       	push	r26
    1526:	bf 93       	push	r27
    1528:	ef 93       	push	r30
    152a:	ff 93       	push	r31
    152c:	df 93       	push	r29
    152e:	cf 93       	push	r28
    1530:	cd b7       	in	r28, 0x3d	; 61
    1532:	de b7       	in	r29, 0x3e	; 62
	if (Gptr_3 != '\0') {
    1534:	80 91 6a 01 	lds	r24, 0x016A
    1538:	90 91 6b 01 	lds	r25, 0x016B
    153c:	00 97       	sbiw	r24, 0x00	; 0
    153e:	29 f0       	breq	.+10     	; 0x154a <__vector_9+0x40>
		Gptr_3();
    1540:	e0 91 6a 01 	lds	r30, 0x016A
    1544:	f0 91 6b 01 	lds	r31, 0x016B
    1548:	09 95       	icall
	}
}
    154a:	cf 91       	pop	r28
    154c:	df 91       	pop	r29
    154e:	ff 91       	pop	r31
    1550:	ef 91       	pop	r30
    1552:	bf 91       	pop	r27
    1554:	af 91       	pop	r26
    1556:	9f 91       	pop	r25
    1558:	8f 91       	pop	r24
    155a:	7f 91       	pop	r23
    155c:	6f 91       	pop	r22
    155e:	5f 91       	pop	r21
    1560:	4f 91       	pop	r20
    1562:	3f 91       	pop	r19
    1564:	2f 91       	pop	r18
    1566:	0f 90       	pop	r0
    1568:	0f be       	out	0x3f, r0	; 63
    156a:	0f 90       	pop	r0
    156c:	1f 90       	pop	r1
    156e:	18 95       	reti

00001570 <__vector_8>:
//ISR(TIMER1_COMPA_vect) {
//	if (Gptr_3 != '\0') {
//		Gptr_3();
//	}
//}
ISR(TIMER1_COMPB_vect) {
    1570:	1f 92       	push	r1
    1572:	0f 92       	push	r0
    1574:	0f b6       	in	r0, 0x3f	; 63
    1576:	0f 92       	push	r0
    1578:	11 24       	eor	r1, r1
    157a:	2f 93       	push	r18
    157c:	3f 93       	push	r19
    157e:	4f 93       	push	r20
    1580:	5f 93       	push	r21
    1582:	6f 93       	push	r22
    1584:	7f 93       	push	r23
    1586:	8f 93       	push	r24
    1588:	9f 93       	push	r25
    158a:	af 93       	push	r26
    158c:	bf 93       	push	r27
    158e:	ef 93       	push	r30
    1590:	ff 93       	push	r31
    1592:	df 93       	push	r29
    1594:	cf 93       	push	r28
    1596:	cd b7       	in	r28, 0x3d	; 61
    1598:	de b7       	in	r29, 0x3e	; 62
	if (Gptr_3 != '\0') {
    159a:	80 91 6a 01 	lds	r24, 0x016A
    159e:	90 91 6b 01 	lds	r25, 0x016B
    15a2:	00 97       	sbiw	r24, 0x00	; 0
    15a4:	29 f0       	breq	.+10     	; 0x15b0 <__vector_8+0x40>
		Gptr_3();
    15a6:	e0 91 6a 01 	lds	r30, 0x016A
    15aa:	f0 91 6b 01 	lds	r31, 0x016B
    15ae:	09 95       	icall
	}
}
    15b0:	cf 91       	pop	r28
    15b2:	df 91       	pop	r29
    15b4:	ff 91       	pop	r31
    15b6:	ef 91       	pop	r30
    15b8:	bf 91       	pop	r27
    15ba:	af 91       	pop	r26
    15bc:	9f 91       	pop	r25
    15be:	8f 91       	pop	r24
    15c0:	7f 91       	pop	r23
    15c2:	6f 91       	pop	r22
    15c4:	5f 91       	pop	r21
    15c6:	4f 91       	pop	r20
    15c8:	3f 91       	pop	r19
    15ca:	2f 91       	pop	r18
    15cc:	0f 90       	pop	r0
    15ce:	0f be       	out	0x3f, r0	; 63
    15d0:	0f 90       	pop	r0
    15d2:	1f 90       	pop	r1
    15d4:	18 95       	reti

000015d6 <__vector_6>:
ISR(TIMER1_CAPT_vect) {
    15d6:	1f 92       	push	r1
    15d8:	0f 92       	push	r0
    15da:	0f b6       	in	r0, 0x3f	; 63
    15dc:	0f 92       	push	r0
    15de:	11 24       	eor	r1, r1
    15e0:	2f 93       	push	r18
    15e2:	3f 93       	push	r19
    15e4:	4f 93       	push	r20
    15e6:	5f 93       	push	r21
    15e8:	6f 93       	push	r22
    15ea:	7f 93       	push	r23
    15ec:	8f 93       	push	r24
    15ee:	9f 93       	push	r25
    15f0:	af 93       	push	r26
    15f2:	bf 93       	push	r27
    15f4:	ef 93       	push	r30
    15f6:	ff 93       	push	r31
    15f8:	df 93       	push	r29
    15fa:	cf 93       	push	r28
    15fc:	cd b7       	in	r28, 0x3d	; 61
    15fe:	de b7       	in	r29, 0x3e	; 62
	if (Gptr_3 != '\0') {
    1600:	80 91 6a 01 	lds	r24, 0x016A
    1604:	90 91 6b 01 	lds	r25, 0x016B
    1608:	00 97       	sbiw	r24, 0x00	; 0
    160a:	29 f0       	breq	.+10     	; 0x1616 <__vector_6+0x40>
		Gptr_3();
    160c:	e0 91 6a 01 	lds	r30, 0x016A
    1610:	f0 91 6b 01 	lds	r31, 0x016B
    1614:	09 95       	icall
	}
}
    1616:	cf 91       	pop	r28
    1618:	df 91       	pop	r29
    161a:	ff 91       	pop	r31
    161c:	ef 91       	pop	r30
    161e:	bf 91       	pop	r27
    1620:	af 91       	pop	r26
    1622:	9f 91       	pop	r25
    1624:	8f 91       	pop	r24
    1626:	7f 91       	pop	r23
    1628:	6f 91       	pop	r22
    162a:	5f 91       	pop	r21
    162c:	4f 91       	pop	r20
    162e:	3f 91       	pop	r19
    1630:	2f 91       	pop	r18
    1632:	0f 90       	pop	r0
    1634:	0f be       	out	0x3f, r0	; 63
    1636:	0f 90       	pop	r0
    1638:	1f 90       	pop	r1
    163a:	18 95       	reti

0000163c <MCAL_T1_FPWM_10bitRES>:

void MCAL_T1_FPWM_10bitRES(u8 copy_u8Channel, u8 copy_u8Duty) {
    163c:	0f 93       	push	r16
    163e:	1f 93       	push	r17
    1640:	df 93       	push	r29
    1642:	cf 93       	push	r28
    1644:	00 d0       	rcall	.+0      	; 0x1646 <MCAL_T1_FPWM_10bitRES+0xa>
    1646:	00 d0       	rcall	.+0      	; 0x1648 <MCAL_T1_FPWM_10bitRES+0xc>
    1648:	00 d0       	rcall	.+0      	; 0x164a <MCAL_T1_FPWM_10bitRES+0xe>
    164a:	cd b7       	in	r28, 0x3d	; 61
    164c:	de b7       	in	r29, 0x3e	; 62
    164e:	8d 83       	std	Y+5, r24	; 0x05
    1650:	6e 83       	std	Y+6, r22	; 0x06
	f32 LOC_f32tickTime = 0;
    1652:	80 e0       	ldi	r24, 0x00	; 0
    1654:	90 e0       	ldi	r25, 0x00	; 0
    1656:	a0 e0       	ldi	r26, 0x00	; 0
    1658:	b0 e0       	ldi	r27, 0x00	; 0
    165a:	89 83       	std	Y+1, r24	; 0x01
    165c:	9a 83       	std	Y+2, r25	; 0x02
    165e:	ab 83       	std	Y+3, r26	; 0x03
    1660:	bc 83       	std	Y+4, r27	; 0x04
	//Set Mode
	MCAL_T1_u8T1Init(PWM_PHASE_CORRECT_10bit);
    1662:	83 e0       	ldi	r24, 0x03	; 3
    1664:	0e 94 a5 07 	call	0xf4a	; 0xf4a <MCAL_T1_u8T1Init>
	//Select Prescaler
	MCAL_T1_u8T1Prescaler(PRESCALLING_64, &LOC_f32tickTime);
    1668:	83 e0       	ldi	r24, 0x03	; 3
    166a:	9e 01       	movw	r18, r28
    166c:	2f 5f       	subi	r18, 0xFF	; 255
    166e:	3f 4f       	sbci	r19, 0xFF	; 255
    1670:	b9 01       	movw	r22, r18
    1672:	0e 94 3a 08 	call	0x1074	; 0x1074 <MCAL_T1_u8T1Prescaler>
	MCAL_T1_u8T1CompareOutputMode(NON_INVERTING_MODE, copy_u8Channel);
    1676:	80 e0       	ldi	r24, 0x00	; 0
    1678:	6d 81       	ldd	r22, Y+5	; 0x05
    167a:	0e 94 bc 08 	call	0x1178	; 0x1178 <MCAL_T1_u8T1CompareOutputMode>
	if (copy_u8Channel == CHENNEL_A) {
    167e:	8d 81       	ldd	r24, Y+5	; 0x05
    1680:	88 23       	and	r24, r24
    1682:	19 f5       	brne	.+70     	; 0x16ca <MCAL_T1_FPWM_10bitRES+0x8e>
		OCR1A = copy_u8Duty * 10.23;
    1684:	0a e4       	ldi	r16, 0x4A	; 74
    1686:	10 e0       	ldi	r17, 0x00	; 0
    1688:	8e 81       	ldd	r24, Y+6	; 0x06
    168a:	88 2f       	mov	r24, r24
    168c:	90 e0       	ldi	r25, 0x00	; 0
    168e:	aa 27       	eor	r26, r26
    1690:	97 fd       	sbrc	r25, 7
    1692:	a0 95       	com	r26
    1694:	ba 2f       	mov	r27, r26
    1696:	bc 01       	movw	r22, r24
    1698:	cd 01       	movw	r24, r26
    169a:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    169e:	dc 01       	movw	r26, r24
    16a0:	cb 01       	movw	r24, r22
    16a2:	bc 01       	movw	r22, r24
    16a4:	cd 01       	movw	r24, r26
    16a6:	24 e1       	ldi	r18, 0x14	; 20
    16a8:	3e ea       	ldi	r19, 0xAE	; 174
    16aa:	43 e2       	ldi	r20, 0x23	; 35
    16ac:	51 e4       	ldi	r21, 0x41	; 65
    16ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16b2:	dc 01       	movw	r26, r24
    16b4:	cb 01       	movw	r24, r22
    16b6:	bc 01       	movw	r22, r24
    16b8:	cd 01       	movw	r24, r26
    16ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16be:	dc 01       	movw	r26, r24
    16c0:	cb 01       	movw	r24, r22
    16c2:	f8 01       	movw	r30, r16
    16c4:	91 83       	std	Z+1, r25	; 0x01
    16c6:	80 83       	st	Z, r24
    16c8:	25 c0       	rjmp	.+74     	; 0x1714 <MCAL_T1_FPWM_10bitRES+0xd8>
	} else if (copy_u8Channel == CHENNEL_B) {
    16ca:	8d 81       	ldd	r24, Y+5	; 0x05
    16cc:	81 30       	cpi	r24, 0x01	; 1
    16ce:	11 f5       	brne	.+68     	; 0x1714 <MCAL_T1_FPWM_10bitRES+0xd8>
		OCR1B = copy_u8Duty * 10.23;
    16d0:	08 e4       	ldi	r16, 0x48	; 72
    16d2:	10 e0       	ldi	r17, 0x00	; 0
    16d4:	8e 81       	ldd	r24, Y+6	; 0x06
    16d6:	88 2f       	mov	r24, r24
    16d8:	90 e0       	ldi	r25, 0x00	; 0
    16da:	aa 27       	eor	r26, r26
    16dc:	97 fd       	sbrc	r25, 7
    16de:	a0 95       	com	r26
    16e0:	ba 2f       	mov	r27, r26
    16e2:	bc 01       	movw	r22, r24
    16e4:	cd 01       	movw	r24, r26
    16e6:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    16ea:	dc 01       	movw	r26, r24
    16ec:	cb 01       	movw	r24, r22
    16ee:	bc 01       	movw	r22, r24
    16f0:	cd 01       	movw	r24, r26
    16f2:	24 e1       	ldi	r18, 0x14	; 20
    16f4:	3e ea       	ldi	r19, 0xAE	; 174
    16f6:	43 e2       	ldi	r20, 0x23	; 35
    16f8:	51 e4       	ldi	r21, 0x41	; 65
    16fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16fe:	dc 01       	movw	r26, r24
    1700:	cb 01       	movw	r24, r22
    1702:	bc 01       	movw	r22, r24
    1704:	cd 01       	movw	r24, r26
    1706:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    170a:	dc 01       	movw	r26, r24
    170c:	cb 01       	movw	r24, r22
    170e:	f8 01       	movw	r30, r16
    1710:	91 83       	std	Z+1, r25	; 0x01
    1712:	80 83       	st	Z, r24

	} else {
		//NOTHING
	}
}
    1714:	26 96       	adiw	r28, 0x06	; 6
    1716:	0f b6       	in	r0, 0x3f	; 63
    1718:	f8 94       	cli
    171a:	de bf       	out	0x3e, r29	; 62
    171c:	0f be       	out	0x3f, r0	; 63
    171e:	cd bf       	out	0x3d, r28	; 61
    1720:	cf 91       	pop	r28
    1722:	df 91       	pop	r29
    1724:	1f 91       	pop	r17
    1726:	0f 91       	pop	r16
    1728:	08 95       	ret

0000172a <MCAL_Timer0_Init>:
void (*Gptr3)(void)= '\0' ;
f32 Glob_TickTime;
u16 Start = 0;
u16 Counter = 0;

void MCAL_Timer0_Init(u8 Loc_u8Mode, u8 Loc_u8Prescaller,u8 Loc_u8OC0Mode) {
    172a:	df 93       	push	r29
    172c:	cf 93       	push	r28
    172e:	00 d0       	rcall	.+0      	; 0x1730 <MCAL_Timer0_Init+0x6>
    1730:	00 d0       	rcall	.+0      	; 0x1732 <MCAL_Timer0_Init+0x8>
    1732:	cd b7       	in	r28, 0x3d	; 61
    1734:	de b7       	in	r29, 0x3e	; 62
    1736:	8a 83       	std	Y+2, r24	; 0x02
    1738:	6b 83       	std	Y+3, r22	; 0x03
    173a:	4c 83       	std	Y+4, r20	; 0x04
	u8 LOC_u8ReturnValue = E_NOT_OK;
    173c:	81 e0       	ldi	r24, 0x01	; 1
    173e:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(SREG, 7);
    1740:	af e5       	ldi	r26, 0x5F	; 95
    1742:	b0 e0       	ldi	r27, 0x00	; 0
    1744:	ef e5       	ldi	r30, 0x5F	; 95
    1746:	f0 e0       	ldi	r31, 0x00	; 0
    1748:	80 81       	ld	r24, Z
    174a:	80 68       	ori	r24, 0x80	; 128
    174c:	8c 93       	st	X, r24
	if (Loc_u8Mode == Normal_Mode) {
    174e:	8a 81       	ldd	r24, Y+2	; 0x02
    1750:	88 23       	and	r24, r24
    1752:	b1 f4       	brne	.+44     	; 0x1780 <MCAL_Timer0_Init+0x56>
		CLR_BIT(TCCR0, 3);
    1754:	a3 e5       	ldi	r26, 0x53	; 83
    1756:	b0 e0       	ldi	r27, 0x00	; 0
    1758:	e3 e5       	ldi	r30, 0x53	; 83
    175a:	f0 e0       	ldi	r31, 0x00	; 0
    175c:	80 81       	ld	r24, Z
    175e:	87 7f       	andi	r24, 0xF7	; 247
    1760:	8c 93       	st	X, r24
		CLR_BIT(TCCR0, 6);
    1762:	a3 e5       	ldi	r26, 0x53	; 83
    1764:	b0 e0       	ldi	r27, 0x00	; 0
    1766:	e3 e5       	ldi	r30, 0x53	; 83
    1768:	f0 e0       	ldi	r31, 0x00	; 0
    176a:	80 81       	ld	r24, Z
    176c:	8f 7b       	andi	r24, 0xBF	; 191
    176e:	8c 93       	st	X, r24
		SET_BIT(TIMSK, 0);
    1770:	a9 e5       	ldi	r26, 0x59	; 89
    1772:	b0 e0       	ldi	r27, 0x00	; 0
    1774:	e9 e5       	ldi	r30, 0x59	; 89
    1776:	f0 e0       	ldi	r31, 0x00	; 0
    1778:	80 81       	ld	r24, Z
    177a:	81 60       	ori	r24, 0x01	; 1
    177c:	8c 93       	st	X, r24
    177e:	35 c0       	rjmp	.+106    	; 0x17ea <MCAL_Timer0_Init+0xc0>
	} else if (Loc_u8Mode == CTC_Mode) {
    1780:	8a 81       	ldd	r24, Y+2	; 0x02
    1782:	81 30       	cpi	r24, 0x01	; 1
    1784:	b1 f4       	brne	.+44     	; 0x17b2 <MCAL_Timer0_Init+0x88>
		SET_BIT(TCCR0, 3);
    1786:	a3 e5       	ldi	r26, 0x53	; 83
    1788:	b0 e0       	ldi	r27, 0x00	; 0
    178a:	e3 e5       	ldi	r30, 0x53	; 83
    178c:	f0 e0       	ldi	r31, 0x00	; 0
    178e:	80 81       	ld	r24, Z
    1790:	88 60       	ori	r24, 0x08	; 8
    1792:	8c 93       	st	X, r24
		CLR_BIT(TCCR0, 6);
    1794:	a3 e5       	ldi	r26, 0x53	; 83
    1796:	b0 e0       	ldi	r27, 0x00	; 0
    1798:	e3 e5       	ldi	r30, 0x53	; 83
    179a:	f0 e0       	ldi	r31, 0x00	; 0
    179c:	80 81       	ld	r24, Z
    179e:	8f 7b       	andi	r24, 0xBF	; 191
    17a0:	8c 93       	st	X, r24
		SET_BIT(TIMSK, 1);
    17a2:	a9 e5       	ldi	r26, 0x59	; 89
    17a4:	b0 e0       	ldi	r27, 0x00	; 0
    17a6:	e9 e5       	ldi	r30, 0x59	; 89
    17a8:	f0 e0       	ldi	r31, 0x00	; 0
    17aa:	80 81       	ld	r24, Z
    17ac:	82 60       	ori	r24, 0x02	; 2
    17ae:	8c 93       	st	X, r24
    17b0:	1c c0       	rjmp	.+56     	; 0x17ea <MCAL_Timer0_Init+0xc0>
	} else if (Loc_u8Mode == PWM_Mode) {
    17b2:	8a 81       	ldd	r24, Y+2	; 0x02
    17b4:	82 30       	cpi	r24, 0x02	; 2
    17b6:	79 f4       	brne	.+30     	; 0x17d6 <MCAL_Timer0_Init+0xac>
		CLR_BIT(TCCR0, 3);
    17b8:	a3 e5       	ldi	r26, 0x53	; 83
    17ba:	b0 e0       	ldi	r27, 0x00	; 0
    17bc:	e3 e5       	ldi	r30, 0x53	; 83
    17be:	f0 e0       	ldi	r31, 0x00	; 0
    17c0:	80 81       	ld	r24, Z
    17c2:	87 7f       	andi	r24, 0xF7	; 247
    17c4:	8c 93       	st	X, r24
		SET_BIT(TCCR0, 6);
    17c6:	a3 e5       	ldi	r26, 0x53	; 83
    17c8:	b0 e0       	ldi	r27, 0x00	; 0
    17ca:	e3 e5       	ldi	r30, 0x53	; 83
    17cc:	f0 e0       	ldi	r31, 0x00	; 0
    17ce:	80 81       	ld	r24, Z
    17d0:	80 64       	ori	r24, 0x40	; 64
    17d2:	8c 93       	st	X, r24
    17d4:	0a c0       	rjmp	.+20     	; 0x17ea <MCAL_Timer0_Init+0xc0>
	} else if (Loc_u8Mode == FastPWM_Mode) {
    17d6:	8a 81       	ldd	r24, Y+2	; 0x02
    17d8:	83 30       	cpi	r24, 0x03	; 3
    17da:	39 f4       	brne	.+14     	; 0x17ea <MCAL_Timer0_Init+0xc0>
//		SET_BIT(TCCR0, 3);
//		SET_BIT(TCCR0, 6);
		SET_BIT(TIMSK, 1);
    17dc:	a9 e5       	ldi	r26, 0x59	; 89
    17de:	b0 e0       	ldi	r27, 0x00	; 0
    17e0:	e9 e5       	ldi	r30, 0x59	; 89
    17e2:	f0 e0       	ldi	r31, 0x00	; 0
    17e4:	80 81       	ld	r24, Z
    17e6:	82 60       	ori	r24, 0x02	; 2
    17e8:	8c 93       	st	X, r24
	}
	if (Loc_u8Prescaller == NoPrescaller) {
    17ea:	8b 81       	ldd	r24, Y+3	; 0x03
    17ec:	88 23       	and	r24, r24
    17ee:	b9 f4       	brne	.+46     	; 0x181e <MCAL_Timer0_Init+0xf4>
		CLR_BIT(TCCR0, 0);
    17f0:	a3 e5       	ldi	r26, 0x53	; 83
    17f2:	b0 e0       	ldi	r27, 0x00	; 0
    17f4:	e3 e5       	ldi	r30, 0x53	; 83
    17f6:	f0 e0       	ldi	r31, 0x00	; 0
    17f8:	80 81       	ld	r24, Z
    17fa:	8e 7f       	andi	r24, 0xFE	; 254
    17fc:	8c 93       	st	X, r24
		CLR_BIT(TCCR0, 1);
    17fe:	a3 e5       	ldi	r26, 0x53	; 83
    1800:	b0 e0       	ldi	r27, 0x00	; 0
    1802:	e3 e5       	ldi	r30, 0x53	; 83
    1804:	f0 e0       	ldi	r31, 0x00	; 0
    1806:	80 81       	ld	r24, Z
    1808:	8d 7f       	andi	r24, 0xFD	; 253
    180a:	8c 93       	st	X, r24
		CLR_BIT(TCCR0, 2);
    180c:	a3 e5       	ldi	r26, 0x53	; 83
    180e:	b0 e0       	ldi	r27, 0x00	; 0
    1810:	e3 e5       	ldi	r30, 0x53	; 83
    1812:	f0 e0       	ldi	r31, 0x00	; 0
    1814:	80 81       	ld	r24, Z
    1816:	8b 7f       	andi	r24, 0xFB	; 251
    1818:	8c 93       	st	X, r24
		LOC_u8ReturnValue = E_OK;
    181a:	19 82       	std	Y+1, r1	; 0x01
    181c:	f1 c0       	rjmp	.+482    	; 0x1a00 <MCAL_Timer0_Init+0x2d6>
	} else if (Loc_u8Prescaller == Prescaller_1) {
    181e:	8b 81       	ldd	r24, Y+3	; 0x03
    1820:	81 30       	cpi	r24, 0x01	; 1
    1822:	19 f5       	brne	.+70     	; 0x186a <MCAL_Timer0_Init+0x140>
		SET_BIT(TCCR0, 0);
    1824:	a3 e5       	ldi	r26, 0x53	; 83
    1826:	b0 e0       	ldi	r27, 0x00	; 0
    1828:	e3 e5       	ldi	r30, 0x53	; 83
    182a:	f0 e0       	ldi	r31, 0x00	; 0
    182c:	80 81       	ld	r24, Z
    182e:	81 60       	ori	r24, 0x01	; 1
    1830:	8c 93       	st	X, r24
		CLR_BIT(TCCR0, 1);
    1832:	a3 e5       	ldi	r26, 0x53	; 83
    1834:	b0 e0       	ldi	r27, 0x00	; 0
    1836:	e3 e5       	ldi	r30, 0x53	; 83
    1838:	f0 e0       	ldi	r31, 0x00	; 0
    183a:	80 81       	ld	r24, Z
    183c:	8d 7f       	andi	r24, 0xFD	; 253
    183e:	8c 93       	st	X, r24
		CLR_BIT(TCCR0, 2);
    1840:	a3 e5       	ldi	r26, 0x53	; 83
    1842:	b0 e0       	ldi	r27, 0x00	; 0
    1844:	e3 e5       	ldi	r30, 0x53	; 83
    1846:	f0 e0       	ldi	r31, 0x00	; 0
    1848:	80 81       	ld	r24, Z
    184a:	8b 7f       	andi	r24, 0xFB	; 251
    184c:	8c 93       	st	X, r24
		Glob_TickTime = Prescaller1_Value / (f32) CPU_Frequancy;
    184e:	8d eb       	ldi	r24, 0xBD	; 189
    1850:	97 e3       	ldi	r25, 0x37	; 55
    1852:	a6 e8       	ldi	r26, 0x86	; 134
    1854:	b3 e3       	ldi	r27, 0x33	; 51
    1856:	80 93 84 01 	sts	0x0184, r24
    185a:	90 93 85 01 	sts	0x0185, r25
    185e:	a0 93 86 01 	sts	0x0186, r26
    1862:	b0 93 87 01 	sts	0x0187, r27
		LOC_u8ReturnValue = E_OK;
    1866:	19 82       	std	Y+1, r1	; 0x01
    1868:	cb c0       	rjmp	.+406    	; 0x1a00 <MCAL_Timer0_Init+0x2d6>
	} else if (Loc_u8Prescaller == Prescaller_8) {
    186a:	8b 81       	ldd	r24, Y+3	; 0x03
    186c:	82 30       	cpi	r24, 0x02	; 2
    186e:	19 f5       	brne	.+70     	; 0x18b6 <MCAL_Timer0_Init+0x18c>
		CLR_BIT(TCCR0, 0);
    1870:	a3 e5       	ldi	r26, 0x53	; 83
    1872:	b0 e0       	ldi	r27, 0x00	; 0
    1874:	e3 e5       	ldi	r30, 0x53	; 83
    1876:	f0 e0       	ldi	r31, 0x00	; 0
    1878:	80 81       	ld	r24, Z
    187a:	8e 7f       	andi	r24, 0xFE	; 254
    187c:	8c 93       	st	X, r24
		SET_BIT(TCCR0, 1);
    187e:	a3 e5       	ldi	r26, 0x53	; 83
    1880:	b0 e0       	ldi	r27, 0x00	; 0
    1882:	e3 e5       	ldi	r30, 0x53	; 83
    1884:	f0 e0       	ldi	r31, 0x00	; 0
    1886:	80 81       	ld	r24, Z
    1888:	82 60       	ori	r24, 0x02	; 2
    188a:	8c 93       	st	X, r24
		CLR_BIT(TCCR0, 2);
    188c:	a3 e5       	ldi	r26, 0x53	; 83
    188e:	b0 e0       	ldi	r27, 0x00	; 0
    1890:	e3 e5       	ldi	r30, 0x53	; 83
    1892:	f0 e0       	ldi	r31, 0x00	; 0
    1894:	80 81       	ld	r24, Z
    1896:	8b 7f       	andi	r24, 0xFB	; 251
    1898:	8c 93       	st	X, r24
		Glob_TickTime = Prescaller8_Value / (f32) CPU_Frequancy;
    189a:	8d eb       	ldi	r24, 0xBD	; 189
    189c:	97 e3       	ldi	r25, 0x37	; 55
    189e:	a6 e0       	ldi	r26, 0x06	; 6
    18a0:	b5 e3       	ldi	r27, 0x35	; 53
    18a2:	80 93 84 01 	sts	0x0184, r24
    18a6:	90 93 85 01 	sts	0x0185, r25
    18aa:	a0 93 86 01 	sts	0x0186, r26
    18ae:	b0 93 87 01 	sts	0x0187, r27
		LOC_u8ReturnValue = E_OK;
    18b2:	19 82       	std	Y+1, r1	; 0x01
    18b4:	a5 c0       	rjmp	.+330    	; 0x1a00 <MCAL_Timer0_Init+0x2d6>
	} else if (Loc_u8Prescaller == Prescaller_64) {
    18b6:	8b 81       	ldd	r24, Y+3	; 0x03
    18b8:	83 30       	cpi	r24, 0x03	; 3
    18ba:	19 f5       	brne	.+70     	; 0x1902 <MCAL_Timer0_Init+0x1d8>
		SET_BIT(TCCR0, 0);
    18bc:	a3 e5       	ldi	r26, 0x53	; 83
    18be:	b0 e0       	ldi	r27, 0x00	; 0
    18c0:	e3 e5       	ldi	r30, 0x53	; 83
    18c2:	f0 e0       	ldi	r31, 0x00	; 0
    18c4:	80 81       	ld	r24, Z
    18c6:	81 60       	ori	r24, 0x01	; 1
    18c8:	8c 93       	st	X, r24
		SET_BIT(TCCR0, 1);
    18ca:	a3 e5       	ldi	r26, 0x53	; 83
    18cc:	b0 e0       	ldi	r27, 0x00	; 0
    18ce:	e3 e5       	ldi	r30, 0x53	; 83
    18d0:	f0 e0       	ldi	r31, 0x00	; 0
    18d2:	80 81       	ld	r24, Z
    18d4:	82 60       	ori	r24, 0x02	; 2
    18d6:	8c 93       	st	X, r24
		CLR_BIT(TCCR0, 2);
    18d8:	a3 e5       	ldi	r26, 0x53	; 83
    18da:	b0 e0       	ldi	r27, 0x00	; 0
    18dc:	e3 e5       	ldi	r30, 0x53	; 83
    18de:	f0 e0       	ldi	r31, 0x00	; 0
    18e0:	80 81       	ld	r24, Z
    18e2:	8b 7f       	andi	r24, 0xFB	; 251
    18e4:	8c 93       	st	X, r24
		Glob_TickTime = Prescaller64_Value / (f32) CPU_Frequancy;
    18e6:	8d eb       	ldi	r24, 0xBD	; 189
    18e8:	97 e3       	ldi	r25, 0x37	; 55
    18ea:	a6 e8       	ldi	r26, 0x86	; 134
    18ec:	b6 e3       	ldi	r27, 0x36	; 54
    18ee:	80 93 84 01 	sts	0x0184, r24
    18f2:	90 93 85 01 	sts	0x0185, r25
    18f6:	a0 93 86 01 	sts	0x0186, r26
    18fa:	b0 93 87 01 	sts	0x0187, r27
		LOC_u8ReturnValue = E_OK;
    18fe:	19 82       	std	Y+1, r1	; 0x01
    1900:	7f c0       	rjmp	.+254    	; 0x1a00 <MCAL_Timer0_Init+0x2d6>
	} else if (Loc_u8Prescaller == Prescaller_256) {
    1902:	8b 81       	ldd	r24, Y+3	; 0x03
    1904:	84 30       	cpi	r24, 0x04	; 4
    1906:	19 f5       	brne	.+70     	; 0x194e <MCAL_Timer0_Init+0x224>
		CLR_BIT(TCCR0, 0);
    1908:	a3 e5       	ldi	r26, 0x53	; 83
    190a:	b0 e0       	ldi	r27, 0x00	; 0
    190c:	e3 e5       	ldi	r30, 0x53	; 83
    190e:	f0 e0       	ldi	r31, 0x00	; 0
    1910:	80 81       	ld	r24, Z
    1912:	8e 7f       	andi	r24, 0xFE	; 254
    1914:	8c 93       	st	X, r24
		CLR_BIT(TCCR0, 1);
    1916:	a3 e5       	ldi	r26, 0x53	; 83
    1918:	b0 e0       	ldi	r27, 0x00	; 0
    191a:	e3 e5       	ldi	r30, 0x53	; 83
    191c:	f0 e0       	ldi	r31, 0x00	; 0
    191e:	80 81       	ld	r24, Z
    1920:	8d 7f       	andi	r24, 0xFD	; 253
    1922:	8c 93       	st	X, r24
		SET_BIT(TCCR0, 2);
    1924:	a3 e5       	ldi	r26, 0x53	; 83
    1926:	b0 e0       	ldi	r27, 0x00	; 0
    1928:	e3 e5       	ldi	r30, 0x53	; 83
    192a:	f0 e0       	ldi	r31, 0x00	; 0
    192c:	80 81       	ld	r24, Z
    192e:	84 60       	ori	r24, 0x04	; 4
    1930:	8c 93       	st	X, r24
		Glob_TickTime = Prescaller256_Value / (f32) CPU_Frequancy;
    1932:	8d eb       	ldi	r24, 0xBD	; 189
    1934:	97 e3       	ldi	r25, 0x37	; 55
    1936:	a6 e8       	ldi	r26, 0x86	; 134
    1938:	b7 e3       	ldi	r27, 0x37	; 55
    193a:	80 93 84 01 	sts	0x0184, r24
    193e:	90 93 85 01 	sts	0x0185, r25
    1942:	a0 93 86 01 	sts	0x0186, r26
    1946:	b0 93 87 01 	sts	0x0187, r27
		LOC_u8ReturnValue = E_OK;
    194a:	19 82       	std	Y+1, r1	; 0x01
    194c:	59 c0       	rjmp	.+178    	; 0x1a00 <MCAL_Timer0_Init+0x2d6>
	} else if (Loc_u8Prescaller == Prescaller_1024) {
    194e:	8b 81       	ldd	r24, Y+3	; 0x03
    1950:	85 30       	cpi	r24, 0x05	; 5
    1952:	19 f5       	brne	.+70     	; 0x199a <MCAL_Timer0_Init+0x270>
		SET_BIT(TCCR0, 0);
    1954:	a3 e5       	ldi	r26, 0x53	; 83
    1956:	b0 e0       	ldi	r27, 0x00	; 0
    1958:	e3 e5       	ldi	r30, 0x53	; 83
    195a:	f0 e0       	ldi	r31, 0x00	; 0
    195c:	80 81       	ld	r24, Z
    195e:	81 60       	ori	r24, 0x01	; 1
    1960:	8c 93       	st	X, r24
		CLR_BIT(TCCR0, 1);
    1962:	a3 e5       	ldi	r26, 0x53	; 83
    1964:	b0 e0       	ldi	r27, 0x00	; 0
    1966:	e3 e5       	ldi	r30, 0x53	; 83
    1968:	f0 e0       	ldi	r31, 0x00	; 0
    196a:	80 81       	ld	r24, Z
    196c:	8d 7f       	andi	r24, 0xFD	; 253
    196e:	8c 93       	st	X, r24
		SET_BIT(TCCR0, 2);
    1970:	a3 e5       	ldi	r26, 0x53	; 83
    1972:	b0 e0       	ldi	r27, 0x00	; 0
    1974:	e3 e5       	ldi	r30, 0x53	; 83
    1976:	f0 e0       	ldi	r31, 0x00	; 0
    1978:	80 81       	ld	r24, Z
    197a:	84 60       	ori	r24, 0x04	; 4
    197c:	8c 93       	st	X, r24
		Glob_TickTime = Prescaller1024_Value / (f32) CPU_Frequancy;
    197e:	8d eb       	ldi	r24, 0xBD	; 189
    1980:	97 e3       	ldi	r25, 0x37	; 55
    1982:	a6 e8       	ldi	r26, 0x86	; 134
    1984:	b8 e3       	ldi	r27, 0x38	; 56
    1986:	80 93 84 01 	sts	0x0184, r24
    198a:	90 93 85 01 	sts	0x0185, r25
    198e:	a0 93 86 01 	sts	0x0186, r26
    1992:	b0 93 87 01 	sts	0x0187, r27
		LOC_u8ReturnValue = E_OK;
    1996:	19 82       	std	Y+1, r1	; 0x01
    1998:	33 c0       	rjmp	.+102    	; 0x1a00 <MCAL_Timer0_Init+0x2d6>
	} else if (Loc_u8Prescaller == Clock_on_falling_edge) {
    199a:	8b 81       	ldd	r24, Y+3	; 0x03
    199c:	86 30       	cpi	r24, 0x06	; 6
    199e:	b9 f4       	brne	.+46     	; 0x19ce <MCAL_Timer0_Init+0x2a4>
		CLR_BIT(TCCR0, 0);
    19a0:	a3 e5       	ldi	r26, 0x53	; 83
    19a2:	b0 e0       	ldi	r27, 0x00	; 0
    19a4:	e3 e5       	ldi	r30, 0x53	; 83
    19a6:	f0 e0       	ldi	r31, 0x00	; 0
    19a8:	80 81       	ld	r24, Z
    19aa:	8e 7f       	andi	r24, 0xFE	; 254
    19ac:	8c 93       	st	X, r24
		SET_BIT(TCCR0, 1);
    19ae:	a3 e5       	ldi	r26, 0x53	; 83
    19b0:	b0 e0       	ldi	r27, 0x00	; 0
    19b2:	e3 e5       	ldi	r30, 0x53	; 83
    19b4:	f0 e0       	ldi	r31, 0x00	; 0
    19b6:	80 81       	ld	r24, Z
    19b8:	82 60       	ori	r24, 0x02	; 2
    19ba:	8c 93       	st	X, r24
		SET_BIT(TCCR0, 2);
    19bc:	a3 e5       	ldi	r26, 0x53	; 83
    19be:	b0 e0       	ldi	r27, 0x00	; 0
    19c0:	e3 e5       	ldi	r30, 0x53	; 83
    19c2:	f0 e0       	ldi	r31, 0x00	; 0
    19c4:	80 81       	ld	r24, Z
    19c6:	84 60       	ori	r24, 0x04	; 4
    19c8:	8c 93       	st	X, r24
		LOC_u8ReturnValue = E_OK;
    19ca:	19 82       	std	Y+1, r1	; 0x01
    19cc:	19 c0       	rjmp	.+50     	; 0x1a00 <MCAL_Timer0_Init+0x2d6>
	} else if (Loc_u8Prescaller == Clock_on_rising_edge) {
    19ce:	8b 81       	ldd	r24, Y+3	; 0x03
    19d0:	87 30       	cpi	r24, 0x07	; 7
    19d2:	b1 f4       	brne	.+44     	; 0x1a00 <MCAL_Timer0_Init+0x2d6>
		SET_BIT(TCCR0, 0);
    19d4:	a3 e5       	ldi	r26, 0x53	; 83
    19d6:	b0 e0       	ldi	r27, 0x00	; 0
    19d8:	e3 e5       	ldi	r30, 0x53	; 83
    19da:	f0 e0       	ldi	r31, 0x00	; 0
    19dc:	80 81       	ld	r24, Z
    19de:	81 60       	ori	r24, 0x01	; 1
    19e0:	8c 93       	st	X, r24
		SET_BIT(TCCR0, 1);
    19e2:	a3 e5       	ldi	r26, 0x53	; 83
    19e4:	b0 e0       	ldi	r27, 0x00	; 0
    19e6:	e3 e5       	ldi	r30, 0x53	; 83
    19e8:	f0 e0       	ldi	r31, 0x00	; 0
    19ea:	80 81       	ld	r24, Z
    19ec:	82 60       	ori	r24, 0x02	; 2
    19ee:	8c 93       	st	X, r24
		SET_BIT(TCCR0, 2);
    19f0:	a3 e5       	ldi	r26, 0x53	; 83
    19f2:	b0 e0       	ldi	r27, 0x00	; 0
    19f4:	e3 e5       	ldi	r30, 0x53	; 83
    19f6:	f0 e0       	ldi	r31, 0x00	; 0
    19f8:	80 81       	ld	r24, Z
    19fa:	84 60       	ori	r24, 0x04	; 4
    19fc:	8c 93       	st	X, r24
		LOC_u8ReturnValue = E_OK;
    19fe:	19 82       	std	Y+1, r1	; 0x01
	} else {
		//NOTHING
	}
	if (Loc_u8OC0Mode == Disconnected) {
    1a00:	8c 81       	ldd	r24, Y+4	; 0x04
    1a02:	88 23       	and	r24, r24
    1a04:	79 f4       	brne	.+30     	; 0x1a24 <MCAL_Timer0_Init+0x2fa>
			CLR_BIT(TCCR0, 4);
    1a06:	a3 e5       	ldi	r26, 0x53	; 83
    1a08:	b0 e0       	ldi	r27, 0x00	; 0
    1a0a:	e3 e5       	ldi	r30, 0x53	; 83
    1a0c:	f0 e0       	ldi	r31, 0x00	; 0
    1a0e:	80 81       	ld	r24, Z
    1a10:	8f 7e       	andi	r24, 0xEF	; 239
    1a12:	8c 93       	st	X, r24
			CLR_BIT(TCCR0, 5);
    1a14:	a3 e5       	ldi	r26, 0x53	; 83
    1a16:	b0 e0       	ldi	r27, 0x00	; 0
    1a18:	e3 e5       	ldi	r30, 0x53	; 83
    1a1a:	f0 e0       	ldi	r31, 0x00	; 0
    1a1c:	80 81       	ld	r24, Z
    1a1e:	8f 7d       	andi	r24, 0xDF	; 223
    1a20:	8c 93       	st	X, r24
    1a22:	43 c0       	rjmp	.+134    	; 0x1aaa <MCAL_Timer0_Init+0x380>
		} else if (Loc_u8OC0Mode == Reserved) {
    1a24:	8c 81       	ldd	r24, Y+4	; 0x04
    1a26:	81 30       	cpi	r24, 0x01	; 1
    1a28:	79 f4       	brne	.+30     	; 0x1a48 <MCAL_Timer0_Init+0x31e>
			SET_BIT(TCCR0, 4);
    1a2a:	a3 e5       	ldi	r26, 0x53	; 83
    1a2c:	b0 e0       	ldi	r27, 0x00	; 0
    1a2e:	e3 e5       	ldi	r30, 0x53	; 83
    1a30:	f0 e0       	ldi	r31, 0x00	; 0
    1a32:	80 81       	ld	r24, Z
    1a34:	80 61       	ori	r24, 0x10	; 16
    1a36:	8c 93       	st	X, r24
			CLR_BIT(TCCR0, 5);
    1a38:	a3 e5       	ldi	r26, 0x53	; 83
    1a3a:	b0 e0       	ldi	r27, 0x00	; 0
    1a3c:	e3 e5       	ldi	r30, 0x53	; 83
    1a3e:	f0 e0       	ldi	r31, 0x00	; 0
    1a40:	80 81       	ld	r24, Z
    1a42:	8f 7d       	andi	r24, 0xDF	; 223
    1a44:	8c 93       	st	X, r24
    1a46:	31 c0       	rjmp	.+98     	; 0x1aaa <MCAL_Timer0_Init+0x380>
			//PWM, Fast PWM
		} else if (Loc_u8OC0Mode == Non_Inverted) {
    1a48:	8c 81       	ldd	r24, Y+4	; 0x04
    1a4a:	82 30       	cpi	r24, 0x02	; 2
    1a4c:	b1 f4       	brne	.+44     	; 0x1a7a <MCAL_Timer0_Init+0x350>
			SET_BIT(TCCR0, 5);
    1a4e:	a3 e5       	ldi	r26, 0x53	; 83
    1a50:	b0 e0       	ldi	r27, 0x00	; 0
    1a52:	e3 e5       	ldi	r30, 0x53	; 83
    1a54:	f0 e0       	ldi	r31, 0x00	; 0
    1a56:	80 81       	ld	r24, Z
    1a58:	80 62       	ori	r24, 0x20	; 32
    1a5a:	8c 93       	st	X, r24
			CLR_BIT(TCCR0, 4);
    1a5c:	a3 e5       	ldi	r26, 0x53	; 83
    1a5e:	b0 e0       	ldi	r27, 0x00	; 0
    1a60:	e3 e5       	ldi	r30, 0x53	; 83
    1a62:	f0 e0       	ldi	r31, 0x00	; 0
    1a64:	80 81       	ld	r24, Z
    1a66:	8f 7e       	andi	r24, 0xEF	; 239
    1a68:	8c 93       	st	X, r24
			// OC0
			SET_BIT(DDRB, 3);
    1a6a:	a7 e3       	ldi	r26, 0x37	; 55
    1a6c:	b0 e0       	ldi	r27, 0x00	; 0
    1a6e:	e7 e3       	ldi	r30, 0x37	; 55
    1a70:	f0 e0       	ldi	r31, 0x00	; 0
    1a72:	80 81       	ld	r24, Z
    1a74:	88 60       	ori	r24, 0x08	; 8
    1a76:	8c 93       	st	X, r24
    1a78:	18 c0       	rjmp	.+48     	; 0x1aaa <MCAL_Timer0_Init+0x380>
			//PWM, Fast PWM
		} else if (Loc_u8OC0Mode == Inverted) {
    1a7a:	8c 81       	ldd	r24, Y+4	; 0x04
    1a7c:	83 30       	cpi	r24, 0x03	; 3
    1a7e:	a9 f4       	brne	.+42     	; 0x1aaa <MCAL_Timer0_Init+0x380>
			SET_BIT(TCCR0, 4);
    1a80:	a3 e5       	ldi	r26, 0x53	; 83
    1a82:	b0 e0       	ldi	r27, 0x00	; 0
    1a84:	e3 e5       	ldi	r30, 0x53	; 83
    1a86:	f0 e0       	ldi	r31, 0x00	; 0
    1a88:	80 81       	ld	r24, Z
    1a8a:	80 61       	ori	r24, 0x10	; 16
    1a8c:	8c 93       	st	X, r24
			SET_BIT(TCCR0, 5);
    1a8e:	a3 e5       	ldi	r26, 0x53	; 83
    1a90:	b0 e0       	ldi	r27, 0x00	; 0
    1a92:	e3 e5       	ldi	r30, 0x53	; 83
    1a94:	f0 e0       	ldi	r31, 0x00	; 0
    1a96:	80 81       	ld	r24, Z
    1a98:	80 62       	ori	r24, 0x20	; 32
    1a9a:	8c 93       	st	X, r24
			// OC0
			SET_BIT(DDRB, 3);
    1a9c:	a7 e3       	ldi	r26, 0x37	; 55
    1a9e:	b0 e0       	ldi	r27, 0x00	; 0
    1aa0:	e7 e3       	ldi	r30, 0x37	; 55
    1aa2:	f0 e0       	ldi	r31, 0x00	; 0
    1aa4:	80 81       	ld	r24, Z
    1aa6:	88 60       	ori	r24, 0x08	; 8
    1aa8:	8c 93       	st	X, r24
		}
}
    1aaa:	0f 90       	pop	r0
    1aac:	0f 90       	pop	r0
    1aae:	0f 90       	pop	r0
    1ab0:	0f 90       	pop	r0
    1ab2:	cf 91       	pop	r28
    1ab4:	df 91       	pop	r29
    1ab6:	08 95       	ret

00001ab8 <MCAL_Timer0_SetPreloadValue>:
void MCAL_Timer0_SetPreloadValue(u8 Loc_u8Value) {
    1ab8:	df 93       	push	r29
    1aba:	cf 93       	push	r28
    1abc:	0f 92       	push	r0
    1abe:	cd b7       	in	r28, 0x3d	; 61
    1ac0:	de b7       	in	r29, 0x3e	; 62
    1ac2:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = Loc_u8Value;
    1ac4:	e2 e5       	ldi	r30, 0x52	; 82
    1ac6:	f0 e0       	ldi	r31, 0x00	; 0
    1ac8:	89 81       	ldd	r24, Y+1	; 0x01
    1aca:	80 83       	st	Z, r24
}
    1acc:	0f 90       	pop	r0
    1ace:	cf 91       	pop	r28
    1ad0:	df 91       	pop	r29
    1ad2:	08 95       	ret

00001ad4 <MCAL_Timer0_SetCompareValue>:
void MCAL_Timer0_SetCompareValue(u8 Loc_u8Value) {
    1ad4:	df 93       	push	r29
    1ad6:	cf 93       	push	r28
    1ad8:	0f 92       	push	r0
    1ada:	cd b7       	in	r28, 0x3d	; 61
    1adc:	de b7       	in	r29, 0x3e	; 62
    1ade:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = Loc_u8Value;
    1ae0:	ec e5       	ldi	r30, 0x5C	; 92
    1ae2:	f0 e0       	ldi	r31, 0x00	; 0
    1ae4:	89 81       	ldd	r24, Y+1	; 0x01
    1ae6:	80 83       	st	Z, r24
}
    1ae8:	0f 90       	pop	r0
    1aea:	cf 91       	pop	r28
    1aec:	df 91       	pop	r29
    1aee:	08 95       	ret

00001af0 <MCAL_Timer0_EnableNormalMode>:
void MCAL_Timer0_EnableNormalMode() {
    1af0:	df 93       	push	r29
    1af2:	cf 93       	push	r28
    1af4:	cd b7       	in	r28, 0x3d	; 61
    1af6:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK, 0);
    1af8:	a9 e5       	ldi	r26, 0x59	; 89
    1afa:	b0 e0       	ldi	r27, 0x00	; 0
    1afc:	e9 e5       	ldi	r30, 0x59	; 89
    1afe:	f0 e0       	ldi	r31, 0x00	; 0
    1b00:	80 81       	ld	r24, Z
    1b02:	81 60       	ori	r24, 0x01	; 1
    1b04:	8c 93       	st	X, r24
}
    1b06:	cf 91       	pop	r28
    1b08:	df 91       	pop	r29
    1b0a:	08 95       	ret

00001b0c <MCAL_Timer0_DisableNormalMode>:
void MCAL_Timer0_DisableNormalMode() {
    1b0c:	df 93       	push	r29
    1b0e:	cf 93       	push	r28
    1b10:	cd b7       	in	r28, 0x3d	; 61
    1b12:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK, 0);
    1b14:	a9 e5       	ldi	r26, 0x59	; 89
    1b16:	b0 e0       	ldi	r27, 0x00	; 0
    1b18:	e9 e5       	ldi	r30, 0x59	; 89
    1b1a:	f0 e0       	ldi	r31, 0x00	; 0
    1b1c:	80 81       	ld	r24, Z
    1b1e:	8e 7f       	andi	r24, 0xFE	; 254
    1b20:	8c 93       	st	X, r24
}
    1b22:	cf 91       	pop	r28
    1b24:	df 91       	pop	r29
    1b26:	08 95       	ret

00001b28 <MCAL_Timer0_EnableCTCMode>:
void MCAL_Timer0_EnableCTCMode() {
    1b28:	df 93       	push	r29
    1b2a:	cf 93       	push	r28
    1b2c:	cd b7       	in	r28, 0x3d	; 61
    1b2e:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK, 1);
    1b30:	a9 e5       	ldi	r26, 0x59	; 89
    1b32:	b0 e0       	ldi	r27, 0x00	; 0
    1b34:	e9 e5       	ldi	r30, 0x59	; 89
    1b36:	f0 e0       	ldi	r31, 0x00	; 0
    1b38:	80 81       	ld	r24, Z
    1b3a:	82 60       	ori	r24, 0x02	; 2
    1b3c:	8c 93       	st	X, r24
}
    1b3e:	cf 91       	pop	r28
    1b40:	df 91       	pop	r29
    1b42:	08 95       	ret

00001b44 <MCAL_Timer0_DisableCTCMode>:
void MCAL_Timer0_DisableCTCMode() {
    1b44:	df 93       	push	r29
    1b46:	cf 93       	push	r28
    1b48:	cd b7       	in	r28, 0x3d	; 61
    1b4a:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK, 1);
    1b4c:	a9 e5       	ldi	r26, 0x59	; 89
    1b4e:	b0 e0       	ldi	r27, 0x00	; 0
    1b50:	e9 e5       	ldi	r30, 0x59	; 89
    1b52:	f0 e0       	ldi	r31, 0x00	; 0
    1b54:	80 81       	ld	r24, Z
    1b56:	8d 7f       	andi	r24, 0xFD	; 253
    1b58:	8c 93       	st	X, r24
}
    1b5a:	cf 91       	pop	r28
    1b5c:	df 91       	pop	r29
    1b5e:	08 95       	ret

00001b60 <MCAL_Timer0_Delayms_NormalMode>:

void MCAL_Timer0_Delayms_NormalMode(u32 Loc_u32MilliSeconds) {
    1b60:	df 93       	push	r29
    1b62:	cf 93       	push	r28
    1b64:	cd b7       	in	r28, 0x3d	; 61
    1b66:	de b7       	in	r29, 0x3e	; 62
    1b68:	28 97       	sbiw	r28, 0x08	; 8
    1b6a:	0f b6       	in	r0, 0x3f	; 63
    1b6c:	f8 94       	cli
    1b6e:	de bf       	out	0x3e, r29	; 62
    1b70:	0f be       	out	0x3f, r0	; 63
    1b72:	cd bf       	out	0x3d, r28	; 61
    1b74:	6d 83       	std	Y+5, r22	; 0x05
    1b76:	7e 83       	std	Y+6, r23	; 0x06
    1b78:	8f 83       	std	Y+7, r24	; 0x07
    1b7a:	98 87       	std	Y+8, r25	; 0x08
	u32 N = 0;
    1b7c:	19 82       	std	Y+1, r1	; 0x01
    1b7e:	1a 82       	std	Y+2, r1	; 0x02
    1b80:	1b 82       	std	Y+3, r1	; 0x03
    1b82:	1c 82       	std	Y+4, r1	; 0x04
	N = (Loc_u32MilliSeconds / 1000.0) / (f32) Glob_TickTime;
    1b84:	6d 81       	ldd	r22, Y+5	; 0x05
    1b86:	7e 81       	ldd	r23, Y+6	; 0x06
    1b88:	8f 81       	ldd	r24, Y+7	; 0x07
    1b8a:	98 85       	ldd	r25, Y+8	; 0x08
    1b8c:	0e 94 37 05 	call	0xa6e	; 0xa6e <__floatunsisf>
    1b90:	dc 01       	movw	r26, r24
    1b92:	cb 01       	movw	r24, r22
    1b94:	bc 01       	movw	r22, r24
    1b96:	cd 01       	movw	r24, r26
    1b98:	20 e0       	ldi	r18, 0x00	; 0
    1b9a:	30 e0       	ldi	r19, 0x00	; 0
    1b9c:	4a e7       	ldi	r20, 0x7A	; 122
    1b9e:	54 e4       	ldi	r21, 0x44	; 68
    1ba0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1ba4:	dc 01       	movw	r26, r24
    1ba6:	cb 01       	movw	r24, r22
    1ba8:	20 91 84 01 	lds	r18, 0x0184
    1bac:	30 91 85 01 	lds	r19, 0x0185
    1bb0:	40 91 86 01 	lds	r20, 0x0186
    1bb4:	50 91 87 01 	lds	r21, 0x0187
    1bb8:	bc 01       	movw	r22, r24
    1bba:	cd 01       	movw	r24, r26
    1bbc:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1bc0:	dc 01       	movw	r26, r24
    1bc2:	cb 01       	movw	r24, r22
    1bc4:	bc 01       	movw	r22, r24
    1bc6:	cd 01       	movw	r24, r26
    1bc8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bcc:	dc 01       	movw	r26, r24
    1bce:	cb 01       	movw	r24, r22
    1bd0:	89 83       	std	Y+1, r24	; 0x01
    1bd2:	9a 83       	std	Y+2, r25	; 0x02
    1bd4:	ab 83       	std	Y+3, r26	; 0x03
    1bd6:	bc 83       	std	Y+4, r27	; 0x04
	Start = N % 256;
    1bd8:	89 81       	ldd	r24, Y+1	; 0x01
    1bda:	9a 81       	ldd	r25, Y+2	; 0x02
    1bdc:	90 70       	andi	r25, 0x00	; 0
    1bde:	90 93 71 01 	sts	0x0171, r25
    1be2:	80 93 70 01 	sts	0x0170, r24
	if (Start == 0) {
    1be6:	80 91 70 01 	lds	r24, 0x0170
    1bea:	90 91 71 01 	lds	r25, 0x0171
    1bee:	00 97       	sbiw	r24, 0x00	; 0
    1bf0:	99 f4       	brne	.+38     	; 0x1c18 <MCAL_Timer0_Delayms_NormalMode+0xb8>
		MCAL_Timer0_SetPreloadValue(Start);
    1bf2:	80 91 70 01 	lds	r24, 0x0170
    1bf6:	90 91 71 01 	lds	r25, 0x0171
    1bfa:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <MCAL_Timer0_SetPreloadValue>
		Counter = N / 256;
    1bfe:	89 81       	ldd	r24, Y+1	; 0x01
    1c00:	9a 81       	ldd	r25, Y+2	; 0x02
    1c02:	ab 81       	ldd	r26, Y+3	; 0x03
    1c04:	bc 81       	ldd	r27, Y+4	; 0x04
    1c06:	89 2f       	mov	r24, r25
    1c08:	9a 2f       	mov	r25, r26
    1c0a:	ab 2f       	mov	r26, r27
    1c0c:	bb 27       	eor	r27, r27
    1c0e:	90 93 73 01 	sts	0x0173, r25
    1c12:	80 93 72 01 	sts	0x0172, r24
    1c16:	19 c0       	rjmp	.+50     	; 0x1c4a <MCAL_Timer0_Delayms_NormalMode+0xea>
	} else if (Start != 0) {
    1c18:	80 91 70 01 	lds	r24, 0x0170
    1c1c:	90 91 71 01 	lds	r25, 0x0171
    1c20:	00 97       	sbiw	r24, 0x00	; 0
    1c22:	99 f0       	breq	.+38     	; 0x1c4a <MCAL_Timer0_Delayms_NormalMode+0xea>
		MCAL_Timer0_SetPreloadValue(Start);
    1c24:	80 91 70 01 	lds	r24, 0x0170
    1c28:	90 91 71 01 	lds	r25, 0x0171
    1c2c:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <MCAL_Timer0_SetPreloadValue>
		Counter = ((N / 256) + 1);
    1c30:	89 81       	ldd	r24, Y+1	; 0x01
    1c32:	9a 81       	ldd	r25, Y+2	; 0x02
    1c34:	ab 81       	ldd	r26, Y+3	; 0x03
    1c36:	bc 81       	ldd	r27, Y+4	; 0x04
    1c38:	89 2f       	mov	r24, r25
    1c3a:	9a 2f       	mov	r25, r26
    1c3c:	ab 2f       	mov	r26, r27
    1c3e:	bb 27       	eor	r27, r27
    1c40:	01 96       	adiw	r24, 0x01	; 1
    1c42:	90 93 73 01 	sts	0x0173, r25
    1c46:	80 93 72 01 	sts	0x0172, r24
	} else {
		//NOTHING
	}
}
    1c4a:	28 96       	adiw	r28, 0x08	; 8
    1c4c:	0f b6       	in	r0, 0x3f	; 63
    1c4e:	f8 94       	cli
    1c50:	de bf       	out	0x3e, r29	; 62
    1c52:	0f be       	out	0x3f, r0	; 63
    1c54:	cd bf       	out	0x3d, r28	; 61
    1c56:	cf 91       	pop	r28
    1c58:	df 91       	pop	r29
    1c5a:	08 95       	ret

00001c5c <MCAL_Timer0_Delayms_CTCMode>:
void MCAL_Timer0_Delayms_CTCMode(u32 Loc_u32MilliSeconds) {
    1c5c:	df 93       	push	r29
    1c5e:	cf 93       	push	r28
    1c60:	cd b7       	in	r28, 0x3d	; 61
    1c62:	de b7       	in	r29, 0x3e	; 62
    1c64:	29 97       	sbiw	r28, 0x09	; 9
    1c66:	0f b6       	in	r0, 0x3f	; 63
    1c68:	f8 94       	cli
    1c6a:	de bf       	out	0x3e, r29	; 62
    1c6c:	0f be       	out	0x3f, r0	; 63
    1c6e:	cd bf       	out	0x3d, r28	; 61
    1c70:	6e 83       	std	Y+6, r22	; 0x06
    1c72:	7f 83       	std	Y+7, r23	; 0x07
    1c74:	88 87       	std	Y+8, r24	; 0x08
    1c76:	99 87       	std	Y+9, r25	; 0x09
	u8 LOC_u8ReturnValue = E_NOT_OK;
    1c78:	81 e0       	ldi	r24, 0x01	; 1
    1c7a:	8d 83       	std	Y+5, r24	; 0x05
	f32 N = 0;
    1c7c:	80 e0       	ldi	r24, 0x00	; 0
    1c7e:	90 e0       	ldi	r25, 0x00	; 0
    1c80:	a0 e0       	ldi	r26, 0x00	; 0
    1c82:	b0 e0       	ldi	r27, 0x00	; 0
    1c84:	89 83       	std	Y+1, r24	; 0x01
    1c86:	9a 83       	std	Y+2, r25	; 0x02
    1c88:	ab 83       	std	Y+3, r26	; 0x03
    1c8a:	bc 83       	std	Y+4, r27	; 0x04
	MCAL_Timer0_SetCompareValue(CompareStartValue);
    1c8c:	87 ec       	ldi	r24, 0xC7	; 199
    1c8e:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <MCAL_Timer0_SetCompareValue>
	N = ((CompareStartValue + 1) * Glob_TickTime);
    1c92:	80 91 84 01 	lds	r24, 0x0184
    1c96:	90 91 85 01 	lds	r25, 0x0185
    1c9a:	a0 91 86 01 	lds	r26, 0x0186
    1c9e:	b0 91 87 01 	lds	r27, 0x0187
    1ca2:	bc 01       	movw	r22, r24
    1ca4:	cd 01       	movw	r24, r26
    1ca6:	20 e0       	ldi	r18, 0x00	; 0
    1ca8:	30 e0       	ldi	r19, 0x00	; 0
    1caa:	48 e4       	ldi	r20, 0x48	; 72
    1cac:	53 e4       	ldi	r21, 0x43	; 67
    1cae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cb2:	dc 01       	movw	r26, r24
    1cb4:	cb 01       	movw	r24, r22
    1cb6:	89 83       	std	Y+1, r24	; 0x01
    1cb8:	9a 83       	std	Y+2, r25	; 0x02
    1cba:	ab 83       	std	Y+3, r26	; 0x03
    1cbc:	bc 83       	std	Y+4, r27	; 0x04
	Counter = ((Loc_u32MilliSeconds/1000.0) / N);
    1cbe:	6e 81       	ldd	r22, Y+6	; 0x06
    1cc0:	7f 81       	ldd	r23, Y+7	; 0x07
    1cc2:	88 85       	ldd	r24, Y+8	; 0x08
    1cc4:	99 85       	ldd	r25, Y+9	; 0x09
    1cc6:	0e 94 37 05 	call	0xa6e	; 0xa6e <__floatunsisf>
    1cca:	dc 01       	movw	r26, r24
    1ccc:	cb 01       	movw	r24, r22
    1cce:	bc 01       	movw	r22, r24
    1cd0:	cd 01       	movw	r24, r26
    1cd2:	20 e0       	ldi	r18, 0x00	; 0
    1cd4:	30 e0       	ldi	r19, 0x00	; 0
    1cd6:	4a e7       	ldi	r20, 0x7A	; 122
    1cd8:	54 e4       	ldi	r21, 0x44	; 68
    1cda:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1cde:	dc 01       	movw	r26, r24
    1ce0:	cb 01       	movw	r24, r22
    1ce2:	bc 01       	movw	r22, r24
    1ce4:	cd 01       	movw	r24, r26
    1ce6:	29 81       	ldd	r18, Y+1	; 0x01
    1ce8:	3a 81       	ldd	r19, Y+2	; 0x02
    1cea:	4b 81       	ldd	r20, Y+3	; 0x03
    1cec:	5c 81       	ldd	r21, Y+4	; 0x04
    1cee:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1cf2:	dc 01       	movw	r26, r24
    1cf4:	cb 01       	movw	r24, r22
    1cf6:	bc 01       	movw	r22, r24
    1cf8:	cd 01       	movw	r24, r26
    1cfa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cfe:	dc 01       	movw	r26, r24
    1d00:	cb 01       	movw	r24, r22
    1d02:	90 93 73 01 	sts	0x0173, r25
    1d06:	80 93 72 01 	sts	0x0172, r24

	LOC_u8ReturnValue = E_OK;
    1d0a:	1d 82       	std	Y+5, r1	; 0x05
}
    1d0c:	29 96       	adiw	r28, 0x09	; 9
    1d0e:	0f b6       	in	r0, 0x3f	; 63
    1d10:	f8 94       	cli
    1d12:	de bf       	out	0x3e, r29	; 62
    1d14:	0f be       	out	0x3f, r0	; 63
    1d16:	cd bf       	out	0x3d, r28	; 61
    1d18:	cf 91       	pop	r28
    1d1a:	df 91       	pop	r29
    1d1c:	08 95       	ret

00001d1e <MCAL_Timer0_CallBack>:

void MCAL_Timer0_CallBack(void (*ptr)(void)) {
    1d1e:	df 93       	push	r29
    1d20:	cf 93       	push	r28
    1d22:	00 d0       	rcall	.+0      	; 0x1d24 <MCAL_Timer0_CallBack+0x6>
    1d24:	cd b7       	in	r28, 0x3d	; 61
    1d26:	de b7       	in	r29, 0x3e	; 62
    1d28:	9a 83       	std	Y+2, r25	; 0x02
    1d2a:	89 83       	std	Y+1, r24	; 0x01
	if (ptr != '\0')
    1d2c:	89 81       	ldd	r24, Y+1	; 0x01
    1d2e:	9a 81       	ldd	r25, Y+2	; 0x02
    1d30:	00 97       	sbiw	r24, 0x00	; 0
    1d32:	31 f0       	breq	.+12     	; 0x1d40 <MCAL_Timer0_CallBack+0x22>
		Gptr3 = ptr;
    1d34:	89 81       	ldd	r24, Y+1	; 0x01
    1d36:	9a 81       	ldd	r25, Y+2	; 0x02
    1d38:	90 93 6f 01 	sts	0x016F, r25
    1d3c:	80 93 6e 01 	sts	0x016E, r24
}
    1d40:	0f 90       	pop	r0
    1d42:	0f 90       	pop	r0
    1d44:	cf 91       	pop	r28
    1d46:	df 91       	pop	r29
    1d48:	08 95       	ret

00001d4a <__vector_11>:

ISR(TIMER0_OVF_vect) {
    1d4a:	1f 92       	push	r1
    1d4c:	0f 92       	push	r0
    1d4e:	0f b6       	in	r0, 0x3f	; 63
    1d50:	0f 92       	push	r0
    1d52:	11 24       	eor	r1, r1
    1d54:	2f 93       	push	r18
    1d56:	3f 93       	push	r19
    1d58:	4f 93       	push	r20
    1d5a:	5f 93       	push	r21
    1d5c:	6f 93       	push	r22
    1d5e:	7f 93       	push	r23
    1d60:	8f 93       	push	r24
    1d62:	9f 93       	push	r25
    1d64:	af 93       	push	r26
    1d66:	bf 93       	push	r27
    1d68:	ef 93       	push	r30
    1d6a:	ff 93       	push	r31
    1d6c:	df 93       	push	r29
    1d6e:	cf 93       	push	r28
    1d70:	cd b7       	in	r28, 0x3d	; 61
    1d72:	de b7       	in	r29, 0x3e	; 62
	if (Gptr3 != '\0')
    1d74:	80 91 6e 01 	lds	r24, 0x016E
    1d78:	90 91 6f 01 	lds	r25, 0x016F
    1d7c:	00 97       	sbiw	r24, 0x00	; 0
    1d7e:	29 f0       	breq	.+10     	; 0x1d8a <__vector_11+0x40>
		Gptr3();
    1d80:	e0 91 6e 01 	lds	r30, 0x016E
    1d84:	f0 91 6f 01 	lds	r31, 0x016F
    1d88:	09 95       	icall
	Glob_u16OvfCounter++;
    1d8a:	80 91 6c 01 	lds	r24, 0x016C
    1d8e:	90 91 6d 01 	lds	r25, 0x016D
    1d92:	01 96       	adiw	r24, 0x01	; 1
    1d94:	90 93 6d 01 	sts	0x016D, r25
    1d98:	80 93 6c 01 	sts	0x016C, r24
}
    1d9c:	cf 91       	pop	r28
    1d9e:	df 91       	pop	r29
    1da0:	ff 91       	pop	r31
    1da2:	ef 91       	pop	r30
    1da4:	bf 91       	pop	r27
    1da6:	af 91       	pop	r26
    1da8:	9f 91       	pop	r25
    1daa:	8f 91       	pop	r24
    1dac:	7f 91       	pop	r23
    1dae:	6f 91       	pop	r22
    1db0:	5f 91       	pop	r21
    1db2:	4f 91       	pop	r20
    1db4:	3f 91       	pop	r19
    1db6:	2f 91       	pop	r18
    1db8:	0f 90       	pop	r0
    1dba:	0f be       	out	0x3f, r0	; 63
    1dbc:	0f 90       	pop	r0
    1dbe:	1f 90       	pop	r1
    1dc0:	18 95       	reti

00001dc2 <__vector_10>:
ISR(TIMER0_COMP_vect) {
    1dc2:	1f 92       	push	r1
    1dc4:	0f 92       	push	r0
    1dc6:	0f b6       	in	r0, 0x3f	; 63
    1dc8:	0f 92       	push	r0
    1dca:	11 24       	eor	r1, r1
    1dcc:	2f 93       	push	r18
    1dce:	3f 93       	push	r19
    1dd0:	4f 93       	push	r20
    1dd2:	5f 93       	push	r21
    1dd4:	6f 93       	push	r22
    1dd6:	7f 93       	push	r23
    1dd8:	8f 93       	push	r24
    1dda:	9f 93       	push	r25
    1ddc:	af 93       	push	r26
    1dde:	bf 93       	push	r27
    1de0:	ef 93       	push	r30
    1de2:	ff 93       	push	r31
    1de4:	df 93       	push	r29
    1de6:	cf 93       	push	r28
    1de8:	cd b7       	in	r28, 0x3d	; 61
    1dea:	de b7       	in	r29, 0x3e	; 62
	if (Gptr3 != '\0')
    1dec:	80 91 6e 01 	lds	r24, 0x016E
    1df0:	90 91 6f 01 	lds	r25, 0x016F
    1df4:	00 97       	sbiw	r24, 0x00	; 0
    1df6:	29 f0       	breq	.+10     	; 0x1e02 <__vector_10+0x40>
		Gptr3();
    1df8:	e0 91 6e 01 	lds	r30, 0x016E
    1dfc:	f0 91 6f 01 	lds	r31, 0x016F
    1e00:	09 95       	icall
}
    1e02:	cf 91       	pop	r28
    1e04:	df 91       	pop	r29
    1e06:	ff 91       	pop	r31
    1e08:	ef 91       	pop	r30
    1e0a:	bf 91       	pop	r27
    1e0c:	af 91       	pop	r26
    1e0e:	9f 91       	pop	r25
    1e10:	8f 91       	pop	r24
    1e12:	7f 91       	pop	r23
    1e14:	6f 91       	pop	r22
    1e16:	5f 91       	pop	r21
    1e18:	4f 91       	pop	r20
    1e1a:	3f 91       	pop	r19
    1e1c:	2f 91       	pop	r18
    1e1e:	0f 90       	pop	r0
    1e20:	0f be       	out	0x3f, r0	; 63
    1e22:	0f 90       	pop	r0
    1e24:	1f 90       	pop	r1
    1e26:	18 95       	reti

00001e28 <MCAL_Interrupt_u8SetRegister>:

void (*Gptr0)(void)= '\0' ;
void (*Gptr1)(void)= '\0' ;
void (*Gptr2)(void)= '\0' ;

void MCAL_Interrupt_u8SetRegister(u8 Loc_u8PortID, u8 Loc_u8PortValue) {
    1e28:	df 93       	push	r29
    1e2a:	cf 93       	push	r28
    1e2c:	00 d0       	rcall	.+0      	; 0x1e2e <MCAL_Interrupt_u8SetRegister+0x6>
    1e2e:	cd b7       	in	r28, 0x3d	; 61
    1e30:	de b7       	in	r29, 0x3e	; 62
    1e32:	89 83       	std	Y+1, r24	; 0x01
    1e34:	6a 83       	std	Y+2, r22	; 0x02
	if (Loc_u8PortValue == PORT_OUTPUT) {
    1e36:	8a 81       	ldd	r24, Y+2	; 0x02
    1e38:	8f 3f       	cpi	r24, 0xFF	; 255
    1e3a:	09 f5       	brne	.+66     	; 0x1e7e <MCAL_Interrupt_u8SetRegister+0x56>
		if (Loc_u8PortID == Sreg) {
    1e3c:	89 81       	ldd	r24, Y+1	; 0x01
    1e3e:	88 23       	and	r24, r24
    1e40:	29 f4       	brne	.+10     	; 0x1e4c <MCAL_Interrupt_u8SetRegister+0x24>
			SREG = PORT_OUTPUT;
    1e42:	ef e5       	ldi	r30, 0x5F	; 95
    1e44:	f0 e0       	ldi	r31, 0x00	; 0
    1e46:	8f ef       	ldi	r24, 0xFF	; 255
    1e48:	80 83       	st	Z, r24
    1e4a:	57 c0       	rjmp	.+174    	; 0x1efa <MCAL_Interrupt_u8SetRegister+0xd2>
		} else if (Loc_u8PortID == Gicr) {
    1e4c:	89 81       	ldd	r24, Y+1	; 0x01
    1e4e:	81 30       	cpi	r24, 0x01	; 1
    1e50:	29 f4       	brne	.+10     	; 0x1e5c <MCAL_Interrupt_u8SetRegister+0x34>
			GICR = PORT_OUTPUT;
    1e52:	eb e5       	ldi	r30, 0x5B	; 91
    1e54:	f0 e0       	ldi	r31, 0x00	; 0
    1e56:	8f ef       	ldi	r24, 0xFF	; 255
    1e58:	80 83       	st	Z, r24
    1e5a:	4f c0       	rjmp	.+158    	; 0x1efa <MCAL_Interrupt_u8SetRegister+0xd2>
		} else if (Loc_u8PortID == Mcucr) {
    1e5c:	89 81       	ldd	r24, Y+1	; 0x01
    1e5e:	82 30       	cpi	r24, 0x02	; 2
    1e60:	29 f4       	brne	.+10     	; 0x1e6c <MCAL_Interrupt_u8SetRegister+0x44>
			MCUCR = PORT_OUTPUT;
    1e62:	e5 e5       	ldi	r30, 0x55	; 85
    1e64:	f0 e0       	ldi	r31, 0x00	; 0
    1e66:	8f ef       	ldi	r24, 0xFF	; 255
    1e68:	80 83       	st	Z, r24
    1e6a:	47 c0       	rjmp	.+142    	; 0x1efa <MCAL_Interrupt_u8SetRegister+0xd2>
		} else if (Loc_u8PortID == Mcucsr) {
    1e6c:	89 81       	ldd	r24, Y+1	; 0x01
    1e6e:	83 30       	cpi	r24, 0x03	; 3
    1e70:	09 f0       	breq	.+2      	; 0x1e74 <MCAL_Interrupt_u8SetRegister+0x4c>
    1e72:	43 c0       	rjmp	.+134    	; 0x1efa <MCAL_Interrupt_u8SetRegister+0xd2>
			MCUCSR = PORT_OUTPUT;
    1e74:	e4 e5       	ldi	r30, 0x54	; 84
    1e76:	f0 e0       	ldi	r31, 0x00	; 0
    1e78:	8f ef       	ldi	r24, 0xFF	; 255
    1e7a:	80 83       	st	Z, r24
    1e7c:	3e c0       	rjmp	.+124    	; 0x1efa <MCAL_Interrupt_u8SetRegister+0xd2>
		} else {
			//Do Nothing
		}
	} else if (Loc_u8PortValue == PORT_INPUT) {
    1e7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e80:	88 23       	and	r24, r24
    1e82:	e1 f4       	brne	.+56     	; 0x1ebc <MCAL_Interrupt_u8SetRegister+0x94>
		if (Loc_u8PortID == Sreg) {
    1e84:	89 81       	ldd	r24, Y+1	; 0x01
    1e86:	88 23       	and	r24, r24
    1e88:	21 f4       	brne	.+8      	; 0x1e92 <MCAL_Interrupt_u8SetRegister+0x6a>
			SREG = PORT_INPUT;
    1e8a:	ef e5       	ldi	r30, 0x5F	; 95
    1e8c:	f0 e0       	ldi	r31, 0x00	; 0
    1e8e:	10 82       	st	Z, r1
    1e90:	34 c0       	rjmp	.+104    	; 0x1efa <MCAL_Interrupt_u8SetRegister+0xd2>
		} else if (Loc_u8PortID == Gicr) {
    1e92:	89 81       	ldd	r24, Y+1	; 0x01
    1e94:	81 30       	cpi	r24, 0x01	; 1
    1e96:	21 f4       	brne	.+8      	; 0x1ea0 <MCAL_Interrupt_u8SetRegister+0x78>
			GICR = PORT_INPUT;
    1e98:	eb e5       	ldi	r30, 0x5B	; 91
    1e9a:	f0 e0       	ldi	r31, 0x00	; 0
    1e9c:	10 82       	st	Z, r1
    1e9e:	2d c0       	rjmp	.+90     	; 0x1efa <MCAL_Interrupt_u8SetRegister+0xd2>
		} else if (Loc_u8PortID == Mcucr) {
    1ea0:	89 81       	ldd	r24, Y+1	; 0x01
    1ea2:	82 30       	cpi	r24, 0x02	; 2
    1ea4:	21 f4       	brne	.+8      	; 0x1eae <MCAL_Interrupt_u8SetRegister+0x86>
			MCUCR = PORT_INPUT;
    1ea6:	e5 e5       	ldi	r30, 0x55	; 85
    1ea8:	f0 e0       	ldi	r31, 0x00	; 0
    1eaa:	10 82       	st	Z, r1
    1eac:	26 c0       	rjmp	.+76     	; 0x1efa <MCAL_Interrupt_u8SetRegister+0xd2>
		} else if (Loc_u8PortID == Mcucsr) {
    1eae:	89 81       	ldd	r24, Y+1	; 0x01
    1eb0:	83 30       	cpi	r24, 0x03	; 3
    1eb2:	19 f5       	brne	.+70     	; 0x1efa <MCAL_Interrupt_u8SetRegister+0xd2>
			MCUCSR = PORT_INPUT;
    1eb4:	e4 e5       	ldi	r30, 0x54	; 84
    1eb6:	f0 e0       	ldi	r31, 0x00	; 0
    1eb8:	10 82       	st	Z, r1
    1eba:	1f c0       	rjmp	.+62     	; 0x1efa <MCAL_Interrupt_u8SetRegister+0xd2>
		} else {
			//Do Nothing
		}
	} else {
		if (Loc_u8PortID == Sreg) {
    1ebc:	89 81       	ldd	r24, Y+1	; 0x01
    1ebe:	88 23       	and	r24, r24
    1ec0:	29 f4       	brne	.+10     	; 0x1ecc <MCAL_Interrupt_u8SetRegister+0xa4>
			SREG = Loc_u8PortValue;
    1ec2:	ef e5       	ldi	r30, 0x5F	; 95
    1ec4:	f0 e0       	ldi	r31, 0x00	; 0
    1ec6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ec8:	80 83       	st	Z, r24
    1eca:	17 c0       	rjmp	.+46     	; 0x1efa <MCAL_Interrupt_u8SetRegister+0xd2>
		} else if (Loc_u8PortID == Gicr) {
    1ecc:	89 81       	ldd	r24, Y+1	; 0x01
    1ece:	81 30       	cpi	r24, 0x01	; 1
    1ed0:	29 f4       	brne	.+10     	; 0x1edc <MCAL_Interrupt_u8SetRegister+0xb4>
			GICR = Loc_u8PortValue;
    1ed2:	eb e5       	ldi	r30, 0x5B	; 91
    1ed4:	f0 e0       	ldi	r31, 0x00	; 0
    1ed6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ed8:	80 83       	st	Z, r24
    1eda:	0f c0       	rjmp	.+30     	; 0x1efa <MCAL_Interrupt_u8SetRegister+0xd2>
		} else if (Loc_u8PortID == Mcucr) {
    1edc:	89 81       	ldd	r24, Y+1	; 0x01
    1ede:	82 30       	cpi	r24, 0x02	; 2
    1ee0:	29 f4       	brne	.+10     	; 0x1eec <MCAL_Interrupt_u8SetRegister+0xc4>
			MCUCR = Loc_u8PortValue;
    1ee2:	e5 e5       	ldi	r30, 0x55	; 85
    1ee4:	f0 e0       	ldi	r31, 0x00	; 0
    1ee6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ee8:	80 83       	st	Z, r24
    1eea:	07 c0       	rjmp	.+14     	; 0x1efa <MCAL_Interrupt_u8SetRegister+0xd2>
		} else if (Loc_u8PortID == Mcucsr) {
    1eec:	89 81       	ldd	r24, Y+1	; 0x01
    1eee:	83 30       	cpi	r24, 0x03	; 3
    1ef0:	21 f4       	brne	.+8      	; 0x1efa <MCAL_Interrupt_u8SetRegister+0xd2>
			MCUCSR = Loc_u8PortValue;
    1ef2:	e4 e5       	ldi	r30, 0x54	; 84
    1ef4:	f0 e0       	ldi	r31, 0x00	; 0
    1ef6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ef8:	80 83       	st	Z, r24
		}
	}
}
    1efa:	0f 90       	pop	r0
    1efc:	0f 90       	pop	r0
    1efe:	cf 91       	pop	r28
    1f00:	df 91       	pop	r29
    1f02:	08 95       	ret

00001f04 <MCAL_Interrupt_u8SetRegisterPin>:

void MCAL_Interrupt_u8SetRegisterPin(u8 Loc_u8PortID, u8 Loc_u8PinID,
		u8 Loc_u8PinValue) {
    1f04:	df 93       	push	r29
    1f06:	cf 93       	push	r28
    1f08:	00 d0       	rcall	.+0      	; 0x1f0a <MCAL_Interrupt_u8SetRegisterPin+0x6>
    1f0a:	0f 92       	push	r0
    1f0c:	cd b7       	in	r28, 0x3d	; 61
    1f0e:	de b7       	in	r29, 0x3e	; 62
    1f10:	89 83       	std	Y+1, r24	; 0x01
    1f12:	6a 83       	std	Y+2, r22	; 0x02
    1f14:	4b 83       	std	Y+3, r20	; 0x03
	if (Loc_u8PinValue == Pin_High) {
    1f16:	8b 81       	ldd	r24, Y+3	; 0x03
    1f18:	81 30       	cpi	r24, 0x01	; 1
    1f1a:	09 f0       	breq	.+2      	; 0x1f1e <MCAL_Interrupt_u8SetRegisterPin+0x1a>
    1f1c:	5d c0       	rjmp	.+186    	; 0x1fd8 <MCAL_Interrupt_u8SetRegisterPin+0xd4>
		if (Loc_u8PortID == Sreg) {
    1f1e:	89 81       	ldd	r24, Y+1	; 0x01
    1f20:	88 23       	and	r24, r24
    1f22:	a1 f4       	brne	.+40     	; 0x1f4c <MCAL_Interrupt_u8SetRegisterPin+0x48>
			SET_BIT(SREG, Loc_u8PinID);
    1f24:	af e5       	ldi	r26, 0x5F	; 95
    1f26:	b0 e0       	ldi	r27, 0x00	; 0
    1f28:	ef e5       	ldi	r30, 0x5F	; 95
    1f2a:	f0 e0       	ldi	r31, 0x00	; 0
    1f2c:	80 81       	ld	r24, Z
    1f2e:	48 2f       	mov	r20, r24
    1f30:	8a 81       	ldd	r24, Y+2	; 0x02
    1f32:	28 2f       	mov	r18, r24
    1f34:	30 e0       	ldi	r19, 0x00	; 0
    1f36:	81 e0       	ldi	r24, 0x01	; 1
    1f38:	90 e0       	ldi	r25, 0x00	; 0
    1f3a:	02 2e       	mov	r0, r18
    1f3c:	02 c0       	rjmp	.+4      	; 0x1f42 <MCAL_Interrupt_u8SetRegisterPin+0x3e>
    1f3e:	88 0f       	add	r24, r24
    1f40:	99 1f       	adc	r25, r25
    1f42:	0a 94       	dec	r0
    1f44:	e2 f7       	brpl	.-8      	; 0x1f3e <MCAL_Interrupt_u8SetRegisterPin+0x3a>
    1f46:	84 2b       	or	r24, r20
    1f48:	8c 93       	st	X, r24
    1f4a:	a9 c0       	rjmp	.+338    	; 0x209e <MCAL_Interrupt_u8SetRegisterPin+0x19a>
		} else if (Loc_u8PortID == Gicr) {
    1f4c:	89 81       	ldd	r24, Y+1	; 0x01
    1f4e:	81 30       	cpi	r24, 0x01	; 1
    1f50:	a1 f4       	brne	.+40     	; 0x1f7a <MCAL_Interrupt_u8SetRegisterPin+0x76>
			SET_BIT(GICR, Loc_u8PinID);
    1f52:	ab e5       	ldi	r26, 0x5B	; 91
    1f54:	b0 e0       	ldi	r27, 0x00	; 0
    1f56:	eb e5       	ldi	r30, 0x5B	; 91
    1f58:	f0 e0       	ldi	r31, 0x00	; 0
    1f5a:	80 81       	ld	r24, Z
    1f5c:	48 2f       	mov	r20, r24
    1f5e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f60:	28 2f       	mov	r18, r24
    1f62:	30 e0       	ldi	r19, 0x00	; 0
    1f64:	81 e0       	ldi	r24, 0x01	; 1
    1f66:	90 e0       	ldi	r25, 0x00	; 0
    1f68:	02 2e       	mov	r0, r18
    1f6a:	02 c0       	rjmp	.+4      	; 0x1f70 <MCAL_Interrupt_u8SetRegisterPin+0x6c>
    1f6c:	88 0f       	add	r24, r24
    1f6e:	99 1f       	adc	r25, r25
    1f70:	0a 94       	dec	r0
    1f72:	e2 f7       	brpl	.-8      	; 0x1f6c <MCAL_Interrupt_u8SetRegisterPin+0x68>
    1f74:	84 2b       	or	r24, r20
    1f76:	8c 93       	st	X, r24
    1f78:	92 c0       	rjmp	.+292    	; 0x209e <MCAL_Interrupt_u8SetRegisterPin+0x19a>
		} else if (Loc_u8PortID == Mcucr) {
    1f7a:	89 81       	ldd	r24, Y+1	; 0x01
    1f7c:	82 30       	cpi	r24, 0x02	; 2
    1f7e:	a1 f4       	brne	.+40     	; 0x1fa8 <MCAL_Interrupt_u8SetRegisterPin+0xa4>
			SET_BIT(MCUCR, Loc_u8PinID);
    1f80:	a5 e5       	ldi	r26, 0x55	; 85
    1f82:	b0 e0       	ldi	r27, 0x00	; 0
    1f84:	e5 e5       	ldi	r30, 0x55	; 85
    1f86:	f0 e0       	ldi	r31, 0x00	; 0
    1f88:	80 81       	ld	r24, Z
    1f8a:	48 2f       	mov	r20, r24
    1f8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f8e:	28 2f       	mov	r18, r24
    1f90:	30 e0       	ldi	r19, 0x00	; 0
    1f92:	81 e0       	ldi	r24, 0x01	; 1
    1f94:	90 e0       	ldi	r25, 0x00	; 0
    1f96:	02 2e       	mov	r0, r18
    1f98:	02 c0       	rjmp	.+4      	; 0x1f9e <MCAL_Interrupt_u8SetRegisterPin+0x9a>
    1f9a:	88 0f       	add	r24, r24
    1f9c:	99 1f       	adc	r25, r25
    1f9e:	0a 94       	dec	r0
    1fa0:	e2 f7       	brpl	.-8      	; 0x1f9a <MCAL_Interrupt_u8SetRegisterPin+0x96>
    1fa2:	84 2b       	or	r24, r20
    1fa4:	8c 93       	st	X, r24
    1fa6:	7b c0       	rjmp	.+246    	; 0x209e <MCAL_Interrupt_u8SetRegisterPin+0x19a>
		} else if (Loc_u8PortID == Mcucsr) {
    1fa8:	89 81       	ldd	r24, Y+1	; 0x01
    1faa:	83 30       	cpi	r24, 0x03	; 3
    1fac:	09 f0       	breq	.+2      	; 0x1fb0 <MCAL_Interrupt_u8SetRegisterPin+0xac>
    1fae:	77 c0       	rjmp	.+238    	; 0x209e <MCAL_Interrupt_u8SetRegisterPin+0x19a>
			SET_BIT(MCUCSR, Loc_u8PinID);
    1fb0:	a4 e5       	ldi	r26, 0x54	; 84
    1fb2:	b0 e0       	ldi	r27, 0x00	; 0
    1fb4:	e4 e5       	ldi	r30, 0x54	; 84
    1fb6:	f0 e0       	ldi	r31, 0x00	; 0
    1fb8:	80 81       	ld	r24, Z
    1fba:	48 2f       	mov	r20, r24
    1fbc:	8a 81       	ldd	r24, Y+2	; 0x02
    1fbe:	28 2f       	mov	r18, r24
    1fc0:	30 e0       	ldi	r19, 0x00	; 0
    1fc2:	81 e0       	ldi	r24, 0x01	; 1
    1fc4:	90 e0       	ldi	r25, 0x00	; 0
    1fc6:	02 2e       	mov	r0, r18
    1fc8:	02 c0       	rjmp	.+4      	; 0x1fce <MCAL_Interrupt_u8SetRegisterPin+0xca>
    1fca:	88 0f       	add	r24, r24
    1fcc:	99 1f       	adc	r25, r25
    1fce:	0a 94       	dec	r0
    1fd0:	e2 f7       	brpl	.-8      	; 0x1fca <MCAL_Interrupt_u8SetRegisterPin+0xc6>
    1fd2:	84 2b       	or	r24, r20
    1fd4:	8c 93       	st	X, r24
    1fd6:	63 c0       	rjmp	.+198    	; 0x209e <MCAL_Interrupt_u8SetRegisterPin+0x19a>
		} else {
			//Do Nothing
		}
	} else if (Loc_u8PinValue == Pin_Low) {
    1fd8:	8b 81       	ldd	r24, Y+3	; 0x03
    1fda:	88 23       	and	r24, r24
    1fdc:	09 f0       	breq	.+2      	; 0x1fe0 <MCAL_Interrupt_u8SetRegisterPin+0xdc>
    1fde:	5f c0       	rjmp	.+190    	; 0x209e <MCAL_Interrupt_u8SetRegisterPin+0x19a>
		if (Loc_u8PortID == Sreg) {
    1fe0:	89 81       	ldd	r24, Y+1	; 0x01
    1fe2:	88 23       	and	r24, r24
    1fe4:	a9 f4       	brne	.+42     	; 0x2010 <MCAL_Interrupt_u8SetRegisterPin+0x10c>
			CLR_BIT(SREG, Loc_u8PinID);
    1fe6:	af e5       	ldi	r26, 0x5F	; 95
    1fe8:	b0 e0       	ldi	r27, 0x00	; 0
    1fea:	ef e5       	ldi	r30, 0x5F	; 95
    1fec:	f0 e0       	ldi	r31, 0x00	; 0
    1fee:	80 81       	ld	r24, Z
    1ff0:	48 2f       	mov	r20, r24
    1ff2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ff4:	28 2f       	mov	r18, r24
    1ff6:	30 e0       	ldi	r19, 0x00	; 0
    1ff8:	81 e0       	ldi	r24, 0x01	; 1
    1ffa:	90 e0       	ldi	r25, 0x00	; 0
    1ffc:	02 2e       	mov	r0, r18
    1ffe:	02 c0       	rjmp	.+4      	; 0x2004 <MCAL_Interrupt_u8SetRegisterPin+0x100>
    2000:	88 0f       	add	r24, r24
    2002:	99 1f       	adc	r25, r25
    2004:	0a 94       	dec	r0
    2006:	e2 f7       	brpl	.-8      	; 0x2000 <MCAL_Interrupt_u8SetRegisterPin+0xfc>
    2008:	80 95       	com	r24
    200a:	84 23       	and	r24, r20
    200c:	8c 93       	st	X, r24
    200e:	47 c0       	rjmp	.+142    	; 0x209e <MCAL_Interrupt_u8SetRegisterPin+0x19a>
		} else if (Loc_u8PortID == Gicr) {
    2010:	89 81       	ldd	r24, Y+1	; 0x01
    2012:	81 30       	cpi	r24, 0x01	; 1
    2014:	a9 f4       	brne	.+42     	; 0x2040 <MCAL_Interrupt_u8SetRegisterPin+0x13c>
			CLR_BIT(GICR, Loc_u8PinID);
    2016:	ab e5       	ldi	r26, 0x5B	; 91
    2018:	b0 e0       	ldi	r27, 0x00	; 0
    201a:	eb e5       	ldi	r30, 0x5B	; 91
    201c:	f0 e0       	ldi	r31, 0x00	; 0
    201e:	80 81       	ld	r24, Z
    2020:	48 2f       	mov	r20, r24
    2022:	8a 81       	ldd	r24, Y+2	; 0x02
    2024:	28 2f       	mov	r18, r24
    2026:	30 e0       	ldi	r19, 0x00	; 0
    2028:	81 e0       	ldi	r24, 0x01	; 1
    202a:	90 e0       	ldi	r25, 0x00	; 0
    202c:	02 2e       	mov	r0, r18
    202e:	02 c0       	rjmp	.+4      	; 0x2034 <MCAL_Interrupt_u8SetRegisterPin+0x130>
    2030:	88 0f       	add	r24, r24
    2032:	99 1f       	adc	r25, r25
    2034:	0a 94       	dec	r0
    2036:	e2 f7       	brpl	.-8      	; 0x2030 <MCAL_Interrupt_u8SetRegisterPin+0x12c>
    2038:	80 95       	com	r24
    203a:	84 23       	and	r24, r20
    203c:	8c 93       	st	X, r24
    203e:	2f c0       	rjmp	.+94     	; 0x209e <MCAL_Interrupt_u8SetRegisterPin+0x19a>
		} else if (Loc_u8PortID == Mcucr) {
    2040:	89 81       	ldd	r24, Y+1	; 0x01
    2042:	82 30       	cpi	r24, 0x02	; 2
    2044:	a9 f4       	brne	.+42     	; 0x2070 <MCAL_Interrupt_u8SetRegisterPin+0x16c>
			CLR_BIT(MCUCR, Loc_u8PinID);
    2046:	a5 e5       	ldi	r26, 0x55	; 85
    2048:	b0 e0       	ldi	r27, 0x00	; 0
    204a:	e5 e5       	ldi	r30, 0x55	; 85
    204c:	f0 e0       	ldi	r31, 0x00	; 0
    204e:	80 81       	ld	r24, Z
    2050:	48 2f       	mov	r20, r24
    2052:	8a 81       	ldd	r24, Y+2	; 0x02
    2054:	28 2f       	mov	r18, r24
    2056:	30 e0       	ldi	r19, 0x00	; 0
    2058:	81 e0       	ldi	r24, 0x01	; 1
    205a:	90 e0       	ldi	r25, 0x00	; 0
    205c:	02 2e       	mov	r0, r18
    205e:	02 c0       	rjmp	.+4      	; 0x2064 <MCAL_Interrupt_u8SetRegisterPin+0x160>
    2060:	88 0f       	add	r24, r24
    2062:	99 1f       	adc	r25, r25
    2064:	0a 94       	dec	r0
    2066:	e2 f7       	brpl	.-8      	; 0x2060 <MCAL_Interrupt_u8SetRegisterPin+0x15c>
    2068:	80 95       	com	r24
    206a:	84 23       	and	r24, r20
    206c:	8c 93       	st	X, r24
    206e:	17 c0       	rjmp	.+46     	; 0x209e <MCAL_Interrupt_u8SetRegisterPin+0x19a>
		} else if (Loc_u8PortID == Mcucsr) {
    2070:	89 81       	ldd	r24, Y+1	; 0x01
    2072:	83 30       	cpi	r24, 0x03	; 3
    2074:	a1 f4       	brne	.+40     	; 0x209e <MCAL_Interrupt_u8SetRegisterPin+0x19a>
			CLR_BIT(MCUCSR, Loc_u8PinID);
    2076:	a4 e5       	ldi	r26, 0x54	; 84
    2078:	b0 e0       	ldi	r27, 0x00	; 0
    207a:	e4 e5       	ldi	r30, 0x54	; 84
    207c:	f0 e0       	ldi	r31, 0x00	; 0
    207e:	80 81       	ld	r24, Z
    2080:	48 2f       	mov	r20, r24
    2082:	8a 81       	ldd	r24, Y+2	; 0x02
    2084:	28 2f       	mov	r18, r24
    2086:	30 e0       	ldi	r19, 0x00	; 0
    2088:	81 e0       	ldi	r24, 0x01	; 1
    208a:	90 e0       	ldi	r25, 0x00	; 0
    208c:	02 2e       	mov	r0, r18
    208e:	02 c0       	rjmp	.+4      	; 0x2094 <MCAL_Interrupt_u8SetRegisterPin+0x190>
    2090:	88 0f       	add	r24, r24
    2092:	99 1f       	adc	r25, r25
    2094:	0a 94       	dec	r0
    2096:	e2 f7       	brpl	.-8      	; 0x2090 <MCAL_Interrupt_u8SetRegisterPin+0x18c>
    2098:	80 95       	com	r24
    209a:	84 23       	and	r24, r20
    209c:	8c 93       	st	X, r24
			//Do Nothing
		}
	} else {
		//Do Nothing
	}
}
    209e:	0f 90       	pop	r0
    20a0:	0f 90       	pop	r0
    20a2:	0f 90       	pop	r0
    20a4:	cf 91       	pop	r28
    20a6:	df 91       	pop	r29
    20a8:	08 95       	ret

000020aa <MCAL_Interrupt_EXIT_CallBack_0>:

void MCAL_Interrupt_EXIT_CallBack_0(void (*ptr)(void)) {
    20aa:	df 93       	push	r29
    20ac:	cf 93       	push	r28
    20ae:	00 d0       	rcall	.+0      	; 0x20b0 <MCAL_Interrupt_EXIT_CallBack_0+0x6>
    20b0:	cd b7       	in	r28, 0x3d	; 61
    20b2:	de b7       	in	r29, 0x3e	; 62
    20b4:	9a 83       	std	Y+2, r25	; 0x02
    20b6:	89 83       	std	Y+1, r24	; 0x01
	if (ptr != '\0')
    20b8:	89 81       	ldd	r24, Y+1	; 0x01
    20ba:	9a 81       	ldd	r25, Y+2	; 0x02
    20bc:	00 97       	sbiw	r24, 0x00	; 0
    20be:	31 f0       	breq	.+12     	; 0x20cc <MCAL_Interrupt_EXIT_CallBack_0+0x22>
		Gptr0 = ptr;
    20c0:	89 81       	ldd	r24, Y+1	; 0x01
    20c2:	9a 81       	ldd	r25, Y+2	; 0x02
    20c4:	90 93 75 01 	sts	0x0175, r25
    20c8:	80 93 74 01 	sts	0x0174, r24
}
    20cc:	0f 90       	pop	r0
    20ce:	0f 90       	pop	r0
    20d0:	cf 91       	pop	r28
    20d2:	df 91       	pop	r29
    20d4:	08 95       	ret

000020d6 <MCAL_Interrupt_EXIT_CallBack_1>:
void MCAL_Interrupt_EXIT_CallBack_1(void (*ptr)(void)) {
    20d6:	df 93       	push	r29
    20d8:	cf 93       	push	r28
    20da:	00 d0       	rcall	.+0      	; 0x20dc <MCAL_Interrupt_EXIT_CallBack_1+0x6>
    20dc:	cd b7       	in	r28, 0x3d	; 61
    20de:	de b7       	in	r29, 0x3e	; 62
    20e0:	9a 83       	std	Y+2, r25	; 0x02
    20e2:	89 83       	std	Y+1, r24	; 0x01
	if (ptr != '\0')
    20e4:	89 81       	ldd	r24, Y+1	; 0x01
    20e6:	9a 81       	ldd	r25, Y+2	; 0x02
    20e8:	00 97       	sbiw	r24, 0x00	; 0
    20ea:	31 f0       	breq	.+12     	; 0x20f8 <MCAL_Interrupt_EXIT_CallBack_1+0x22>
		Gptr1 = ptr;
    20ec:	89 81       	ldd	r24, Y+1	; 0x01
    20ee:	9a 81       	ldd	r25, Y+2	; 0x02
    20f0:	90 93 77 01 	sts	0x0177, r25
    20f4:	80 93 76 01 	sts	0x0176, r24
}
    20f8:	0f 90       	pop	r0
    20fa:	0f 90       	pop	r0
    20fc:	cf 91       	pop	r28
    20fe:	df 91       	pop	r29
    2100:	08 95       	ret

00002102 <MCAL_Interrupt_EXIT_CallBack_2>:
void MCAL_Interrupt_EXIT_CallBack_2(void (*ptr)(void)) {
    2102:	df 93       	push	r29
    2104:	cf 93       	push	r28
    2106:	00 d0       	rcall	.+0      	; 0x2108 <MCAL_Interrupt_EXIT_CallBack_2+0x6>
    2108:	cd b7       	in	r28, 0x3d	; 61
    210a:	de b7       	in	r29, 0x3e	; 62
    210c:	9a 83       	std	Y+2, r25	; 0x02
    210e:	89 83       	std	Y+1, r24	; 0x01
	if (ptr != '\0')
    2110:	89 81       	ldd	r24, Y+1	; 0x01
    2112:	9a 81       	ldd	r25, Y+2	; 0x02
    2114:	00 97       	sbiw	r24, 0x00	; 0
    2116:	31 f0       	breq	.+12     	; 0x2124 <MCAL_Interrupt_EXIT_CallBack_2+0x22>
		Gptr2 = ptr;
    2118:	89 81       	ldd	r24, Y+1	; 0x01
    211a:	9a 81       	ldd	r25, Y+2	; 0x02
    211c:	90 93 79 01 	sts	0x0179, r25
    2120:	80 93 78 01 	sts	0x0178, r24
}
    2124:	0f 90       	pop	r0
    2126:	0f 90       	pop	r0
    2128:	cf 91       	pop	r28
    212a:	df 91       	pop	r29
    212c:	08 95       	ret

0000212e <MCAL_Interrupt_EnableGIE>:

void MCAL_Interrupt_EnableGIE(u8 Loc_u8value) {
    212e:	df 93       	push	r29
    2130:	cf 93       	push	r28
    2132:	0f 92       	push	r0
    2134:	cd b7       	in	r28, 0x3d	; 61
    2136:	de b7       	in	r29, 0x3e	; 62
    2138:	89 83       	std	Y+1, r24	; 0x01
	if (Loc_u8value == Enable) {
    213a:	89 81       	ldd	r24, Y+1	; 0x01
    213c:	81 30       	cpi	r24, 0x01	; 1
    213e:	31 f4       	brne	.+12     	; 0x214c <MCAL_Interrupt_EnableGIE+0x1e>
		MCAL_Interrupt_u8SetRegisterPin(Sreg, SREG_Pin, Pin_High);
    2140:	80 e0       	ldi	r24, 0x00	; 0
    2142:	67 e0       	ldi	r22, 0x07	; 7
    2144:	41 e0       	ldi	r20, 0x01	; 1
    2146:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <MCAL_Interrupt_u8SetRegisterPin>
    214a:	08 c0       	rjmp	.+16     	; 0x215c <MCAL_Interrupt_EnableGIE+0x2e>
	} else if (Loc_u8value == Disable) {
    214c:	89 81       	ldd	r24, Y+1	; 0x01
    214e:	88 23       	and	r24, r24
    2150:	29 f4       	brne	.+10     	; 0x215c <MCAL_Interrupt_EnableGIE+0x2e>
		MCAL_Interrupt_u8SetRegisterPin(Sreg, SREG_Pin, Pin_Low);
    2152:	80 e0       	ldi	r24, 0x00	; 0
    2154:	67 e0       	ldi	r22, 0x07	; 7
    2156:	40 e0       	ldi	r20, 0x00	; 0
    2158:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <MCAL_Interrupt_u8SetRegisterPin>
	}
}
    215c:	0f 90       	pop	r0
    215e:	cf 91       	pop	r28
    2160:	df 91       	pop	r29
    2162:	08 95       	ret

00002164 <MCAL_Interrupt_InterruptRisingInit>:

void MCAL_Interrupt_InterruptRisingInit() {
    2164:	df 93       	push	r29
    2166:	cf 93       	push	r28
    2168:	cd b7       	in	r28, 0x3d	; 61
    216a:	de b7       	in	r29, 0x3e	; 62
	MCAL_Interrupt_u8SetRegisterPin(Gicr, GICR_Pin6, Pin_High);
    216c:	81 e0       	ldi	r24, 0x01	; 1
    216e:	66 e0       	ldi	r22, 0x06	; 6
    2170:	41 e0       	ldi	r20, 0x01	; 1
    2172:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <MCAL_Interrupt_u8SetRegisterPin>
	MCAL_Interrupt_u8SetRegisterPin(Mcucr,MCUCR_Pin0 , Pin_High);
    2176:	82 e0       	ldi	r24, 0x02	; 2
    2178:	60 e0       	ldi	r22, 0x00	; 0
    217a:	41 e0       	ldi	r20, 0x01	; 1
    217c:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <MCAL_Interrupt_u8SetRegisterPin>
	MCAL_Interrupt_u8SetRegisterPin(Mcucr,MCUCR_Pin1 , Pin_High);
    2180:	82 e0       	ldi	r24, 0x02	; 2
    2182:	61 e0       	ldi	r22, 0x01	; 1
    2184:	41 e0       	ldi	r20, 0x01	; 1
    2186:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <MCAL_Interrupt_u8SetRegisterPin>
}
    218a:	cf 91       	pop	r28
    218c:	df 91       	pop	r29
    218e:	08 95       	ret

00002190 <MCAL_Interrupt_InterruptFallingInit>:
void MCAL_Interrupt_InterruptFallingInit() {
    2190:	df 93       	push	r29
    2192:	cf 93       	push	r28
    2194:	cd b7       	in	r28, 0x3d	; 61
    2196:	de b7       	in	r29, 0x3e	; 62
	MCAL_Interrupt_u8SetRegisterPin(Gicr, GICR_Pin6, Pin_High);
    2198:	81 e0       	ldi	r24, 0x01	; 1
    219a:	66 e0       	ldi	r22, 0x06	; 6
    219c:	41 e0       	ldi	r20, 0x01	; 1
    219e:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <MCAL_Interrupt_u8SetRegisterPin>
	MCAL_Interrupt_u8SetRegisterPin(Mcucr,MCUCR_Pin0 , Pin_Low);
    21a2:	82 e0       	ldi	r24, 0x02	; 2
    21a4:	60 e0       	ldi	r22, 0x00	; 0
    21a6:	40 e0       	ldi	r20, 0x00	; 0
    21a8:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <MCAL_Interrupt_u8SetRegisterPin>
	MCAL_Interrupt_u8SetRegisterPin(Mcucr,MCUCR_Pin1 , Pin_High);
    21ac:	82 e0       	ldi	r24, 0x02	; 2
    21ae:	61 e0       	ldi	r22, 0x01	; 1
    21b0:	41 e0       	ldi	r20, 0x01	; 1
    21b2:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <MCAL_Interrupt_u8SetRegisterPin>
}
    21b6:	cf 91       	pop	r28
    21b8:	df 91       	pop	r29
    21ba:	08 95       	ret

000021bc <__vector_1>:

ISR(VECT_INT0) {
    21bc:	1f 92       	push	r1
    21be:	0f 92       	push	r0
    21c0:	0f b6       	in	r0, 0x3f	; 63
    21c2:	0f 92       	push	r0
    21c4:	11 24       	eor	r1, r1
    21c6:	2f 93       	push	r18
    21c8:	3f 93       	push	r19
    21ca:	4f 93       	push	r20
    21cc:	5f 93       	push	r21
    21ce:	6f 93       	push	r22
    21d0:	7f 93       	push	r23
    21d2:	8f 93       	push	r24
    21d4:	9f 93       	push	r25
    21d6:	af 93       	push	r26
    21d8:	bf 93       	push	r27
    21da:	ef 93       	push	r30
    21dc:	ff 93       	push	r31
    21de:	df 93       	push	r29
    21e0:	cf 93       	push	r28
    21e2:	cd b7       	in	r28, 0x3d	; 61
    21e4:	de b7       	in	r29, 0x3e	; 62
	if (Gptr0 != '\0')
    21e6:	80 91 74 01 	lds	r24, 0x0174
    21ea:	90 91 75 01 	lds	r25, 0x0175
    21ee:	00 97       	sbiw	r24, 0x00	; 0
    21f0:	29 f0       	breq	.+10     	; 0x21fc <__vector_1+0x40>
		Gptr0();
    21f2:	e0 91 74 01 	lds	r30, 0x0174
    21f6:	f0 91 75 01 	lds	r31, 0x0175
    21fa:	09 95       	icall
}
    21fc:	cf 91       	pop	r28
    21fe:	df 91       	pop	r29
    2200:	ff 91       	pop	r31
    2202:	ef 91       	pop	r30
    2204:	bf 91       	pop	r27
    2206:	af 91       	pop	r26
    2208:	9f 91       	pop	r25
    220a:	8f 91       	pop	r24
    220c:	7f 91       	pop	r23
    220e:	6f 91       	pop	r22
    2210:	5f 91       	pop	r21
    2212:	4f 91       	pop	r20
    2214:	3f 91       	pop	r19
    2216:	2f 91       	pop	r18
    2218:	0f 90       	pop	r0
    221a:	0f be       	out	0x3f, r0	; 63
    221c:	0f 90       	pop	r0
    221e:	1f 90       	pop	r1
    2220:	18 95       	reti

00002222 <__vector_2>:
ISR(VECT_INT1) {
    2222:	1f 92       	push	r1
    2224:	0f 92       	push	r0
    2226:	0f b6       	in	r0, 0x3f	; 63
    2228:	0f 92       	push	r0
    222a:	11 24       	eor	r1, r1
    222c:	2f 93       	push	r18
    222e:	3f 93       	push	r19
    2230:	4f 93       	push	r20
    2232:	5f 93       	push	r21
    2234:	6f 93       	push	r22
    2236:	7f 93       	push	r23
    2238:	8f 93       	push	r24
    223a:	9f 93       	push	r25
    223c:	af 93       	push	r26
    223e:	bf 93       	push	r27
    2240:	ef 93       	push	r30
    2242:	ff 93       	push	r31
    2244:	df 93       	push	r29
    2246:	cf 93       	push	r28
    2248:	cd b7       	in	r28, 0x3d	; 61
    224a:	de b7       	in	r29, 0x3e	; 62
	if (Gptr1 != '\0')
    224c:	80 91 76 01 	lds	r24, 0x0176
    2250:	90 91 77 01 	lds	r25, 0x0177
    2254:	00 97       	sbiw	r24, 0x00	; 0
    2256:	29 f0       	breq	.+10     	; 0x2262 <__vector_2+0x40>
		Gptr1();
    2258:	e0 91 76 01 	lds	r30, 0x0176
    225c:	f0 91 77 01 	lds	r31, 0x0177
    2260:	09 95       	icall
}
    2262:	cf 91       	pop	r28
    2264:	df 91       	pop	r29
    2266:	ff 91       	pop	r31
    2268:	ef 91       	pop	r30
    226a:	bf 91       	pop	r27
    226c:	af 91       	pop	r26
    226e:	9f 91       	pop	r25
    2270:	8f 91       	pop	r24
    2272:	7f 91       	pop	r23
    2274:	6f 91       	pop	r22
    2276:	5f 91       	pop	r21
    2278:	4f 91       	pop	r20
    227a:	3f 91       	pop	r19
    227c:	2f 91       	pop	r18
    227e:	0f 90       	pop	r0
    2280:	0f be       	out	0x3f, r0	; 63
    2282:	0f 90       	pop	r0
    2284:	1f 90       	pop	r1
    2286:	18 95       	reti

00002288 <__vector_3>:
ISR(VECT_INT2) {
    2288:	1f 92       	push	r1
    228a:	0f 92       	push	r0
    228c:	0f b6       	in	r0, 0x3f	; 63
    228e:	0f 92       	push	r0
    2290:	11 24       	eor	r1, r1
    2292:	2f 93       	push	r18
    2294:	3f 93       	push	r19
    2296:	4f 93       	push	r20
    2298:	5f 93       	push	r21
    229a:	6f 93       	push	r22
    229c:	7f 93       	push	r23
    229e:	8f 93       	push	r24
    22a0:	9f 93       	push	r25
    22a2:	af 93       	push	r26
    22a4:	bf 93       	push	r27
    22a6:	ef 93       	push	r30
    22a8:	ff 93       	push	r31
    22aa:	df 93       	push	r29
    22ac:	cf 93       	push	r28
    22ae:	cd b7       	in	r28, 0x3d	; 61
    22b0:	de b7       	in	r29, 0x3e	; 62
	if (Gptr2 != '\0')
    22b2:	80 91 78 01 	lds	r24, 0x0178
    22b6:	90 91 79 01 	lds	r25, 0x0179
    22ba:	00 97       	sbiw	r24, 0x00	; 0
    22bc:	29 f0       	breq	.+10     	; 0x22c8 <__vector_3+0x40>
		Gptr2();
    22be:	e0 91 78 01 	lds	r30, 0x0178
    22c2:	f0 91 79 01 	lds	r31, 0x0179
    22c6:	09 95       	icall
}
    22c8:	cf 91       	pop	r28
    22ca:	df 91       	pop	r29
    22cc:	ff 91       	pop	r31
    22ce:	ef 91       	pop	r30
    22d0:	bf 91       	pop	r27
    22d2:	af 91       	pop	r26
    22d4:	9f 91       	pop	r25
    22d6:	8f 91       	pop	r24
    22d8:	7f 91       	pop	r23
    22da:	6f 91       	pop	r22
    22dc:	5f 91       	pop	r21
    22de:	4f 91       	pop	r20
    22e0:	3f 91       	pop	r19
    22e2:	2f 91       	pop	r18
    22e4:	0f 90       	pop	r0
    22e6:	0f be       	out	0x3f, r0	; 63
    22e8:	0f 90       	pop	r0
    22ea:	1f 90       	pop	r1
    22ec:	18 95       	reti

000022ee <MCAL_DIO_u8SetPortDirection>:
 *      Author: Mohamed
 */

#include "DIO.h"

STD_Type MCAL_DIO_u8SetPortDirection(u8 Loc_u8PortID, u8 Loc_u8PortDirection) {
    22ee:	df 93       	push	r29
    22f0:	cf 93       	push	r28
    22f2:	00 d0       	rcall	.+0      	; 0x22f4 <MCAL_DIO_u8SetPortDirection+0x6>
    22f4:	0f 92       	push	r0
    22f6:	cd b7       	in	r28, 0x3d	; 61
    22f8:	de b7       	in	r29, 0x3e	; 62
    22fa:	8a 83       	std	Y+2, r24	; 0x02
    22fc:	6b 83       	std	Y+3, r22	; 0x03
	u8 Loc_u8Return_Value = E_NOT_OK;
    22fe:	81 e0       	ldi	r24, 0x01	; 1
    2300:	89 83       	std	Y+1, r24	; 0x01
	if (Loc_u8PortID <= PortD && Loc_u8PortDirection <= PORT_OUTPUT) {
    2302:	8a 81       	ldd	r24, Y+2	; 0x02
    2304:	84 30       	cpi	r24, 0x04	; 4
    2306:	08 f0       	brcs	.+2      	; 0x230a <MCAL_DIO_u8SetPortDirection+0x1c>
    2308:	6e c0       	rjmp	.+220    	; 0x23e6 <MCAL_DIO_u8SetPortDirection+0xf8>
		if (Loc_u8PortDirection == PORT_OUTPUT) {
    230a:	8b 81       	ldd	r24, Y+3	; 0x03
    230c:	8f 3f       	cpi	r24, 0xFF	; 255
    230e:	29 f5       	brne	.+74     	; 0x235a <MCAL_DIO_u8SetPortDirection+0x6c>
			if (Loc_u8PortID == PortA) {
    2310:	8a 81       	ldd	r24, Y+2	; 0x02
    2312:	88 23       	and	r24, r24
    2314:	31 f4       	brne	.+12     	; 0x2322 <MCAL_DIO_u8SetPortDirection+0x34>
				DDRA = PORT_OUTPUT;
    2316:	ea e3       	ldi	r30, 0x3A	; 58
    2318:	f0 e0       	ldi	r31, 0x00	; 0
    231a:	8f ef       	ldi	r24, 0xFF	; 255
    231c:	80 83       	st	Z, r24
				Loc_u8Return_Value = E_OK;
    231e:	19 82       	std	Y+1, r1	; 0x01
    2320:	62 c0       	rjmp	.+196    	; 0x23e6 <MCAL_DIO_u8SetPortDirection+0xf8>
			} else if (Loc_u8PortID == PortB) {
    2322:	8a 81       	ldd	r24, Y+2	; 0x02
    2324:	81 30       	cpi	r24, 0x01	; 1
    2326:	31 f4       	brne	.+12     	; 0x2334 <MCAL_DIO_u8SetPortDirection+0x46>
				DDRB = PORT_OUTPUT;
    2328:	e7 e3       	ldi	r30, 0x37	; 55
    232a:	f0 e0       	ldi	r31, 0x00	; 0
    232c:	8f ef       	ldi	r24, 0xFF	; 255
    232e:	80 83       	st	Z, r24
				Loc_u8Return_Value = E_OK;
    2330:	19 82       	std	Y+1, r1	; 0x01
    2332:	59 c0       	rjmp	.+178    	; 0x23e6 <MCAL_DIO_u8SetPortDirection+0xf8>
			} else if (Loc_u8PortID == PortC) {
    2334:	8a 81       	ldd	r24, Y+2	; 0x02
    2336:	82 30       	cpi	r24, 0x02	; 2
    2338:	31 f4       	brne	.+12     	; 0x2346 <MCAL_DIO_u8SetPortDirection+0x58>
				DDRC = PORT_OUTPUT;
    233a:	e4 e3       	ldi	r30, 0x34	; 52
    233c:	f0 e0       	ldi	r31, 0x00	; 0
    233e:	8f ef       	ldi	r24, 0xFF	; 255
    2340:	80 83       	st	Z, r24
				Loc_u8Return_Value = E_OK;
    2342:	19 82       	std	Y+1, r1	; 0x01
    2344:	50 c0       	rjmp	.+160    	; 0x23e6 <MCAL_DIO_u8SetPortDirection+0xf8>
			} else if (Loc_u8PortID == PortD) {
    2346:	8a 81       	ldd	r24, Y+2	; 0x02
    2348:	83 30       	cpi	r24, 0x03	; 3
    234a:	09 f0       	breq	.+2      	; 0x234e <MCAL_DIO_u8SetPortDirection+0x60>
    234c:	4c c0       	rjmp	.+152    	; 0x23e6 <MCAL_DIO_u8SetPortDirection+0xf8>
				DDRD = PORT_OUTPUT;
    234e:	e1 e3       	ldi	r30, 0x31	; 49
    2350:	f0 e0       	ldi	r31, 0x00	; 0
    2352:	8f ef       	ldi	r24, 0xFF	; 255
    2354:	80 83       	st	Z, r24
				Loc_u8Return_Value = E_OK;
    2356:	19 82       	std	Y+1, r1	; 0x01
    2358:	46 c0       	rjmp	.+140    	; 0x23e6 <MCAL_DIO_u8SetPortDirection+0xf8>
			} else {
				//Do Nothing
			}
		} else if (Loc_u8PortDirection == PORT_INPUT) {
    235a:	8b 81       	ldd	r24, Y+3	; 0x03
    235c:	88 23       	and	r24, r24
    235e:	01 f5       	brne	.+64     	; 0x23a0 <MCAL_DIO_u8SetPortDirection+0xb2>
			if (Loc_u8PortID == PortA) {
    2360:	8a 81       	ldd	r24, Y+2	; 0x02
    2362:	88 23       	and	r24, r24
    2364:	29 f4       	brne	.+10     	; 0x2370 <MCAL_DIO_u8SetPortDirection+0x82>
				DDRA = PORT_INPUT;
    2366:	ea e3       	ldi	r30, 0x3A	; 58
    2368:	f0 e0       	ldi	r31, 0x00	; 0
    236a:	10 82       	st	Z, r1
				Loc_u8Return_Value = E_OK;
    236c:	19 82       	std	Y+1, r1	; 0x01
    236e:	3b c0       	rjmp	.+118    	; 0x23e6 <MCAL_DIO_u8SetPortDirection+0xf8>
			} else if (Loc_u8PortID == PortB) {
    2370:	8a 81       	ldd	r24, Y+2	; 0x02
    2372:	81 30       	cpi	r24, 0x01	; 1
    2374:	29 f4       	brne	.+10     	; 0x2380 <MCAL_DIO_u8SetPortDirection+0x92>
				DDRB = PORT_INPUT;
    2376:	e7 e3       	ldi	r30, 0x37	; 55
    2378:	f0 e0       	ldi	r31, 0x00	; 0
    237a:	10 82       	st	Z, r1
				Loc_u8Return_Value = E_OK;
    237c:	19 82       	std	Y+1, r1	; 0x01
    237e:	33 c0       	rjmp	.+102    	; 0x23e6 <MCAL_DIO_u8SetPortDirection+0xf8>
			} else if (Loc_u8PortID == PortC) {
    2380:	8a 81       	ldd	r24, Y+2	; 0x02
    2382:	82 30       	cpi	r24, 0x02	; 2
    2384:	29 f4       	brne	.+10     	; 0x2390 <MCAL_DIO_u8SetPortDirection+0xa2>
				DDRC = PORT_INPUT;
    2386:	e4 e3       	ldi	r30, 0x34	; 52
    2388:	f0 e0       	ldi	r31, 0x00	; 0
    238a:	10 82       	st	Z, r1
				Loc_u8Return_Value = E_OK;
    238c:	19 82       	std	Y+1, r1	; 0x01
    238e:	2b c0       	rjmp	.+86     	; 0x23e6 <MCAL_DIO_u8SetPortDirection+0xf8>
			} else if (Loc_u8PortID == PortD) {
    2390:	8a 81       	ldd	r24, Y+2	; 0x02
    2392:	83 30       	cpi	r24, 0x03	; 3
    2394:	41 f5       	brne	.+80     	; 0x23e6 <MCAL_DIO_u8SetPortDirection+0xf8>
				DDRD = PORT_INPUT;
    2396:	e1 e3       	ldi	r30, 0x31	; 49
    2398:	f0 e0       	ldi	r31, 0x00	; 0
    239a:	10 82       	st	Z, r1
				Loc_u8Return_Value = E_OK;
    239c:	19 82       	std	Y+1, r1	; 0x01
    239e:	23 c0       	rjmp	.+70     	; 0x23e6 <MCAL_DIO_u8SetPortDirection+0xf8>
			} else {
				//Do Nothing
			}
		} else {
			if (Loc_u8PortID == PortA) {
    23a0:	8a 81       	ldd	r24, Y+2	; 0x02
    23a2:	88 23       	and	r24, r24
    23a4:	31 f4       	brne	.+12     	; 0x23b2 <MCAL_DIO_u8SetPortDirection+0xc4>
				DDRA = Loc_u8PortDirection;
    23a6:	ea e3       	ldi	r30, 0x3A	; 58
    23a8:	f0 e0       	ldi	r31, 0x00	; 0
    23aa:	8b 81       	ldd	r24, Y+3	; 0x03
    23ac:	80 83       	st	Z, r24
				Loc_u8Return_Value = E_OK;
    23ae:	19 82       	std	Y+1, r1	; 0x01
    23b0:	1a c0       	rjmp	.+52     	; 0x23e6 <MCAL_DIO_u8SetPortDirection+0xf8>
			} else if (Loc_u8PortID == PortB) {
    23b2:	8a 81       	ldd	r24, Y+2	; 0x02
    23b4:	81 30       	cpi	r24, 0x01	; 1
    23b6:	31 f4       	brne	.+12     	; 0x23c4 <MCAL_DIO_u8SetPortDirection+0xd6>
				DDRB = Loc_u8PortDirection;
    23b8:	e7 e3       	ldi	r30, 0x37	; 55
    23ba:	f0 e0       	ldi	r31, 0x00	; 0
    23bc:	8b 81       	ldd	r24, Y+3	; 0x03
    23be:	80 83       	st	Z, r24
				Loc_u8Return_Value = E_OK;
    23c0:	19 82       	std	Y+1, r1	; 0x01
    23c2:	11 c0       	rjmp	.+34     	; 0x23e6 <MCAL_DIO_u8SetPortDirection+0xf8>
			} else if (Loc_u8PortID == PortC) {
    23c4:	8a 81       	ldd	r24, Y+2	; 0x02
    23c6:	82 30       	cpi	r24, 0x02	; 2
    23c8:	31 f4       	brne	.+12     	; 0x23d6 <MCAL_DIO_u8SetPortDirection+0xe8>
				DDRC = Loc_u8PortDirection;
    23ca:	e4 e3       	ldi	r30, 0x34	; 52
    23cc:	f0 e0       	ldi	r31, 0x00	; 0
    23ce:	8b 81       	ldd	r24, Y+3	; 0x03
    23d0:	80 83       	st	Z, r24
				Loc_u8Return_Value = E_OK;
    23d2:	19 82       	std	Y+1, r1	; 0x01
    23d4:	08 c0       	rjmp	.+16     	; 0x23e6 <MCAL_DIO_u8SetPortDirection+0xf8>
			} else if (Loc_u8PortID == PortD) {
    23d6:	8a 81       	ldd	r24, Y+2	; 0x02
    23d8:	83 30       	cpi	r24, 0x03	; 3
    23da:	29 f4       	brne	.+10     	; 0x23e6 <MCAL_DIO_u8SetPortDirection+0xf8>
				DDRD = Loc_u8PortDirection;
    23dc:	e1 e3       	ldi	r30, 0x31	; 49
    23de:	f0 e0       	ldi	r31, 0x00	; 0
    23e0:	8b 81       	ldd	r24, Y+3	; 0x03
    23e2:	80 83       	st	Z, r24
				Loc_u8Return_Value = E_OK;
    23e4:	19 82       	std	Y+1, r1	; 0x01
			}
		}
	} else {
		//Do Nothing
	}
	return Loc_u8Return_Value;
    23e6:	89 81       	ldd	r24, Y+1	; 0x01
}
    23e8:	0f 90       	pop	r0
    23ea:	0f 90       	pop	r0
    23ec:	0f 90       	pop	r0
    23ee:	cf 91       	pop	r28
    23f0:	df 91       	pop	r29
    23f2:	08 95       	ret

000023f4 <MCAL_DIO_u8SetPinDirection>:

STD_Type MCAL_DIO_u8SetPinDirection(u8 Loc_u8PortID, u8 Loc_u8PinID,
		u8 Loc_u8PinDirection) {
    23f4:	df 93       	push	r29
    23f6:	cf 93       	push	r28
    23f8:	00 d0       	rcall	.+0      	; 0x23fa <MCAL_DIO_u8SetPinDirection+0x6>
    23fa:	00 d0       	rcall	.+0      	; 0x23fc <MCAL_DIO_u8SetPinDirection+0x8>
    23fc:	cd b7       	in	r28, 0x3d	; 61
    23fe:	de b7       	in	r29, 0x3e	; 62
    2400:	8a 83       	std	Y+2, r24	; 0x02
    2402:	6b 83       	std	Y+3, r22	; 0x03
    2404:	4c 83       	std	Y+4, r20	; 0x04
	u8 Loc_u8Return_Value = E_NOT_OK;
    2406:	81 e0       	ldi	r24, 0x01	; 1
    2408:	89 83       	std	Y+1, r24	; 0x01
	if (Loc_u8PortID <= PortD && Loc_u8PinID <= Num_Of_Pins
    240a:	8a 81       	ldd	r24, Y+2	; 0x02
    240c:	84 30       	cpi	r24, 0x04	; 4
    240e:	08 f0       	brcs	.+2      	; 0x2412 <MCAL_DIO_u8SetPinDirection+0x1e>
    2410:	d4 c0       	rjmp	.+424    	; 0x25ba <MCAL_DIO_u8SetPinDirection+0x1c6>
    2412:	8b 81       	ldd	r24, Y+3	; 0x03
    2414:	88 30       	cpi	r24, 0x08	; 8
    2416:	08 f0       	brcs	.+2      	; 0x241a <MCAL_DIO_u8SetPinDirection+0x26>
    2418:	d0 c0       	rjmp	.+416    	; 0x25ba <MCAL_DIO_u8SetPinDirection+0x1c6>
    241a:	8c 81       	ldd	r24, Y+4	; 0x04
    241c:	82 30       	cpi	r24, 0x02	; 2
    241e:	08 f0       	brcs	.+2      	; 0x2422 <MCAL_DIO_u8SetPinDirection+0x2e>
    2420:	cc c0       	rjmp	.+408    	; 0x25ba <MCAL_DIO_u8SetPinDirection+0x1c6>
			&& Loc_u8PinDirection <= Pin_High) {
		if (Loc_u8PinDirection == Pin_High) {
    2422:	8c 81       	ldd	r24, Y+4	; 0x04
    2424:	81 30       	cpi	r24, 0x01	; 1
    2426:	09 f0       	breq	.+2      	; 0x242a <MCAL_DIO_u8SetPinDirection+0x36>
    2428:	61 c0       	rjmp	.+194    	; 0x24ec <MCAL_DIO_u8SetPinDirection+0xf8>
			if (Loc_u8PortID == PortA) {
    242a:	8a 81       	ldd	r24, Y+2	; 0x02
    242c:	88 23       	and	r24, r24
    242e:	a9 f4       	brne	.+42     	; 0x245a <MCAL_DIO_u8SetPinDirection+0x66>
				SET_BIT(DDRA, Loc_u8PinID);
    2430:	aa e3       	ldi	r26, 0x3A	; 58
    2432:	b0 e0       	ldi	r27, 0x00	; 0
    2434:	ea e3       	ldi	r30, 0x3A	; 58
    2436:	f0 e0       	ldi	r31, 0x00	; 0
    2438:	80 81       	ld	r24, Z
    243a:	48 2f       	mov	r20, r24
    243c:	8b 81       	ldd	r24, Y+3	; 0x03
    243e:	28 2f       	mov	r18, r24
    2440:	30 e0       	ldi	r19, 0x00	; 0
    2442:	81 e0       	ldi	r24, 0x01	; 1
    2444:	90 e0       	ldi	r25, 0x00	; 0
    2446:	02 2e       	mov	r0, r18
    2448:	02 c0       	rjmp	.+4      	; 0x244e <MCAL_DIO_u8SetPinDirection+0x5a>
    244a:	88 0f       	add	r24, r24
    244c:	99 1f       	adc	r25, r25
    244e:	0a 94       	dec	r0
    2450:	e2 f7       	brpl	.-8      	; 0x244a <MCAL_DIO_u8SetPinDirection+0x56>
    2452:	84 2b       	or	r24, r20
    2454:	8c 93       	st	X, r24
				Loc_u8Return_Value = E_OK;
    2456:	19 82       	std	Y+1, r1	; 0x01
    2458:	b0 c0       	rjmp	.+352    	; 0x25ba <MCAL_DIO_u8SetPinDirection+0x1c6>
			} else if (Loc_u8PortID == PortB) {
    245a:	8a 81       	ldd	r24, Y+2	; 0x02
    245c:	81 30       	cpi	r24, 0x01	; 1
    245e:	a9 f4       	brne	.+42     	; 0x248a <MCAL_DIO_u8SetPinDirection+0x96>
				SET_BIT(DDRB, Loc_u8PinID);
    2460:	a7 e3       	ldi	r26, 0x37	; 55
    2462:	b0 e0       	ldi	r27, 0x00	; 0
    2464:	e7 e3       	ldi	r30, 0x37	; 55
    2466:	f0 e0       	ldi	r31, 0x00	; 0
    2468:	80 81       	ld	r24, Z
    246a:	48 2f       	mov	r20, r24
    246c:	8b 81       	ldd	r24, Y+3	; 0x03
    246e:	28 2f       	mov	r18, r24
    2470:	30 e0       	ldi	r19, 0x00	; 0
    2472:	81 e0       	ldi	r24, 0x01	; 1
    2474:	90 e0       	ldi	r25, 0x00	; 0
    2476:	02 2e       	mov	r0, r18
    2478:	02 c0       	rjmp	.+4      	; 0x247e <MCAL_DIO_u8SetPinDirection+0x8a>
    247a:	88 0f       	add	r24, r24
    247c:	99 1f       	adc	r25, r25
    247e:	0a 94       	dec	r0
    2480:	e2 f7       	brpl	.-8      	; 0x247a <MCAL_DIO_u8SetPinDirection+0x86>
    2482:	84 2b       	or	r24, r20
    2484:	8c 93       	st	X, r24
				Loc_u8Return_Value = E_OK;
    2486:	19 82       	std	Y+1, r1	; 0x01
    2488:	98 c0       	rjmp	.+304    	; 0x25ba <MCAL_DIO_u8SetPinDirection+0x1c6>
			} else if (Loc_u8PortID == PortC) {
    248a:	8a 81       	ldd	r24, Y+2	; 0x02
    248c:	82 30       	cpi	r24, 0x02	; 2
    248e:	a9 f4       	brne	.+42     	; 0x24ba <MCAL_DIO_u8SetPinDirection+0xc6>
				SET_BIT(DDRC, Loc_u8PinID);
    2490:	a4 e3       	ldi	r26, 0x34	; 52
    2492:	b0 e0       	ldi	r27, 0x00	; 0
    2494:	e4 e3       	ldi	r30, 0x34	; 52
    2496:	f0 e0       	ldi	r31, 0x00	; 0
    2498:	80 81       	ld	r24, Z
    249a:	48 2f       	mov	r20, r24
    249c:	8b 81       	ldd	r24, Y+3	; 0x03
    249e:	28 2f       	mov	r18, r24
    24a0:	30 e0       	ldi	r19, 0x00	; 0
    24a2:	81 e0       	ldi	r24, 0x01	; 1
    24a4:	90 e0       	ldi	r25, 0x00	; 0
    24a6:	02 2e       	mov	r0, r18
    24a8:	02 c0       	rjmp	.+4      	; 0x24ae <MCAL_DIO_u8SetPinDirection+0xba>
    24aa:	88 0f       	add	r24, r24
    24ac:	99 1f       	adc	r25, r25
    24ae:	0a 94       	dec	r0
    24b0:	e2 f7       	brpl	.-8      	; 0x24aa <MCAL_DIO_u8SetPinDirection+0xb6>
    24b2:	84 2b       	or	r24, r20
    24b4:	8c 93       	st	X, r24
				Loc_u8Return_Value = E_OK;
    24b6:	19 82       	std	Y+1, r1	; 0x01
    24b8:	80 c0       	rjmp	.+256    	; 0x25ba <MCAL_DIO_u8SetPinDirection+0x1c6>
			} else if (Loc_u8PortID == PortD) {
    24ba:	8a 81       	ldd	r24, Y+2	; 0x02
    24bc:	83 30       	cpi	r24, 0x03	; 3
    24be:	09 f0       	breq	.+2      	; 0x24c2 <MCAL_DIO_u8SetPinDirection+0xce>
    24c0:	7c c0       	rjmp	.+248    	; 0x25ba <MCAL_DIO_u8SetPinDirection+0x1c6>
				SET_BIT(DDRD, Loc_u8PinID);
    24c2:	a1 e3       	ldi	r26, 0x31	; 49
    24c4:	b0 e0       	ldi	r27, 0x00	; 0
    24c6:	e1 e3       	ldi	r30, 0x31	; 49
    24c8:	f0 e0       	ldi	r31, 0x00	; 0
    24ca:	80 81       	ld	r24, Z
    24cc:	48 2f       	mov	r20, r24
    24ce:	8b 81       	ldd	r24, Y+3	; 0x03
    24d0:	28 2f       	mov	r18, r24
    24d2:	30 e0       	ldi	r19, 0x00	; 0
    24d4:	81 e0       	ldi	r24, 0x01	; 1
    24d6:	90 e0       	ldi	r25, 0x00	; 0
    24d8:	02 2e       	mov	r0, r18
    24da:	02 c0       	rjmp	.+4      	; 0x24e0 <MCAL_DIO_u8SetPinDirection+0xec>
    24dc:	88 0f       	add	r24, r24
    24de:	99 1f       	adc	r25, r25
    24e0:	0a 94       	dec	r0
    24e2:	e2 f7       	brpl	.-8      	; 0x24dc <MCAL_DIO_u8SetPinDirection+0xe8>
    24e4:	84 2b       	or	r24, r20
    24e6:	8c 93       	st	X, r24
				Loc_u8Return_Value = E_OK;
    24e8:	19 82       	std	Y+1, r1	; 0x01
    24ea:	67 c0       	rjmp	.+206    	; 0x25ba <MCAL_DIO_u8SetPinDirection+0x1c6>
			} else {
				//Do Nothing
			}
		} else if (Loc_u8PinDirection == Pin_Low) {
    24ec:	8c 81       	ldd	r24, Y+4	; 0x04
    24ee:	88 23       	and	r24, r24
    24f0:	09 f0       	breq	.+2      	; 0x24f4 <MCAL_DIO_u8SetPinDirection+0x100>
    24f2:	63 c0       	rjmp	.+198    	; 0x25ba <MCAL_DIO_u8SetPinDirection+0x1c6>
			if (Loc_u8PortID == PortA) {
    24f4:	8a 81       	ldd	r24, Y+2	; 0x02
    24f6:	88 23       	and	r24, r24
    24f8:	b1 f4       	brne	.+44     	; 0x2526 <MCAL_DIO_u8SetPinDirection+0x132>
				CLR_BIT(DDRA, Loc_u8PinID);
    24fa:	aa e3       	ldi	r26, 0x3A	; 58
    24fc:	b0 e0       	ldi	r27, 0x00	; 0
    24fe:	ea e3       	ldi	r30, 0x3A	; 58
    2500:	f0 e0       	ldi	r31, 0x00	; 0
    2502:	80 81       	ld	r24, Z
    2504:	48 2f       	mov	r20, r24
    2506:	8b 81       	ldd	r24, Y+3	; 0x03
    2508:	28 2f       	mov	r18, r24
    250a:	30 e0       	ldi	r19, 0x00	; 0
    250c:	81 e0       	ldi	r24, 0x01	; 1
    250e:	90 e0       	ldi	r25, 0x00	; 0
    2510:	02 2e       	mov	r0, r18
    2512:	02 c0       	rjmp	.+4      	; 0x2518 <MCAL_DIO_u8SetPinDirection+0x124>
    2514:	88 0f       	add	r24, r24
    2516:	99 1f       	adc	r25, r25
    2518:	0a 94       	dec	r0
    251a:	e2 f7       	brpl	.-8      	; 0x2514 <MCAL_DIO_u8SetPinDirection+0x120>
    251c:	80 95       	com	r24
    251e:	84 23       	and	r24, r20
    2520:	8c 93       	st	X, r24
				Loc_u8Return_Value = E_OK;
    2522:	19 82       	std	Y+1, r1	; 0x01
    2524:	4a c0       	rjmp	.+148    	; 0x25ba <MCAL_DIO_u8SetPinDirection+0x1c6>
			} else if (Loc_u8PortID == PortB) {
    2526:	8a 81       	ldd	r24, Y+2	; 0x02
    2528:	81 30       	cpi	r24, 0x01	; 1
    252a:	b1 f4       	brne	.+44     	; 0x2558 <MCAL_DIO_u8SetPinDirection+0x164>
				CLR_BIT(DDRB, Loc_u8PinID);
    252c:	a7 e3       	ldi	r26, 0x37	; 55
    252e:	b0 e0       	ldi	r27, 0x00	; 0
    2530:	e7 e3       	ldi	r30, 0x37	; 55
    2532:	f0 e0       	ldi	r31, 0x00	; 0
    2534:	80 81       	ld	r24, Z
    2536:	48 2f       	mov	r20, r24
    2538:	8b 81       	ldd	r24, Y+3	; 0x03
    253a:	28 2f       	mov	r18, r24
    253c:	30 e0       	ldi	r19, 0x00	; 0
    253e:	81 e0       	ldi	r24, 0x01	; 1
    2540:	90 e0       	ldi	r25, 0x00	; 0
    2542:	02 2e       	mov	r0, r18
    2544:	02 c0       	rjmp	.+4      	; 0x254a <MCAL_DIO_u8SetPinDirection+0x156>
    2546:	88 0f       	add	r24, r24
    2548:	99 1f       	adc	r25, r25
    254a:	0a 94       	dec	r0
    254c:	e2 f7       	brpl	.-8      	; 0x2546 <MCAL_DIO_u8SetPinDirection+0x152>
    254e:	80 95       	com	r24
    2550:	84 23       	and	r24, r20
    2552:	8c 93       	st	X, r24
				Loc_u8Return_Value = E_OK;
    2554:	19 82       	std	Y+1, r1	; 0x01
    2556:	31 c0       	rjmp	.+98     	; 0x25ba <MCAL_DIO_u8SetPinDirection+0x1c6>
			} else if (Loc_u8PortID == PortC) {
    2558:	8a 81       	ldd	r24, Y+2	; 0x02
    255a:	82 30       	cpi	r24, 0x02	; 2
    255c:	b1 f4       	brne	.+44     	; 0x258a <MCAL_DIO_u8SetPinDirection+0x196>
				CLR_BIT(DDRC, Loc_u8PinID);
    255e:	a4 e3       	ldi	r26, 0x34	; 52
    2560:	b0 e0       	ldi	r27, 0x00	; 0
    2562:	e4 e3       	ldi	r30, 0x34	; 52
    2564:	f0 e0       	ldi	r31, 0x00	; 0
    2566:	80 81       	ld	r24, Z
    2568:	48 2f       	mov	r20, r24
    256a:	8b 81       	ldd	r24, Y+3	; 0x03
    256c:	28 2f       	mov	r18, r24
    256e:	30 e0       	ldi	r19, 0x00	; 0
    2570:	81 e0       	ldi	r24, 0x01	; 1
    2572:	90 e0       	ldi	r25, 0x00	; 0
    2574:	02 2e       	mov	r0, r18
    2576:	02 c0       	rjmp	.+4      	; 0x257c <MCAL_DIO_u8SetPinDirection+0x188>
    2578:	88 0f       	add	r24, r24
    257a:	99 1f       	adc	r25, r25
    257c:	0a 94       	dec	r0
    257e:	e2 f7       	brpl	.-8      	; 0x2578 <MCAL_DIO_u8SetPinDirection+0x184>
    2580:	80 95       	com	r24
    2582:	84 23       	and	r24, r20
    2584:	8c 93       	st	X, r24
				Loc_u8Return_Value = E_OK;
    2586:	19 82       	std	Y+1, r1	; 0x01
    2588:	18 c0       	rjmp	.+48     	; 0x25ba <MCAL_DIO_u8SetPinDirection+0x1c6>
			} else if (Loc_u8PortID == PortD) {
    258a:	8a 81       	ldd	r24, Y+2	; 0x02
    258c:	83 30       	cpi	r24, 0x03	; 3
    258e:	a9 f4       	brne	.+42     	; 0x25ba <MCAL_DIO_u8SetPinDirection+0x1c6>
				CLR_BIT(DDRD, Loc_u8PinID);
    2590:	a1 e3       	ldi	r26, 0x31	; 49
    2592:	b0 e0       	ldi	r27, 0x00	; 0
    2594:	e1 e3       	ldi	r30, 0x31	; 49
    2596:	f0 e0       	ldi	r31, 0x00	; 0
    2598:	80 81       	ld	r24, Z
    259a:	48 2f       	mov	r20, r24
    259c:	8b 81       	ldd	r24, Y+3	; 0x03
    259e:	28 2f       	mov	r18, r24
    25a0:	30 e0       	ldi	r19, 0x00	; 0
    25a2:	81 e0       	ldi	r24, 0x01	; 1
    25a4:	90 e0       	ldi	r25, 0x00	; 0
    25a6:	02 2e       	mov	r0, r18
    25a8:	02 c0       	rjmp	.+4      	; 0x25ae <MCAL_DIO_u8SetPinDirection+0x1ba>
    25aa:	88 0f       	add	r24, r24
    25ac:	99 1f       	adc	r25, r25
    25ae:	0a 94       	dec	r0
    25b0:	e2 f7       	brpl	.-8      	; 0x25aa <MCAL_DIO_u8SetPinDirection+0x1b6>
    25b2:	80 95       	com	r24
    25b4:	84 23       	and	r24, r20
    25b6:	8c 93       	st	X, r24
				Loc_u8Return_Value = E_OK;
    25b8:	19 82       	std	Y+1, r1	; 0x01
			//Do Nothing
		}
	} else {
		//Do Nothing
	}
	return Loc_u8Return_Value;
    25ba:	89 81       	ldd	r24, Y+1	; 0x01

}
    25bc:	0f 90       	pop	r0
    25be:	0f 90       	pop	r0
    25c0:	0f 90       	pop	r0
    25c2:	0f 90       	pop	r0
    25c4:	cf 91       	pop	r28
    25c6:	df 91       	pop	r29
    25c8:	08 95       	ret

000025ca <MCAL_DIO_u8SetPortValue>:

STD_Type MCAL_DIO_u8SetPortValue(u8 Loc_u8PortID, u8 Loc_u8PortValue) {
    25ca:	df 93       	push	r29
    25cc:	cf 93       	push	r28
    25ce:	00 d0       	rcall	.+0      	; 0x25d0 <MCAL_DIO_u8SetPortValue+0x6>
    25d0:	0f 92       	push	r0
    25d2:	cd b7       	in	r28, 0x3d	; 61
    25d4:	de b7       	in	r29, 0x3e	; 62
    25d6:	8a 83       	std	Y+2, r24	; 0x02
    25d8:	6b 83       	std	Y+3, r22	; 0x03
	u8 Loc_u8Return_Value = E_NOT_OK;
    25da:	81 e0       	ldi	r24, 0x01	; 1
    25dc:	89 83       	std	Y+1, r24	; 0x01
	if (Loc_u8PortID <= PortD && Loc_u8PortValue <= PORT_OUTPUT) {
    25de:	8a 81       	ldd	r24, Y+2	; 0x02
    25e0:	84 30       	cpi	r24, 0x04	; 4
    25e2:	08 f0       	brcs	.+2      	; 0x25e6 <MCAL_DIO_u8SetPortValue+0x1c>
    25e4:	6e c0       	rjmp	.+220    	; 0x26c2 <MCAL_DIO_u8SetPortValue+0xf8>
		if (Loc_u8PortValue == PORT_OUTPUT) {
    25e6:	8b 81       	ldd	r24, Y+3	; 0x03
    25e8:	8f 3f       	cpi	r24, 0xFF	; 255
    25ea:	29 f5       	brne	.+74     	; 0x2636 <MCAL_DIO_u8SetPortValue+0x6c>
			if (Loc_u8PortID == PortA) {
    25ec:	8a 81       	ldd	r24, Y+2	; 0x02
    25ee:	88 23       	and	r24, r24
    25f0:	31 f4       	brne	.+12     	; 0x25fe <MCAL_DIO_u8SetPortValue+0x34>
				PORTA = PORT_OUTPUT;
    25f2:	eb e3       	ldi	r30, 0x3B	; 59
    25f4:	f0 e0       	ldi	r31, 0x00	; 0
    25f6:	8f ef       	ldi	r24, 0xFF	; 255
    25f8:	80 83       	st	Z, r24
				Loc_u8Return_Value = E_OK;
    25fa:	19 82       	std	Y+1, r1	; 0x01
    25fc:	62 c0       	rjmp	.+196    	; 0x26c2 <MCAL_DIO_u8SetPortValue+0xf8>
			} else if (Loc_u8PortID == PortB) {
    25fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2600:	81 30       	cpi	r24, 0x01	; 1
    2602:	31 f4       	brne	.+12     	; 0x2610 <MCAL_DIO_u8SetPortValue+0x46>
				PORTB = PORT_OUTPUT;
    2604:	e8 e3       	ldi	r30, 0x38	; 56
    2606:	f0 e0       	ldi	r31, 0x00	; 0
    2608:	8f ef       	ldi	r24, 0xFF	; 255
    260a:	80 83       	st	Z, r24
				Loc_u8Return_Value = E_OK;
    260c:	19 82       	std	Y+1, r1	; 0x01
    260e:	59 c0       	rjmp	.+178    	; 0x26c2 <MCAL_DIO_u8SetPortValue+0xf8>
			} else if (Loc_u8PortID == PortC) {
    2610:	8a 81       	ldd	r24, Y+2	; 0x02
    2612:	82 30       	cpi	r24, 0x02	; 2
    2614:	31 f4       	brne	.+12     	; 0x2622 <MCAL_DIO_u8SetPortValue+0x58>
				PORTC = PORT_OUTPUT;
    2616:	e5 e3       	ldi	r30, 0x35	; 53
    2618:	f0 e0       	ldi	r31, 0x00	; 0
    261a:	8f ef       	ldi	r24, 0xFF	; 255
    261c:	80 83       	st	Z, r24
				Loc_u8Return_Value = E_OK;
    261e:	19 82       	std	Y+1, r1	; 0x01
    2620:	50 c0       	rjmp	.+160    	; 0x26c2 <MCAL_DIO_u8SetPortValue+0xf8>
			} else if (Loc_u8PortID == PortD) {
    2622:	8a 81       	ldd	r24, Y+2	; 0x02
    2624:	83 30       	cpi	r24, 0x03	; 3
    2626:	09 f0       	breq	.+2      	; 0x262a <MCAL_DIO_u8SetPortValue+0x60>
    2628:	4c c0       	rjmp	.+152    	; 0x26c2 <MCAL_DIO_u8SetPortValue+0xf8>
				PORTD = PORT_OUTPUT;
    262a:	e2 e3       	ldi	r30, 0x32	; 50
    262c:	f0 e0       	ldi	r31, 0x00	; 0
    262e:	8f ef       	ldi	r24, 0xFF	; 255
    2630:	80 83       	st	Z, r24
				Loc_u8Return_Value = E_OK;
    2632:	19 82       	std	Y+1, r1	; 0x01
    2634:	46 c0       	rjmp	.+140    	; 0x26c2 <MCAL_DIO_u8SetPortValue+0xf8>
			} else {
				//Do Nothing
			}
		} else if (Loc_u8PortValue == PORT_INPUT) {
    2636:	8b 81       	ldd	r24, Y+3	; 0x03
    2638:	88 23       	and	r24, r24
    263a:	01 f5       	brne	.+64     	; 0x267c <MCAL_DIO_u8SetPortValue+0xb2>
			if (Loc_u8PortID == PortA) {
    263c:	8a 81       	ldd	r24, Y+2	; 0x02
    263e:	88 23       	and	r24, r24
    2640:	29 f4       	brne	.+10     	; 0x264c <MCAL_DIO_u8SetPortValue+0x82>
				PORTA = PORT_INPUT;
    2642:	eb e3       	ldi	r30, 0x3B	; 59
    2644:	f0 e0       	ldi	r31, 0x00	; 0
    2646:	10 82       	st	Z, r1
				Loc_u8Return_Value = E_OK;
    2648:	19 82       	std	Y+1, r1	; 0x01
    264a:	3b c0       	rjmp	.+118    	; 0x26c2 <MCAL_DIO_u8SetPortValue+0xf8>
			} else if (Loc_u8PortID == PortB) {
    264c:	8a 81       	ldd	r24, Y+2	; 0x02
    264e:	81 30       	cpi	r24, 0x01	; 1
    2650:	29 f4       	brne	.+10     	; 0x265c <MCAL_DIO_u8SetPortValue+0x92>
				PORTB = PORT_INPUT;
    2652:	e8 e3       	ldi	r30, 0x38	; 56
    2654:	f0 e0       	ldi	r31, 0x00	; 0
    2656:	10 82       	st	Z, r1
				Loc_u8Return_Value = E_OK;
    2658:	19 82       	std	Y+1, r1	; 0x01
    265a:	33 c0       	rjmp	.+102    	; 0x26c2 <MCAL_DIO_u8SetPortValue+0xf8>
			} else if (Loc_u8PortID == PortC) {
    265c:	8a 81       	ldd	r24, Y+2	; 0x02
    265e:	82 30       	cpi	r24, 0x02	; 2
    2660:	29 f4       	brne	.+10     	; 0x266c <MCAL_DIO_u8SetPortValue+0xa2>
				PORTC = PORT_INPUT;
    2662:	e5 e3       	ldi	r30, 0x35	; 53
    2664:	f0 e0       	ldi	r31, 0x00	; 0
    2666:	10 82       	st	Z, r1
				Loc_u8Return_Value = E_OK;
    2668:	19 82       	std	Y+1, r1	; 0x01
    266a:	2b c0       	rjmp	.+86     	; 0x26c2 <MCAL_DIO_u8SetPortValue+0xf8>
			} else if (Loc_u8PortID == PortD) {
    266c:	8a 81       	ldd	r24, Y+2	; 0x02
    266e:	83 30       	cpi	r24, 0x03	; 3
    2670:	41 f5       	brne	.+80     	; 0x26c2 <MCAL_DIO_u8SetPortValue+0xf8>
				PORTD = PORT_INPUT;
    2672:	e2 e3       	ldi	r30, 0x32	; 50
    2674:	f0 e0       	ldi	r31, 0x00	; 0
    2676:	10 82       	st	Z, r1
				Loc_u8Return_Value = E_OK;
    2678:	19 82       	std	Y+1, r1	; 0x01
    267a:	23 c0       	rjmp	.+70     	; 0x26c2 <MCAL_DIO_u8SetPortValue+0xf8>
			} else {
				//Do Nothing
			}
		} else {
			if (Loc_u8PortID == PortA) {
    267c:	8a 81       	ldd	r24, Y+2	; 0x02
    267e:	88 23       	and	r24, r24
    2680:	31 f4       	brne	.+12     	; 0x268e <MCAL_DIO_u8SetPortValue+0xc4>
				PORTA = Loc_u8PortValue;
    2682:	eb e3       	ldi	r30, 0x3B	; 59
    2684:	f0 e0       	ldi	r31, 0x00	; 0
    2686:	8b 81       	ldd	r24, Y+3	; 0x03
    2688:	80 83       	st	Z, r24
				Loc_u8Return_Value = E_OK;
    268a:	19 82       	std	Y+1, r1	; 0x01
    268c:	1a c0       	rjmp	.+52     	; 0x26c2 <MCAL_DIO_u8SetPortValue+0xf8>
			} else if (Loc_u8PortID == PortB) {
    268e:	8a 81       	ldd	r24, Y+2	; 0x02
    2690:	81 30       	cpi	r24, 0x01	; 1
    2692:	31 f4       	brne	.+12     	; 0x26a0 <MCAL_DIO_u8SetPortValue+0xd6>
				PORTB = Loc_u8PortValue;
    2694:	e8 e3       	ldi	r30, 0x38	; 56
    2696:	f0 e0       	ldi	r31, 0x00	; 0
    2698:	8b 81       	ldd	r24, Y+3	; 0x03
    269a:	80 83       	st	Z, r24
				Loc_u8Return_Value = E_OK;
    269c:	19 82       	std	Y+1, r1	; 0x01
    269e:	11 c0       	rjmp	.+34     	; 0x26c2 <MCAL_DIO_u8SetPortValue+0xf8>
			} else if (Loc_u8PortID == PortC) {
    26a0:	8a 81       	ldd	r24, Y+2	; 0x02
    26a2:	82 30       	cpi	r24, 0x02	; 2
    26a4:	31 f4       	brne	.+12     	; 0x26b2 <MCAL_DIO_u8SetPortValue+0xe8>
				PORTC = Loc_u8PortValue;
    26a6:	e5 e3       	ldi	r30, 0x35	; 53
    26a8:	f0 e0       	ldi	r31, 0x00	; 0
    26aa:	8b 81       	ldd	r24, Y+3	; 0x03
    26ac:	80 83       	st	Z, r24
				Loc_u8Return_Value = E_OK;
    26ae:	19 82       	std	Y+1, r1	; 0x01
    26b0:	08 c0       	rjmp	.+16     	; 0x26c2 <MCAL_DIO_u8SetPortValue+0xf8>
			} else if (Loc_u8PortID == PortD) {
    26b2:	8a 81       	ldd	r24, Y+2	; 0x02
    26b4:	83 30       	cpi	r24, 0x03	; 3
    26b6:	29 f4       	brne	.+10     	; 0x26c2 <MCAL_DIO_u8SetPortValue+0xf8>
				PORTD = Loc_u8PortValue;
    26b8:	e2 e3       	ldi	r30, 0x32	; 50
    26ba:	f0 e0       	ldi	r31, 0x00	; 0
    26bc:	8b 81       	ldd	r24, Y+3	; 0x03
    26be:	80 83       	st	Z, r24
				Loc_u8Return_Value = E_OK;
    26c0:	19 82       	std	Y+1, r1	; 0x01
			}
		}
	} else {
		//Do Nothing
	}
	return Loc_u8Return_Value;
    26c2:	89 81       	ldd	r24, Y+1	; 0x01
}
    26c4:	0f 90       	pop	r0
    26c6:	0f 90       	pop	r0
    26c8:	0f 90       	pop	r0
    26ca:	cf 91       	pop	r28
    26cc:	df 91       	pop	r29
    26ce:	08 95       	ret

000026d0 <MCAL_DIO_u8SetPinValue>:

STD_Type MCAL_DIO_u8SetPinValue(u8 Loc_u8PortID, u8 Loc_u8PinID,
		u8 Loc_u8PinValue) {
    26d0:	df 93       	push	r29
    26d2:	cf 93       	push	r28
    26d4:	00 d0       	rcall	.+0      	; 0x26d6 <MCAL_DIO_u8SetPinValue+0x6>
    26d6:	00 d0       	rcall	.+0      	; 0x26d8 <MCAL_DIO_u8SetPinValue+0x8>
    26d8:	cd b7       	in	r28, 0x3d	; 61
    26da:	de b7       	in	r29, 0x3e	; 62
    26dc:	8a 83       	std	Y+2, r24	; 0x02
    26de:	6b 83       	std	Y+3, r22	; 0x03
    26e0:	4c 83       	std	Y+4, r20	; 0x04
	u8 Loc_u8Return_Value = E_NOT_OK;
    26e2:	81 e0       	ldi	r24, 0x01	; 1
    26e4:	89 83       	std	Y+1, r24	; 0x01
	if (Loc_u8PortID <= PortD && Loc_u8PinID <= Num_Of_Pins
    26e6:	8a 81       	ldd	r24, Y+2	; 0x02
    26e8:	84 30       	cpi	r24, 0x04	; 4
    26ea:	08 f0       	brcs	.+2      	; 0x26ee <MCAL_DIO_u8SetPinValue+0x1e>
    26ec:	d4 c0       	rjmp	.+424    	; 0x2896 <MCAL_DIO_u8SetPinValue+0x1c6>
    26ee:	8b 81       	ldd	r24, Y+3	; 0x03
    26f0:	88 30       	cpi	r24, 0x08	; 8
    26f2:	08 f0       	brcs	.+2      	; 0x26f6 <MCAL_DIO_u8SetPinValue+0x26>
    26f4:	d0 c0       	rjmp	.+416    	; 0x2896 <MCAL_DIO_u8SetPinValue+0x1c6>
    26f6:	8c 81       	ldd	r24, Y+4	; 0x04
    26f8:	82 30       	cpi	r24, 0x02	; 2
    26fa:	08 f0       	brcs	.+2      	; 0x26fe <MCAL_DIO_u8SetPinValue+0x2e>
    26fc:	cc c0       	rjmp	.+408    	; 0x2896 <MCAL_DIO_u8SetPinValue+0x1c6>
			&& Loc_u8PinValue <= Pin_High) {
		if (Loc_u8PinValue == Pin_High) {
    26fe:	8c 81       	ldd	r24, Y+4	; 0x04
    2700:	81 30       	cpi	r24, 0x01	; 1
    2702:	09 f0       	breq	.+2      	; 0x2706 <MCAL_DIO_u8SetPinValue+0x36>
    2704:	61 c0       	rjmp	.+194    	; 0x27c8 <MCAL_DIO_u8SetPinValue+0xf8>
			if (Loc_u8PortID == PortA) {
    2706:	8a 81       	ldd	r24, Y+2	; 0x02
    2708:	88 23       	and	r24, r24
    270a:	a9 f4       	brne	.+42     	; 0x2736 <MCAL_DIO_u8SetPinValue+0x66>
				SET_BIT(PORTA, Loc_u8PinID);
    270c:	ab e3       	ldi	r26, 0x3B	; 59
    270e:	b0 e0       	ldi	r27, 0x00	; 0
    2710:	eb e3       	ldi	r30, 0x3B	; 59
    2712:	f0 e0       	ldi	r31, 0x00	; 0
    2714:	80 81       	ld	r24, Z
    2716:	48 2f       	mov	r20, r24
    2718:	8b 81       	ldd	r24, Y+3	; 0x03
    271a:	28 2f       	mov	r18, r24
    271c:	30 e0       	ldi	r19, 0x00	; 0
    271e:	81 e0       	ldi	r24, 0x01	; 1
    2720:	90 e0       	ldi	r25, 0x00	; 0
    2722:	02 2e       	mov	r0, r18
    2724:	02 c0       	rjmp	.+4      	; 0x272a <MCAL_DIO_u8SetPinValue+0x5a>
    2726:	88 0f       	add	r24, r24
    2728:	99 1f       	adc	r25, r25
    272a:	0a 94       	dec	r0
    272c:	e2 f7       	brpl	.-8      	; 0x2726 <MCAL_DIO_u8SetPinValue+0x56>
    272e:	84 2b       	or	r24, r20
    2730:	8c 93       	st	X, r24
				Loc_u8Return_Value = E_OK;
    2732:	19 82       	std	Y+1, r1	; 0x01
    2734:	b0 c0       	rjmp	.+352    	; 0x2896 <MCAL_DIO_u8SetPinValue+0x1c6>
			} else if (Loc_u8PortID == PortB) {
    2736:	8a 81       	ldd	r24, Y+2	; 0x02
    2738:	81 30       	cpi	r24, 0x01	; 1
    273a:	a9 f4       	brne	.+42     	; 0x2766 <MCAL_DIO_u8SetPinValue+0x96>
				SET_BIT(PORTB, Loc_u8PinID);
    273c:	a8 e3       	ldi	r26, 0x38	; 56
    273e:	b0 e0       	ldi	r27, 0x00	; 0
    2740:	e8 e3       	ldi	r30, 0x38	; 56
    2742:	f0 e0       	ldi	r31, 0x00	; 0
    2744:	80 81       	ld	r24, Z
    2746:	48 2f       	mov	r20, r24
    2748:	8b 81       	ldd	r24, Y+3	; 0x03
    274a:	28 2f       	mov	r18, r24
    274c:	30 e0       	ldi	r19, 0x00	; 0
    274e:	81 e0       	ldi	r24, 0x01	; 1
    2750:	90 e0       	ldi	r25, 0x00	; 0
    2752:	02 2e       	mov	r0, r18
    2754:	02 c0       	rjmp	.+4      	; 0x275a <MCAL_DIO_u8SetPinValue+0x8a>
    2756:	88 0f       	add	r24, r24
    2758:	99 1f       	adc	r25, r25
    275a:	0a 94       	dec	r0
    275c:	e2 f7       	brpl	.-8      	; 0x2756 <MCAL_DIO_u8SetPinValue+0x86>
    275e:	84 2b       	or	r24, r20
    2760:	8c 93       	st	X, r24
				Loc_u8Return_Value = E_OK;
    2762:	19 82       	std	Y+1, r1	; 0x01
    2764:	98 c0       	rjmp	.+304    	; 0x2896 <MCAL_DIO_u8SetPinValue+0x1c6>
			} else if (Loc_u8PortID == PortC) {
    2766:	8a 81       	ldd	r24, Y+2	; 0x02
    2768:	82 30       	cpi	r24, 0x02	; 2
    276a:	a9 f4       	brne	.+42     	; 0x2796 <MCAL_DIO_u8SetPinValue+0xc6>
				SET_BIT(PORTC, Loc_u8PinID);
    276c:	a5 e3       	ldi	r26, 0x35	; 53
    276e:	b0 e0       	ldi	r27, 0x00	; 0
    2770:	e5 e3       	ldi	r30, 0x35	; 53
    2772:	f0 e0       	ldi	r31, 0x00	; 0
    2774:	80 81       	ld	r24, Z
    2776:	48 2f       	mov	r20, r24
    2778:	8b 81       	ldd	r24, Y+3	; 0x03
    277a:	28 2f       	mov	r18, r24
    277c:	30 e0       	ldi	r19, 0x00	; 0
    277e:	81 e0       	ldi	r24, 0x01	; 1
    2780:	90 e0       	ldi	r25, 0x00	; 0
    2782:	02 2e       	mov	r0, r18
    2784:	02 c0       	rjmp	.+4      	; 0x278a <MCAL_DIO_u8SetPinValue+0xba>
    2786:	88 0f       	add	r24, r24
    2788:	99 1f       	adc	r25, r25
    278a:	0a 94       	dec	r0
    278c:	e2 f7       	brpl	.-8      	; 0x2786 <MCAL_DIO_u8SetPinValue+0xb6>
    278e:	84 2b       	or	r24, r20
    2790:	8c 93       	st	X, r24
				Loc_u8Return_Value = E_OK;
    2792:	19 82       	std	Y+1, r1	; 0x01
    2794:	80 c0       	rjmp	.+256    	; 0x2896 <MCAL_DIO_u8SetPinValue+0x1c6>
			} else if (Loc_u8PortID == PortD) {
    2796:	8a 81       	ldd	r24, Y+2	; 0x02
    2798:	83 30       	cpi	r24, 0x03	; 3
    279a:	09 f0       	breq	.+2      	; 0x279e <MCAL_DIO_u8SetPinValue+0xce>
    279c:	7c c0       	rjmp	.+248    	; 0x2896 <MCAL_DIO_u8SetPinValue+0x1c6>
				SET_BIT(PORTD, Loc_u8PinID);
    279e:	a2 e3       	ldi	r26, 0x32	; 50
    27a0:	b0 e0       	ldi	r27, 0x00	; 0
    27a2:	e2 e3       	ldi	r30, 0x32	; 50
    27a4:	f0 e0       	ldi	r31, 0x00	; 0
    27a6:	80 81       	ld	r24, Z
    27a8:	48 2f       	mov	r20, r24
    27aa:	8b 81       	ldd	r24, Y+3	; 0x03
    27ac:	28 2f       	mov	r18, r24
    27ae:	30 e0       	ldi	r19, 0x00	; 0
    27b0:	81 e0       	ldi	r24, 0x01	; 1
    27b2:	90 e0       	ldi	r25, 0x00	; 0
    27b4:	02 2e       	mov	r0, r18
    27b6:	02 c0       	rjmp	.+4      	; 0x27bc <MCAL_DIO_u8SetPinValue+0xec>
    27b8:	88 0f       	add	r24, r24
    27ba:	99 1f       	adc	r25, r25
    27bc:	0a 94       	dec	r0
    27be:	e2 f7       	brpl	.-8      	; 0x27b8 <MCAL_DIO_u8SetPinValue+0xe8>
    27c0:	84 2b       	or	r24, r20
    27c2:	8c 93       	st	X, r24
				Loc_u8Return_Value = E_OK;
    27c4:	19 82       	std	Y+1, r1	; 0x01
    27c6:	67 c0       	rjmp	.+206    	; 0x2896 <MCAL_DIO_u8SetPinValue+0x1c6>
			} else {
				//Do Nothing
			}
		} else if (Loc_u8PinValue == Pin_Low) {
    27c8:	8c 81       	ldd	r24, Y+4	; 0x04
    27ca:	88 23       	and	r24, r24
    27cc:	09 f0       	breq	.+2      	; 0x27d0 <MCAL_DIO_u8SetPinValue+0x100>
    27ce:	63 c0       	rjmp	.+198    	; 0x2896 <MCAL_DIO_u8SetPinValue+0x1c6>
			if (Loc_u8PortID == PortA) {
    27d0:	8a 81       	ldd	r24, Y+2	; 0x02
    27d2:	88 23       	and	r24, r24
    27d4:	b1 f4       	brne	.+44     	; 0x2802 <MCAL_DIO_u8SetPinValue+0x132>
				CLR_BIT(PORTA, Loc_u8PinID);
    27d6:	ab e3       	ldi	r26, 0x3B	; 59
    27d8:	b0 e0       	ldi	r27, 0x00	; 0
    27da:	eb e3       	ldi	r30, 0x3B	; 59
    27dc:	f0 e0       	ldi	r31, 0x00	; 0
    27de:	80 81       	ld	r24, Z
    27e0:	48 2f       	mov	r20, r24
    27e2:	8b 81       	ldd	r24, Y+3	; 0x03
    27e4:	28 2f       	mov	r18, r24
    27e6:	30 e0       	ldi	r19, 0x00	; 0
    27e8:	81 e0       	ldi	r24, 0x01	; 1
    27ea:	90 e0       	ldi	r25, 0x00	; 0
    27ec:	02 2e       	mov	r0, r18
    27ee:	02 c0       	rjmp	.+4      	; 0x27f4 <MCAL_DIO_u8SetPinValue+0x124>
    27f0:	88 0f       	add	r24, r24
    27f2:	99 1f       	adc	r25, r25
    27f4:	0a 94       	dec	r0
    27f6:	e2 f7       	brpl	.-8      	; 0x27f0 <MCAL_DIO_u8SetPinValue+0x120>
    27f8:	80 95       	com	r24
    27fa:	84 23       	and	r24, r20
    27fc:	8c 93       	st	X, r24
				Loc_u8Return_Value = E_OK;
    27fe:	19 82       	std	Y+1, r1	; 0x01
    2800:	4a c0       	rjmp	.+148    	; 0x2896 <MCAL_DIO_u8SetPinValue+0x1c6>
			} else if (Loc_u8PortID == PortB) {
    2802:	8a 81       	ldd	r24, Y+2	; 0x02
    2804:	81 30       	cpi	r24, 0x01	; 1
    2806:	b1 f4       	brne	.+44     	; 0x2834 <MCAL_DIO_u8SetPinValue+0x164>
				CLR_BIT(PORTB, Loc_u8PinID);
    2808:	a8 e3       	ldi	r26, 0x38	; 56
    280a:	b0 e0       	ldi	r27, 0x00	; 0
    280c:	e8 e3       	ldi	r30, 0x38	; 56
    280e:	f0 e0       	ldi	r31, 0x00	; 0
    2810:	80 81       	ld	r24, Z
    2812:	48 2f       	mov	r20, r24
    2814:	8b 81       	ldd	r24, Y+3	; 0x03
    2816:	28 2f       	mov	r18, r24
    2818:	30 e0       	ldi	r19, 0x00	; 0
    281a:	81 e0       	ldi	r24, 0x01	; 1
    281c:	90 e0       	ldi	r25, 0x00	; 0
    281e:	02 2e       	mov	r0, r18
    2820:	02 c0       	rjmp	.+4      	; 0x2826 <MCAL_DIO_u8SetPinValue+0x156>
    2822:	88 0f       	add	r24, r24
    2824:	99 1f       	adc	r25, r25
    2826:	0a 94       	dec	r0
    2828:	e2 f7       	brpl	.-8      	; 0x2822 <MCAL_DIO_u8SetPinValue+0x152>
    282a:	80 95       	com	r24
    282c:	84 23       	and	r24, r20
    282e:	8c 93       	st	X, r24
				Loc_u8Return_Value = E_OK;
    2830:	19 82       	std	Y+1, r1	; 0x01
    2832:	31 c0       	rjmp	.+98     	; 0x2896 <MCAL_DIO_u8SetPinValue+0x1c6>
			} else if (Loc_u8PortID == PortC) {
    2834:	8a 81       	ldd	r24, Y+2	; 0x02
    2836:	82 30       	cpi	r24, 0x02	; 2
    2838:	b1 f4       	brne	.+44     	; 0x2866 <MCAL_DIO_u8SetPinValue+0x196>
				CLR_BIT(PORTC, Loc_u8PinID);
    283a:	a5 e3       	ldi	r26, 0x35	; 53
    283c:	b0 e0       	ldi	r27, 0x00	; 0
    283e:	e5 e3       	ldi	r30, 0x35	; 53
    2840:	f0 e0       	ldi	r31, 0x00	; 0
    2842:	80 81       	ld	r24, Z
    2844:	48 2f       	mov	r20, r24
    2846:	8b 81       	ldd	r24, Y+3	; 0x03
    2848:	28 2f       	mov	r18, r24
    284a:	30 e0       	ldi	r19, 0x00	; 0
    284c:	81 e0       	ldi	r24, 0x01	; 1
    284e:	90 e0       	ldi	r25, 0x00	; 0
    2850:	02 2e       	mov	r0, r18
    2852:	02 c0       	rjmp	.+4      	; 0x2858 <MCAL_DIO_u8SetPinValue+0x188>
    2854:	88 0f       	add	r24, r24
    2856:	99 1f       	adc	r25, r25
    2858:	0a 94       	dec	r0
    285a:	e2 f7       	brpl	.-8      	; 0x2854 <MCAL_DIO_u8SetPinValue+0x184>
    285c:	80 95       	com	r24
    285e:	84 23       	and	r24, r20
    2860:	8c 93       	st	X, r24
				Loc_u8Return_Value = E_OK;
    2862:	19 82       	std	Y+1, r1	; 0x01
    2864:	18 c0       	rjmp	.+48     	; 0x2896 <MCAL_DIO_u8SetPinValue+0x1c6>
			} else if (Loc_u8PortID == PortD) {
    2866:	8a 81       	ldd	r24, Y+2	; 0x02
    2868:	83 30       	cpi	r24, 0x03	; 3
    286a:	a9 f4       	brne	.+42     	; 0x2896 <MCAL_DIO_u8SetPinValue+0x1c6>
				CLR_BIT(PORTD, Loc_u8PinID);
    286c:	a2 e3       	ldi	r26, 0x32	; 50
    286e:	b0 e0       	ldi	r27, 0x00	; 0
    2870:	e2 e3       	ldi	r30, 0x32	; 50
    2872:	f0 e0       	ldi	r31, 0x00	; 0
    2874:	80 81       	ld	r24, Z
    2876:	48 2f       	mov	r20, r24
    2878:	8b 81       	ldd	r24, Y+3	; 0x03
    287a:	28 2f       	mov	r18, r24
    287c:	30 e0       	ldi	r19, 0x00	; 0
    287e:	81 e0       	ldi	r24, 0x01	; 1
    2880:	90 e0       	ldi	r25, 0x00	; 0
    2882:	02 2e       	mov	r0, r18
    2884:	02 c0       	rjmp	.+4      	; 0x288a <MCAL_DIO_u8SetPinValue+0x1ba>
    2886:	88 0f       	add	r24, r24
    2888:	99 1f       	adc	r25, r25
    288a:	0a 94       	dec	r0
    288c:	e2 f7       	brpl	.-8      	; 0x2886 <MCAL_DIO_u8SetPinValue+0x1b6>
    288e:	80 95       	com	r24
    2890:	84 23       	and	r24, r20
    2892:	8c 93       	st	X, r24
				Loc_u8Return_Value = E_OK;
    2894:	19 82       	std	Y+1, r1	; 0x01
			//Do Nothing
		}
	} else {
		//Do Nothing
	}
	return Loc_u8Return_Value;
    2896:	89 81       	ldd	r24, Y+1	; 0x01

}
    2898:	0f 90       	pop	r0
    289a:	0f 90       	pop	r0
    289c:	0f 90       	pop	r0
    289e:	0f 90       	pop	r0
    28a0:	cf 91       	pop	r28
    28a2:	df 91       	pop	r29
    28a4:	08 95       	ret

000028a6 <MCAL_DIO_u8SGetPortValue>:

STD_Type MCAL_DIO_u8SGetPortValue(u8 Loc_u8PortID, u8* Loc_u8PortValue) {
    28a6:	df 93       	push	r29
    28a8:	cf 93       	push	r28
    28aa:	00 d0       	rcall	.+0      	; 0x28ac <MCAL_DIO_u8SGetPortValue+0x6>
    28ac:	00 d0       	rcall	.+0      	; 0x28ae <MCAL_DIO_u8SGetPortValue+0x8>
    28ae:	cd b7       	in	r28, 0x3d	; 61
    28b0:	de b7       	in	r29, 0x3e	; 62
    28b2:	8a 83       	std	Y+2, r24	; 0x02
    28b4:	7c 83       	std	Y+4, r23	; 0x04
    28b6:	6b 83       	std	Y+3, r22	; 0x03
	u8 Loc_u8Return_Value = E_NOT_OK;
    28b8:	81 e0       	ldi	r24, 0x01	; 1
    28ba:	89 83       	std	Y+1, r24	; 0x01
	if (Loc_u8PortID <= PortD) {
    28bc:	8a 81       	ldd	r24, Y+2	; 0x02
    28be:	84 30       	cpi	r24, 0x04	; 4
    28c0:	58 f5       	brcc	.+86     	; 0x2918 <MCAL_DIO_u8SGetPortValue+0x72>
		if (Loc_u8PortID == PortA) {
    28c2:	8a 81       	ldd	r24, Y+2	; 0x02
    28c4:	88 23       	and	r24, r24
    28c6:	41 f4       	brne	.+16     	; 0x28d8 <MCAL_DIO_u8SGetPortValue+0x32>
			*Loc_u8PortValue = PORTA;
    28c8:	eb e3       	ldi	r30, 0x3B	; 59
    28ca:	f0 e0       	ldi	r31, 0x00	; 0
    28cc:	80 81       	ld	r24, Z
    28ce:	eb 81       	ldd	r30, Y+3	; 0x03
    28d0:	fc 81       	ldd	r31, Y+4	; 0x04
    28d2:	80 83       	st	Z, r24
			Loc_u8Return_Value = E_OK;
    28d4:	19 82       	std	Y+1, r1	; 0x01
    28d6:	20 c0       	rjmp	.+64     	; 0x2918 <MCAL_DIO_u8SGetPortValue+0x72>
		} else if (Loc_u8PortID == PortB) {
    28d8:	8a 81       	ldd	r24, Y+2	; 0x02
    28da:	81 30       	cpi	r24, 0x01	; 1
    28dc:	41 f4       	brne	.+16     	; 0x28ee <MCAL_DIO_u8SGetPortValue+0x48>
			*Loc_u8PortValue = PORTB;
    28de:	e8 e3       	ldi	r30, 0x38	; 56
    28e0:	f0 e0       	ldi	r31, 0x00	; 0
    28e2:	80 81       	ld	r24, Z
    28e4:	eb 81       	ldd	r30, Y+3	; 0x03
    28e6:	fc 81       	ldd	r31, Y+4	; 0x04
    28e8:	80 83       	st	Z, r24
			Loc_u8Return_Value = E_OK;
    28ea:	19 82       	std	Y+1, r1	; 0x01
    28ec:	15 c0       	rjmp	.+42     	; 0x2918 <MCAL_DIO_u8SGetPortValue+0x72>
		} else if (Loc_u8PortID == PortC) {
    28ee:	8a 81       	ldd	r24, Y+2	; 0x02
    28f0:	82 30       	cpi	r24, 0x02	; 2
    28f2:	41 f4       	brne	.+16     	; 0x2904 <MCAL_DIO_u8SGetPortValue+0x5e>
			*Loc_u8PortValue = PORTC;
    28f4:	e5 e3       	ldi	r30, 0x35	; 53
    28f6:	f0 e0       	ldi	r31, 0x00	; 0
    28f8:	80 81       	ld	r24, Z
    28fa:	eb 81       	ldd	r30, Y+3	; 0x03
    28fc:	fc 81       	ldd	r31, Y+4	; 0x04
    28fe:	80 83       	st	Z, r24
			Loc_u8Return_Value = E_OK;
    2900:	19 82       	std	Y+1, r1	; 0x01
    2902:	0a c0       	rjmp	.+20     	; 0x2918 <MCAL_DIO_u8SGetPortValue+0x72>
		} else if (Loc_u8PortID == PortD) {
    2904:	8a 81       	ldd	r24, Y+2	; 0x02
    2906:	83 30       	cpi	r24, 0x03	; 3
    2908:	39 f4       	brne	.+14     	; 0x2918 <MCAL_DIO_u8SGetPortValue+0x72>
			*Loc_u8PortValue = PORTD;
    290a:	e2 e3       	ldi	r30, 0x32	; 50
    290c:	f0 e0       	ldi	r31, 0x00	; 0
    290e:	80 81       	ld	r24, Z
    2910:	eb 81       	ldd	r30, Y+3	; 0x03
    2912:	fc 81       	ldd	r31, Y+4	; 0x04
    2914:	80 83       	st	Z, r24
			Loc_u8Return_Value = E_OK;
    2916:	19 82       	std	Y+1, r1	; 0x01
			//Do Nothing
		}
	} else {
		//Do Nothing
	}
	return Loc_u8Return_Value;
    2918:	89 81       	ldd	r24, Y+1	; 0x01
}
    291a:	0f 90       	pop	r0
    291c:	0f 90       	pop	r0
    291e:	0f 90       	pop	r0
    2920:	0f 90       	pop	r0
    2922:	cf 91       	pop	r28
    2924:	df 91       	pop	r29
    2926:	08 95       	ret

00002928 <MCAL_DIO_u8GetPinValue>:

STD_Type MCAL_DIO_u8GetPinValue(u8 Loc_u8PortID, u8 Loc_u8PinID,
		u8* Loc_u8PinValue) {
    2928:	df 93       	push	r29
    292a:	cf 93       	push	r28
    292c:	00 d0       	rcall	.+0      	; 0x292e <MCAL_DIO_u8GetPinValue+0x6>
    292e:	00 d0       	rcall	.+0      	; 0x2930 <MCAL_DIO_u8GetPinValue+0x8>
    2930:	0f 92       	push	r0
    2932:	cd b7       	in	r28, 0x3d	; 61
    2934:	de b7       	in	r29, 0x3e	; 62
    2936:	8a 83       	std	Y+2, r24	; 0x02
    2938:	6b 83       	std	Y+3, r22	; 0x03
    293a:	5d 83       	std	Y+5, r21	; 0x05
    293c:	4c 83       	std	Y+4, r20	; 0x04
	u8 Loc_u8Return_Value = E_NOT_OK;
    293e:	81 e0       	ldi	r24, 0x01	; 1
    2940:	89 83       	std	Y+1, r24	; 0x01
	if (Loc_u8PortID <= PortD && Loc_u8PinID <= Num_Of_Pins) {
    2942:	8a 81       	ldd	r24, Y+2	; 0x02
    2944:	84 30       	cpi	r24, 0x04	; 4
    2946:	08 f0       	brcs	.+2      	; 0x294a <MCAL_DIO_u8GetPinValue+0x22>
    2948:	63 c0       	rjmp	.+198    	; 0x2a10 <MCAL_DIO_u8GetPinValue+0xe8>
    294a:	8b 81       	ldd	r24, Y+3	; 0x03
    294c:	88 30       	cpi	r24, 0x08	; 8
    294e:	08 f0       	brcs	.+2      	; 0x2952 <MCAL_DIO_u8GetPinValue+0x2a>
    2950:	5f c0       	rjmp	.+190    	; 0x2a10 <MCAL_DIO_u8GetPinValue+0xe8>
		if (Loc_u8PortID == PortA) {
    2952:	8a 81       	ldd	r24, Y+2	; 0x02
    2954:	88 23       	and	r24, r24
    2956:	a9 f4       	brne	.+42     	; 0x2982 <MCAL_DIO_u8GetPinValue+0x5a>
			*Loc_u8PinValue = GET_BIT(PINA, Loc_u8PinID);
    2958:	e9 e3       	ldi	r30, 0x39	; 57
    295a:	f0 e0       	ldi	r31, 0x00	; 0
    295c:	80 81       	ld	r24, Z
    295e:	28 2f       	mov	r18, r24
    2960:	30 e0       	ldi	r19, 0x00	; 0
    2962:	8b 81       	ldd	r24, Y+3	; 0x03
    2964:	88 2f       	mov	r24, r24
    2966:	90 e0       	ldi	r25, 0x00	; 0
    2968:	a9 01       	movw	r20, r18
    296a:	02 c0       	rjmp	.+4      	; 0x2970 <MCAL_DIO_u8GetPinValue+0x48>
    296c:	55 95       	asr	r21
    296e:	47 95       	ror	r20
    2970:	8a 95       	dec	r24
    2972:	e2 f7       	brpl	.-8      	; 0x296c <MCAL_DIO_u8GetPinValue+0x44>
    2974:	ca 01       	movw	r24, r20
    2976:	81 70       	andi	r24, 0x01	; 1
    2978:	ec 81       	ldd	r30, Y+4	; 0x04
    297a:	fd 81       	ldd	r31, Y+5	; 0x05
    297c:	80 83       	st	Z, r24
			Loc_u8Return_Value = E_OK;
    297e:	19 82       	std	Y+1, r1	; 0x01
    2980:	47 c0       	rjmp	.+142    	; 0x2a10 <MCAL_DIO_u8GetPinValue+0xe8>
		} else if (Loc_u8PortID == PortB) {
    2982:	8a 81       	ldd	r24, Y+2	; 0x02
    2984:	81 30       	cpi	r24, 0x01	; 1
    2986:	a9 f4       	brne	.+42     	; 0x29b2 <MCAL_DIO_u8GetPinValue+0x8a>
			*Loc_u8PinValue = GET_BIT(PINB, Loc_u8PinID);
    2988:	e6 e3       	ldi	r30, 0x36	; 54
    298a:	f0 e0       	ldi	r31, 0x00	; 0
    298c:	80 81       	ld	r24, Z
    298e:	28 2f       	mov	r18, r24
    2990:	30 e0       	ldi	r19, 0x00	; 0
    2992:	8b 81       	ldd	r24, Y+3	; 0x03
    2994:	88 2f       	mov	r24, r24
    2996:	90 e0       	ldi	r25, 0x00	; 0
    2998:	a9 01       	movw	r20, r18
    299a:	02 c0       	rjmp	.+4      	; 0x29a0 <MCAL_DIO_u8GetPinValue+0x78>
    299c:	55 95       	asr	r21
    299e:	47 95       	ror	r20
    29a0:	8a 95       	dec	r24
    29a2:	e2 f7       	brpl	.-8      	; 0x299c <MCAL_DIO_u8GetPinValue+0x74>
    29a4:	ca 01       	movw	r24, r20
    29a6:	81 70       	andi	r24, 0x01	; 1
    29a8:	ec 81       	ldd	r30, Y+4	; 0x04
    29aa:	fd 81       	ldd	r31, Y+5	; 0x05
    29ac:	80 83       	st	Z, r24
			Loc_u8Return_Value = E_OK;
    29ae:	19 82       	std	Y+1, r1	; 0x01
    29b0:	2f c0       	rjmp	.+94     	; 0x2a10 <MCAL_DIO_u8GetPinValue+0xe8>
		} else if (Loc_u8PortID == PortC) {
    29b2:	8a 81       	ldd	r24, Y+2	; 0x02
    29b4:	82 30       	cpi	r24, 0x02	; 2
    29b6:	a9 f4       	brne	.+42     	; 0x29e2 <MCAL_DIO_u8GetPinValue+0xba>
			*Loc_u8PinValue = GET_BIT(PINC, Loc_u8PinID);
    29b8:	e3 e3       	ldi	r30, 0x33	; 51
    29ba:	f0 e0       	ldi	r31, 0x00	; 0
    29bc:	80 81       	ld	r24, Z
    29be:	28 2f       	mov	r18, r24
    29c0:	30 e0       	ldi	r19, 0x00	; 0
    29c2:	8b 81       	ldd	r24, Y+3	; 0x03
    29c4:	88 2f       	mov	r24, r24
    29c6:	90 e0       	ldi	r25, 0x00	; 0
    29c8:	a9 01       	movw	r20, r18
    29ca:	02 c0       	rjmp	.+4      	; 0x29d0 <MCAL_DIO_u8GetPinValue+0xa8>
    29cc:	55 95       	asr	r21
    29ce:	47 95       	ror	r20
    29d0:	8a 95       	dec	r24
    29d2:	e2 f7       	brpl	.-8      	; 0x29cc <MCAL_DIO_u8GetPinValue+0xa4>
    29d4:	ca 01       	movw	r24, r20
    29d6:	81 70       	andi	r24, 0x01	; 1
    29d8:	ec 81       	ldd	r30, Y+4	; 0x04
    29da:	fd 81       	ldd	r31, Y+5	; 0x05
    29dc:	80 83       	st	Z, r24
			Loc_u8Return_Value = E_OK;
    29de:	19 82       	std	Y+1, r1	; 0x01
    29e0:	17 c0       	rjmp	.+46     	; 0x2a10 <MCAL_DIO_u8GetPinValue+0xe8>
		} else if (Loc_u8PortID == PortD) {
    29e2:	8a 81       	ldd	r24, Y+2	; 0x02
    29e4:	83 30       	cpi	r24, 0x03	; 3
    29e6:	a1 f4       	brne	.+40     	; 0x2a10 <MCAL_DIO_u8GetPinValue+0xe8>
			*Loc_u8PinValue = GET_BIT(PIND, Loc_u8PinID);
    29e8:	e0 e3       	ldi	r30, 0x30	; 48
    29ea:	f0 e0       	ldi	r31, 0x00	; 0
    29ec:	80 81       	ld	r24, Z
    29ee:	28 2f       	mov	r18, r24
    29f0:	30 e0       	ldi	r19, 0x00	; 0
    29f2:	8b 81       	ldd	r24, Y+3	; 0x03
    29f4:	88 2f       	mov	r24, r24
    29f6:	90 e0       	ldi	r25, 0x00	; 0
    29f8:	a9 01       	movw	r20, r18
    29fa:	02 c0       	rjmp	.+4      	; 0x2a00 <MCAL_DIO_u8GetPinValue+0xd8>
    29fc:	55 95       	asr	r21
    29fe:	47 95       	ror	r20
    2a00:	8a 95       	dec	r24
    2a02:	e2 f7       	brpl	.-8      	; 0x29fc <MCAL_DIO_u8GetPinValue+0xd4>
    2a04:	ca 01       	movw	r24, r20
    2a06:	81 70       	andi	r24, 0x01	; 1
    2a08:	ec 81       	ldd	r30, Y+4	; 0x04
    2a0a:	fd 81       	ldd	r31, Y+5	; 0x05
    2a0c:	80 83       	st	Z, r24
			Loc_u8Return_Value = E_OK;
    2a0e:	19 82       	std	Y+1, r1	; 0x01
			//Do Nothing
		}
	} else {
		//Do Nothing
	}
	return Loc_u8Return_Value;
    2a10:	89 81       	ldd	r24, Y+1	; 0x01
}
    2a12:	0f 90       	pop	r0
    2a14:	0f 90       	pop	r0
    2a16:	0f 90       	pop	r0
    2a18:	0f 90       	pop	r0
    2a1a:	0f 90       	pop	r0
    2a1c:	cf 91       	pop	r28
    2a1e:	df 91       	pop	r29
    2a20:	08 95       	ret

00002a22 <MCAL_DIO_u8TogglePortValue>:

STD_Type MCAL_DIO_u8TogglePortValue(u8 Loc_u8PortID) {
    2a22:	df 93       	push	r29
    2a24:	cf 93       	push	r28
    2a26:	00 d0       	rcall	.+0      	; 0x2a28 <MCAL_DIO_u8TogglePortValue+0x6>
    2a28:	cd b7       	in	r28, 0x3d	; 61
    2a2a:	de b7       	in	r29, 0x3e	; 62
    2a2c:	8a 83       	std	Y+2, r24	; 0x02
	u8 Loc_u8Return_Value = E_NOT_OK;
    2a2e:	81 e0       	ldi	r24, 0x01	; 1
    2a30:	89 83       	std	Y+1, r24	; 0x01
	if (Loc_u8PortID <= PortD) {
    2a32:	8a 81       	ldd	r24, Y+2	; 0x02
    2a34:	84 30       	cpi	r24, 0x04	; 4
    2a36:	78 f5       	brcc	.+94     	; 0x2a96 <MCAL_DIO_u8TogglePortValue+0x74>
		if (Loc_u8PortID == PortA) {
    2a38:	8a 81       	ldd	r24, Y+2	; 0x02
    2a3a:	88 23       	and	r24, r24
    2a3c:	49 f4       	brne	.+18     	; 0x2a50 <MCAL_DIO_u8TogglePortValue+0x2e>
			PORTA = ~PORTA;
    2a3e:	ab e3       	ldi	r26, 0x3B	; 59
    2a40:	b0 e0       	ldi	r27, 0x00	; 0
    2a42:	eb e3       	ldi	r30, 0x3B	; 59
    2a44:	f0 e0       	ldi	r31, 0x00	; 0
    2a46:	80 81       	ld	r24, Z
    2a48:	80 95       	com	r24
    2a4a:	8c 93       	st	X, r24
			Loc_u8Return_Value = E_OK;
    2a4c:	19 82       	std	Y+1, r1	; 0x01
    2a4e:	23 c0       	rjmp	.+70     	; 0x2a96 <MCAL_DIO_u8TogglePortValue+0x74>
		} else if (Loc_u8PortID == PortB) {
    2a50:	8a 81       	ldd	r24, Y+2	; 0x02
    2a52:	81 30       	cpi	r24, 0x01	; 1
    2a54:	49 f4       	brne	.+18     	; 0x2a68 <MCAL_DIO_u8TogglePortValue+0x46>
			PORTB = ~PORTB;
    2a56:	a8 e3       	ldi	r26, 0x38	; 56
    2a58:	b0 e0       	ldi	r27, 0x00	; 0
    2a5a:	e8 e3       	ldi	r30, 0x38	; 56
    2a5c:	f0 e0       	ldi	r31, 0x00	; 0
    2a5e:	80 81       	ld	r24, Z
    2a60:	80 95       	com	r24
    2a62:	8c 93       	st	X, r24
			Loc_u8Return_Value = E_OK;
    2a64:	19 82       	std	Y+1, r1	; 0x01
    2a66:	17 c0       	rjmp	.+46     	; 0x2a96 <MCAL_DIO_u8TogglePortValue+0x74>
		} else if (Loc_u8PortID == PortC) {
    2a68:	8a 81       	ldd	r24, Y+2	; 0x02
    2a6a:	82 30       	cpi	r24, 0x02	; 2
    2a6c:	49 f4       	brne	.+18     	; 0x2a80 <MCAL_DIO_u8TogglePortValue+0x5e>
			PORTC = ~PORTC;
    2a6e:	a5 e3       	ldi	r26, 0x35	; 53
    2a70:	b0 e0       	ldi	r27, 0x00	; 0
    2a72:	e5 e3       	ldi	r30, 0x35	; 53
    2a74:	f0 e0       	ldi	r31, 0x00	; 0
    2a76:	80 81       	ld	r24, Z
    2a78:	80 95       	com	r24
    2a7a:	8c 93       	st	X, r24
			Loc_u8Return_Value = E_OK;
    2a7c:	19 82       	std	Y+1, r1	; 0x01
    2a7e:	0b c0       	rjmp	.+22     	; 0x2a96 <MCAL_DIO_u8TogglePortValue+0x74>
		} else if (Loc_u8PortID == PortD) {
    2a80:	8a 81       	ldd	r24, Y+2	; 0x02
    2a82:	83 30       	cpi	r24, 0x03	; 3
    2a84:	41 f4       	brne	.+16     	; 0x2a96 <MCAL_DIO_u8TogglePortValue+0x74>
			PORTD = ~PORTD;
    2a86:	a2 e3       	ldi	r26, 0x32	; 50
    2a88:	b0 e0       	ldi	r27, 0x00	; 0
    2a8a:	e2 e3       	ldi	r30, 0x32	; 50
    2a8c:	f0 e0       	ldi	r31, 0x00	; 0
    2a8e:	80 81       	ld	r24, Z
    2a90:	80 95       	com	r24
    2a92:	8c 93       	st	X, r24
			Loc_u8Return_Value = E_OK;
    2a94:	19 82       	std	Y+1, r1	; 0x01
			//Do Nothing
		}
	} else {
		//Do Nothing
	}
	return Loc_u8Return_Value;
    2a96:	89 81       	ldd	r24, Y+1	; 0x01
}
    2a98:	0f 90       	pop	r0
    2a9a:	0f 90       	pop	r0
    2a9c:	cf 91       	pop	r28
    2a9e:	df 91       	pop	r29
    2aa0:	08 95       	ret

00002aa2 <MCAL_DIO_u8TogglePinValue>:

STD_Type MCAL_DIO_u8TogglePinValue(u8 Loc_u8PortID, u8 Loc_u8PinID) {
    2aa2:	df 93       	push	r29
    2aa4:	cf 93       	push	r28
    2aa6:	00 d0       	rcall	.+0      	; 0x2aa8 <MCAL_DIO_u8TogglePinValue+0x6>
    2aa8:	0f 92       	push	r0
    2aaa:	cd b7       	in	r28, 0x3d	; 61
    2aac:	de b7       	in	r29, 0x3e	; 62
    2aae:	8a 83       	std	Y+2, r24	; 0x02
    2ab0:	6b 83       	std	Y+3, r22	; 0x03
	u8 Loc_u8Return_Value = E_NOT_OK;
    2ab2:	81 e0       	ldi	r24, 0x01	; 1
    2ab4:	89 83       	std	Y+1, r24	; 0x01
	if (Loc_u8PortID <= PortD && Loc_u8PinID <= Num_Of_Pins) {
    2ab6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ab8:	84 30       	cpi	r24, 0x04	; 4
    2aba:	08 f0       	brcs	.+2      	; 0x2abe <MCAL_DIO_u8TogglePinValue+0x1c>
    2abc:	63 c0       	rjmp	.+198    	; 0x2b84 <MCAL_DIO_u8TogglePinValue+0xe2>
    2abe:	8b 81       	ldd	r24, Y+3	; 0x03
    2ac0:	88 30       	cpi	r24, 0x08	; 8
    2ac2:	08 f0       	brcs	.+2      	; 0x2ac6 <MCAL_DIO_u8TogglePinValue+0x24>
    2ac4:	5f c0       	rjmp	.+190    	; 0x2b84 <MCAL_DIO_u8TogglePinValue+0xe2>
		if (Loc_u8PortID == PortA) {
    2ac6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ac8:	88 23       	and	r24, r24
    2aca:	a9 f4       	brne	.+42     	; 0x2af6 <MCAL_DIO_u8TogglePinValue+0x54>
			TOGGLE_BIT(PORTA, Loc_u8PinID);
    2acc:	ab e3       	ldi	r26, 0x3B	; 59
    2ace:	b0 e0       	ldi	r27, 0x00	; 0
    2ad0:	eb e3       	ldi	r30, 0x3B	; 59
    2ad2:	f0 e0       	ldi	r31, 0x00	; 0
    2ad4:	80 81       	ld	r24, Z
    2ad6:	48 2f       	mov	r20, r24
    2ad8:	8b 81       	ldd	r24, Y+3	; 0x03
    2ada:	28 2f       	mov	r18, r24
    2adc:	30 e0       	ldi	r19, 0x00	; 0
    2ade:	81 e0       	ldi	r24, 0x01	; 1
    2ae0:	90 e0       	ldi	r25, 0x00	; 0
    2ae2:	02 2e       	mov	r0, r18
    2ae4:	02 c0       	rjmp	.+4      	; 0x2aea <MCAL_DIO_u8TogglePinValue+0x48>
    2ae6:	88 0f       	add	r24, r24
    2ae8:	99 1f       	adc	r25, r25
    2aea:	0a 94       	dec	r0
    2aec:	e2 f7       	brpl	.-8      	; 0x2ae6 <MCAL_DIO_u8TogglePinValue+0x44>
    2aee:	84 27       	eor	r24, r20
    2af0:	8c 93       	st	X, r24
			Loc_u8Return_Value = E_OK;
    2af2:	19 82       	std	Y+1, r1	; 0x01
    2af4:	47 c0       	rjmp	.+142    	; 0x2b84 <MCAL_DIO_u8TogglePinValue+0xe2>
		} else if (Loc_u8PortID == PortB) {
    2af6:	8a 81       	ldd	r24, Y+2	; 0x02
    2af8:	81 30       	cpi	r24, 0x01	; 1
    2afa:	a9 f4       	brne	.+42     	; 0x2b26 <MCAL_DIO_u8TogglePinValue+0x84>
			TOGGLE_BIT(PORTB, Loc_u8PinID);
    2afc:	a8 e3       	ldi	r26, 0x38	; 56
    2afe:	b0 e0       	ldi	r27, 0x00	; 0
    2b00:	e8 e3       	ldi	r30, 0x38	; 56
    2b02:	f0 e0       	ldi	r31, 0x00	; 0
    2b04:	80 81       	ld	r24, Z
    2b06:	48 2f       	mov	r20, r24
    2b08:	8b 81       	ldd	r24, Y+3	; 0x03
    2b0a:	28 2f       	mov	r18, r24
    2b0c:	30 e0       	ldi	r19, 0x00	; 0
    2b0e:	81 e0       	ldi	r24, 0x01	; 1
    2b10:	90 e0       	ldi	r25, 0x00	; 0
    2b12:	02 2e       	mov	r0, r18
    2b14:	02 c0       	rjmp	.+4      	; 0x2b1a <MCAL_DIO_u8TogglePinValue+0x78>
    2b16:	88 0f       	add	r24, r24
    2b18:	99 1f       	adc	r25, r25
    2b1a:	0a 94       	dec	r0
    2b1c:	e2 f7       	brpl	.-8      	; 0x2b16 <MCAL_DIO_u8TogglePinValue+0x74>
    2b1e:	84 27       	eor	r24, r20
    2b20:	8c 93       	st	X, r24
			Loc_u8Return_Value = E_OK;
    2b22:	19 82       	std	Y+1, r1	; 0x01
    2b24:	2f c0       	rjmp	.+94     	; 0x2b84 <MCAL_DIO_u8TogglePinValue+0xe2>
		} else if (Loc_u8PortID == PortC) {
    2b26:	8a 81       	ldd	r24, Y+2	; 0x02
    2b28:	82 30       	cpi	r24, 0x02	; 2
    2b2a:	a9 f4       	brne	.+42     	; 0x2b56 <MCAL_DIO_u8TogglePinValue+0xb4>
			TOGGLE_BIT(PORTC, Loc_u8PinID);
    2b2c:	a5 e3       	ldi	r26, 0x35	; 53
    2b2e:	b0 e0       	ldi	r27, 0x00	; 0
    2b30:	e5 e3       	ldi	r30, 0x35	; 53
    2b32:	f0 e0       	ldi	r31, 0x00	; 0
    2b34:	80 81       	ld	r24, Z
    2b36:	48 2f       	mov	r20, r24
    2b38:	8b 81       	ldd	r24, Y+3	; 0x03
    2b3a:	28 2f       	mov	r18, r24
    2b3c:	30 e0       	ldi	r19, 0x00	; 0
    2b3e:	81 e0       	ldi	r24, 0x01	; 1
    2b40:	90 e0       	ldi	r25, 0x00	; 0
    2b42:	02 2e       	mov	r0, r18
    2b44:	02 c0       	rjmp	.+4      	; 0x2b4a <MCAL_DIO_u8TogglePinValue+0xa8>
    2b46:	88 0f       	add	r24, r24
    2b48:	99 1f       	adc	r25, r25
    2b4a:	0a 94       	dec	r0
    2b4c:	e2 f7       	brpl	.-8      	; 0x2b46 <MCAL_DIO_u8TogglePinValue+0xa4>
    2b4e:	84 27       	eor	r24, r20
    2b50:	8c 93       	st	X, r24
			Loc_u8Return_Value = E_OK;
    2b52:	19 82       	std	Y+1, r1	; 0x01
    2b54:	17 c0       	rjmp	.+46     	; 0x2b84 <MCAL_DIO_u8TogglePinValue+0xe2>
		} else if (Loc_u8PortID == PortD) {
    2b56:	8a 81       	ldd	r24, Y+2	; 0x02
    2b58:	83 30       	cpi	r24, 0x03	; 3
    2b5a:	a1 f4       	brne	.+40     	; 0x2b84 <MCAL_DIO_u8TogglePinValue+0xe2>
			TOGGLE_BIT(PORTD, Loc_u8PinID);
    2b5c:	a2 e3       	ldi	r26, 0x32	; 50
    2b5e:	b0 e0       	ldi	r27, 0x00	; 0
    2b60:	e2 e3       	ldi	r30, 0x32	; 50
    2b62:	f0 e0       	ldi	r31, 0x00	; 0
    2b64:	80 81       	ld	r24, Z
    2b66:	48 2f       	mov	r20, r24
    2b68:	8b 81       	ldd	r24, Y+3	; 0x03
    2b6a:	28 2f       	mov	r18, r24
    2b6c:	30 e0       	ldi	r19, 0x00	; 0
    2b6e:	81 e0       	ldi	r24, 0x01	; 1
    2b70:	90 e0       	ldi	r25, 0x00	; 0
    2b72:	02 2e       	mov	r0, r18
    2b74:	02 c0       	rjmp	.+4      	; 0x2b7a <MCAL_DIO_u8TogglePinValue+0xd8>
    2b76:	88 0f       	add	r24, r24
    2b78:	99 1f       	adc	r25, r25
    2b7a:	0a 94       	dec	r0
    2b7c:	e2 f7       	brpl	.-8      	; 0x2b76 <MCAL_DIO_u8TogglePinValue+0xd4>
    2b7e:	84 27       	eor	r24, r20
    2b80:	8c 93       	st	X, r24
			Loc_u8Return_Value = E_OK;
    2b82:	19 82       	std	Y+1, r1	; 0x01
			//Do Nothing
		}
	} else {
		//Do Nothing
	}
	return Loc_u8Return_Value;
    2b84:	89 81       	ldd	r24, Y+1	; 0x01
}
    2b86:	0f 90       	pop	r0
    2b88:	0f 90       	pop	r0
    2b8a:	0f 90       	pop	r0
    2b8c:	cf 91       	pop	r28
    2b8e:	df 91       	pop	r29
    2b90:	08 95       	ret

00002b92 <HAL_Ultrasonic_Sensor_voidInit>:
volatile f32 Glob_f32Distance = NUM0;
volatile u16 Glob_u16StartTime = NUM0, Glob_u16EndTime = NUM0, Glob_u16TimeDiff = NUM0;
volatile u16 Glob_u16OvfCounterStart, Glob_16OvfCounterEnd;
extern volatile u16 Glob_u16OvfCounter;

void HAL_Ultrasonic_Sensor_voidInit(void) {
    2b92:	df 93       	push	r29
    2b94:	cf 93       	push	r28
    2b96:	cd b7       	in	r28, 0x3d	; 61
    2b98:	de b7       	in	r29, 0x3e	; 62
	MCAL_DIO_u8SetPinDirection(ECHO_PORT, ECHO_PIN, Pin_Low);      //
    2b9a:	83 e0       	ldi	r24, 0x03	; 3
    2b9c:	62 e0       	ldi	r22, 0x02	; 2
    2b9e:	40 e0       	ldi	r20, 0x00	; 0
    2ba0:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <MCAL_DIO_u8SetPinDirection>
	MCAL_DIO_u8SetPinDirection(TRIG_PORT, TRIG_PIN, Pin_High);  //  trigger
    2ba4:	83 e0       	ldi	r24, 0x03	; 3
    2ba6:	66 e0       	ldi	r22, 0x06	; 6
    2ba8:	41 e0       	ldi	r20, 0x01	; 1
    2baa:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <MCAL_DIO_u8SetPinDirection>
	MCAL_Interrupt_EXIT_CallBack_0(HAL_Ultrasonic_Sensor_voidInterrupt); // external interrupt call back
    2bae:	81 e6       	ldi	r24, 0x61	; 97
    2bb0:	97 e1       	ldi	r25, 0x17	; 23
    2bb2:	0e 94 55 10 	call	0x20aa	; 0x20aa <MCAL_Interrupt_EXIT_CallBack_0>
	SET_BIT(SREG,Pin7);
    2bb6:	af e5       	ldi	r26, 0x5F	; 95
    2bb8:	b0 e0       	ldi	r27, 0x00	; 0
    2bba:	ef e5       	ldi	r30, 0x5F	; 95
    2bbc:	f0 e0       	ldi	r31, 0x00	; 0
    2bbe:	80 81       	ld	r24, Z
    2bc0:	80 68       	ori	r24, 0x80	; 128
    2bc2:	8c 93       	st	X, r24
	MCAL_Timer0_Init(Normal_Mode,Prescaller_64,Non_Inverted);
    2bc4:	80 e0       	ldi	r24, 0x00	; 0
    2bc6:	63 e0       	ldi	r22, 0x03	; 3
    2bc8:	42 e0       	ldi	r20, 0x02	; 2
    2bca:	0e 94 95 0b 	call	0x172a	; 0x172a <MCAL_Timer0_Init>
	MCAL_Timer0_SetPreloadValue(113);
    2bce:	81 e7       	ldi	r24, 0x71	; 113
    2bd0:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <MCAL_Timer0_SetPreloadValue>
}
    2bd4:	cf 91       	pop	r28
    2bd6:	df 91       	pop	r29
    2bd8:	08 95       	ret

00002bda <HAL_Ultrasonic_Sensor_voidTrigger>:

void HAL_Ultrasonic_Sensor_voidTrigger(void) {
    2bda:	df 93       	push	r29
    2bdc:	cf 93       	push	r28
    2bde:	cd b7       	in	r28, 0x3d	; 61
    2be0:	de b7       	in	r29, 0x3e	; 62
    2be2:	68 97       	sbiw	r28, 0x18	; 24
    2be4:	0f b6       	in	r0, 0x3f	; 63
    2be6:	f8 94       	cli
    2be8:	de bf       	out	0x3e, r29	; 62
    2bea:	0f be       	out	0x3f, r0	; 63
    2bec:	cd bf       	out	0x3d, r28	; 61
	MCAL_DIO_u8SetPinValue(TRIG_PORT, TRIG_PIN, Pin_High);    // high
    2bee:	83 e0       	ldi	r24, 0x03	; 3
    2bf0:	66 e0       	ldi	r22, 0x06	; 6
    2bf2:	41 e0       	ldi	r20, 0x01	; 1
    2bf4:	0e 94 68 13 	call	0x26d0	; 0x26d0 <MCAL_DIO_u8SetPinValue>
    2bf8:	80 e0       	ldi	r24, 0x00	; 0
    2bfa:	90 e0       	ldi	r25, 0x00	; 0
    2bfc:	a0 e2       	ldi	r26, 0x20	; 32
    2bfe:	b1 e4       	ldi	r27, 0x41	; 65
    2c00:	8d 8b       	std	Y+21, r24	; 0x15
    2c02:	9e 8b       	std	Y+22, r25	; 0x16
    2c04:	af 8b       	std	Y+23, r26	; 0x17
    2c06:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2c08:	6d 89       	ldd	r22, Y+21	; 0x15
    2c0a:	7e 89       	ldd	r23, Y+22	; 0x16
    2c0c:	8f 89       	ldd	r24, Y+23	; 0x17
    2c0e:	98 8d       	ldd	r25, Y+24	; 0x18
    2c10:	2b ea       	ldi	r18, 0xAB	; 171
    2c12:	3a ea       	ldi	r19, 0xAA	; 170
    2c14:	4a ea       	ldi	r20, 0xAA	; 170
    2c16:	50 e4       	ldi	r21, 0x40	; 64
    2c18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c1c:	dc 01       	movw	r26, r24
    2c1e:	cb 01       	movw	r24, r22
    2c20:	89 8b       	std	Y+17, r24	; 0x11
    2c22:	9a 8b       	std	Y+18, r25	; 0x12
    2c24:	ab 8b       	std	Y+19, r26	; 0x13
    2c26:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2c28:	69 89       	ldd	r22, Y+17	; 0x11
    2c2a:	7a 89       	ldd	r23, Y+18	; 0x12
    2c2c:	8b 89       	ldd	r24, Y+19	; 0x13
    2c2e:	9c 89       	ldd	r25, Y+20	; 0x14
    2c30:	20 e0       	ldi	r18, 0x00	; 0
    2c32:	30 e0       	ldi	r19, 0x00	; 0
    2c34:	40 e8       	ldi	r20, 0x80	; 128
    2c36:	5f e3       	ldi	r21, 0x3F	; 63
    2c38:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c3c:	88 23       	and	r24, r24
    2c3e:	1c f4       	brge	.+6      	; 0x2c46 <HAL_Ultrasonic_Sensor_voidTrigger+0x6c>
		__ticks = 1;
    2c40:	81 e0       	ldi	r24, 0x01	; 1
    2c42:	88 8b       	std	Y+16, r24	; 0x10
    2c44:	91 c0       	rjmp	.+290    	; 0x2d68 <HAL_Ultrasonic_Sensor_voidTrigger+0x18e>
	else if (__tmp > 255)
    2c46:	69 89       	ldd	r22, Y+17	; 0x11
    2c48:	7a 89       	ldd	r23, Y+18	; 0x12
    2c4a:	8b 89       	ldd	r24, Y+19	; 0x13
    2c4c:	9c 89       	ldd	r25, Y+20	; 0x14
    2c4e:	20 e0       	ldi	r18, 0x00	; 0
    2c50:	30 e0       	ldi	r19, 0x00	; 0
    2c52:	4f e7       	ldi	r20, 0x7F	; 127
    2c54:	53 e4       	ldi	r21, 0x43	; 67
    2c56:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c5a:	18 16       	cp	r1, r24
    2c5c:	0c f0       	brlt	.+2      	; 0x2c60 <HAL_Ultrasonic_Sensor_voidTrigger+0x86>
    2c5e:	7b c0       	rjmp	.+246    	; 0x2d56 <HAL_Ultrasonic_Sensor_voidTrigger+0x17c>
	{
		_delay_ms(__us / 1000.0);
    2c60:	6d 89       	ldd	r22, Y+21	; 0x15
    2c62:	7e 89       	ldd	r23, Y+22	; 0x16
    2c64:	8f 89       	ldd	r24, Y+23	; 0x17
    2c66:	98 8d       	ldd	r25, Y+24	; 0x18
    2c68:	20 e0       	ldi	r18, 0x00	; 0
    2c6a:	30 e0       	ldi	r19, 0x00	; 0
    2c6c:	4a e7       	ldi	r20, 0x7A	; 122
    2c6e:	54 e4       	ldi	r21, 0x44	; 68
    2c70:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2c74:	dc 01       	movw	r26, r24
    2c76:	cb 01       	movw	r24, r22
    2c78:	8c 87       	std	Y+12, r24	; 0x0c
    2c7a:	9d 87       	std	Y+13, r25	; 0x0d
    2c7c:	ae 87       	std	Y+14, r26	; 0x0e
    2c7e:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c80:	6c 85       	ldd	r22, Y+12	; 0x0c
    2c82:	7d 85       	ldd	r23, Y+13	; 0x0d
    2c84:	8e 85       	ldd	r24, Y+14	; 0x0e
    2c86:	9f 85       	ldd	r25, Y+15	; 0x0f
    2c88:	20 e0       	ldi	r18, 0x00	; 0
    2c8a:	30 e0       	ldi	r19, 0x00	; 0
    2c8c:	4a e7       	ldi	r20, 0x7A	; 122
    2c8e:	55 e4       	ldi	r21, 0x45	; 69
    2c90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c94:	dc 01       	movw	r26, r24
    2c96:	cb 01       	movw	r24, r22
    2c98:	88 87       	std	Y+8, r24	; 0x08
    2c9a:	99 87       	std	Y+9, r25	; 0x09
    2c9c:	aa 87       	std	Y+10, r26	; 0x0a
    2c9e:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2ca0:	68 85       	ldd	r22, Y+8	; 0x08
    2ca2:	79 85       	ldd	r23, Y+9	; 0x09
    2ca4:	8a 85       	ldd	r24, Y+10	; 0x0a
    2ca6:	9b 85       	ldd	r25, Y+11	; 0x0b
    2ca8:	20 e0       	ldi	r18, 0x00	; 0
    2caa:	30 e0       	ldi	r19, 0x00	; 0
    2cac:	40 e8       	ldi	r20, 0x80	; 128
    2cae:	5f e3       	ldi	r21, 0x3F	; 63
    2cb0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2cb4:	88 23       	and	r24, r24
    2cb6:	2c f4       	brge	.+10     	; 0x2cc2 <HAL_Ultrasonic_Sensor_voidTrigger+0xe8>
		__ticks = 1;
    2cb8:	81 e0       	ldi	r24, 0x01	; 1
    2cba:	90 e0       	ldi	r25, 0x00	; 0
    2cbc:	9f 83       	std	Y+7, r25	; 0x07
    2cbe:	8e 83       	std	Y+6, r24	; 0x06
    2cc0:	3f c0       	rjmp	.+126    	; 0x2d40 <HAL_Ultrasonic_Sensor_voidTrigger+0x166>
	else if (__tmp > 65535)
    2cc2:	68 85       	ldd	r22, Y+8	; 0x08
    2cc4:	79 85       	ldd	r23, Y+9	; 0x09
    2cc6:	8a 85       	ldd	r24, Y+10	; 0x0a
    2cc8:	9b 85       	ldd	r25, Y+11	; 0x0b
    2cca:	20 e0       	ldi	r18, 0x00	; 0
    2ccc:	3f ef       	ldi	r19, 0xFF	; 255
    2cce:	4f e7       	ldi	r20, 0x7F	; 127
    2cd0:	57 e4       	ldi	r21, 0x47	; 71
    2cd2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2cd6:	18 16       	cp	r1, r24
    2cd8:	4c f5       	brge	.+82     	; 0x2d2c <HAL_Ultrasonic_Sensor_voidTrigger+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cda:	6c 85       	ldd	r22, Y+12	; 0x0c
    2cdc:	7d 85       	ldd	r23, Y+13	; 0x0d
    2cde:	8e 85       	ldd	r24, Y+14	; 0x0e
    2ce0:	9f 85       	ldd	r25, Y+15	; 0x0f
    2ce2:	20 e0       	ldi	r18, 0x00	; 0
    2ce4:	30 e0       	ldi	r19, 0x00	; 0
    2ce6:	40 e2       	ldi	r20, 0x20	; 32
    2ce8:	51 e4       	ldi	r21, 0x41	; 65
    2cea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cee:	dc 01       	movw	r26, r24
    2cf0:	cb 01       	movw	r24, r22
    2cf2:	bc 01       	movw	r22, r24
    2cf4:	cd 01       	movw	r24, r26
    2cf6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cfa:	dc 01       	movw	r26, r24
    2cfc:	cb 01       	movw	r24, r22
    2cfe:	9f 83       	std	Y+7, r25	; 0x07
    2d00:	8e 83       	std	Y+6, r24	; 0x06
    2d02:	0f c0       	rjmp	.+30     	; 0x2d22 <HAL_Ultrasonic_Sensor_voidTrigger+0x148>
    2d04:	80 e9       	ldi	r24, 0x90	; 144
    2d06:	91 e0       	ldi	r25, 0x01	; 1
    2d08:	9d 83       	std	Y+5, r25	; 0x05
    2d0a:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2d0c:	8c 81       	ldd	r24, Y+4	; 0x04
    2d0e:	9d 81       	ldd	r25, Y+5	; 0x05
    2d10:	01 97       	sbiw	r24, 0x01	; 1
    2d12:	f1 f7       	brne	.-4      	; 0x2d10 <HAL_Ultrasonic_Sensor_voidTrigger+0x136>
    2d14:	9d 83       	std	Y+5, r25	; 0x05
    2d16:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d18:	8e 81       	ldd	r24, Y+6	; 0x06
    2d1a:	9f 81       	ldd	r25, Y+7	; 0x07
    2d1c:	01 97       	sbiw	r24, 0x01	; 1
    2d1e:	9f 83       	std	Y+7, r25	; 0x07
    2d20:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d22:	8e 81       	ldd	r24, Y+6	; 0x06
    2d24:	9f 81       	ldd	r25, Y+7	; 0x07
    2d26:	00 97       	sbiw	r24, 0x00	; 0
    2d28:	69 f7       	brne	.-38     	; 0x2d04 <HAL_Ultrasonic_Sensor_voidTrigger+0x12a>
    2d2a:	24 c0       	rjmp	.+72     	; 0x2d74 <HAL_Ultrasonic_Sensor_voidTrigger+0x19a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d2c:	68 85       	ldd	r22, Y+8	; 0x08
    2d2e:	79 85       	ldd	r23, Y+9	; 0x09
    2d30:	8a 85       	ldd	r24, Y+10	; 0x0a
    2d32:	9b 85       	ldd	r25, Y+11	; 0x0b
    2d34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d38:	dc 01       	movw	r26, r24
    2d3a:	cb 01       	movw	r24, r22
    2d3c:	9f 83       	std	Y+7, r25	; 0x07
    2d3e:	8e 83       	std	Y+6, r24	; 0x06
    2d40:	8e 81       	ldd	r24, Y+6	; 0x06
    2d42:	9f 81       	ldd	r25, Y+7	; 0x07
    2d44:	9b 83       	std	Y+3, r25	; 0x03
    2d46:	8a 83       	std	Y+2, r24	; 0x02
    2d48:	8a 81       	ldd	r24, Y+2	; 0x02
    2d4a:	9b 81       	ldd	r25, Y+3	; 0x03
    2d4c:	01 97       	sbiw	r24, 0x01	; 1
    2d4e:	f1 f7       	brne	.-4      	; 0x2d4c <HAL_Ultrasonic_Sensor_voidTrigger+0x172>
    2d50:	9b 83       	std	Y+3, r25	; 0x03
    2d52:	8a 83       	std	Y+2, r24	; 0x02
    2d54:	0f c0       	rjmp	.+30     	; 0x2d74 <HAL_Ultrasonic_Sensor_voidTrigger+0x19a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2d56:	69 89       	ldd	r22, Y+17	; 0x11
    2d58:	7a 89       	ldd	r23, Y+18	; 0x12
    2d5a:	8b 89       	ldd	r24, Y+19	; 0x13
    2d5c:	9c 89       	ldd	r25, Y+20	; 0x14
    2d5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d62:	dc 01       	movw	r26, r24
    2d64:	cb 01       	movw	r24, r22
    2d66:	88 8b       	std	Y+16, r24	; 0x10
    2d68:	88 89       	ldd	r24, Y+16	; 0x10
    2d6a:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2d6c:	89 81       	ldd	r24, Y+1	; 0x01
    2d6e:	8a 95       	dec	r24
    2d70:	f1 f7       	brne	.-4      	; 0x2d6e <HAL_Ultrasonic_Sensor_voidTrigger+0x194>
    2d72:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(10);                                            // 10 micro seconds delay
	MCAL_DIO_u8SetPinValue(TRIG_PORT, TRIG_PIN, Pin_Low);     // low
    2d74:	83 e0       	ldi	r24, 0x03	; 3
    2d76:	66 e0       	ldi	r22, 0x06	; 6
    2d78:	40 e0       	ldi	r20, 0x00	; 0
    2d7a:	0e 94 68 13 	call	0x26d0	; 0x26d0 <MCAL_DIO_u8SetPinValue>
}
    2d7e:	68 96       	adiw	r28, 0x18	; 24
    2d80:	0f b6       	in	r0, 0x3f	; 63
    2d82:	f8 94       	cli
    2d84:	de bf       	out	0x3e, r29	; 62
    2d86:	0f be       	out	0x3f, r0	; 63
    2d88:	cd bf       	out	0x3d, r28	; 61
    2d8a:	cf 91       	pop	r28
    2d8c:	df 91       	pop	r29
    2d8e:	08 95       	ret

00002d90 <HAL_Ultrasonic_Sensor_voidCalcDistancse>:

void HAL_Ultrasonic_Sensor_voidCalcDistancse(f32* returned_distance) {
    2d90:	df 93       	push	r29
    2d92:	cf 93       	push	r28
    2d94:	cd b7       	in	r28, 0x3d	; 61
    2d96:	de b7       	in	r29, 0x3e	; 62
    2d98:	60 97       	sbiw	r28, 0x10	; 16
    2d9a:	0f b6       	in	r0, 0x3f	; 63
    2d9c:	f8 94       	cli
    2d9e:	de bf       	out	0x3e, r29	; 62
    2da0:	0f be       	out	0x3f, r0	; 63
    2da2:	cd bf       	out	0x3d, r28	; 61
    2da4:	98 8b       	std	Y+16, r25	; 0x10
    2da6:	8f 87       	std	Y+15, r24	; 0x0f
	HAL_Ultrasonic_Sensor_voidTrigger();                                  // send trigger
    2da8:	0e 94 ed 15 	call	0x2bda	; 0x2bda <HAL_Ultrasonic_Sensor_voidTrigger>
	MCAL_Interrupt_InterruptRisingInit();
    2dac:	0e 94 b2 10 	call	0x2164	; 0x2164 <MCAL_Interrupt_InterruptRisingInit>
    2db0:	80 e0       	ldi	r24, 0x00	; 0
    2db2:	90 e0       	ldi	r25, 0x00	; 0
    2db4:	a8 e4       	ldi	r26, 0x48	; 72
    2db6:	b2 e4       	ldi	r27, 0x42	; 66
    2db8:	8b 87       	std	Y+11, r24	; 0x0b
    2dba:	9c 87       	std	Y+12, r25	; 0x0c
    2dbc:	ad 87       	std	Y+13, r26	; 0x0d
    2dbe:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2dc0:	6b 85       	ldd	r22, Y+11	; 0x0b
    2dc2:	7c 85       	ldd	r23, Y+12	; 0x0c
    2dc4:	8d 85       	ldd	r24, Y+13	; 0x0d
    2dc6:	9e 85       	ldd	r25, Y+14	; 0x0e
    2dc8:	20 e0       	ldi	r18, 0x00	; 0
    2dca:	30 e0       	ldi	r19, 0x00	; 0
    2dcc:	4a e7       	ldi	r20, 0x7A	; 122
    2dce:	55 e4       	ldi	r21, 0x45	; 69
    2dd0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dd4:	dc 01       	movw	r26, r24
    2dd6:	cb 01       	movw	r24, r22
    2dd8:	8f 83       	std	Y+7, r24	; 0x07
    2dda:	98 87       	std	Y+8, r25	; 0x08
    2ddc:	a9 87       	std	Y+9, r26	; 0x09
    2dde:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2de0:	6f 81       	ldd	r22, Y+7	; 0x07
    2de2:	78 85       	ldd	r23, Y+8	; 0x08
    2de4:	89 85       	ldd	r24, Y+9	; 0x09
    2de6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2de8:	20 e0       	ldi	r18, 0x00	; 0
    2dea:	30 e0       	ldi	r19, 0x00	; 0
    2dec:	40 e8       	ldi	r20, 0x80	; 128
    2dee:	5f e3       	ldi	r21, 0x3F	; 63
    2df0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2df4:	88 23       	and	r24, r24
    2df6:	2c f4       	brge	.+10     	; 0x2e02 <HAL_Ultrasonic_Sensor_voidCalcDistancse+0x72>
		__ticks = 1;
    2df8:	81 e0       	ldi	r24, 0x01	; 1
    2dfa:	90 e0       	ldi	r25, 0x00	; 0
    2dfc:	9e 83       	std	Y+6, r25	; 0x06
    2dfe:	8d 83       	std	Y+5, r24	; 0x05
    2e00:	3f c0       	rjmp	.+126    	; 0x2e80 <HAL_Ultrasonic_Sensor_voidCalcDistancse+0xf0>
	else if (__tmp > 65535)
    2e02:	6f 81       	ldd	r22, Y+7	; 0x07
    2e04:	78 85       	ldd	r23, Y+8	; 0x08
    2e06:	89 85       	ldd	r24, Y+9	; 0x09
    2e08:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e0a:	20 e0       	ldi	r18, 0x00	; 0
    2e0c:	3f ef       	ldi	r19, 0xFF	; 255
    2e0e:	4f e7       	ldi	r20, 0x7F	; 127
    2e10:	57 e4       	ldi	r21, 0x47	; 71
    2e12:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e16:	18 16       	cp	r1, r24
    2e18:	4c f5       	brge	.+82     	; 0x2e6c <HAL_Ultrasonic_Sensor_voidCalcDistancse+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e1a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e1c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e1e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e20:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e22:	20 e0       	ldi	r18, 0x00	; 0
    2e24:	30 e0       	ldi	r19, 0x00	; 0
    2e26:	40 e2       	ldi	r20, 0x20	; 32
    2e28:	51 e4       	ldi	r21, 0x41	; 65
    2e2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e2e:	dc 01       	movw	r26, r24
    2e30:	cb 01       	movw	r24, r22
    2e32:	bc 01       	movw	r22, r24
    2e34:	cd 01       	movw	r24, r26
    2e36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e3a:	dc 01       	movw	r26, r24
    2e3c:	cb 01       	movw	r24, r22
    2e3e:	9e 83       	std	Y+6, r25	; 0x06
    2e40:	8d 83       	std	Y+5, r24	; 0x05
    2e42:	0f c0       	rjmp	.+30     	; 0x2e62 <HAL_Ultrasonic_Sensor_voidCalcDistancse+0xd2>
    2e44:	80 e9       	ldi	r24, 0x90	; 144
    2e46:	91 e0       	ldi	r25, 0x01	; 1
    2e48:	9c 83       	std	Y+4, r25	; 0x04
    2e4a:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2e4c:	8b 81       	ldd	r24, Y+3	; 0x03
    2e4e:	9c 81       	ldd	r25, Y+4	; 0x04
    2e50:	01 97       	sbiw	r24, 0x01	; 1
    2e52:	f1 f7       	brne	.-4      	; 0x2e50 <HAL_Ultrasonic_Sensor_voidCalcDistancse+0xc0>
    2e54:	9c 83       	std	Y+4, r25	; 0x04
    2e56:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e58:	8d 81       	ldd	r24, Y+5	; 0x05
    2e5a:	9e 81       	ldd	r25, Y+6	; 0x06
    2e5c:	01 97       	sbiw	r24, 0x01	; 1
    2e5e:	9e 83       	std	Y+6, r25	; 0x06
    2e60:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e62:	8d 81       	ldd	r24, Y+5	; 0x05
    2e64:	9e 81       	ldd	r25, Y+6	; 0x06
    2e66:	00 97       	sbiw	r24, 0x00	; 0
    2e68:	69 f7       	brne	.-38     	; 0x2e44 <HAL_Ultrasonic_Sensor_voidCalcDistancse+0xb4>
    2e6a:	14 c0       	rjmp	.+40     	; 0x2e94 <HAL_Ultrasonic_Sensor_voidCalcDistancse+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e6c:	6f 81       	ldd	r22, Y+7	; 0x07
    2e6e:	78 85       	ldd	r23, Y+8	; 0x08
    2e70:	89 85       	ldd	r24, Y+9	; 0x09
    2e72:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e78:	dc 01       	movw	r26, r24
    2e7a:	cb 01       	movw	r24, r22
    2e7c:	9e 83       	std	Y+6, r25	; 0x06
    2e7e:	8d 83       	std	Y+5, r24	; 0x05
    2e80:	8d 81       	ldd	r24, Y+5	; 0x05
    2e82:	9e 81       	ldd	r25, Y+6	; 0x06
    2e84:	9a 83       	std	Y+2, r25	; 0x02
    2e86:	89 83       	std	Y+1, r24	; 0x01
    2e88:	89 81       	ldd	r24, Y+1	; 0x01
    2e8a:	9a 81       	ldd	r25, Y+2	; 0x02
    2e8c:	01 97       	sbiw	r24, 0x01	; 1
    2e8e:	f1 f7       	brne	.-4      	; 0x2e8c <HAL_Ultrasonic_Sensor_voidCalcDistancse+0xfc>
    2e90:	9a 83       	std	Y+2, r25	; 0x02
    2e92:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(50);                                            // stability delay
	*returned_distance = Glob_f32Distance;                           // get the distance
    2e94:	80 91 7a 01 	lds	r24, 0x017A
    2e98:	90 91 7b 01 	lds	r25, 0x017B
    2e9c:	a0 91 7c 01 	lds	r26, 0x017C
    2ea0:	b0 91 7d 01 	lds	r27, 0x017D
    2ea4:	ef 85       	ldd	r30, Y+15	; 0x0f
    2ea6:	f8 89       	ldd	r31, Y+16	; 0x10
    2ea8:	80 83       	st	Z, r24
    2eaa:	91 83       	std	Z+1, r25	; 0x01
    2eac:	a2 83       	std	Z+2, r26	; 0x02
    2eae:	b3 83       	std	Z+3, r27	; 0x03
}
    2eb0:	60 96       	adiw	r28, 0x10	; 16
    2eb2:	0f b6       	in	r0, 0x3f	; 63
    2eb4:	f8 94       	cli
    2eb6:	de bf       	out	0x3e, r29	; 62
    2eb8:	0f be       	out	0x3f, r0	; 63
    2eba:	cd bf       	out	0x3d, r28	; 61
    2ebc:	cf 91       	pop	r28
    2ebe:	df 91       	pop	r29
    2ec0:	08 95       	ret

00002ec2 <HAL_Ultrasonic_Sensor_voidInterrupt>:
void HAL_Ultrasonic_Sensor_voidInterrupt(void)                                     // call back function
{
    2ec2:	df 93       	push	r29
    2ec4:	cf 93       	push	r28
    2ec6:	cd b7       	in	r28, 0x3d	; 61
    2ec8:	de b7       	in	r29, 0x3e	; 62

	if (Glob_u8Counter <= 2)          // check for counter status
    2eca:	80 91 68 01 	lds	r24, 0x0168
    2ece:	83 30       	cpi	r24, 0x03	; 3
    2ed0:	08 f0       	brcs	.+2      	; 0x2ed4 <HAL_Ultrasonic_Sensor_voidInterrupt+0x12>
    2ed2:	75 c0       	rjmp	.+234    	; 0x2fbe <HAL_Ultrasonic_Sensor_voidInterrupt+0xfc>
			{
		if (Glob_u8Counter == NUM1)      // check if it is the first entry
    2ed4:	80 91 68 01 	lds	r24, 0x0168
    2ed8:	81 30       	cpi	r24, 0x01	; 1
    2eda:	a1 f4       	brne	.+40     	; 0x2f04 <HAL_Ultrasonic_Sensor_voidInterrupt+0x42>
		{
			// store the start time value
			Glob_u16StartTime = TCNT0;
    2edc:	e2 e5       	ldi	r30, 0x52	; 82
    2ede:	f0 e0       	ldi	r31, 0x00	; 0
    2ee0:	80 81       	ld	r24, Z
    2ee2:	88 2f       	mov	r24, r24
    2ee4:	90 e0       	ldi	r25, 0x00	; 0
    2ee6:	90 93 7f 01 	sts	0x017F, r25
    2eea:	80 93 7e 01 	sts	0x017E, r24

			// store number of OVFs at the start of the signal
			Glob_u16OvfCounterStart = Glob_u16OvfCounter;
    2eee:	80 91 6c 01 	lds	r24, 0x016C
    2ef2:	90 91 6d 01 	lds	r25, 0x016D
    2ef6:	90 93 8b 01 	sts	0x018B, r25
    2efa:	80 93 8a 01 	sts	0x018A, r24

			// at the first entry  we change the capture edge to falling edge to capture echo signal
			MCAL_Interrupt_InterruptFallingInit();
    2efe:	0e 94 c8 10 	call	0x2190	; 0x2190 <MCAL_Interrupt_InterruptFallingInit>
    2f02:	58 c0       	rjmp	.+176    	; 0x2fb4 <HAL_Ultrasonic_Sensor_voidInterrupt+0xf2>
		}

		else if (Glob_u8Counter == 2) // check if it's the second entry
    2f04:	80 91 68 01 	lds	r24, 0x0168
    2f08:	82 30       	cpi	r24, 0x02	; 2
    2f0a:	09 f0       	breq	.+2      	; 0x2f0e <HAL_Ultrasonic_Sensor_voidInterrupt+0x4c>
    2f0c:	53 c0       	rjmp	.+166    	; 0x2fb4 <HAL_Ultrasonic_Sensor_voidInterrupt+0xf2>
				{
			//store end time value
			Glob_u16EndTime = TCNT0;
    2f0e:	e2 e5       	ldi	r30, 0x52	; 82
    2f10:	f0 e0       	ldi	r31, 0x00	; 0
    2f12:	80 81       	ld	r24, Z
    2f14:	88 2f       	mov	r24, r24
    2f16:	90 e0       	ldi	r25, 0x00	; 0
    2f18:	90 93 81 01 	sts	0x0181, r25
    2f1c:	80 93 80 01 	sts	0x0180, r24

			//store number of OVFs at the end of signal
			Glob_16OvfCounterEnd = Glob_u16OvfCounter;
    2f20:	80 91 6c 01 	lds	r24, 0x016C
    2f24:	90 91 6d 01 	lds	r25, 0x016D
    2f28:	90 93 89 01 	sts	0x0189, r25
    2f2c:	80 93 88 01 	sts	0x0188, r24

			//calculate the time difference between start and end
			Glob_u16TimeDiff = (Glob_u16EndTime + (256 * Glob_16OvfCounterEnd))
    2f30:	80 91 88 01 	lds	r24, 0x0188
    2f34:	90 91 89 01 	lds	r25, 0x0189
    2f38:	38 2f       	mov	r19, r24
    2f3a:	22 27       	eor	r18, r18
    2f3c:	80 91 80 01 	lds	r24, 0x0180
    2f40:	90 91 81 01 	lds	r25, 0x0181
    2f44:	a9 01       	movw	r20, r18
    2f46:	48 0f       	add	r20, r24
    2f48:	59 1f       	adc	r21, r25
    2f4a:	80 91 8a 01 	lds	r24, 0x018A
    2f4e:	90 91 8b 01 	lds	r25, 0x018B
    2f52:	38 2f       	mov	r19, r24
    2f54:	22 27       	eor	r18, r18
    2f56:	80 91 7e 01 	lds	r24, 0x017E
    2f5a:	90 91 7f 01 	lds	r25, 0x017F
    2f5e:	82 0f       	add	r24, r18
    2f60:	93 1f       	adc	r25, r19
    2f62:	9a 01       	movw	r18, r20
    2f64:	28 1b       	sub	r18, r24
    2f66:	39 0b       	sbc	r19, r25
    2f68:	c9 01       	movw	r24, r18
    2f6a:	90 93 83 01 	sts	0x0183, r25
    2f6e:	80 93 82 01 	sts	0x0182, r24
					- (Glob_u16StartTime + (256 * Glob_u16OvfCounterStart));

			//calculate the distance
			Glob_f32Distance = Glob_u16TimeDiff * 0.068; //     f32 ton=(h(64/16000000))/2 >>     distance=ton34000;
    2f72:	80 91 82 01 	lds	r24, 0x0182
    2f76:	90 91 83 01 	lds	r25, 0x0183
    2f7a:	cc 01       	movw	r24, r24
    2f7c:	a0 e0       	ldi	r26, 0x00	; 0
    2f7e:	b0 e0       	ldi	r27, 0x00	; 0
    2f80:	bc 01       	movw	r22, r24
    2f82:	cd 01       	movw	r24, r26
    2f84:	0e 94 37 05 	call	0xa6e	; 0xa6e <__floatunsisf>
    2f88:	dc 01       	movw	r26, r24
    2f8a:	cb 01       	movw	r24, r22
    2f8c:	bc 01       	movw	r22, r24
    2f8e:	cd 01       	movw	r24, r26
    2f90:	26 e9       	ldi	r18, 0x96	; 150
    2f92:	33 e4       	ldi	r19, 0x43	; 67
    2f94:	4b e8       	ldi	r20, 0x8B	; 139
    2f96:	5d e3       	ldi	r21, 0x3D	; 61
    2f98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f9c:	dc 01       	movw	r26, r24
    2f9e:	cb 01       	movw	r24, r22
    2fa0:	80 93 7a 01 	sts	0x017A, r24
    2fa4:	90 93 7b 01 	sts	0x017B, r25
    2fa8:	a0 93 7c 01 	sts	0x017C, r26
    2fac:	b0 93 7d 01 	sts	0x017D, r27

			//reset the counter to calculate new signal
			Glob_u8Counter = NUM0;
    2fb0:	10 92 68 01 	sts	0x0168, r1

		}

		//increase the counter to sync with the entry state
		Glob_u8Counter++;
    2fb4:	80 91 68 01 	lds	r24, 0x0168
    2fb8:	8f 5f       	subi	r24, 0xFF	; 255
    2fba:	80 93 68 01 	sts	0x0168, r24
	}

}
    2fbe:	cf 91       	pop	r28
    2fc0:	df 91       	pop	r29
    2fc2:	08 95       	ret

00002fc4 <HAL_SM_voidSMInit>:
 *
 *  Created on: Oct 29, 2023
 *      Author: TOP_WORLD
 */
#include "Servo_Motor.h"
void HAL_SM_voidSMInit(void) {
    2fc4:	df 93       	push	r29
    2fc6:	cf 93       	push	r28
    2fc8:	cd b7       	in	r28, 0x3d	; 61
    2fca:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(DDRD,Pin7);
    2fcc:	a1 e3       	ldi	r26, 0x31	; 49
    2fce:	b0 e0       	ldi	r27, 0x00	; 0
    2fd0:	e1 e3       	ldi	r30, 0x31	; 49
    2fd2:	f0 e0       	ldi	r31, 0x00	; 0
    2fd4:	80 81       	ld	r24, Z
    2fd6:	80 68       	ori	r24, 0x80	; 128
    2fd8:	8c 93       	st	X, r24
}
    2fda:	cf 91       	pop	r28
    2fdc:	df 91       	pop	r29
    2fde:	08 95       	ret

00002fe0 <HAL_SM_voidSMSetAngle>:
void HAL_SM_voidSMSetAngle(u8 LOC_u8Angle) {
    2fe0:	df 93       	push	r29
    2fe2:	cf 93       	push	r28
    2fe4:	cd b7       	in	r28, 0x3d	; 61
    2fe6:	de b7       	in	r29, 0x3e	; 62
    2fe8:	e5 97       	sbiw	r28, 0x35	; 53
    2fea:	0f b6       	in	r0, 0x3f	; 63
    2fec:	f8 94       	cli
    2fee:	de bf       	out	0x3e, r29	; 62
    2ff0:	0f be       	out	0x3f, r0	; 63
    2ff2:	cd bf       	out	0x3d, r28	; 61
    2ff4:	8d ab       	std	Y+53, r24	; 0x35
	u16 LOC_u16Time=(32.0/3)*(LOC_u8Angle-90)+1100;
    2ff6:	8d a9       	ldd	r24, Y+53	; 0x35
    2ff8:	88 2f       	mov	r24, r24
    2ffa:	90 e0       	ldi	r25, 0x00	; 0
    2ffc:	8a 55       	subi	r24, 0x5A	; 90
    2ffe:	90 40       	sbci	r25, 0x00	; 0
    3000:	aa 27       	eor	r26, r26
    3002:	97 fd       	sbrc	r25, 7
    3004:	a0 95       	com	r26
    3006:	ba 2f       	mov	r27, r26
    3008:	bc 01       	movw	r22, r24
    300a:	cd 01       	movw	r24, r26
    300c:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    3010:	dc 01       	movw	r26, r24
    3012:	cb 01       	movw	r24, r22
    3014:	bc 01       	movw	r22, r24
    3016:	cd 01       	movw	r24, r26
    3018:	2b ea       	ldi	r18, 0xAB	; 171
    301a:	3a ea       	ldi	r19, 0xAA	; 170
    301c:	4a e2       	ldi	r20, 0x2A	; 42
    301e:	51 e4       	ldi	r21, 0x41	; 65
    3020:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3024:	dc 01       	movw	r26, r24
    3026:	cb 01       	movw	r24, r22
    3028:	bc 01       	movw	r22, r24
    302a:	cd 01       	movw	r24, r26
    302c:	20 e0       	ldi	r18, 0x00	; 0
    302e:	30 e8       	ldi	r19, 0x80	; 128
    3030:	49 e8       	ldi	r20, 0x89	; 137
    3032:	54 e4       	ldi	r21, 0x44	; 68
    3034:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    3038:	dc 01       	movw	r26, r24
    303a:	cb 01       	movw	r24, r22
    303c:	bc 01       	movw	r22, r24
    303e:	cd 01       	movw	r24, r26
    3040:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3044:	dc 01       	movw	r26, r24
    3046:	cb 01       	movw	r24, r22
    3048:	9c ab       	std	Y+52, r25	; 0x34
    304a:	8b ab       	std	Y+51, r24	; 0x33
	u16 LOC_u16OffTime=(20000-LOC_u16Time);
    304c:	20 e2       	ldi	r18, 0x20	; 32
    304e:	3e e4       	ldi	r19, 0x4E	; 78
    3050:	8b a9       	ldd	r24, Y+51	; 0x33
    3052:	9c a9       	ldd	r25, Y+52	; 0x34
    3054:	a9 01       	movw	r20, r18
    3056:	48 1b       	sub	r20, r24
    3058:	59 0b       	sbc	r21, r25
    305a:	ca 01       	movw	r24, r20
    305c:	9a ab       	std	Y+50, r25	; 0x32
    305e:	89 ab       	std	Y+49, r24	; 0x31
	if (LOC_u8Angle <= MAX_ANGLE && LOC_u8Angle >= MIN_ANGLE) {
    3060:	8d a9       	ldd	r24, Y+53	; 0x35
    3062:	88 2f       	mov	r24, r24
    3064:	90 e0       	ldi	r25, 0x00	; 0
    3066:	aa 27       	eor	r26, r26
    3068:	97 fd       	sbrc	r25, 7
    306a:	a0 95       	com	r26
    306c:	ba 2f       	mov	r27, r26
    306e:	bc 01       	movw	r22, r24
    3070:	cd 01       	movw	r24, r26
    3072:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    3076:	dc 01       	movw	r26, r24
    3078:	cb 01       	movw	r24, r22
    307a:	bc 01       	movw	r22, r24
    307c:	cd 01       	movw	r24, r26
    307e:	20 e0       	ldi	r18, 0x00	; 0
    3080:	30 e0       	ldi	r19, 0x00	; 0
    3082:	44 e3       	ldi	r20, 0x34	; 52
    3084:	53 e4       	ldi	r21, 0x43	; 67
    3086:	0e 94 55 04 	call	0x8aa	; 0x8aa <__lesf2>
    308a:	18 16       	cp	r1, r24
    308c:	0c f4       	brge	.+2      	; 0x3090 <HAL_SM_voidSMSetAngle+0xb0>
    308e:	98 c1       	rjmp	.+816    	; 0x33c0 <HAL_SM_voidSMSetAngle+0x3e0>
		SET_BIT(PORTD,Pin7);
    3090:	a2 e3       	ldi	r26, 0x32	; 50
    3092:	b0 e0       	ldi	r27, 0x00	; 0
    3094:	e2 e3       	ldi	r30, 0x32	; 50
    3096:	f0 e0       	ldi	r31, 0x00	; 0
    3098:	80 81       	ld	r24, Z
    309a:	80 68       	ori	r24, 0x80	; 128
    309c:	8c 93       	st	X, r24
		_delay_us(LOC_u16Time);
    309e:	8b a9       	ldd	r24, Y+51	; 0x33
    30a0:	9c a9       	ldd	r25, Y+52	; 0x34
    30a2:	cc 01       	movw	r24, r24
    30a4:	a0 e0       	ldi	r26, 0x00	; 0
    30a6:	b0 e0       	ldi	r27, 0x00	; 0
    30a8:	bc 01       	movw	r22, r24
    30aa:	cd 01       	movw	r24, r26
    30ac:	0e 94 37 05 	call	0xa6e	; 0xa6e <__floatunsisf>
    30b0:	dc 01       	movw	r26, r24
    30b2:	cb 01       	movw	r24, r22
    30b4:	8d a7       	std	Y+45, r24	; 0x2d
    30b6:	9e a7       	std	Y+46, r25	; 0x2e
    30b8:	af a7       	std	Y+47, r26	; 0x2f
    30ba:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    30bc:	6d a5       	ldd	r22, Y+45	; 0x2d
    30be:	7e a5       	ldd	r23, Y+46	; 0x2e
    30c0:	8f a5       	ldd	r24, Y+47	; 0x2f
    30c2:	98 a9       	ldd	r25, Y+48	; 0x30
    30c4:	2b ea       	ldi	r18, 0xAB	; 171
    30c6:	3a ea       	ldi	r19, 0xAA	; 170
    30c8:	4a ea       	ldi	r20, 0xAA	; 170
    30ca:	50 e4       	ldi	r21, 0x40	; 64
    30cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30d0:	dc 01       	movw	r26, r24
    30d2:	cb 01       	movw	r24, r22
    30d4:	89 a7       	std	Y+41, r24	; 0x29
    30d6:	9a a7       	std	Y+42, r25	; 0x2a
    30d8:	ab a7       	std	Y+43, r26	; 0x2b
    30da:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    30dc:	69 a5       	ldd	r22, Y+41	; 0x29
    30de:	7a a5       	ldd	r23, Y+42	; 0x2a
    30e0:	8b a5       	ldd	r24, Y+43	; 0x2b
    30e2:	9c a5       	ldd	r25, Y+44	; 0x2c
    30e4:	20 e0       	ldi	r18, 0x00	; 0
    30e6:	30 e0       	ldi	r19, 0x00	; 0
    30e8:	40 e8       	ldi	r20, 0x80	; 128
    30ea:	5f e3       	ldi	r21, 0x3F	; 63
    30ec:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    30f0:	88 23       	and	r24, r24
    30f2:	1c f4       	brge	.+6      	; 0x30fa <HAL_SM_voidSMSetAngle+0x11a>
		__ticks = 1;
    30f4:	81 e0       	ldi	r24, 0x01	; 1
    30f6:	88 a7       	std	Y+40, r24	; 0x28
    30f8:	91 c0       	rjmp	.+290    	; 0x321c <HAL_SM_voidSMSetAngle+0x23c>
	else if (__tmp > 255)
    30fa:	69 a5       	ldd	r22, Y+41	; 0x29
    30fc:	7a a5       	ldd	r23, Y+42	; 0x2a
    30fe:	8b a5       	ldd	r24, Y+43	; 0x2b
    3100:	9c a5       	ldd	r25, Y+44	; 0x2c
    3102:	20 e0       	ldi	r18, 0x00	; 0
    3104:	30 e0       	ldi	r19, 0x00	; 0
    3106:	4f e7       	ldi	r20, 0x7F	; 127
    3108:	53 e4       	ldi	r21, 0x43	; 67
    310a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    310e:	18 16       	cp	r1, r24
    3110:	0c f0       	brlt	.+2      	; 0x3114 <HAL_SM_voidSMSetAngle+0x134>
    3112:	7b c0       	rjmp	.+246    	; 0x320a <HAL_SM_voidSMSetAngle+0x22a>
	{
		_delay_ms(__us / 1000.0);
    3114:	6d a5       	ldd	r22, Y+45	; 0x2d
    3116:	7e a5       	ldd	r23, Y+46	; 0x2e
    3118:	8f a5       	ldd	r24, Y+47	; 0x2f
    311a:	98 a9       	ldd	r25, Y+48	; 0x30
    311c:	20 e0       	ldi	r18, 0x00	; 0
    311e:	30 e0       	ldi	r19, 0x00	; 0
    3120:	4a e7       	ldi	r20, 0x7A	; 122
    3122:	54 e4       	ldi	r21, 0x44	; 68
    3124:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3128:	dc 01       	movw	r26, r24
    312a:	cb 01       	movw	r24, r22
    312c:	8c a3       	std	Y+36, r24	; 0x24
    312e:	9d a3       	std	Y+37, r25	; 0x25
    3130:	ae a3       	std	Y+38, r26	; 0x26
    3132:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3134:	6c a1       	ldd	r22, Y+36	; 0x24
    3136:	7d a1       	ldd	r23, Y+37	; 0x25
    3138:	8e a1       	ldd	r24, Y+38	; 0x26
    313a:	9f a1       	ldd	r25, Y+39	; 0x27
    313c:	20 e0       	ldi	r18, 0x00	; 0
    313e:	30 e0       	ldi	r19, 0x00	; 0
    3140:	4a e7       	ldi	r20, 0x7A	; 122
    3142:	55 e4       	ldi	r21, 0x45	; 69
    3144:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3148:	dc 01       	movw	r26, r24
    314a:	cb 01       	movw	r24, r22
    314c:	88 a3       	std	Y+32, r24	; 0x20
    314e:	99 a3       	std	Y+33, r25	; 0x21
    3150:	aa a3       	std	Y+34, r26	; 0x22
    3152:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    3154:	68 a1       	ldd	r22, Y+32	; 0x20
    3156:	79 a1       	ldd	r23, Y+33	; 0x21
    3158:	8a a1       	ldd	r24, Y+34	; 0x22
    315a:	9b a1       	ldd	r25, Y+35	; 0x23
    315c:	20 e0       	ldi	r18, 0x00	; 0
    315e:	30 e0       	ldi	r19, 0x00	; 0
    3160:	40 e8       	ldi	r20, 0x80	; 128
    3162:	5f e3       	ldi	r21, 0x3F	; 63
    3164:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3168:	88 23       	and	r24, r24
    316a:	2c f4       	brge	.+10     	; 0x3176 <HAL_SM_voidSMSetAngle+0x196>
		__ticks = 1;
    316c:	81 e0       	ldi	r24, 0x01	; 1
    316e:	90 e0       	ldi	r25, 0x00	; 0
    3170:	9f 8f       	std	Y+31, r25	; 0x1f
    3172:	8e 8f       	std	Y+30, r24	; 0x1e
    3174:	3f c0       	rjmp	.+126    	; 0x31f4 <HAL_SM_voidSMSetAngle+0x214>
	else if (__tmp > 65535)
    3176:	68 a1       	ldd	r22, Y+32	; 0x20
    3178:	79 a1       	ldd	r23, Y+33	; 0x21
    317a:	8a a1       	ldd	r24, Y+34	; 0x22
    317c:	9b a1       	ldd	r25, Y+35	; 0x23
    317e:	20 e0       	ldi	r18, 0x00	; 0
    3180:	3f ef       	ldi	r19, 0xFF	; 255
    3182:	4f e7       	ldi	r20, 0x7F	; 127
    3184:	57 e4       	ldi	r21, 0x47	; 71
    3186:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    318a:	18 16       	cp	r1, r24
    318c:	4c f5       	brge	.+82     	; 0x31e0 <HAL_SM_voidSMSetAngle+0x200>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    318e:	6c a1       	ldd	r22, Y+36	; 0x24
    3190:	7d a1       	ldd	r23, Y+37	; 0x25
    3192:	8e a1       	ldd	r24, Y+38	; 0x26
    3194:	9f a1       	ldd	r25, Y+39	; 0x27
    3196:	20 e0       	ldi	r18, 0x00	; 0
    3198:	30 e0       	ldi	r19, 0x00	; 0
    319a:	40 e2       	ldi	r20, 0x20	; 32
    319c:	51 e4       	ldi	r21, 0x41	; 65
    319e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31a2:	dc 01       	movw	r26, r24
    31a4:	cb 01       	movw	r24, r22
    31a6:	bc 01       	movw	r22, r24
    31a8:	cd 01       	movw	r24, r26
    31aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31ae:	dc 01       	movw	r26, r24
    31b0:	cb 01       	movw	r24, r22
    31b2:	9f 8f       	std	Y+31, r25	; 0x1f
    31b4:	8e 8f       	std	Y+30, r24	; 0x1e
    31b6:	0f c0       	rjmp	.+30     	; 0x31d6 <HAL_SM_voidSMSetAngle+0x1f6>
    31b8:	80 e9       	ldi	r24, 0x90	; 144
    31ba:	91 e0       	ldi	r25, 0x01	; 1
    31bc:	9d 8f       	std	Y+29, r25	; 0x1d
    31be:	8c 8f       	std	Y+28, r24	; 0x1c
    31c0:	8c 8d       	ldd	r24, Y+28	; 0x1c
    31c2:	9d 8d       	ldd	r25, Y+29	; 0x1d
    31c4:	01 97       	sbiw	r24, 0x01	; 1
    31c6:	f1 f7       	brne	.-4      	; 0x31c4 <HAL_SM_voidSMSetAngle+0x1e4>
    31c8:	9d 8f       	std	Y+29, r25	; 0x1d
    31ca:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31cc:	8e 8d       	ldd	r24, Y+30	; 0x1e
    31ce:	9f 8d       	ldd	r25, Y+31	; 0x1f
    31d0:	01 97       	sbiw	r24, 0x01	; 1
    31d2:	9f 8f       	std	Y+31, r25	; 0x1f
    31d4:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31d6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    31d8:	9f 8d       	ldd	r25, Y+31	; 0x1f
    31da:	00 97       	sbiw	r24, 0x00	; 0
    31dc:	69 f7       	brne	.-38     	; 0x31b8 <HAL_SM_voidSMSetAngle+0x1d8>
    31de:	24 c0       	rjmp	.+72     	; 0x3228 <HAL_SM_voidSMSetAngle+0x248>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31e0:	68 a1       	ldd	r22, Y+32	; 0x20
    31e2:	79 a1       	ldd	r23, Y+33	; 0x21
    31e4:	8a a1       	ldd	r24, Y+34	; 0x22
    31e6:	9b a1       	ldd	r25, Y+35	; 0x23
    31e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31ec:	dc 01       	movw	r26, r24
    31ee:	cb 01       	movw	r24, r22
    31f0:	9f 8f       	std	Y+31, r25	; 0x1f
    31f2:	8e 8f       	std	Y+30, r24	; 0x1e
    31f4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    31f6:	9f 8d       	ldd	r25, Y+31	; 0x1f
    31f8:	9b 8f       	std	Y+27, r25	; 0x1b
    31fa:	8a 8f       	std	Y+26, r24	; 0x1a
    31fc:	8a 8d       	ldd	r24, Y+26	; 0x1a
    31fe:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3200:	01 97       	sbiw	r24, 0x01	; 1
    3202:	f1 f7       	brne	.-4      	; 0x3200 <HAL_SM_voidSMSetAngle+0x220>
    3204:	9b 8f       	std	Y+27, r25	; 0x1b
    3206:	8a 8f       	std	Y+26, r24	; 0x1a
    3208:	0f c0       	rjmp	.+30     	; 0x3228 <HAL_SM_voidSMSetAngle+0x248>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    320a:	69 a5       	ldd	r22, Y+41	; 0x29
    320c:	7a a5       	ldd	r23, Y+42	; 0x2a
    320e:	8b a5       	ldd	r24, Y+43	; 0x2b
    3210:	9c a5       	ldd	r25, Y+44	; 0x2c
    3212:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3216:	dc 01       	movw	r26, r24
    3218:	cb 01       	movw	r24, r22
    321a:	88 a7       	std	Y+40, r24	; 0x28
    321c:	88 a5       	ldd	r24, Y+40	; 0x28
    321e:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3220:	89 8d       	ldd	r24, Y+25	; 0x19
    3222:	8a 95       	dec	r24
    3224:	f1 f7       	brne	.-4      	; 0x3222 <HAL_SM_voidSMSetAngle+0x242>
    3226:	89 8f       	std	Y+25, r24	; 0x19
		CLR_BIT(PORTD,Pin7);
    3228:	a2 e3       	ldi	r26, 0x32	; 50
    322a:	b0 e0       	ldi	r27, 0x00	; 0
    322c:	e2 e3       	ldi	r30, 0x32	; 50
    322e:	f0 e0       	ldi	r31, 0x00	; 0
    3230:	80 81       	ld	r24, Z
    3232:	8f 77       	andi	r24, 0x7F	; 127
    3234:	8c 93       	st	X, r24
		_delay_us(LOC_u16OffTime);
    3236:	89 a9       	ldd	r24, Y+49	; 0x31
    3238:	9a a9       	ldd	r25, Y+50	; 0x32
    323a:	cc 01       	movw	r24, r24
    323c:	a0 e0       	ldi	r26, 0x00	; 0
    323e:	b0 e0       	ldi	r27, 0x00	; 0
    3240:	bc 01       	movw	r22, r24
    3242:	cd 01       	movw	r24, r26
    3244:	0e 94 37 05 	call	0xa6e	; 0xa6e <__floatunsisf>
    3248:	dc 01       	movw	r26, r24
    324a:	cb 01       	movw	r24, r22
    324c:	8d 8b       	std	Y+21, r24	; 0x15
    324e:	9e 8b       	std	Y+22, r25	; 0x16
    3250:	af 8b       	std	Y+23, r26	; 0x17
    3252:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3254:	6d 89       	ldd	r22, Y+21	; 0x15
    3256:	7e 89       	ldd	r23, Y+22	; 0x16
    3258:	8f 89       	ldd	r24, Y+23	; 0x17
    325a:	98 8d       	ldd	r25, Y+24	; 0x18
    325c:	2b ea       	ldi	r18, 0xAB	; 171
    325e:	3a ea       	ldi	r19, 0xAA	; 170
    3260:	4a ea       	ldi	r20, 0xAA	; 170
    3262:	50 e4       	ldi	r21, 0x40	; 64
    3264:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3268:	dc 01       	movw	r26, r24
    326a:	cb 01       	movw	r24, r22
    326c:	89 8b       	std	Y+17, r24	; 0x11
    326e:	9a 8b       	std	Y+18, r25	; 0x12
    3270:	ab 8b       	std	Y+19, r26	; 0x13
    3272:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    3274:	69 89       	ldd	r22, Y+17	; 0x11
    3276:	7a 89       	ldd	r23, Y+18	; 0x12
    3278:	8b 89       	ldd	r24, Y+19	; 0x13
    327a:	9c 89       	ldd	r25, Y+20	; 0x14
    327c:	20 e0       	ldi	r18, 0x00	; 0
    327e:	30 e0       	ldi	r19, 0x00	; 0
    3280:	40 e8       	ldi	r20, 0x80	; 128
    3282:	5f e3       	ldi	r21, 0x3F	; 63
    3284:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3288:	88 23       	and	r24, r24
    328a:	1c f4       	brge	.+6      	; 0x3292 <HAL_SM_voidSMSetAngle+0x2b2>
		__ticks = 1;
    328c:	81 e0       	ldi	r24, 0x01	; 1
    328e:	88 8b       	std	Y+16, r24	; 0x10
    3290:	91 c0       	rjmp	.+290    	; 0x33b4 <HAL_SM_voidSMSetAngle+0x3d4>
	else if (__tmp > 255)
    3292:	69 89       	ldd	r22, Y+17	; 0x11
    3294:	7a 89       	ldd	r23, Y+18	; 0x12
    3296:	8b 89       	ldd	r24, Y+19	; 0x13
    3298:	9c 89       	ldd	r25, Y+20	; 0x14
    329a:	20 e0       	ldi	r18, 0x00	; 0
    329c:	30 e0       	ldi	r19, 0x00	; 0
    329e:	4f e7       	ldi	r20, 0x7F	; 127
    32a0:	53 e4       	ldi	r21, 0x43	; 67
    32a2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    32a6:	18 16       	cp	r1, r24
    32a8:	0c f0       	brlt	.+2      	; 0x32ac <HAL_SM_voidSMSetAngle+0x2cc>
    32aa:	7b c0       	rjmp	.+246    	; 0x33a2 <HAL_SM_voidSMSetAngle+0x3c2>
	{
		_delay_ms(__us / 1000.0);
    32ac:	6d 89       	ldd	r22, Y+21	; 0x15
    32ae:	7e 89       	ldd	r23, Y+22	; 0x16
    32b0:	8f 89       	ldd	r24, Y+23	; 0x17
    32b2:	98 8d       	ldd	r25, Y+24	; 0x18
    32b4:	20 e0       	ldi	r18, 0x00	; 0
    32b6:	30 e0       	ldi	r19, 0x00	; 0
    32b8:	4a e7       	ldi	r20, 0x7A	; 122
    32ba:	54 e4       	ldi	r21, 0x44	; 68
    32bc:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    32c0:	dc 01       	movw	r26, r24
    32c2:	cb 01       	movw	r24, r22
    32c4:	8c 87       	std	Y+12, r24	; 0x0c
    32c6:	9d 87       	std	Y+13, r25	; 0x0d
    32c8:	ae 87       	std	Y+14, r26	; 0x0e
    32ca:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32cc:	6c 85       	ldd	r22, Y+12	; 0x0c
    32ce:	7d 85       	ldd	r23, Y+13	; 0x0d
    32d0:	8e 85       	ldd	r24, Y+14	; 0x0e
    32d2:	9f 85       	ldd	r25, Y+15	; 0x0f
    32d4:	20 e0       	ldi	r18, 0x00	; 0
    32d6:	30 e0       	ldi	r19, 0x00	; 0
    32d8:	4a e7       	ldi	r20, 0x7A	; 122
    32da:	55 e4       	ldi	r21, 0x45	; 69
    32dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32e0:	dc 01       	movw	r26, r24
    32e2:	cb 01       	movw	r24, r22
    32e4:	88 87       	std	Y+8, r24	; 0x08
    32e6:	99 87       	std	Y+9, r25	; 0x09
    32e8:	aa 87       	std	Y+10, r26	; 0x0a
    32ea:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    32ec:	68 85       	ldd	r22, Y+8	; 0x08
    32ee:	79 85       	ldd	r23, Y+9	; 0x09
    32f0:	8a 85       	ldd	r24, Y+10	; 0x0a
    32f2:	9b 85       	ldd	r25, Y+11	; 0x0b
    32f4:	20 e0       	ldi	r18, 0x00	; 0
    32f6:	30 e0       	ldi	r19, 0x00	; 0
    32f8:	40 e8       	ldi	r20, 0x80	; 128
    32fa:	5f e3       	ldi	r21, 0x3F	; 63
    32fc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3300:	88 23       	and	r24, r24
    3302:	2c f4       	brge	.+10     	; 0x330e <HAL_SM_voidSMSetAngle+0x32e>
		__ticks = 1;
    3304:	81 e0       	ldi	r24, 0x01	; 1
    3306:	90 e0       	ldi	r25, 0x00	; 0
    3308:	9f 83       	std	Y+7, r25	; 0x07
    330a:	8e 83       	std	Y+6, r24	; 0x06
    330c:	3f c0       	rjmp	.+126    	; 0x338c <HAL_SM_voidSMSetAngle+0x3ac>
	else if (__tmp > 65535)
    330e:	68 85       	ldd	r22, Y+8	; 0x08
    3310:	79 85       	ldd	r23, Y+9	; 0x09
    3312:	8a 85       	ldd	r24, Y+10	; 0x0a
    3314:	9b 85       	ldd	r25, Y+11	; 0x0b
    3316:	20 e0       	ldi	r18, 0x00	; 0
    3318:	3f ef       	ldi	r19, 0xFF	; 255
    331a:	4f e7       	ldi	r20, 0x7F	; 127
    331c:	57 e4       	ldi	r21, 0x47	; 71
    331e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3322:	18 16       	cp	r1, r24
    3324:	4c f5       	brge	.+82     	; 0x3378 <HAL_SM_voidSMSetAngle+0x398>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3326:	6c 85       	ldd	r22, Y+12	; 0x0c
    3328:	7d 85       	ldd	r23, Y+13	; 0x0d
    332a:	8e 85       	ldd	r24, Y+14	; 0x0e
    332c:	9f 85       	ldd	r25, Y+15	; 0x0f
    332e:	20 e0       	ldi	r18, 0x00	; 0
    3330:	30 e0       	ldi	r19, 0x00	; 0
    3332:	40 e2       	ldi	r20, 0x20	; 32
    3334:	51 e4       	ldi	r21, 0x41	; 65
    3336:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    333a:	dc 01       	movw	r26, r24
    333c:	cb 01       	movw	r24, r22
    333e:	bc 01       	movw	r22, r24
    3340:	cd 01       	movw	r24, r26
    3342:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3346:	dc 01       	movw	r26, r24
    3348:	cb 01       	movw	r24, r22
    334a:	9f 83       	std	Y+7, r25	; 0x07
    334c:	8e 83       	std	Y+6, r24	; 0x06
    334e:	0f c0       	rjmp	.+30     	; 0x336e <HAL_SM_voidSMSetAngle+0x38e>
    3350:	80 e9       	ldi	r24, 0x90	; 144
    3352:	91 e0       	ldi	r25, 0x01	; 1
    3354:	9d 83       	std	Y+5, r25	; 0x05
    3356:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3358:	8c 81       	ldd	r24, Y+4	; 0x04
    335a:	9d 81       	ldd	r25, Y+5	; 0x05
    335c:	01 97       	sbiw	r24, 0x01	; 1
    335e:	f1 f7       	brne	.-4      	; 0x335c <HAL_SM_voidSMSetAngle+0x37c>
    3360:	9d 83       	std	Y+5, r25	; 0x05
    3362:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3364:	8e 81       	ldd	r24, Y+6	; 0x06
    3366:	9f 81       	ldd	r25, Y+7	; 0x07
    3368:	01 97       	sbiw	r24, 0x01	; 1
    336a:	9f 83       	std	Y+7, r25	; 0x07
    336c:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    336e:	8e 81       	ldd	r24, Y+6	; 0x06
    3370:	9f 81       	ldd	r25, Y+7	; 0x07
    3372:	00 97       	sbiw	r24, 0x00	; 0
    3374:	69 f7       	brne	.-38     	; 0x3350 <HAL_SM_voidSMSetAngle+0x370>
    3376:	24 c0       	rjmp	.+72     	; 0x33c0 <HAL_SM_voidSMSetAngle+0x3e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3378:	68 85       	ldd	r22, Y+8	; 0x08
    337a:	79 85       	ldd	r23, Y+9	; 0x09
    337c:	8a 85       	ldd	r24, Y+10	; 0x0a
    337e:	9b 85       	ldd	r25, Y+11	; 0x0b
    3380:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3384:	dc 01       	movw	r26, r24
    3386:	cb 01       	movw	r24, r22
    3388:	9f 83       	std	Y+7, r25	; 0x07
    338a:	8e 83       	std	Y+6, r24	; 0x06
    338c:	8e 81       	ldd	r24, Y+6	; 0x06
    338e:	9f 81       	ldd	r25, Y+7	; 0x07
    3390:	9b 83       	std	Y+3, r25	; 0x03
    3392:	8a 83       	std	Y+2, r24	; 0x02
    3394:	8a 81       	ldd	r24, Y+2	; 0x02
    3396:	9b 81       	ldd	r25, Y+3	; 0x03
    3398:	01 97       	sbiw	r24, 0x01	; 1
    339a:	f1 f7       	brne	.-4      	; 0x3398 <HAL_SM_voidSMSetAngle+0x3b8>
    339c:	9b 83       	std	Y+3, r25	; 0x03
    339e:	8a 83       	std	Y+2, r24	; 0x02
    33a0:	0f c0       	rjmp	.+30     	; 0x33c0 <HAL_SM_voidSMSetAngle+0x3e0>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    33a2:	69 89       	ldd	r22, Y+17	; 0x11
    33a4:	7a 89       	ldd	r23, Y+18	; 0x12
    33a6:	8b 89       	ldd	r24, Y+19	; 0x13
    33a8:	9c 89       	ldd	r25, Y+20	; 0x14
    33aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33ae:	dc 01       	movw	r26, r24
    33b0:	cb 01       	movw	r24, r22
    33b2:	88 8b       	std	Y+16, r24	; 0x10
    33b4:	88 89       	ldd	r24, Y+16	; 0x10
    33b6:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    33b8:	89 81       	ldd	r24, Y+1	; 0x01
    33ba:	8a 95       	dec	r24
    33bc:	f1 f7       	brne	.-4      	; 0x33ba <HAL_SM_voidSMSetAngle+0x3da>
    33be:	89 83       	std	Y+1, r24	; 0x01
	} else {
		//NOTHING
	}
}
    33c0:	e5 96       	adiw	r28, 0x35	; 53
    33c2:	0f b6       	in	r0, 0x3f	; 63
    33c4:	f8 94       	cli
    33c6:	de bf       	out	0x3e, r29	; 62
    33c8:	0f be       	out	0x3f, r0	; 63
    33ca:	cd bf       	out	0x3d, r28	; 61
    33cc:	cf 91       	pop	r28
    33ce:	df 91       	pop	r29
    33d0:	08 95       	ret

000033d2 <HAL_LED_u8LedInit>:
 *  Created on: Sep 25, 2023
 *      Author: Mohamed
 */
#include "LED.h"

STD_Type HAL_LED_u8LedInit(u8 Loc_u8LEDPortID, u8 Loc_u8LEDPinID) {
    33d2:	df 93       	push	r29
    33d4:	cf 93       	push	r28
    33d6:	00 d0       	rcall	.+0      	; 0x33d8 <HAL_LED_u8LedInit+0x6>
    33d8:	0f 92       	push	r0
    33da:	cd b7       	in	r28, 0x3d	; 61
    33dc:	de b7       	in	r29, 0x3e	; 62
    33de:	8a 83       	std	Y+2, r24	; 0x02
    33e0:	6b 83       	std	Y+3, r22	; 0x03
	u8 Loc_u8Return_Value = E_NOT_OK;
    33e2:	81 e0       	ldi	r24, 0x01	; 1
    33e4:	89 83       	std	Y+1, r24	; 0x01
	if (Loc_u8LEDPortID <= PortD && Loc_u8LEDPinID <= Num_Of_Pins) {
    33e6:	8a 81       	ldd	r24, Y+2	; 0x02
    33e8:	84 30       	cpi	r24, 0x04	; 4
    33ea:	48 f4       	brcc	.+18     	; 0x33fe <HAL_LED_u8LedInit+0x2c>
    33ec:	8b 81       	ldd	r24, Y+3	; 0x03
    33ee:	88 30       	cpi	r24, 0x08	; 8
    33f0:	30 f4       	brcc	.+12     	; 0x33fe <HAL_LED_u8LedInit+0x2c>
		Loc_u8Return_Value = MCAL_DIO_u8SetPinDirection(Loc_u8LEDPortID,
    33f2:	8a 81       	ldd	r24, Y+2	; 0x02
    33f4:	6b 81       	ldd	r22, Y+3	; 0x03
    33f6:	41 e0       	ldi	r20, 0x01	; 1
    33f8:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <MCAL_DIO_u8SetPinDirection>
    33fc:	89 83       	std	Y+1, r24	; 0x01
				Loc_u8LEDPinID, Pin_High);
	} else {
		//Do Nothing
	}
	return Loc_u8Return_Value;
    33fe:	89 81       	ldd	r24, Y+1	; 0x01
}
    3400:	0f 90       	pop	r0
    3402:	0f 90       	pop	r0
    3404:	0f 90       	pop	r0
    3406:	cf 91       	pop	r28
    3408:	df 91       	pop	r29
    340a:	08 95       	ret

0000340c <HAL_LED_u8LedMode>:

STD_Type HAL_LED_u8LedMode(u8 Loc_u8LEDPortID, u8 Loc_u8LEDPinID,
		u8 Loc_u8LEDMode) {
    340c:	df 93       	push	r29
    340e:	cf 93       	push	r28
    3410:	00 d0       	rcall	.+0      	; 0x3412 <HAL_LED_u8LedMode+0x6>
    3412:	00 d0       	rcall	.+0      	; 0x3414 <HAL_LED_u8LedMode+0x8>
    3414:	cd b7       	in	r28, 0x3d	; 61
    3416:	de b7       	in	r29, 0x3e	; 62
    3418:	8a 83       	std	Y+2, r24	; 0x02
    341a:	6b 83       	std	Y+3, r22	; 0x03
    341c:	4c 83       	std	Y+4, r20	; 0x04
	u8 Loc_u8Return_Value = E_NOT_OK;
    341e:	81 e0       	ldi	r24, 0x01	; 1
    3420:	89 83       	std	Y+1, r24	; 0x01
	if (Loc_u8LEDPortID <= PortD && Loc_u8LEDPinID <= Num_Of_Pins
    3422:	8a 81       	ldd	r24, Y+2	; 0x02
    3424:	84 30       	cpi	r24, 0x04	; 4
    3426:	10 f5       	brcc	.+68     	; 0x346c <HAL_LED_u8LedMode+0x60>
    3428:	8b 81       	ldd	r24, Y+3	; 0x03
    342a:	88 30       	cpi	r24, 0x08	; 8
    342c:	f8 f4       	brcc	.+62     	; 0x346c <HAL_LED_u8LedMode+0x60>
    342e:	8c 81       	ldd	r24, Y+4	; 0x04
    3430:	83 30       	cpi	r24, 0x03	; 3
    3432:	e0 f4       	brcc	.+56     	; 0x346c <HAL_LED_u8LedMode+0x60>
			&& Loc_u8LEDMode <= LED_TOG) {
		if (Loc_u8LEDMode == LED_ON) {
    3434:	8c 81       	ldd	r24, Y+4	; 0x04
    3436:	81 30       	cpi	r24, 0x01	; 1
    3438:	39 f4       	brne	.+14     	; 0x3448 <HAL_LED_u8LedMode+0x3c>
			Loc_u8Return_Value = MCAL_DIO_u8SetPinValue(Loc_u8LEDPortID,
    343a:	8a 81       	ldd	r24, Y+2	; 0x02
    343c:	6b 81       	ldd	r22, Y+3	; 0x03
    343e:	41 e0       	ldi	r20, 0x01	; 1
    3440:	0e 94 68 13 	call	0x26d0	; 0x26d0 <MCAL_DIO_u8SetPinValue>
    3444:	89 83       	std	Y+1, r24	; 0x01
    3446:	12 c0       	rjmp	.+36     	; 0x346c <HAL_LED_u8LedMode+0x60>
					Loc_u8LEDPinID, Pin_High);
		} else if (Loc_u8LEDMode == LED_OFF) {
    3448:	8c 81       	ldd	r24, Y+4	; 0x04
    344a:	88 23       	and	r24, r24
    344c:	39 f4       	brne	.+14     	; 0x345c <HAL_LED_u8LedMode+0x50>
			Loc_u8Return_Value = MCAL_DIO_u8SetPinValue(Loc_u8LEDPortID,
    344e:	8a 81       	ldd	r24, Y+2	; 0x02
    3450:	6b 81       	ldd	r22, Y+3	; 0x03
    3452:	40 e0       	ldi	r20, 0x00	; 0
    3454:	0e 94 68 13 	call	0x26d0	; 0x26d0 <MCAL_DIO_u8SetPinValue>
    3458:	89 83       	std	Y+1, r24	; 0x01
    345a:	08 c0       	rjmp	.+16     	; 0x346c <HAL_LED_u8LedMode+0x60>
					Loc_u8LEDPinID, Pin_Low);
		} else if (Loc_u8LEDMode == LED_TOG) {
    345c:	8c 81       	ldd	r24, Y+4	; 0x04
    345e:	82 30       	cpi	r24, 0x02	; 2
    3460:	29 f4       	brne	.+10     	; 0x346c <HAL_LED_u8LedMode+0x60>
			Loc_u8Return_Value = MCAL_DIO_u8TogglePinValue(Loc_u8LEDPortID,
    3462:	8a 81       	ldd	r24, Y+2	; 0x02
    3464:	6b 81       	ldd	r22, Y+3	; 0x03
    3466:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <MCAL_DIO_u8TogglePinValue>
    346a:	89 83       	std	Y+1, r24	; 0x01
			//Do Nothing
		}
	} else {
		//Do Nothing
	}
	return Loc_u8Return_Value;
    346c:	89 81       	ldd	r24, Y+1	; 0x01
}
    346e:	0f 90       	pop	r0
    3470:	0f 90       	pop	r0
    3472:	0f 90       	pop	r0
    3474:	0f 90       	pop	r0
    3476:	cf 91       	pop	r28
    3478:	df 91       	pop	r29
    347a:	08 95       	ret

0000347c <HAL_LCD_u8LCDInit>:

#include "LCD.h"

//static u32 Counter = 0;

void HAL_LCD_u8LCDInit() {
    347c:	0f 93       	push	r16
    347e:	1f 93       	push	r17
    3480:	df 93       	push	r29
    3482:	cf 93       	push	r28
    3484:	cd b7       	in	r28, 0x3d	; 61
    3486:	de b7       	in	r29, 0x3e	; 62
    3488:	c6 54       	subi	r28, 0x46	; 70
    348a:	d0 40       	sbci	r29, 0x00	; 0
    348c:	0f b6       	in	r0, 0x3f	; 63
    348e:	f8 94       	cli
    3490:	de bf       	out	0x3e, r29	; 62
    3492:	0f be       	out	0x3f, r0	; 63
    3494:	cd bf       	out	0x3d, r28	; 61
	MCAL_DIO_u8SetPinDirection(LCD_D_PORT, LCD_D7_PIN, Pin_High);
    3496:	80 e0       	ldi	r24, 0x00	; 0
    3498:	67 e0       	ldi	r22, 0x07	; 7
    349a:	41 e0       	ldi	r20, 0x01	; 1
    349c:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <MCAL_DIO_u8SetPinDirection>
	MCAL_DIO_u8SetPinDirection(LCD_D_PORT, LCD_D6_PIN, Pin_High);
    34a0:	80 e0       	ldi	r24, 0x00	; 0
    34a2:	66 e0       	ldi	r22, 0x06	; 6
    34a4:	41 e0       	ldi	r20, 0x01	; 1
    34a6:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <MCAL_DIO_u8SetPinDirection>
	MCAL_DIO_u8SetPinDirection(LCD_D_PORT, LCD_D5_PIN, Pin_High);
    34aa:	80 e0       	ldi	r24, 0x00	; 0
    34ac:	65 e0       	ldi	r22, 0x05	; 5
    34ae:	41 e0       	ldi	r20, 0x01	; 1
    34b0:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <MCAL_DIO_u8SetPinDirection>
	MCAL_DIO_u8SetPinDirection(LCD_D_PORT, LCD_D4_PIN, Pin_High);
    34b4:	80 e0       	ldi	r24, 0x00	; 0
    34b6:	64 e0       	ldi	r22, 0x04	; 4
    34b8:	41 e0       	ldi	r20, 0x01	; 1
    34ba:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <MCAL_DIO_u8SetPinDirection>
	MCAL_DIO_u8SetPinDirection(RS_Port, RS_Pin, Pin_High);
    34be:	81 e0       	ldi	r24, 0x01	; 1
    34c0:	61 e0       	ldi	r22, 0x01	; 1
    34c2:	41 e0       	ldi	r20, 0x01	; 1
    34c4:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <MCAL_DIO_u8SetPinDirection>
	MCAL_DIO_u8SetPinDirection(RW_Port, RW_Pin, Pin_High);
    34c8:	81 e0       	ldi	r24, 0x01	; 1
    34ca:	62 e0       	ldi	r22, 0x02	; 2
    34cc:	41 e0       	ldi	r20, 0x01	; 1
    34ce:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <MCAL_DIO_u8SetPinDirection>
	MCAL_DIO_u8SetPinDirection(Enable_PORT, Enable_PIN, Pin_High);
    34d2:	81 e0       	ldi	r24, 0x01	; 1
    34d4:	63 e0       	ldi	r22, 0x03	; 3
    34d6:	41 e0       	ldi	r20, 0x01	; 1
    34d8:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <MCAL_DIO_u8SetPinDirection>
    34dc:	fe 01       	movw	r30, r28
    34de:	ed 5b       	subi	r30, 0xBD	; 189
    34e0:	ff 4f       	sbci	r31, 0xFF	; 255
    34e2:	80 e0       	ldi	r24, 0x00	; 0
    34e4:	90 e0       	ldi	r25, 0x00	; 0
    34e6:	a0 e0       	ldi	r26, 0x00	; 0
    34e8:	b0 e4       	ldi	r27, 0x40	; 64
    34ea:	80 83       	st	Z, r24
    34ec:	91 83       	std	Z+1, r25	; 0x01
    34ee:	a2 83       	std	Z+2, r26	; 0x02
    34f0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34f2:	8e 01       	movw	r16, r28
    34f4:	01 5c       	subi	r16, 0xC1	; 193
    34f6:	1f 4f       	sbci	r17, 0xFF	; 255
    34f8:	fe 01       	movw	r30, r28
    34fa:	ed 5b       	subi	r30, 0xBD	; 189
    34fc:	ff 4f       	sbci	r31, 0xFF	; 255
    34fe:	60 81       	ld	r22, Z
    3500:	71 81       	ldd	r23, Z+1	; 0x01
    3502:	82 81       	ldd	r24, Z+2	; 0x02
    3504:	93 81       	ldd	r25, Z+3	; 0x03
    3506:	20 e0       	ldi	r18, 0x00	; 0
    3508:	30 e0       	ldi	r19, 0x00	; 0
    350a:	4a e7       	ldi	r20, 0x7A	; 122
    350c:	55 e4       	ldi	r21, 0x45	; 69
    350e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3512:	dc 01       	movw	r26, r24
    3514:	cb 01       	movw	r24, r22
    3516:	f8 01       	movw	r30, r16
    3518:	80 83       	st	Z, r24
    351a:	91 83       	std	Z+1, r25	; 0x01
    351c:	a2 83       	std	Z+2, r26	; 0x02
    351e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3520:	fe 01       	movw	r30, r28
    3522:	ff 96       	adiw	r30, 0x3f	; 63
    3524:	60 81       	ld	r22, Z
    3526:	71 81       	ldd	r23, Z+1	; 0x01
    3528:	82 81       	ldd	r24, Z+2	; 0x02
    352a:	93 81       	ldd	r25, Z+3	; 0x03
    352c:	20 e0       	ldi	r18, 0x00	; 0
    352e:	30 e0       	ldi	r19, 0x00	; 0
    3530:	40 e8       	ldi	r20, 0x80	; 128
    3532:	5f e3       	ldi	r21, 0x3F	; 63
    3534:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3538:	88 23       	and	r24, r24
    353a:	2c f4       	brge	.+10     	; 0x3546 <HAL_LCD_u8LCDInit+0xca>
		__ticks = 1;
    353c:	81 e0       	ldi	r24, 0x01	; 1
    353e:	90 e0       	ldi	r25, 0x00	; 0
    3540:	9e af       	std	Y+62, r25	; 0x3e
    3542:	8d af       	std	Y+61, r24	; 0x3d
    3544:	46 c0       	rjmp	.+140    	; 0x35d2 <HAL_LCD_u8LCDInit+0x156>
	else if (__tmp > 65535)
    3546:	fe 01       	movw	r30, r28
    3548:	ff 96       	adiw	r30, 0x3f	; 63
    354a:	60 81       	ld	r22, Z
    354c:	71 81       	ldd	r23, Z+1	; 0x01
    354e:	82 81       	ldd	r24, Z+2	; 0x02
    3550:	93 81       	ldd	r25, Z+3	; 0x03
    3552:	20 e0       	ldi	r18, 0x00	; 0
    3554:	3f ef       	ldi	r19, 0xFF	; 255
    3556:	4f e7       	ldi	r20, 0x7F	; 127
    3558:	57 e4       	ldi	r21, 0x47	; 71
    355a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    355e:	18 16       	cp	r1, r24
    3560:	64 f5       	brge	.+88     	; 0x35ba <HAL_LCD_u8LCDInit+0x13e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3562:	fe 01       	movw	r30, r28
    3564:	ed 5b       	subi	r30, 0xBD	; 189
    3566:	ff 4f       	sbci	r31, 0xFF	; 255
    3568:	60 81       	ld	r22, Z
    356a:	71 81       	ldd	r23, Z+1	; 0x01
    356c:	82 81       	ldd	r24, Z+2	; 0x02
    356e:	93 81       	ldd	r25, Z+3	; 0x03
    3570:	20 e0       	ldi	r18, 0x00	; 0
    3572:	30 e0       	ldi	r19, 0x00	; 0
    3574:	40 e2       	ldi	r20, 0x20	; 32
    3576:	51 e4       	ldi	r21, 0x41	; 65
    3578:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    357c:	dc 01       	movw	r26, r24
    357e:	cb 01       	movw	r24, r22
    3580:	bc 01       	movw	r22, r24
    3582:	cd 01       	movw	r24, r26
    3584:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3588:	dc 01       	movw	r26, r24
    358a:	cb 01       	movw	r24, r22
    358c:	9e af       	std	Y+62, r25	; 0x3e
    358e:	8d af       	std	Y+61, r24	; 0x3d
    3590:	0f c0       	rjmp	.+30     	; 0x35b0 <HAL_LCD_u8LCDInit+0x134>
    3592:	80 e9       	ldi	r24, 0x90	; 144
    3594:	91 e0       	ldi	r25, 0x01	; 1
    3596:	9c af       	std	Y+60, r25	; 0x3c
    3598:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    359a:	8b ad       	ldd	r24, Y+59	; 0x3b
    359c:	9c ad       	ldd	r25, Y+60	; 0x3c
    359e:	01 97       	sbiw	r24, 0x01	; 1
    35a0:	f1 f7       	brne	.-4      	; 0x359e <HAL_LCD_u8LCDInit+0x122>
    35a2:	9c af       	std	Y+60, r25	; 0x3c
    35a4:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35a6:	8d ad       	ldd	r24, Y+61	; 0x3d
    35a8:	9e ad       	ldd	r25, Y+62	; 0x3e
    35aa:	01 97       	sbiw	r24, 0x01	; 1
    35ac:	9e af       	std	Y+62, r25	; 0x3e
    35ae:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35b0:	8d ad       	ldd	r24, Y+61	; 0x3d
    35b2:	9e ad       	ldd	r25, Y+62	; 0x3e
    35b4:	00 97       	sbiw	r24, 0x00	; 0
    35b6:	69 f7       	brne	.-38     	; 0x3592 <HAL_LCD_u8LCDInit+0x116>
    35b8:	16 c0       	rjmp	.+44     	; 0x35e6 <HAL_LCD_u8LCDInit+0x16a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35ba:	fe 01       	movw	r30, r28
    35bc:	ff 96       	adiw	r30, 0x3f	; 63
    35be:	60 81       	ld	r22, Z
    35c0:	71 81       	ldd	r23, Z+1	; 0x01
    35c2:	82 81       	ldd	r24, Z+2	; 0x02
    35c4:	93 81       	ldd	r25, Z+3	; 0x03
    35c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35ca:	dc 01       	movw	r26, r24
    35cc:	cb 01       	movw	r24, r22
    35ce:	9e af       	std	Y+62, r25	; 0x3e
    35d0:	8d af       	std	Y+61, r24	; 0x3d
    35d2:	8d ad       	ldd	r24, Y+61	; 0x3d
    35d4:	9e ad       	ldd	r25, Y+62	; 0x3e
    35d6:	9a af       	std	Y+58, r25	; 0x3a
    35d8:	89 af       	std	Y+57, r24	; 0x39
    35da:	89 ad       	ldd	r24, Y+57	; 0x39
    35dc:	9a ad       	ldd	r25, Y+58	; 0x3a
    35de:	01 97       	sbiw	r24, 0x01	; 1
    35e0:	f1 f7       	brne	.-4      	; 0x35de <HAL_LCD_u8LCDInit+0x162>
    35e2:	9a af       	std	Y+58, r25	; 0x3a
    35e4:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(2);
	HAL_LCD_u8SendCommands(Reset);
    35e6:	82 e0       	ldi	r24, 0x02	; 2
    35e8:	0e 94 d6 1c 	call	0x39ac	; 0x39ac <HAL_LCD_u8SendCommands>
    35ec:	80 e0       	ldi	r24, 0x00	; 0
    35ee:	90 e0       	ldi	r25, 0x00	; 0
    35f0:	a0 e0       	ldi	r26, 0x00	; 0
    35f2:	b0 e4       	ldi	r27, 0x40	; 64
    35f4:	8d ab       	std	Y+53, r24	; 0x35
    35f6:	9e ab       	std	Y+54, r25	; 0x36
    35f8:	af ab       	std	Y+55, r26	; 0x37
    35fa:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35fc:	6d a9       	ldd	r22, Y+53	; 0x35
    35fe:	7e a9       	ldd	r23, Y+54	; 0x36
    3600:	8f a9       	ldd	r24, Y+55	; 0x37
    3602:	98 ad       	ldd	r25, Y+56	; 0x38
    3604:	20 e0       	ldi	r18, 0x00	; 0
    3606:	30 e0       	ldi	r19, 0x00	; 0
    3608:	4a e7       	ldi	r20, 0x7A	; 122
    360a:	55 e4       	ldi	r21, 0x45	; 69
    360c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3610:	dc 01       	movw	r26, r24
    3612:	cb 01       	movw	r24, r22
    3614:	89 ab       	std	Y+49, r24	; 0x31
    3616:	9a ab       	std	Y+50, r25	; 0x32
    3618:	ab ab       	std	Y+51, r26	; 0x33
    361a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    361c:	69 a9       	ldd	r22, Y+49	; 0x31
    361e:	7a a9       	ldd	r23, Y+50	; 0x32
    3620:	8b a9       	ldd	r24, Y+51	; 0x33
    3622:	9c a9       	ldd	r25, Y+52	; 0x34
    3624:	20 e0       	ldi	r18, 0x00	; 0
    3626:	30 e0       	ldi	r19, 0x00	; 0
    3628:	40 e8       	ldi	r20, 0x80	; 128
    362a:	5f e3       	ldi	r21, 0x3F	; 63
    362c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3630:	88 23       	and	r24, r24
    3632:	2c f4       	brge	.+10     	; 0x363e <HAL_LCD_u8LCDInit+0x1c2>
		__ticks = 1;
    3634:	81 e0       	ldi	r24, 0x01	; 1
    3636:	90 e0       	ldi	r25, 0x00	; 0
    3638:	98 ab       	std	Y+48, r25	; 0x30
    363a:	8f a7       	std	Y+47, r24	; 0x2f
    363c:	3f c0       	rjmp	.+126    	; 0x36bc <HAL_LCD_u8LCDInit+0x240>
	else if (__tmp > 65535)
    363e:	69 a9       	ldd	r22, Y+49	; 0x31
    3640:	7a a9       	ldd	r23, Y+50	; 0x32
    3642:	8b a9       	ldd	r24, Y+51	; 0x33
    3644:	9c a9       	ldd	r25, Y+52	; 0x34
    3646:	20 e0       	ldi	r18, 0x00	; 0
    3648:	3f ef       	ldi	r19, 0xFF	; 255
    364a:	4f e7       	ldi	r20, 0x7F	; 127
    364c:	57 e4       	ldi	r21, 0x47	; 71
    364e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3652:	18 16       	cp	r1, r24
    3654:	4c f5       	brge	.+82     	; 0x36a8 <HAL_LCD_u8LCDInit+0x22c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3656:	6d a9       	ldd	r22, Y+53	; 0x35
    3658:	7e a9       	ldd	r23, Y+54	; 0x36
    365a:	8f a9       	ldd	r24, Y+55	; 0x37
    365c:	98 ad       	ldd	r25, Y+56	; 0x38
    365e:	20 e0       	ldi	r18, 0x00	; 0
    3660:	30 e0       	ldi	r19, 0x00	; 0
    3662:	40 e2       	ldi	r20, 0x20	; 32
    3664:	51 e4       	ldi	r21, 0x41	; 65
    3666:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    366a:	dc 01       	movw	r26, r24
    366c:	cb 01       	movw	r24, r22
    366e:	bc 01       	movw	r22, r24
    3670:	cd 01       	movw	r24, r26
    3672:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3676:	dc 01       	movw	r26, r24
    3678:	cb 01       	movw	r24, r22
    367a:	98 ab       	std	Y+48, r25	; 0x30
    367c:	8f a7       	std	Y+47, r24	; 0x2f
    367e:	0f c0       	rjmp	.+30     	; 0x369e <HAL_LCD_u8LCDInit+0x222>
    3680:	80 e9       	ldi	r24, 0x90	; 144
    3682:	91 e0       	ldi	r25, 0x01	; 1
    3684:	9e a7       	std	Y+46, r25	; 0x2e
    3686:	8d a7       	std	Y+45, r24	; 0x2d
    3688:	8d a5       	ldd	r24, Y+45	; 0x2d
    368a:	9e a5       	ldd	r25, Y+46	; 0x2e
    368c:	01 97       	sbiw	r24, 0x01	; 1
    368e:	f1 f7       	brne	.-4      	; 0x368c <HAL_LCD_u8LCDInit+0x210>
    3690:	9e a7       	std	Y+46, r25	; 0x2e
    3692:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3694:	8f a5       	ldd	r24, Y+47	; 0x2f
    3696:	98 a9       	ldd	r25, Y+48	; 0x30
    3698:	01 97       	sbiw	r24, 0x01	; 1
    369a:	98 ab       	std	Y+48, r25	; 0x30
    369c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    369e:	8f a5       	ldd	r24, Y+47	; 0x2f
    36a0:	98 a9       	ldd	r25, Y+48	; 0x30
    36a2:	00 97       	sbiw	r24, 0x00	; 0
    36a4:	69 f7       	brne	.-38     	; 0x3680 <HAL_LCD_u8LCDInit+0x204>
    36a6:	14 c0       	rjmp	.+40     	; 0x36d0 <HAL_LCD_u8LCDInit+0x254>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36a8:	69 a9       	ldd	r22, Y+49	; 0x31
    36aa:	7a a9       	ldd	r23, Y+50	; 0x32
    36ac:	8b a9       	ldd	r24, Y+51	; 0x33
    36ae:	9c a9       	ldd	r25, Y+52	; 0x34
    36b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36b4:	dc 01       	movw	r26, r24
    36b6:	cb 01       	movw	r24, r22
    36b8:	98 ab       	std	Y+48, r25	; 0x30
    36ba:	8f a7       	std	Y+47, r24	; 0x2f
    36bc:	8f a5       	ldd	r24, Y+47	; 0x2f
    36be:	98 a9       	ldd	r25, Y+48	; 0x30
    36c0:	9c a7       	std	Y+44, r25	; 0x2c
    36c2:	8b a7       	std	Y+43, r24	; 0x2b
    36c4:	8b a5       	ldd	r24, Y+43	; 0x2b
    36c6:	9c a5       	ldd	r25, Y+44	; 0x2c
    36c8:	01 97       	sbiw	r24, 0x01	; 1
    36ca:	f1 f7       	brne	.-4      	; 0x36c8 <HAL_LCD_u8LCDInit+0x24c>
    36cc:	9c a7       	std	Y+44, r25	; 0x2c
    36ce:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(2);
	HAL_LCD_u8SendCommands(Function_Set);
    36d0:	88 e2       	ldi	r24, 0x28	; 40
    36d2:	0e 94 d6 1c 	call	0x39ac	; 0x39ac <HAL_LCD_u8SendCommands>
    36d6:	80 e0       	ldi	r24, 0x00	; 0
    36d8:	90 e0       	ldi	r25, 0x00	; 0
    36da:	a0 e0       	ldi	r26, 0x00	; 0
    36dc:	b0 e4       	ldi	r27, 0x40	; 64
    36de:	8f a3       	std	Y+39, r24	; 0x27
    36e0:	98 a7       	std	Y+40, r25	; 0x28
    36e2:	a9 a7       	std	Y+41, r26	; 0x29
    36e4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36e6:	6f a1       	ldd	r22, Y+39	; 0x27
    36e8:	78 a5       	ldd	r23, Y+40	; 0x28
    36ea:	89 a5       	ldd	r24, Y+41	; 0x29
    36ec:	9a a5       	ldd	r25, Y+42	; 0x2a
    36ee:	20 e0       	ldi	r18, 0x00	; 0
    36f0:	30 e0       	ldi	r19, 0x00	; 0
    36f2:	4a e7       	ldi	r20, 0x7A	; 122
    36f4:	55 e4       	ldi	r21, 0x45	; 69
    36f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36fa:	dc 01       	movw	r26, r24
    36fc:	cb 01       	movw	r24, r22
    36fe:	8b a3       	std	Y+35, r24	; 0x23
    3700:	9c a3       	std	Y+36, r25	; 0x24
    3702:	ad a3       	std	Y+37, r26	; 0x25
    3704:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3706:	6b a1       	ldd	r22, Y+35	; 0x23
    3708:	7c a1       	ldd	r23, Y+36	; 0x24
    370a:	8d a1       	ldd	r24, Y+37	; 0x25
    370c:	9e a1       	ldd	r25, Y+38	; 0x26
    370e:	20 e0       	ldi	r18, 0x00	; 0
    3710:	30 e0       	ldi	r19, 0x00	; 0
    3712:	40 e8       	ldi	r20, 0x80	; 128
    3714:	5f e3       	ldi	r21, 0x3F	; 63
    3716:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    371a:	88 23       	and	r24, r24
    371c:	2c f4       	brge	.+10     	; 0x3728 <HAL_LCD_u8LCDInit+0x2ac>
		__ticks = 1;
    371e:	81 e0       	ldi	r24, 0x01	; 1
    3720:	90 e0       	ldi	r25, 0x00	; 0
    3722:	9a a3       	std	Y+34, r25	; 0x22
    3724:	89 a3       	std	Y+33, r24	; 0x21
    3726:	3f c0       	rjmp	.+126    	; 0x37a6 <HAL_LCD_u8LCDInit+0x32a>
	else if (__tmp > 65535)
    3728:	6b a1       	ldd	r22, Y+35	; 0x23
    372a:	7c a1       	ldd	r23, Y+36	; 0x24
    372c:	8d a1       	ldd	r24, Y+37	; 0x25
    372e:	9e a1       	ldd	r25, Y+38	; 0x26
    3730:	20 e0       	ldi	r18, 0x00	; 0
    3732:	3f ef       	ldi	r19, 0xFF	; 255
    3734:	4f e7       	ldi	r20, 0x7F	; 127
    3736:	57 e4       	ldi	r21, 0x47	; 71
    3738:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    373c:	18 16       	cp	r1, r24
    373e:	4c f5       	brge	.+82     	; 0x3792 <HAL_LCD_u8LCDInit+0x316>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3740:	6f a1       	ldd	r22, Y+39	; 0x27
    3742:	78 a5       	ldd	r23, Y+40	; 0x28
    3744:	89 a5       	ldd	r24, Y+41	; 0x29
    3746:	9a a5       	ldd	r25, Y+42	; 0x2a
    3748:	20 e0       	ldi	r18, 0x00	; 0
    374a:	30 e0       	ldi	r19, 0x00	; 0
    374c:	40 e2       	ldi	r20, 0x20	; 32
    374e:	51 e4       	ldi	r21, 0x41	; 65
    3750:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3754:	dc 01       	movw	r26, r24
    3756:	cb 01       	movw	r24, r22
    3758:	bc 01       	movw	r22, r24
    375a:	cd 01       	movw	r24, r26
    375c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3760:	dc 01       	movw	r26, r24
    3762:	cb 01       	movw	r24, r22
    3764:	9a a3       	std	Y+34, r25	; 0x22
    3766:	89 a3       	std	Y+33, r24	; 0x21
    3768:	0f c0       	rjmp	.+30     	; 0x3788 <HAL_LCD_u8LCDInit+0x30c>
    376a:	80 e9       	ldi	r24, 0x90	; 144
    376c:	91 e0       	ldi	r25, 0x01	; 1
    376e:	98 a3       	std	Y+32, r25	; 0x20
    3770:	8f 8f       	std	Y+31, r24	; 0x1f
    3772:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3774:	98 a1       	ldd	r25, Y+32	; 0x20
    3776:	01 97       	sbiw	r24, 0x01	; 1
    3778:	f1 f7       	brne	.-4      	; 0x3776 <HAL_LCD_u8LCDInit+0x2fa>
    377a:	98 a3       	std	Y+32, r25	; 0x20
    377c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    377e:	89 a1       	ldd	r24, Y+33	; 0x21
    3780:	9a a1       	ldd	r25, Y+34	; 0x22
    3782:	01 97       	sbiw	r24, 0x01	; 1
    3784:	9a a3       	std	Y+34, r25	; 0x22
    3786:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3788:	89 a1       	ldd	r24, Y+33	; 0x21
    378a:	9a a1       	ldd	r25, Y+34	; 0x22
    378c:	00 97       	sbiw	r24, 0x00	; 0
    378e:	69 f7       	brne	.-38     	; 0x376a <HAL_LCD_u8LCDInit+0x2ee>
    3790:	14 c0       	rjmp	.+40     	; 0x37ba <HAL_LCD_u8LCDInit+0x33e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3792:	6b a1       	ldd	r22, Y+35	; 0x23
    3794:	7c a1       	ldd	r23, Y+36	; 0x24
    3796:	8d a1       	ldd	r24, Y+37	; 0x25
    3798:	9e a1       	ldd	r25, Y+38	; 0x26
    379a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    379e:	dc 01       	movw	r26, r24
    37a0:	cb 01       	movw	r24, r22
    37a2:	9a a3       	std	Y+34, r25	; 0x22
    37a4:	89 a3       	std	Y+33, r24	; 0x21
    37a6:	89 a1       	ldd	r24, Y+33	; 0x21
    37a8:	9a a1       	ldd	r25, Y+34	; 0x22
    37aa:	9e 8f       	std	Y+30, r25	; 0x1e
    37ac:	8d 8f       	std	Y+29, r24	; 0x1d
    37ae:	8d 8d       	ldd	r24, Y+29	; 0x1d
    37b0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    37b2:	01 97       	sbiw	r24, 0x01	; 1
    37b4:	f1 f7       	brne	.-4      	; 0x37b2 <HAL_LCD_u8LCDInit+0x336>
    37b6:	9e 8f       	std	Y+30, r25	; 0x1e
    37b8:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(2);
	HAL_LCD_u8SendCommands(Display_Mode);
    37ba:	8f e0       	ldi	r24, 0x0F	; 15
    37bc:	0e 94 d6 1c 	call	0x39ac	; 0x39ac <HAL_LCD_u8SendCommands>
    37c0:	80 e0       	ldi	r24, 0x00	; 0
    37c2:	90 e0       	ldi	r25, 0x00	; 0
    37c4:	a0 e0       	ldi	r26, 0x00	; 0
    37c6:	b0 e4       	ldi	r27, 0x40	; 64
    37c8:	89 8f       	std	Y+25, r24	; 0x19
    37ca:	9a 8f       	std	Y+26, r25	; 0x1a
    37cc:	ab 8f       	std	Y+27, r26	; 0x1b
    37ce:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    37d0:	69 8d       	ldd	r22, Y+25	; 0x19
    37d2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    37d4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    37d6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    37d8:	20 e0       	ldi	r18, 0x00	; 0
    37da:	30 e0       	ldi	r19, 0x00	; 0
    37dc:	4a e7       	ldi	r20, 0x7A	; 122
    37de:	55 e4       	ldi	r21, 0x45	; 69
    37e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37e4:	dc 01       	movw	r26, r24
    37e6:	cb 01       	movw	r24, r22
    37e8:	8d 8b       	std	Y+21, r24	; 0x15
    37ea:	9e 8b       	std	Y+22, r25	; 0x16
    37ec:	af 8b       	std	Y+23, r26	; 0x17
    37ee:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    37f0:	6d 89       	ldd	r22, Y+21	; 0x15
    37f2:	7e 89       	ldd	r23, Y+22	; 0x16
    37f4:	8f 89       	ldd	r24, Y+23	; 0x17
    37f6:	98 8d       	ldd	r25, Y+24	; 0x18
    37f8:	20 e0       	ldi	r18, 0x00	; 0
    37fa:	30 e0       	ldi	r19, 0x00	; 0
    37fc:	40 e8       	ldi	r20, 0x80	; 128
    37fe:	5f e3       	ldi	r21, 0x3F	; 63
    3800:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3804:	88 23       	and	r24, r24
    3806:	2c f4       	brge	.+10     	; 0x3812 <HAL_LCD_u8LCDInit+0x396>
		__ticks = 1;
    3808:	81 e0       	ldi	r24, 0x01	; 1
    380a:	90 e0       	ldi	r25, 0x00	; 0
    380c:	9c 8b       	std	Y+20, r25	; 0x14
    380e:	8b 8b       	std	Y+19, r24	; 0x13
    3810:	3f c0       	rjmp	.+126    	; 0x3890 <HAL_LCD_u8LCDInit+0x414>
	else if (__tmp > 65535)
    3812:	6d 89       	ldd	r22, Y+21	; 0x15
    3814:	7e 89       	ldd	r23, Y+22	; 0x16
    3816:	8f 89       	ldd	r24, Y+23	; 0x17
    3818:	98 8d       	ldd	r25, Y+24	; 0x18
    381a:	20 e0       	ldi	r18, 0x00	; 0
    381c:	3f ef       	ldi	r19, 0xFF	; 255
    381e:	4f e7       	ldi	r20, 0x7F	; 127
    3820:	57 e4       	ldi	r21, 0x47	; 71
    3822:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3826:	18 16       	cp	r1, r24
    3828:	4c f5       	brge	.+82     	; 0x387c <HAL_LCD_u8LCDInit+0x400>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    382a:	69 8d       	ldd	r22, Y+25	; 0x19
    382c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    382e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3830:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3832:	20 e0       	ldi	r18, 0x00	; 0
    3834:	30 e0       	ldi	r19, 0x00	; 0
    3836:	40 e2       	ldi	r20, 0x20	; 32
    3838:	51 e4       	ldi	r21, 0x41	; 65
    383a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    383e:	dc 01       	movw	r26, r24
    3840:	cb 01       	movw	r24, r22
    3842:	bc 01       	movw	r22, r24
    3844:	cd 01       	movw	r24, r26
    3846:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    384a:	dc 01       	movw	r26, r24
    384c:	cb 01       	movw	r24, r22
    384e:	9c 8b       	std	Y+20, r25	; 0x14
    3850:	8b 8b       	std	Y+19, r24	; 0x13
    3852:	0f c0       	rjmp	.+30     	; 0x3872 <HAL_LCD_u8LCDInit+0x3f6>
    3854:	80 e9       	ldi	r24, 0x90	; 144
    3856:	91 e0       	ldi	r25, 0x01	; 1
    3858:	9a 8b       	std	Y+18, r25	; 0x12
    385a:	89 8b       	std	Y+17, r24	; 0x11
    385c:	89 89       	ldd	r24, Y+17	; 0x11
    385e:	9a 89       	ldd	r25, Y+18	; 0x12
    3860:	01 97       	sbiw	r24, 0x01	; 1
    3862:	f1 f7       	brne	.-4      	; 0x3860 <HAL_LCD_u8LCDInit+0x3e4>
    3864:	9a 8b       	std	Y+18, r25	; 0x12
    3866:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3868:	8b 89       	ldd	r24, Y+19	; 0x13
    386a:	9c 89       	ldd	r25, Y+20	; 0x14
    386c:	01 97       	sbiw	r24, 0x01	; 1
    386e:	9c 8b       	std	Y+20, r25	; 0x14
    3870:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3872:	8b 89       	ldd	r24, Y+19	; 0x13
    3874:	9c 89       	ldd	r25, Y+20	; 0x14
    3876:	00 97       	sbiw	r24, 0x00	; 0
    3878:	69 f7       	brne	.-38     	; 0x3854 <HAL_LCD_u8LCDInit+0x3d8>
    387a:	14 c0       	rjmp	.+40     	; 0x38a4 <HAL_LCD_u8LCDInit+0x428>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    387c:	6d 89       	ldd	r22, Y+21	; 0x15
    387e:	7e 89       	ldd	r23, Y+22	; 0x16
    3880:	8f 89       	ldd	r24, Y+23	; 0x17
    3882:	98 8d       	ldd	r25, Y+24	; 0x18
    3884:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3888:	dc 01       	movw	r26, r24
    388a:	cb 01       	movw	r24, r22
    388c:	9c 8b       	std	Y+20, r25	; 0x14
    388e:	8b 8b       	std	Y+19, r24	; 0x13
    3890:	8b 89       	ldd	r24, Y+19	; 0x13
    3892:	9c 89       	ldd	r25, Y+20	; 0x14
    3894:	98 8b       	std	Y+16, r25	; 0x10
    3896:	8f 87       	std	Y+15, r24	; 0x0f
    3898:	8f 85       	ldd	r24, Y+15	; 0x0f
    389a:	98 89       	ldd	r25, Y+16	; 0x10
    389c:	01 97       	sbiw	r24, 0x01	; 1
    389e:	f1 f7       	brne	.-4      	; 0x389c <HAL_LCD_u8LCDInit+0x420>
    38a0:	98 8b       	std	Y+16, r25	; 0x10
    38a2:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	HAL_LCD_u8SendCommands(Display_Clear);
    38a4:	81 e0       	ldi	r24, 0x01	; 1
    38a6:	0e 94 d6 1c 	call	0x39ac	; 0x39ac <HAL_LCD_u8SendCommands>
    38aa:	80 e0       	ldi	r24, 0x00	; 0
    38ac:	90 e0       	ldi	r25, 0x00	; 0
    38ae:	a0 e0       	ldi	r26, 0x00	; 0
    38b0:	b0 e4       	ldi	r27, 0x40	; 64
    38b2:	8b 87       	std	Y+11, r24	; 0x0b
    38b4:	9c 87       	std	Y+12, r25	; 0x0c
    38b6:	ad 87       	std	Y+13, r26	; 0x0d
    38b8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    38ba:	6b 85       	ldd	r22, Y+11	; 0x0b
    38bc:	7c 85       	ldd	r23, Y+12	; 0x0c
    38be:	8d 85       	ldd	r24, Y+13	; 0x0d
    38c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    38c2:	20 e0       	ldi	r18, 0x00	; 0
    38c4:	30 e0       	ldi	r19, 0x00	; 0
    38c6:	4a e7       	ldi	r20, 0x7A	; 122
    38c8:	55 e4       	ldi	r21, 0x45	; 69
    38ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38ce:	dc 01       	movw	r26, r24
    38d0:	cb 01       	movw	r24, r22
    38d2:	8f 83       	std	Y+7, r24	; 0x07
    38d4:	98 87       	std	Y+8, r25	; 0x08
    38d6:	a9 87       	std	Y+9, r26	; 0x09
    38d8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    38da:	6f 81       	ldd	r22, Y+7	; 0x07
    38dc:	78 85       	ldd	r23, Y+8	; 0x08
    38de:	89 85       	ldd	r24, Y+9	; 0x09
    38e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    38e2:	20 e0       	ldi	r18, 0x00	; 0
    38e4:	30 e0       	ldi	r19, 0x00	; 0
    38e6:	40 e8       	ldi	r20, 0x80	; 128
    38e8:	5f e3       	ldi	r21, 0x3F	; 63
    38ea:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    38ee:	88 23       	and	r24, r24
    38f0:	2c f4       	brge	.+10     	; 0x38fc <HAL_LCD_u8LCDInit+0x480>
		__ticks = 1;
    38f2:	81 e0       	ldi	r24, 0x01	; 1
    38f4:	90 e0       	ldi	r25, 0x00	; 0
    38f6:	9e 83       	std	Y+6, r25	; 0x06
    38f8:	8d 83       	std	Y+5, r24	; 0x05
    38fa:	3f c0       	rjmp	.+126    	; 0x397a <HAL_LCD_u8LCDInit+0x4fe>
	else if (__tmp > 65535)
    38fc:	6f 81       	ldd	r22, Y+7	; 0x07
    38fe:	78 85       	ldd	r23, Y+8	; 0x08
    3900:	89 85       	ldd	r24, Y+9	; 0x09
    3902:	9a 85       	ldd	r25, Y+10	; 0x0a
    3904:	20 e0       	ldi	r18, 0x00	; 0
    3906:	3f ef       	ldi	r19, 0xFF	; 255
    3908:	4f e7       	ldi	r20, 0x7F	; 127
    390a:	57 e4       	ldi	r21, 0x47	; 71
    390c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3910:	18 16       	cp	r1, r24
    3912:	4c f5       	brge	.+82     	; 0x3966 <HAL_LCD_u8LCDInit+0x4ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3914:	6b 85       	ldd	r22, Y+11	; 0x0b
    3916:	7c 85       	ldd	r23, Y+12	; 0x0c
    3918:	8d 85       	ldd	r24, Y+13	; 0x0d
    391a:	9e 85       	ldd	r25, Y+14	; 0x0e
    391c:	20 e0       	ldi	r18, 0x00	; 0
    391e:	30 e0       	ldi	r19, 0x00	; 0
    3920:	40 e2       	ldi	r20, 0x20	; 32
    3922:	51 e4       	ldi	r21, 0x41	; 65
    3924:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3928:	dc 01       	movw	r26, r24
    392a:	cb 01       	movw	r24, r22
    392c:	bc 01       	movw	r22, r24
    392e:	cd 01       	movw	r24, r26
    3930:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3934:	dc 01       	movw	r26, r24
    3936:	cb 01       	movw	r24, r22
    3938:	9e 83       	std	Y+6, r25	; 0x06
    393a:	8d 83       	std	Y+5, r24	; 0x05
    393c:	0f c0       	rjmp	.+30     	; 0x395c <HAL_LCD_u8LCDInit+0x4e0>
    393e:	80 e9       	ldi	r24, 0x90	; 144
    3940:	91 e0       	ldi	r25, 0x01	; 1
    3942:	9c 83       	std	Y+4, r25	; 0x04
    3944:	8b 83       	std	Y+3, r24	; 0x03
    3946:	8b 81       	ldd	r24, Y+3	; 0x03
    3948:	9c 81       	ldd	r25, Y+4	; 0x04
    394a:	01 97       	sbiw	r24, 0x01	; 1
    394c:	f1 f7       	brne	.-4      	; 0x394a <HAL_LCD_u8LCDInit+0x4ce>
    394e:	9c 83       	std	Y+4, r25	; 0x04
    3950:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3952:	8d 81       	ldd	r24, Y+5	; 0x05
    3954:	9e 81       	ldd	r25, Y+6	; 0x06
    3956:	01 97       	sbiw	r24, 0x01	; 1
    3958:	9e 83       	std	Y+6, r25	; 0x06
    395a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    395c:	8d 81       	ldd	r24, Y+5	; 0x05
    395e:	9e 81       	ldd	r25, Y+6	; 0x06
    3960:	00 97       	sbiw	r24, 0x00	; 0
    3962:	69 f7       	brne	.-38     	; 0x393e <HAL_LCD_u8LCDInit+0x4c2>
    3964:	14 c0       	rjmp	.+40     	; 0x398e <HAL_LCD_u8LCDInit+0x512>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3966:	6f 81       	ldd	r22, Y+7	; 0x07
    3968:	78 85       	ldd	r23, Y+8	; 0x08
    396a:	89 85       	ldd	r24, Y+9	; 0x09
    396c:	9a 85       	ldd	r25, Y+10	; 0x0a
    396e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3972:	dc 01       	movw	r26, r24
    3974:	cb 01       	movw	r24, r22
    3976:	9e 83       	std	Y+6, r25	; 0x06
    3978:	8d 83       	std	Y+5, r24	; 0x05
    397a:	8d 81       	ldd	r24, Y+5	; 0x05
    397c:	9e 81       	ldd	r25, Y+6	; 0x06
    397e:	9a 83       	std	Y+2, r25	; 0x02
    3980:	89 83       	std	Y+1, r24	; 0x01
    3982:	89 81       	ldd	r24, Y+1	; 0x01
    3984:	9a 81       	ldd	r25, Y+2	; 0x02
    3986:	01 97       	sbiw	r24, 0x01	; 1
    3988:	f1 f7       	brne	.-4      	; 0x3986 <HAL_LCD_u8LCDInit+0x50a>
    398a:	9a 83       	std	Y+2, r25	; 0x02
    398c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	HAL_LCD_u8SendCommands(Entry_Mode);
    398e:	86 e0       	ldi	r24, 0x06	; 6
    3990:	0e 94 d6 1c 	call	0x39ac	; 0x39ac <HAL_LCD_u8SendCommands>
}
    3994:	ca 5b       	subi	r28, 0xBA	; 186
    3996:	df 4f       	sbci	r29, 0xFF	; 255
    3998:	0f b6       	in	r0, 0x3f	; 63
    399a:	f8 94       	cli
    399c:	de bf       	out	0x3e, r29	; 62
    399e:	0f be       	out	0x3f, r0	; 63
    39a0:	cd bf       	out	0x3d, r28	; 61
    39a2:	cf 91       	pop	r28
    39a4:	df 91       	pop	r29
    39a6:	1f 91       	pop	r17
    39a8:	0f 91       	pop	r16
    39aa:	08 95       	ret

000039ac <HAL_LCD_u8SendCommands>:

void HAL_LCD_u8SendCommands(u8 Loc_u8LCD_Command) {
    39ac:	df 93       	push	r29
    39ae:	cf 93       	push	r28
    39b0:	cd b7       	in	r28, 0x3d	; 61
    39b2:	de b7       	in	r29, 0x3e	; 62
    39b4:	6d 97       	sbiw	r28, 0x1d	; 29
    39b6:	0f b6       	in	r0, 0x3f	; 63
    39b8:	f8 94       	cli
    39ba:	de bf       	out	0x3e, r29	; 62
    39bc:	0f be       	out	0x3f, r0	; 63
    39be:	cd bf       	out	0x3d, r28	; 61
    39c0:	8d 8f       	std	Y+29, r24	; 0x1d
	MCAL_DIO_u8SetPinValue(RS_Port, RS_Pin, RS_Low);
    39c2:	81 e0       	ldi	r24, 0x01	; 1
    39c4:	61 e0       	ldi	r22, 0x01	; 1
    39c6:	40 e0       	ldi	r20, 0x00	; 0
    39c8:	0e 94 68 13 	call	0x26d0	; 0x26d0 <MCAL_DIO_u8SetPinValue>
	MCAL_DIO_u8SetPinValue(RW_Port, RW_Pin, RW_Low);
    39cc:	81 e0       	ldi	r24, 0x01	; 1
    39ce:	62 e0       	ldi	r22, 0x02	; 2
    39d0:	40 e0       	ldi	r20, 0x00	; 0
    39d2:	0e 94 68 13 	call	0x26d0	; 0x26d0 <MCAL_DIO_u8SetPinValue>
	MCAL_DIO_u8SetPortValue(LCD_D_PORT, Loc_u8LCD_Command);
    39d6:	80 e0       	ldi	r24, 0x00	; 0
    39d8:	6d 8d       	ldd	r22, Y+29	; 0x1d
    39da:	0e 94 e5 12 	call	0x25ca	; 0x25ca <MCAL_DIO_u8SetPortValue>
	MCAL_DIO_u8SetPinValue(Enable_PORT, Enable_PIN, Enable_High);
    39de:	81 e0       	ldi	r24, 0x01	; 1
    39e0:	63 e0       	ldi	r22, 0x03	; 3
    39e2:	41 e0       	ldi	r20, 0x01	; 1
    39e4:	0e 94 68 13 	call	0x26d0	; 0x26d0 <MCAL_DIO_u8SetPinValue>
    39e8:	80 e0       	ldi	r24, 0x00	; 0
    39ea:	90 e0       	ldi	r25, 0x00	; 0
    39ec:	a0 e0       	ldi	r26, 0x00	; 0
    39ee:	b0 e4       	ldi	r27, 0x40	; 64
    39f0:	89 8f       	std	Y+25, r24	; 0x19
    39f2:	9a 8f       	std	Y+26, r25	; 0x1a
    39f4:	ab 8f       	std	Y+27, r26	; 0x1b
    39f6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    39f8:	69 8d       	ldd	r22, Y+25	; 0x19
    39fa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    39fc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    39fe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3a00:	20 e0       	ldi	r18, 0x00	; 0
    3a02:	30 e0       	ldi	r19, 0x00	; 0
    3a04:	4a e7       	ldi	r20, 0x7A	; 122
    3a06:	55 e4       	ldi	r21, 0x45	; 69
    3a08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a0c:	dc 01       	movw	r26, r24
    3a0e:	cb 01       	movw	r24, r22
    3a10:	8d 8b       	std	Y+21, r24	; 0x15
    3a12:	9e 8b       	std	Y+22, r25	; 0x16
    3a14:	af 8b       	std	Y+23, r26	; 0x17
    3a16:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3a18:	6d 89       	ldd	r22, Y+21	; 0x15
    3a1a:	7e 89       	ldd	r23, Y+22	; 0x16
    3a1c:	8f 89       	ldd	r24, Y+23	; 0x17
    3a1e:	98 8d       	ldd	r25, Y+24	; 0x18
    3a20:	20 e0       	ldi	r18, 0x00	; 0
    3a22:	30 e0       	ldi	r19, 0x00	; 0
    3a24:	40 e8       	ldi	r20, 0x80	; 128
    3a26:	5f e3       	ldi	r21, 0x3F	; 63
    3a28:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3a2c:	88 23       	and	r24, r24
    3a2e:	2c f4       	brge	.+10     	; 0x3a3a <HAL_LCD_u8SendCommands+0x8e>
		__ticks = 1;
    3a30:	81 e0       	ldi	r24, 0x01	; 1
    3a32:	90 e0       	ldi	r25, 0x00	; 0
    3a34:	9c 8b       	std	Y+20, r25	; 0x14
    3a36:	8b 8b       	std	Y+19, r24	; 0x13
    3a38:	3f c0       	rjmp	.+126    	; 0x3ab8 <HAL_LCD_u8SendCommands+0x10c>
	else if (__tmp > 65535)
    3a3a:	6d 89       	ldd	r22, Y+21	; 0x15
    3a3c:	7e 89       	ldd	r23, Y+22	; 0x16
    3a3e:	8f 89       	ldd	r24, Y+23	; 0x17
    3a40:	98 8d       	ldd	r25, Y+24	; 0x18
    3a42:	20 e0       	ldi	r18, 0x00	; 0
    3a44:	3f ef       	ldi	r19, 0xFF	; 255
    3a46:	4f e7       	ldi	r20, 0x7F	; 127
    3a48:	57 e4       	ldi	r21, 0x47	; 71
    3a4a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3a4e:	18 16       	cp	r1, r24
    3a50:	4c f5       	brge	.+82     	; 0x3aa4 <HAL_LCD_u8SendCommands+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a52:	69 8d       	ldd	r22, Y+25	; 0x19
    3a54:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3a56:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3a58:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3a5a:	20 e0       	ldi	r18, 0x00	; 0
    3a5c:	30 e0       	ldi	r19, 0x00	; 0
    3a5e:	40 e2       	ldi	r20, 0x20	; 32
    3a60:	51 e4       	ldi	r21, 0x41	; 65
    3a62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a66:	dc 01       	movw	r26, r24
    3a68:	cb 01       	movw	r24, r22
    3a6a:	bc 01       	movw	r22, r24
    3a6c:	cd 01       	movw	r24, r26
    3a6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a72:	dc 01       	movw	r26, r24
    3a74:	cb 01       	movw	r24, r22
    3a76:	9c 8b       	std	Y+20, r25	; 0x14
    3a78:	8b 8b       	std	Y+19, r24	; 0x13
    3a7a:	0f c0       	rjmp	.+30     	; 0x3a9a <HAL_LCD_u8SendCommands+0xee>
    3a7c:	80 e9       	ldi	r24, 0x90	; 144
    3a7e:	91 e0       	ldi	r25, 0x01	; 1
    3a80:	9a 8b       	std	Y+18, r25	; 0x12
    3a82:	89 8b       	std	Y+17, r24	; 0x11
    3a84:	89 89       	ldd	r24, Y+17	; 0x11
    3a86:	9a 89       	ldd	r25, Y+18	; 0x12
    3a88:	01 97       	sbiw	r24, 0x01	; 1
    3a8a:	f1 f7       	brne	.-4      	; 0x3a88 <HAL_LCD_u8SendCommands+0xdc>
    3a8c:	9a 8b       	std	Y+18, r25	; 0x12
    3a8e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a90:	8b 89       	ldd	r24, Y+19	; 0x13
    3a92:	9c 89       	ldd	r25, Y+20	; 0x14
    3a94:	01 97       	sbiw	r24, 0x01	; 1
    3a96:	9c 8b       	std	Y+20, r25	; 0x14
    3a98:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a9a:	8b 89       	ldd	r24, Y+19	; 0x13
    3a9c:	9c 89       	ldd	r25, Y+20	; 0x14
    3a9e:	00 97       	sbiw	r24, 0x00	; 0
    3aa0:	69 f7       	brne	.-38     	; 0x3a7c <HAL_LCD_u8SendCommands+0xd0>
    3aa2:	14 c0       	rjmp	.+40     	; 0x3acc <HAL_LCD_u8SendCommands+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3aa4:	6d 89       	ldd	r22, Y+21	; 0x15
    3aa6:	7e 89       	ldd	r23, Y+22	; 0x16
    3aa8:	8f 89       	ldd	r24, Y+23	; 0x17
    3aaa:	98 8d       	ldd	r25, Y+24	; 0x18
    3aac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ab0:	dc 01       	movw	r26, r24
    3ab2:	cb 01       	movw	r24, r22
    3ab4:	9c 8b       	std	Y+20, r25	; 0x14
    3ab6:	8b 8b       	std	Y+19, r24	; 0x13
    3ab8:	8b 89       	ldd	r24, Y+19	; 0x13
    3aba:	9c 89       	ldd	r25, Y+20	; 0x14
    3abc:	98 8b       	std	Y+16, r25	; 0x10
    3abe:	8f 87       	std	Y+15, r24	; 0x0f
    3ac0:	8f 85       	ldd	r24, Y+15	; 0x0f
    3ac2:	98 89       	ldd	r25, Y+16	; 0x10
    3ac4:	01 97       	sbiw	r24, 0x01	; 1
    3ac6:	f1 f7       	brne	.-4      	; 0x3ac4 <HAL_LCD_u8SendCommands+0x118>
    3ac8:	98 8b       	std	Y+16, r25	; 0x10
    3aca:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	MCAL_DIO_u8SetPinValue(Enable_PORT, Enable_PIN, Enable_Low);
    3acc:	81 e0       	ldi	r24, 0x01	; 1
    3ace:	63 e0       	ldi	r22, 0x03	; 3
    3ad0:	40 e0       	ldi	r20, 0x00	; 0
    3ad2:	0e 94 68 13 	call	0x26d0	; 0x26d0 <MCAL_DIO_u8SetPinValue>
	MCAL_DIO_u8SetPortValue(LCD_D_PORT, (Loc_u8LCD_Command << 4));
    3ad6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3ad8:	98 2f       	mov	r25, r24
    3ada:	92 95       	swap	r25
    3adc:	90 7f       	andi	r25, 0xF0	; 240
    3ade:	80 e0       	ldi	r24, 0x00	; 0
    3ae0:	69 2f       	mov	r22, r25
    3ae2:	0e 94 e5 12 	call	0x25ca	; 0x25ca <MCAL_DIO_u8SetPortValue>
	MCAL_DIO_u8SetPinValue(Enable_PORT, Enable_PIN, Enable_High);
    3ae6:	81 e0       	ldi	r24, 0x01	; 1
    3ae8:	63 e0       	ldi	r22, 0x03	; 3
    3aea:	41 e0       	ldi	r20, 0x01	; 1
    3aec:	0e 94 68 13 	call	0x26d0	; 0x26d0 <MCAL_DIO_u8SetPinValue>
    3af0:	80 e0       	ldi	r24, 0x00	; 0
    3af2:	90 e0       	ldi	r25, 0x00	; 0
    3af4:	a0 e0       	ldi	r26, 0x00	; 0
    3af6:	b0 e4       	ldi	r27, 0x40	; 64
    3af8:	8b 87       	std	Y+11, r24	; 0x0b
    3afa:	9c 87       	std	Y+12, r25	; 0x0c
    3afc:	ad 87       	std	Y+13, r26	; 0x0d
    3afe:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b00:	6b 85       	ldd	r22, Y+11	; 0x0b
    3b02:	7c 85       	ldd	r23, Y+12	; 0x0c
    3b04:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b06:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b08:	20 e0       	ldi	r18, 0x00	; 0
    3b0a:	30 e0       	ldi	r19, 0x00	; 0
    3b0c:	4a e7       	ldi	r20, 0x7A	; 122
    3b0e:	55 e4       	ldi	r21, 0x45	; 69
    3b10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b14:	dc 01       	movw	r26, r24
    3b16:	cb 01       	movw	r24, r22
    3b18:	8f 83       	std	Y+7, r24	; 0x07
    3b1a:	98 87       	std	Y+8, r25	; 0x08
    3b1c:	a9 87       	std	Y+9, r26	; 0x09
    3b1e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3b20:	6f 81       	ldd	r22, Y+7	; 0x07
    3b22:	78 85       	ldd	r23, Y+8	; 0x08
    3b24:	89 85       	ldd	r24, Y+9	; 0x09
    3b26:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b28:	20 e0       	ldi	r18, 0x00	; 0
    3b2a:	30 e0       	ldi	r19, 0x00	; 0
    3b2c:	40 e8       	ldi	r20, 0x80	; 128
    3b2e:	5f e3       	ldi	r21, 0x3F	; 63
    3b30:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3b34:	88 23       	and	r24, r24
    3b36:	2c f4       	brge	.+10     	; 0x3b42 <HAL_LCD_u8SendCommands+0x196>
		__ticks = 1;
    3b38:	81 e0       	ldi	r24, 0x01	; 1
    3b3a:	90 e0       	ldi	r25, 0x00	; 0
    3b3c:	9e 83       	std	Y+6, r25	; 0x06
    3b3e:	8d 83       	std	Y+5, r24	; 0x05
    3b40:	3f c0       	rjmp	.+126    	; 0x3bc0 <HAL_LCD_u8SendCommands+0x214>
	else if (__tmp > 65535)
    3b42:	6f 81       	ldd	r22, Y+7	; 0x07
    3b44:	78 85       	ldd	r23, Y+8	; 0x08
    3b46:	89 85       	ldd	r24, Y+9	; 0x09
    3b48:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b4a:	20 e0       	ldi	r18, 0x00	; 0
    3b4c:	3f ef       	ldi	r19, 0xFF	; 255
    3b4e:	4f e7       	ldi	r20, 0x7F	; 127
    3b50:	57 e4       	ldi	r21, 0x47	; 71
    3b52:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3b56:	18 16       	cp	r1, r24
    3b58:	4c f5       	brge	.+82     	; 0x3bac <HAL_LCD_u8SendCommands+0x200>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b5a:	6b 85       	ldd	r22, Y+11	; 0x0b
    3b5c:	7c 85       	ldd	r23, Y+12	; 0x0c
    3b5e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b60:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b62:	20 e0       	ldi	r18, 0x00	; 0
    3b64:	30 e0       	ldi	r19, 0x00	; 0
    3b66:	40 e2       	ldi	r20, 0x20	; 32
    3b68:	51 e4       	ldi	r21, 0x41	; 65
    3b6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b6e:	dc 01       	movw	r26, r24
    3b70:	cb 01       	movw	r24, r22
    3b72:	bc 01       	movw	r22, r24
    3b74:	cd 01       	movw	r24, r26
    3b76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b7a:	dc 01       	movw	r26, r24
    3b7c:	cb 01       	movw	r24, r22
    3b7e:	9e 83       	std	Y+6, r25	; 0x06
    3b80:	8d 83       	std	Y+5, r24	; 0x05
    3b82:	0f c0       	rjmp	.+30     	; 0x3ba2 <HAL_LCD_u8SendCommands+0x1f6>
    3b84:	80 e9       	ldi	r24, 0x90	; 144
    3b86:	91 e0       	ldi	r25, 0x01	; 1
    3b88:	9c 83       	std	Y+4, r25	; 0x04
    3b8a:	8b 83       	std	Y+3, r24	; 0x03
    3b8c:	8b 81       	ldd	r24, Y+3	; 0x03
    3b8e:	9c 81       	ldd	r25, Y+4	; 0x04
    3b90:	01 97       	sbiw	r24, 0x01	; 1
    3b92:	f1 f7       	brne	.-4      	; 0x3b90 <HAL_LCD_u8SendCommands+0x1e4>
    3b94:	9c 83       	std	Y+4, r25	; 0x04
    3b96:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b98:	8d 81       	ldd	r24, Y+5	; 0x05
    3b9a:	9e 81       	ldd	r25, Y+6	; 0x06
    3b9c:	01 97       	sbiw	r24, 0x01	; 1
    3b9e:	9e 83       	std	Y+6, r25	; 0x06
    3ba0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ba2:	8d 81       	ldd	r24, Y+5	; 0x05
    3ba4:	9e 81       	ldd	r25, Y+6	; 0x06
    3ba6:	00 97       	sbiw	r24, 0x00	; 0
    3ba8:	69 f7       	brne	.-38     	; 0x3b84 <HAL_LCD_u8SendCommands+0x1d8>
    3baa:	14 c0       	rjmp	.+40     	; 0x3bd4 <HAL_LCD_u8SendCommands+0x228>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3bac:	6f 81       	ldd	r22, Y+7	; 0x07
    3bae:	78 85       	ldd	r23, Y+8	; 0x08
    3bb0:	89 85       	ldd	r24, Y+9	; 0x09
    3bb2:	9a 85       	ldd	r25, Y+10	; 0x0a
    3bb4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bb8:	dc 01       	movw	r26, r24
    3bba:	cb 01       	movw	r24, r22
    3bbc:	9e 83       	std	Y+6, r25	; 0x06
    3bbe:	8d 83       	std	Y+5, r24	; 0x05
    3bc0:	8d 81       	ldd	r24, Y+5	; 0x05
    3bc2:	9e 81       	ldd	r25, Y+6	; 0x06
    3bc4:	9a 83       	std	Y+2, r25	; 0x02
    3bc6:	89 83       	std	Y+1, r24	; 0x01
    3bc8:	89 81       	ldd	r24, Y+1	; 0x01
    3bca:	9a 81       	ldd	r25, Y+2	; 0x02
    3bcc:	01 97       	sbiw	r24, 0x01	; 1
    3bce:	f1 f7       	brne	.-4      	; 0x3bcc <HAL_LCD_u8SendCommands+0x220>
    3bd0:	9a 83       	std	Y+2, r25	; 0x02
    3bd2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	MCAL_DIO_u8SetPinValue(Enable_PORT, Enable_PIN, Enable_Low);
    3bd4:	81 e0       	ldi	r24, 0x01	; 1
    3bd6:	63 e0       	ldi	r22, 0x03	; 3
    3bd8:	40 e0       	ldi	r20, 0x00	; 0
    3bda:	0e 94 68 13 	call	0x26d0	; 0x26d0 <MCAL_DIO_u8SetPinValue>
}
    3bde:	6d 96       	adiw	r28, 0x1d	; 29
    3be0:	0f b6       	in	r0, 0x3f	; 63
    3be2:	f8 94       	cli
    3be4:	de bf       	out	0x3e, r29	; 62
    3be6:	0f be       	out	0x3f, r0	; 63
    3be8:	cd bf       	out	0x3d, r28	; 61
    3bea:	cf 91       	pop	r28
    3bec:	df 91       	pop	r29
    3bee:	08 95       	ret

00003bf0 <HAL_LCD_u8SendChar>:

void HAL_LCD_u8SendChar(u8 Loc_u8LCD_Char) {
    3bf0:	df 93       	push	r29
    3bf2:	cf 93       	push	r28
    3bf4:	cd b7       	in	r28, 0x3d	; 61
    3bf6:	de b7       	in	r29, 0x3e	; 62
    3bf8:	6d 97       	sbiw	r28, 0x1d	; 29
    3bfa:	0f b6       	in	r0, 0x3f	; 63
    3bfc:	f8 94       	cli
    3bfe:	de bf       	out	0x3e, r29	; 62
    3c00:	0f be       	out	0x3f, r0	; 63
    3c02:	cd bf       	out	0x3d, r28	; 61
    3c04:	8d 8f       	std	Y+29, r24	; 0x1d
	MCAL_DIO_u8SetPinValue(RS_Port, RS_Pin, RS_High);
    3c06:	81 e0       	ldi	r24, 0x01	; 1
    3c08:	61 e0       	ldi	r22, 0x01	; 1
    3c0a:	41 e0       	ldi	r20, 0x01	; 1
    3c0c:	0e 94 68 13 	call	0x26d0	; 0x26d0 <MCAL_DIO_u8SetPinValue>
	MCAL_DIO_u8SetPinValue(RW_Port, RW_Pin, RW_Low);
    3c10:	81 e0       	ldi	r24, 0x01	; 1
    3c12:	62 e0       	ldi	r22, 0x02	; 2
    3c14:	40 e0       	ldi	r20, 0x00	; 0
    3c16:	0e 94 68 13 	call	0x26d0	; 0x26d0 <MCAL_DIO_u8SetPinValue>
	MCAL_DIO_u8SetPortValue(LCD_D_PORT, Loc_u8LCD_Char);
    3c1a:	80 e0       	ldi	r24, 0x00	; 0
    3c1c:	6d 8d       	ldd	r22, Y+29	; 0x1d
    3c1e:	0e 94 e5 12 	call	0x25ca	; 0x25ca <MCAL_DIO_u8SetPortValue>
	MCAL_DIO_u8SetPinValue(Enable_PORT, Enable_PIN, Enable_High);
    3c22:	81 e0       	ldi	r24, 0x01	; 1
    3c24:	63 e0       	ldi	r22, 0x03	; 3
    3c26:	41 e0       	ldi	r20, 0x01	; 1
    3c28:	0e 94 68 13 	call	0x26d0	; 0x26d0 <MCAL_DIO_u8SetPinValue>
    3c2c:	80 e0       	ldi	r24, 0x00	; 0
    3c2e:	90 e0       	ldi	r25, 0x00	; 0
    3c30:	a0 e0       	ldi	r26, 0x00	; 0
    3c32:	b0 e4       	ldi	r27, 0x40	; 64
    3c34:	89 8f       	std	Y+25, r24	; 0x19
    3c36:	9a 8f       	std	Y+26, r25	; 0x1a
    3c38:	ab 8f       	std	Y+27, r26	; 0x1b
    3c3a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c3c:	69 8d       	ldd	r22, Y+25	; 0x19
    3c3e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3c40:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3c42:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3c44:	20 e0       	ldi	r18, 0x00	; 0
    3c46:	30 e0       	ldi	r19, 0x00	; 0
    3c48:	4a e7       	ldi	r20, 0x7A	; 122
    3c4a:	55 e4       	ldi	r21, 0x45	; 69
    3c4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c50:	dc 01       	movw	r26, r24
    3c52:	cb 01       	movw	r24, r22
    3c54:	8d 8b       	std	Y+21, r24	; 0x15
    3c56:	9e 8b       	std	Y+22, r25	; 0x16
    3c58:	af 8b       	std	Y+23, r26	; 0x17
    3c5a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3c5c:	6d 89       	ldd	r22, Y+21	; 0x15
    3c5e:	7e 89       	ldd	r23, Y+22	; 0x16
    3c60:	8f 89       	ldd	r24, Y+23	; 0x17
    3c62:	98 8d       	ldd	r25, Y+24	; 0x18
    3c64:	20 e0       	ldi	r18, 0x00	; 0
    3c66:	30 e0       	ldi	r19, 0x00	; 0
    3c68:	40 e8       	ldi	r20, 0x80	; 128
    3c6a:	5f e3       	ldi	r21, 0x3F	; 63
    3c6c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3c70:	88 23       	and	r24, r24
    3c72:	2c f4       	brge	.+10     	; 0x3c7e <HAL_LCD_u8SendChar+0x8e>
		__ticks = 1;
    3c74:	81 e0       	ldi	r24, 0x01	; 1
    3c76:	90 e0       	ldi	r25, 0x00	; 0
    3c78:	9c 8b       	std	Y+20, r25	; 0x14
    3c7a:	8b 8b       	std	Y+19, r24	; 0x13
    3c7c:	3f c0       	rjmp	.+126    	; 0x3cfc <HAL_LCD_u8SendChar+0x10c>
	else if (__tmp > 65535)
    3c7e:	6d 89       	ldd	r22, Y+21	; 0x15
    3c80:	7e 89       	ldd	r23, Y+22	; 0x16
    3c82:	8f 89       	ldd	r24, Y+23	; 0x17
    3c84:	98 8d       	ldd	r25, Y+24	; 0x18
    3c86:	20 e0       	ldi	r18, 0x00	; 0
    3c88:	3f ef       	ldi	r19, 0xFF	; 255
    3c8a:	4f e7       	ldi	r20, 0x7F	; 127
    3c8c:	57 e4       	ldi	r21, 0x47	; 71
    3c8e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3c92:	18 16       	cp	r1, r24
    3c94:	4c f5       	brge	.+82     	; 0x3ce8 <HAL_LCD_u8SendChar+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c96:	69 8d       	ldd	r22, Y+25	; 0x19
    3c98:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3c9a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3c9c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3c9e:	20 e0       	ldi	r18, 0x00	; 0
    3ca0:	30 e0       	ldi	r19, 0x00	; 0
    3ca2:	40 e2       	ldi	r20, 0x20	; 32
    3ca4:	51 e4       	ldi	r21, 0x41	; 65
    3ca6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3caa:	dc 01       	movw	r26, r24
    3cac:	cb 01       	movw	r24, r22
    3cae:	bc 01       	movw	r22, r24
    3cb0:	cd 01       	movw	r24, r26
    3cb2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3cb6:	dc 01       	movw	r26, r24
    3cb8:	cb 01       	movw	r24, r22
    3cba:	9c 8b       	std	Y+20, r25	; 0x14
    3cbc:	8b 8b       	std	Y+19, r24	; 0x13
    3cbe:	0f c0       	rjmp	.+30     	; 0x3cde <HAL_LCD_u8SendChar+0xee>
    3cc0:	80 e9       	ldi	r24, 0x90	; 144
    3cc2:	91 e0       	ldi	r25, 0x01	; 1
    3cc4:	9a 8b       	std	Y+18, r25	; 0x12
    3cc6:	89 8b       	std	Y+17, r24	; 0x11
    3cc8:	89 89       	ldd	r24, Y+17	; 0x11
    3cca:	9a 89       	ldd	r25, Y+18	; 0x12
    3ccc:	01 97       	sbiw	r24, 0x01	; 1
    3cce:	f1 f7       	brne	.-4      	; 0x3ccc <HAL_LCD_u8SendChar+0xdc>
    3cd0:	9a 8b       	std	Y+18, r25	; 0x12
    3cd2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3cd4:	8b 89       	ldd	r24, Y+19	; 0x13
    3cd6:	9c 89       	ldd	r25, Y+20	; 0x14
    3cd8:	01 97       	sbiw	r24, 0x01	; 1
    3cda:	9c 8b       	std	Y+20, r25	; 0x14
    3cdc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3cde:	8b 89       	ldd	r24, Y+19	; 0x13
    3ce0:	9c 89       	ldd	r25, Y+20	; 0x14
    3ce2:	00 97       	sbiw	r24, 0x00	; 0
    3ce4:	69 f7       	brne	.-38     	; 0x3cc0 <HAL_LCD_u8SendChar+0xd0>
    3ce6:	14 c0       	rjmp	.+40     	; 0x3d10 <HAL_LCD_u8SendChar+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ce8:	6d 89       	ldd	r22, Y+21	; 0x15
    3cea:	7e 89       	ldd	r23, Y+22	; 0x16
    3cec:	8f 89       	ldd	r24, Y+23	; 0x17
    3cee:	98 8d       	ldd	r25, Y+24	; 0x18
    3cf0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3cf4:	dc 01       	movw	r26, r24
    3cf6:	cb 01       	movw	r24, r22
    3cf8:	9c 8b       	std	Y+20, r25	; 0x14
    3cfa:	8b 8b       	std	Y+19, r24	; 0x13
    3cfc:	8b 89       	ldd	r24, Y+19	; 0x13
    3cfe:	9c 89       	ldd	r25, Y+20	; 0x14
    3d00:	98 8b       	std	Y+16, r25	; 0x10
    3d02:	8f 87       	std	Y+15, r24	; 0x0f
    3d04:	8f 85       	ldd	r24, Y+15	; 0x0f
    3d06:	98 89       	ldd	r25, Y+16	; 0x10
    3d08:	01 97       	sbiw	r24, 0x01	; 1
    3d0a:	f1 f7       	brne	.-4      	; 0x3d08 <HAL_LCD_u8SendChar+0x118>
    3d0c:	98 8b       	std	Y+16, r25	; 0x10
    3d0e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	MCAL_DIO_u8SetPinValue(Enable_PORT, Enable_PIN, Enable_Low);
    3d10:	81 e0       	ldi	r24, 0x01	; 1
    3d12:	63 e0       	ldi	r22, 0x03	; 3
    3d14:	40 e0       	ldi	r20, 0x00	; 0
    3d16:	0e 94 68 13 	call	0x26d0	; 0x26d0 <MCAL_DIO_u8SetPinValue>
	MCAL_DIO_u8SetPortValue(LCD_D_PORT, (Loc_u8LCD_Char << 4));
    3d1a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3d1c:	98 2f       	mov	r25, r24
    3d1e:	92 95       	swap	r25
    3d20:	90 7f       	andi	r25, 0xF0	; 240
    3d22:	80 e0       	ldi	r24, 0x00	; 0
    3d24:	69 2f       	mov	r22, r25
    3d26:	0e 94 e5 12 	call	0x25ca	; 0x25ca <MCAL_DIO_u8SetPortValue>
	MCAL_DIO_u8SetPinValue(Enable_PORT, Enable_PIN, Enable_High);
    3d2a:	81 e0       	ldi	r24, 0x01	; 1
    3d2c:	63 e0       	ldi	r22, 0x03	; 3
    3d2e:	41 e0       	ldi	r20, 0x01	; 1
    3d30:	0e 94 68 13 	call	0x26d0	; 0x26d0 <MCAL_DIO_u8SetPinValue>
    3d34:	80 e0       	ldi	r24, 0x00	; 0
    3d36:	90 e0       	ldi	r25, 0x00	; 0
    3d38:	a0 e0       	ldi	r26, 0x00	; 0
    3d3a:	b0 e4       	ldi	r27, 0x40	; 64
    3d3c:	8b 87       	std	Y+11, r24	; 0x0b
    3d3e:	9c 87       	std	Y+12, r25	; 0x0c
    3d40:	ad 87       	std	Y+13, r26	; 0x0d
    3d42:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d44:	6b 85       	ldd	r22, Y+11	; 0x0b
    3d46:	7c 85       	ldd	r23, Y+12	; 0x0c
    3d48:	8d 85       	ldd	r24, Y+13	; 0x0d
    3d4a:	9e 85       	ldd	r25, Y+14	; 0x0e
    3d4c:	20 e0       	ldi	r18, 0x00	; 0
    3d4e:	30 e0       	ldi	r19, 0x00	; 0
    3d50:	4a e7       	ldi	r20, 0x7A	; 122
    3d52:	55 e4       	ldi	r21, 0x45	; 69
    3d54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d58:	dc 01       	movw	r26, r24
    3d5a:	cb 01       	movw	r24, r22
    3d5c:	8f 83       	std	Y+7, r24	; 0x07
    3d5e:	98 87       	std	Y+8, r25	; 0x08
    3d60:	a9 87       	std	Y+9, r26	; 0x09
    3d62:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3d64:	6f 81       	ldd	r22, Y+7	; 0x07
    3d66:	78 85       	ldd	r23, Y+8	; 0x08
    3d68:	89 85       	ldd	r24, Y+9	; 0x09
    3d6a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d6c:	20 e0       	ldi	r18, 0x00	; 0
    3d6e:	30 e0       	ldi	r19, 0x00	; 0
    3d70:	40 e8       	ldi	r20, 0x80	; 128
    3d72:	5f e3       	ldi	r21, 0x3F	; 63
    3d74:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3d78:	88 23       	and	r24, r24
    3d7a:	2c f4       	brge	.+10     	; 0x3d86 <HAL_LCD_u8SendChar+0x196>
		__ticks = 1;
    3d7c:	81 e0       	ldi	r24, 0x01	; 1
    3d7e:	90 e0       	ldi	r25, 0x00	; 0
    3d80:	9e 83       	std	Y+6, r25	; 0x06
    3d82:	8d 83       	std	Y+5, r24	; 0x05
    3d84:	3f c0       	rjmp	.+126    	; 0x3e04 <HAL_LCD_u8SendChar+0x214>
	else if (__tmp > 65535)
    3d86:	6f 81       	ldd	r22, Y+7	; 0x07
    3d88:	78 85       	ldd	r23, Y+8	; 0x08
    3d8a:	89 85       	ldd	r24, Y+9	; 0x09
    3d8c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d8e:	20 e0       	ldi	r18, 0x00	; 0
    3d90:	3f ef       	ldi	r19, 0xFF	; 255
    3d92:	4f e7       	ldi	r20, 0x7F	; 127
    3d94:	57 e4       	ldi	r21, 0x47	; 71
    3d96:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3d9a:	18 16       	cp	r1, r24
    3d9c:	4c f5       	brge	.+82     	; 0x3df0 <HAL_LCD_u8SendChar+0x200>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d9e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3da0:	7c 85       	ldd	r23, Y+12	; 0x0c
    3da2:	8d 85       	ldd	r24, Y+13	; 0x0d
    3da4:	9e 85       	ldd	r25, Y+14	; 0x0e
    3da6:	20 e0       	ldi	r18, 0x00	; 0
    3da8:	30 e0       	ldi	r19, 0x00	; 0
    3daa:	40 e2       	ldi	r20, 0x20	; 32
    3dac:	51 e4       	ldi	r21, 0x41	; 65
    3dae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3db2:	dc 01       	movw	r26, r24
    3db4:	cb 01       	movw	r24, r22
    3db6:	bc 01       	movw	r22, r24
    3db8:	cd 01       	movw	r24, r26
    3dba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3dbe:	dc 01       	movw	r26, r24
    3dc0:	cb 01       	movw	r24, r22
    3dc2:	9e 83       	std	Y+6, r25	; 0x06
    3dc4:	8d 83       	std	Y+5, r24	; 0x05
    3dc6:	0f c0       	rjmp	.+30     	; 0x3de6 <HAL_LCD_u8SendChar+0x1f6>
    3dc8:	80 e9       	ldi	r24, 0x90	; 144
    3dca:	91 e0       	ldi	r25, 0x01	; 1
    3dcc:	9c 83       	std	Y+4, r25	; 0x04
    3dce:	8b 83       	std	Y+3, r24	; 0x03
    3dd0:	8b 81       	ldd	r24, Y+3	; 0x03
    3dd2:	9c 81       	ldd	r25, Y+4	; 0x04
    3dd4:	01 97       	sbiw	r24, 0x01	; 1
    3dd6:	f1 f7       	brne	.-4      	; 0x3dd4 <HAL_LCD_u8SendChar+0x1e4>
    3dd8:	9c 83       	std	Y+4, r25	; 0x04
    3dda:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ddc:	8d 81       	ldd	r24, Y+5	; 0x05
    3dde:	9e 81       	ldd	r25, Y+6	; 0x06
    3de0:	01 97       	sbiw	r24, 0x01	; 1
    3de2:	9e 83       	std	Y+6, r25	; 0x06
    3de4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3de6:	8d 81       	ldd	r24, Y+5	; 0x05
    3de8:	9e 81       	ldd	r25, Y+6	; 0x06
    3dea:	00 97       	sbiw	r24, 0x00	; 0
    3dec:	69 f7       	brne	.-38     	; 0x3dc8 <HAL_LCD_u8SendChar+0x1d8>
    3dee:	14 c0       	rjmp	.+40     	; 0x3e18 <HAL_LCD_u8SendChar+0x228>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3df0:	6f 81       	ldd	r22, Y+7	; 0x07
    3df2:	78 85       	ldd	r23, Y+8	; 0x08
    3df4:	89 85       	ldd	r24, Y+9	; 0x09
    3df6:	9a 85       	ldd	r25, Y+10	; 0x0a
    3df8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3dfc:	dc 01       	movw	r26, r24
    3dfe:	cb 01       	movw	r24, r22
    3e00:	9e 83       	std	Y+6, r25	; 0x06
    3e02:	8d 83       	std	Y+5, r24	; 0x05
    3e04:	8d 81       	ldd	r24, Y+5	; 0x05
    3e06:	9e 81       	ldd	r25, Y+6	; 0x06
    3e08:	9a 83       	std	Y+2, r25	; 0x02
    3e0a:	89 83       	std	Y+1, r24	; 0x01
    3e0c:	89 81       	ldd	r24, Y+1	; 0x01
    3e0e:	9a 81       	ldd	r25, Y+2	; 0x02
    3e10:	01 97       	sbiw	r24, 0x01	; 1
    3e12:	f1 f7       	brne	.-4      	; 0x3e10 <HAL_LCD_u8SendChar+0x220>
    3e14:	9a 83       	std	Y+2, r25	; 0x02
    3e16:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	MCAL_DIO_u8SetPinValue(Enable_PORT, Enable_PIN, Enable_Low);
    3e18:	81 e0       	ldi	r24, 0x01	; 1
    3e1a:	63 e0       	ldi	r22, 0x03	; 3
    3e1c:	40 e0       	ldi	r20, 0x00	; 0
    3e1e:	0e 94 68 13 	call	0x26d0	; 0x26d0 <MCAL_DIO_u8SetPinValue>
}
    3e22:	6d 96       	adiw	r28, 0x1d	; 29
    3e24:	0f b6       	in	r0, 0x3f	; 63
    3e26:	f8 94       	cli
    3e28:	de bf       	out	0x3e, r29	; 62
    3e2a:	0f be       	out	0x3f, r0	; 63
    3e2c:	cd bf       	out	0x3d, r28	; 61
    3e2e:	cf 91       	pop	r28
    3e30:	df 91       	pop	r29
    3e32:	08 95       	ret

00003e34 <HAL_LCD_u8SendString>:

void HAL_LCD_u8SendString(u8 * Loc_u8LCD_String) {
    3e34:	df 93       	push	r29
    3e36:	cf 93       	push	r28
    3e38:	00 d0       	rcall	.+0      	; 0x3e3a <HAL_LCD_u8SendString+0x6>
    3e3a:	00 d0       	rcall	.+0      	; 0x3e3c <HAL_LCD_u8SendString+0x8>
    3e3c:	00 d0       	rcall	.+0      	; 0x3e3e <HAL_LCD_u8SendString+0xa>
    3e3e:	cd b7       	in	r28, 0x3d	; 61
    3e40:	de b7       	in	r29, 0x3e	; 62
    3e42:	9e 83       	std	Y+6, r25	; 0x06
    3e44:	8d 83       	std	Y+5, r24	; 0x05
	for (u32 count = 0; Loc_u8LCD_String[count] != '\0'; count++) {
    3e46:	19 82       	std	Y+1, r1	; 0x01
    3e48:	1a 82       	std	Y+2, r1	; 0x02
    3e4a:	1b 82       	std	Y+3, r1	; 0x03
    3e4c:	1c 82       	std	Y+4, r1	; 0x04
    3e4e:	15 c0       	rjmp	.+42     	; 0x3e7a <HAL_LCD_u8SendString+0x46>
		HAL_LCD_u8SendChar(Loc_u8LCD_String[count]);
    3e50:	29 81       	ldd	r18, Y+1	; 0x01
    3e52:	3a 81       	ldd	r19, Y+2	; 0x02
    3e54:	8d 81       	ldd	r24, Y+5	; 0x05
    3e56:	9e 81       	ldd	r25, Y+6	; 0x06
    3e58:	fc 01       	movw	r30, r24
    3e5a:	e2 0f       	add	r30, r18
    3e5c:	f3 1f       	adc	r31, r19
    3e5e:	80 81       	ld	r24, Z
    3e60:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <HAL_LCD_u8SendChar>
	_delay_ms(2);
	MCAL_DIO_u8SetPinValue(Enable_PORT, Enable_PIN, Enable_Low);
}

void HAL_LCD_u8SendString(u8 * Loc_u8LCD_String) {
	for (u32 count = 0; Loc_u8LCD_String[count] != '\0'; count++) {
    3e64:	89 81       	ldd	r24, Y+1	; 0x01
    3e66:	9a 81       	ldd	r25, Y+2	; 0x02
    3e68:	ab 81       	ldd	r26, Y+3	; 0x03
    3e6a:	bc 81       	ldd	r27, Y+4	; 0x04
    3e6c:	01 96       	adiw	r24, 0x01	; 1
    3e6e:	a1 1d       	adc	r26, r1
    3e70:	b1 1d       	adc	r27, r1
    3e72:	89 83       	std	Y+1, r24	; 0x01
    3e74:	9a 83       	std	Y+2, r25	; 0x02
    3e76:	ab 83       	std	Y+3, r26	; 0x03
    3e78:	bc 83       	std	Y+4, r27	; 0x04
    3e7a:	29 81       	ldd	r18, Y+1	; 0x01
    3e7c:	3a 81       	ldd	r19, Y+2	; 0x02
    3e7e:	8d 81       	ldd	r24, Y+5	; 0x05
    3e80:	9e 81       	ldd	r25, Y+6	; 0x06
    3e82:	fc 01       	movw	r30, r24
    3e84:	e2 0f       	add	r30, r18
    3e86:	f3 1f       	adc	r31, r19
    3e88:	80 81       	ld	r24, Z
    3e8a:	88 23       	and	r24, r24
    3e8c:	09 f7       	brne	.-62     	; 0x3e50 <HAL_LCD_u8SendString+0x1c>
		HAL_LCD_u8SendChar(Loc_u8LCD_String[count]);
	}
}
    3e8e:	26 96       	adiw	r28, 0x06	; 6
    3e90:	0f b6       	in	r0, 0x3f	; 63
    3e92:	f8 94       	cli
    3e94:	de bf       	out	0x3e, r29	; 62
    3e96:	0f be       	out	0x3f, r0	; 63
    3e98:	cd bf       	out	0x3d, r28	; 61
    3e9a:	cf 91       	pop	r28
    3e9c:	df 91       	pop	r29
    3e9e:	08 95       	ret

00003ea0 <HAL_LCD_u8SendNumber>:

void HAL_LCD_u8SendNumber(u16 Loc_u8LCD_Number) {
    3ea0:	df 93       	push	r29
    3ea2:	cf 93       	push	r28
    3ea4:	cd b7       	in	r28, 0x3d	; 61
    3ea6:	de b7       	in	r29, 0x3e	; 62
    3ea8:	2c 97       	sbiw	r28, 0x0c	; 12
    3eaa:	0f b6       	in	r0, 0x3f	; 63
    3eac:	f8 94       	cli
    3eae:	de bf       	out	0x3e, r29	; 62
    3eb0:	0f be       	out	0x3f, r0	; 63
    3eb2:	cd bf       	out	0x3d, r28	; 61
    3eb4:	9c 87       	std	Y+12, r25	; 0x0c
    3eb6:	8b 87       	std	Y+11, r24	; 0x0b
	u8 str[10];
	itoa(Loc_u8LCD_Number, str, 10);
    3eb8:	8b 85       	ldd	r24, Y+11	; 0x0b
    3eba:	9c 85       	ldd	r25, Y+12	; 0x0c
    3ebc:	9e 01       	movw	r18, r28
    3ebe:	2f 5f       	subi	r18, 0xFF	; 255
    3ec0:	3f 4f       	sbci	r19, 0xFF	; 255
    3ec2:	b9 01       	movw	r22, r18
    3ec4:	4a e0       	ldi	r20, 0x0A	; 10
    3ec6:	50 e0       	ldi	r21, 0x00	; 0
    3ec8:	0e 94 1b 24 	call	0x4836	; 0x4836 <itoa>
	HAL_LCD_u8SendString(str);
    3ecc:	ce 01       	movw	r24, r28
    3ece:	01 96       	adiw	r24, 0x01	; 1
    3ed0:	0e 94 1a 1f 	call	0x3e34	; 0x3e34 <HAL_LCD_u8SendString>
}
    3ed4:	2c 96       	adiw	r28, 0x0c	; 12
    3ed6:	0f b6       	in	r0, 0x3f	; 63
    3ed8:	f8 94       	cli
    3eda:	de bf       	out	0x3e, r29	; 62
    3edc:	0f be       	out	0x3f, r0	; 63
    3ede:	cd bf       	out	0x3d, r28	; 61
    3ee0:	cf 91       	pop	r28
    3ee2:	df 91       	pop	r29
    3ee4:	08 95       	ret

00003ee6 <HAL_LCD_u8GoTo>:

void HAL_LCD_u8GoTo(u8 Loc_u8TypeOfShift, u8 Loc_u8NumOfShift) {
    3ee6:	df 93       	push	r29
    3ee8:	cf 93       	push	r28
    3eea:	cd b7       	in	r28, 0x3d	; 61
    3eec:	de b7       	in	r29, 0x3e	; 62
    3eee:	c2 54       	subi	r28, 0x42	; 66
    3ef0:	d0 40       	sbci	r29, 0x00	; 0
    3ef2:	0f b6       	in	r0, 0x3f	; 63
    3ef4:	f8 94       	cli
    3ef6:	de bf       	out	0x3e, r29	; 62
    3ef8:	0f be       	out	0x3f, r0	; 63
    3efa:	cd bf       	out	0x3d, r28	; 61
    3efc:	fe 01       	movw	r30, r28
    3efe:	ef 5b       	subi	r30, 0xBF	; 191
    3f00:	ff 4f       	sbci	r31, 0xFF	; 255
    3f02:	80 83       	st	Z, r24
    3f04:	fe 01       	movw	r30, r28
    3f06:	ee 5b       	subi	r30, 0xBE	; 190
    3f08:	ff 4f       	sbci	r31, 0xFF	; 255
    3f0a:	60 83       	st	Z, r22
	if (Loc_u8TypeOfShift == Right_Shift) {
    3f0c:	fe 01       	movw	r30, r28
    3f0e:	ef 5b       	subi	r30, 0xBF	; 191
    3f10:	ff 4f       	sbci	r31, 0xFF	; 255
    3f12:	80 81       	ld	r24, Z
    3f14:	81 30       	cpi	r24, 0x01	; 1
    3f16:	09 f0       	breq	.+2      	; 0x3f1a <HAL_LCD_u8GoTo+0x34>
    3f18:	a0 c0       	rjmp	.+320    	; 0x405a <HAL_LCD_u8GoTo+0x174>
		for (u32 count = 0; count < Loc_u8NumOfShift; count++) {
    3f1a:	fe 01       	movw	r30, r28
    3f1c:	fd 96       	adiw	r30, 0x3d	; 61
    3f1e:	10 82       	st	Z, r1
    3f20:	11 82       	std	Z+1, r1	; 0x01
    3f22:	12 82       	std	Z+2, r1	; 0x02
    3f24:	13 82       	std	Z+3, r1	; 0x03
    3f26:	84 c0       	rjmp	.+264    	; 0x4030 <HAL_LCD_u8GoTo+0x14a>
    3f28:	80 e0       	ldi	r24, 0x00	; 0
    3f2a:	90 e0       	ldi	r25, 0x00	; 0
    3f2c:	a0 e0       	ldi	r26, 0x00	; 0
    3f2e:	b0 e4       	ldi	r27, 0x40	; 64
    3f30:	8d ab       	std	Y+53, r24	; 0x35
    3f32:	9e ab       	std	Y+54, r25	; 0x36
    3f34:	af ab       	std	Y+55, r26	; 0x37
    3f36:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f38:	6d a9       	ldd	r22, Y+53	; 0x35
    3f3a:	7e a9       	ldd	r23, Y+54	; 0x36
    3f3c:	8f a9       	ldd	r24, Y+55	; 0x37
    3f3e:	98 ad       	ldd	r25, Y+56	; 0x38
    3f40:	20 e0       	ldi	r18, 0x00	; 0
    3f42:	30 e0       	ldi	r19, 0x00	; 0
    3f44:	4a e7       	ldi	r20, 0x7A	; 122
    3f46:	55 e4       	ldi	r21, 0x45	; 69
    3f48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f4c:	dc 01       	movw	r26, r24
    3f4e:	cb 01       	movw	r24, r22
    3f50:	89 ab       	std	Y+49, r24	; 0x31
    3f52:	9a ab       	std	Y+50, r25	; 0x32
    3f54:	ab ab       	std	Y+51, r26	; 0x33
    3f56:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3f58:	69 a9       	ldd	r22, Y+49	; 0x31
    3f5a:	7a a9       	ldd	r23, Y+50	; 0x32
    3f5c:	8b a9       	ldd	r24, Y+51	; 0x33
    3f5e:	9c a9       	ldd	r25, Y+52	; 0x34
    3f60:	20 e0       	ldi	r18, 0x00	; 0
    3f62:	30 e0       	ldi	r19, 0x00	; 0
    3f64:	40 e8       	ldi	r20, 0x80	; 128
    3f66:	5f e3       	ldi	r21, 0x3F	; 63
    3f68:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3f6c:	88 23       	and	r24, r24
    3f6e:	2c f4       	brge	.+10     	; 0x3f7a <HAL_LCD_u8GoTo+0x94>
		__ticks = 1;
    3f70:	81 e0       	ldi	r24, 0x01	; 1
    3f72:	90 e0       	ldi	r25, 0x00	; 0
    3f74:	98 ab       	std	Y+48, r25	; 0x30
    3f76:	8f a7       	std	Y+47, r24	; 0x2f
    3f78:	3f c0       	rjmp	.+126    	; 0x3ff8 <HAL_LCD_u8GoTo+0x112>
	else if (__tmp > 65535)
    3f7a:	69 a9       	ldd	r22, Y+49	; 0x31
    3f7c:	7a a9       	ldd	r23, Y+50	; 0x32
    3f7e:	8b a9       	ldd	r24, Y+51	; 0x33
    3f80:	9c a9       	ldd	r25, Y+52	; 0x34
    3f82:	20 e0       	ldi	r18, 0x00	; 0
    3f84:	3f ef       	ldi	r19, 0xFF	; 255
    3f86:	4f e7       	ldi	r20, 0x7F	; 127
    3f88:	57 e4       	ldi	r21, 0x47	; 71
    3f8a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3f8e:	18 16       	cp	r1, r24
    3f90:	4c f5       	brge	.+82     	; 0x3fe4 <HAL_LCD_u8GoTo+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f92:	6d a9       	ldd	r22, Y+53	; 0x35
    3f94:	7e a9       	ldd	r23, Y+54	; 0x36
    3f96:	8f a9       	ldd	r24, Y+55	; 0x37
    3f98:	98 ad       	ldd	r25, Y+56	; 0x38
    3f9a:	20 e0       	ldi	r18, 0x00	; 0
    3f9c:	30 e0       	ldi	r19, 0x00	; 0
    3f9e:	40 e2       	ldi	r20, 0x20	; 32
    3fa0:	51 e4       	ldi	r21, 0x41	; 65
    3fa2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3fa6:	dc 01       	movw	r26, r24
    3fa8:	cb 01       	movw	r24, r22
    3faa:	bc 01       	movw	r22, r24
    3fac:	cd 01       	movw	r24, r26
    3fae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3fb2:	dc 01       	movw	r26, r24
    3fb4:	cb 01       	movw	r24, r22
    3fb6:	98 ab       	std	Y+48, r25	; 0x30
    3fb8:	8f a7       	std	Y+47, r24	; 0x2f
    3fba:	0f c0       	rjmp	.+30     	; 0x3fda <HAL_LCD_u8GoTo+0xf4>
    3fbc:	80 e9       	ldi	r24, 0x90	; 144
    3fbe:	91 e0       	ldi	r25, 0x01	; 1
    3fc0:	9e a7       	std	Y+46, r25	; 0x2e
    3fc2:	8d a7       	std	Y+45, r24	; 0x2d
    3fc4:	8d a5       	ldd	r24, Y+45	; 0x2d
    3fc6:	9e a5       	ldd	r25, Y+46	; 0x2e
    3fc8:	01 97       	sbiw	r24, 0x01	; 1
    3fca:	f1 f7       	brne	.-4      	; 0x3fc8 <HAL_LCD_u8GoTo+0xe2>
    3fcc:	9e a7       	std	Y+46, r25	; 0x2e
    3fce:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3fd0:	8f a5       	ldd	r24, Y+47	; 0x2f
    3fd2:	98 a9       	ldd	r25, Y+48	; 0x30
    3fd4:	01 97       	sbiw	r24, 0x01	; 1
    3fd6:	98 ab       	std	Y+48, r25	; 0x30
    3fd8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3fda:	8f a5       	ldd	r24, Y+47	; 0x2f
    3fdc:	98 a9       	ldd	r25, Y+48	; 0x30
    3fde:	00 97       	sbiw	r24, 0x00	; 0
    3fe0:	69 f7       	brne	.-38     	; 0x3fbc <HAL_LCD_u8GoTo+0xd6>
    3fe2:	14 c0       	rjmp	.+40     	; 0x400c <HAL_LCD_u8GoTo+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3fe4:	69 a9       	ldd	r22, Y+49	; 0x31
    3fe6:	7a a9       	ldd	r23, Y+50	; 0x32
    3fe8:	8b a9       	ldd	r24, Y+51	; 0x33
    3fea:	9c a9       	ldd	r25, Y+52	; 0x34
    3fec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ff0:	dc 01       	movw	r26, r24
    3ff2:	cb 01       	movw	r24, r22
    3ff4:	98 ab       	std	Y+48, r25	; 0x30
    3ff6:	8f a7       	std	Y+47, r24	; 0x2f
    3ff8:	8f a5       	ldd	r24, Y+47	; 0x2f
    3ffa:	98 a9       	ldd	r25, Y+48	; 0x30
    3ffc:	9c a7       	std	Y+44, r25	; 0x2c
    3ffe:	8b a7       	std	Y+43, r24	; 0x2b
    4000:	8b a5       	ldd	r24, Y+43	; 0x2b
    4002:	9c a5       	ldd	r25, Y+44	; 0x2c
    4004:	01 97       	sbiw	r24, 0x01	; 1
    4006:	f1 f7       	brne	.-4      	; 0x4004 <HAL_LCD_u8GoTo+0x11e>
    4008:	9c a7       	std	Y+44, r25	; 0x2c
    400a:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(2);
			HAL_LCD_u8SendCommands(Right_Shift_Command);
    400c:	8c e1       	ldi	r24, 0x1C	; 28
    400e:	0e 94 d6 1c 	call	0x39ac	; 0x39ac <HAL_LCD_u8SendCommands>
	HAL_LCD_u8SendString(str);
}

void HAL_LCD_u8GoTo(u8 Loc_u8TypeOfShift, u8 Loc_u8NumOfShift) {
	if (Loc_u8TypeOfShift == Right_Shift) {
		for (u32 count = 0; count < Loc_u8NumOfShift; count++) {
    4012:	fe 01       	movw	r30, r28
    4014:	fd 96       	adiw	r30, 0x3d	; 61
    4016:	80 81       	ld	r24, Z
    4018:	91 81       	ldd	r25, Z+1	; 0x01
    401a:	a2 81       	ldd	r26, Z+2	; 0x02
    401c:	b3 81       	ldd	r27, Z+3	; 0x03
    401e:	01 96       	adiw	r24, 0x01	; 1
    4020:	a1 1d       	adc	r26, r1
    4022:	b1 1d       	adc	r27, r1
    4024:	fe 01       	movw	r30, r28
    4026:	fd 96       	adiw	r30, 0x3d	; 61
    4028:	80 83       	st	Z, r24
    402a:	91 83       	std	Z+1, r25	; 0x01
    402c:	a2 83       	std	Z+2, r26	; 0x02
    402e:	b3 83       	std	Z+3, r27	; 0x03
    4030:	fe 01       	movw	r30, r28
    4032:	ee 5b       	subi	r30, 0xBE	; 190
    4034:	ff 4f       	sbci	r31, 0xFF	; 255
    4036:	80 81       	ld	r24, Z
    4038:	28 2f       	mov	r18, r24
    403a:	30 e0       	ldi	r19, 0x00	; 0
    403c:	40 e0       	ldi	r20, 0x00	; 0
    403e:	50 e0       	ldi	r21, 0x00	; 0
    4040:	fe 01       	movw	r30, r28
    4042:	fd 96       	adiw	r30, 0x3d	; 61
    4044:	80 81       	ld	r24, Z
    4046:	91 81       	ldd	r25, Z+1	; 0x01
    4048:	a2 81       	ldd	r26, Z+2	; 0x02
    404a:	b3 81       	ldd	r27, Z+3	; 0x03
    404c:	82 17       	cp	r24, r18
    404e:	93 07       	cpc	r25, r19
    4050:	a4 07       	cpc	r26, r20
    4052:	b5 07       	cpc	r27, r21
    4054:	08 f4       	brcc	.+2      	; 0x4058 <HAL_LCD_u8GoTo+0x172>
    4056:	68 cf       	rjmp	.-304    	; 0x3f28 <HAL_LCD_u8GoTo+0x42>
    4058:	98 c1       	rjmp	.+816    	; 0x438a <HAL_LCD_u8GoTo+0x4a4>
			_delay_ms(2);
			HAL_LCD_u8SendCommands(Right_Shift_Command);
		}
	} else if (Loc_u8TypeOfShift == Left_Shift) {
    405a:	fe 01       	movw	r30, r28
    405c:	ef 5b       	subi	r30, 0xBF	; 191
    405e:	ff 4f       	sbci	r31, 0xFF	; 255
    4060:	80 81       	ld	r24, Z
    4062:	88 23       	and	r24, r24
    4064:	09 f0       	breq	.+2      	; 0x4068 <HAL_LCD_u8GoTo+0x182>
    4066:	98 c0       	rjmp	.+304    	; 0x4198 <HAL_LCD_u8GoTo+0x2b2>
		for (u32 count = 0; count < Loc_u8NumOfShift; count++) {
    4068:	19 ae       	std	Y+57, r1	; 0x39
    406a:	1a ae       	std	Y+58, r1	; 0x3a
    406c:	1b ae       	std	Y+59, r1	; 0x3b
    406e:	1c ae       	std	Y+60, r1	; 0x3c
    4070:	80 c0       	rjmp	.+256    	; 0x4172 <HAL_LCD_u8GoTo+0x28c>
    4072:	80 e0       	ldi	r24, 0x00	; 0
    4074:	90 e0       	ldi	r25, 0x00	; 0
    4076:	a0 e0       	ldi	r26, 0x00	; 0
    4078:	b0 e4       	ldi	r27, 0x40	; 64
    407a:	8f a3       	std	Y+39, r24	; 0x27
    407c:	98 a7       	std	Y+40, r25	; 0x28
    407e:	a9 a7       	std	Y+41, r26	; 0x29
    4080:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4082:	6f a1       	ldd	r22, Y+39	; 0x27
    4084:	78 a5       	ldd	r23, Y+40	; 0x28
    4086:	89 a5       	ldd	r24, Y+41	; 0x29
    4088:	9a a5       	ldd	r25, Y+42	; 0x2a
    408a:	20 e0       	ldi	r18, 0x00	; 0
    408c:	30 e0       	ldi	r19, 0x00	; 0
    408e:	4a e7       	ldi	r20, 0x7A	; 122
    4090:	55 e4       	ldi	r21, 0x45	; 69
    4092:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4096:	dc 01       	movw	r26, r24
    4098:	cb 01       	movw	r24, r22
    409a:	8b a3       	std	Y+35, r24	; 0x23
    409c:	9c a3       	std	Y+36, r25	; 0x24
    409e:	ad a3       	std	Y+37, r26	; 0x25
    40a0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    40a2:	6b a1       	ldd	r22, Y+35	; 0x23
    40a4:	7c a1       	ldd	r23, Y+36	; 0x24
    40a6:	8d a1       	ldd	r24, Y+37	; 0x25
    40a8:	9e a1       	ldd	r25, Y+38	; 0x26
    40aa:	20 e0       	ldi	r18, 0x00	; 0
    40ac:	30 e0       	ldi	r19, 0x00	; 0
    40ae:	40 e8       	ldi	r20, 0x80	; 128
    40b0:	5f e3       	ldi	r21, 0x3F	; 63
    40b2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    40b6:	88 23       	and	r24, r24
    40b8:	2c f4       	brge	.+10     	; 0x40c4 <HAL_LCD_u8GoTo+0x1de>
		__ticks = 1;
    40ba:	81 e0       	ldi	r24, 0x01	; 1
    40bc:	90 e0       	ldi	r25, 0x00	; 0
    40be:	9a a3       	std	Y+34, r25	; 0x22
    40c0:	89 a3       	std	Y+33, r24	; 0x21
    40c2:	3f c0       	rjmp	.+126    	; 0x4142 <HAL_LCD_u8GoTo+0x25c>
	else if (__tmp > 65535)
    40c4:	6b a1       	ldd	r22, Y+35	; 0x23
    40c6:	7c a1       	ldd	r23, Y+36	; 0x24
    40c8:	8d a1       	ldd	r24, Y+37	; 0x25
    40ca:	9e a1       	ldd	r25, Y+38	; 0x26
    40cc:	20 e0       	ldi	r18, 0x00	; 0
    40ce:	3f ef       	ldi	r19, 0xFF	; 255
    40d0:	4f e7       	ldi	r20, 0x7F	; 127
    40d2:	57 e4       	ldi	r21, 0x47	; 71
    40d4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    40d8:	18 16       	cp	r1, r24
    40da:	4c f5       	brge	.+82     	; 0x412e <HAL_LCD_u8GoTo+0x248>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    40dc:	6f a1       	ldd	r22, Y+39	; 0x27
    40de:	78 a5       	ldd	r23, Y+40	; 0x28
    40e0:	89 a5       	ldd	r24, Y+41	; 0x29
    40e2:	9a a5       	ldd	r25, Y+42	; 0x2a
    40e4:	20 e0       	ldi	r18, 0x00	; 0
    40e6:	30 e0       	ldi	r19, 0x00	; 0
    40e8:	40 e2       	ldi	r20, 0x20	; 32
    40ea:	51 e4       	ldi	r21, 0x41	; 65
    40ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40f0:	dc 01       	movw	r26, r24
    40f2:	cb 01       	movw	r24, r22
    40f4:	bc 01       	movw	r22, r24
    40f6:	cd 01       	movw	r24, r26
    40f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40fc:	dc 01       	movw	r26, r24
    40fe:	cb 01       	movw	r24, r22
    4100:	9a a3       	std	Y+34, r25	; 0x22
    4102:	89 a3       	std	Y+33, r24	; 0x21
    4104:	0f c0       	rjmp	.+30     	; 0x4124 <HAL_LCD_u8GoTo+0x23e>
    4106:	80 e9       	ldi	r24, 0x90	; 144
    4108:	91 e0       	ldi	r25, 0x01	; 1
    410a:	98 a3       	std	Y+32, r25	; 0x20
    410c:	8f 8f       	std	Y+31, r24	; 0x1f
    410e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4110:	98 a1       	ldd	r25, Y+32	; 0x20
    4112:	01 97       	sbiw	r24, 0x01	; 1
    4114:	f1 f7       	brne	.-4      	; 0x4112 <HAL_LCD_u8GoTo+0x22c>
    4116:	98 a3       	std	Y+32, r25	; 0x20
    4118:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    411a:	89 a1       	ldd	r24, Y+33	; 0x21
    411c:	9a a1       	ldd	r25, Y+34	; 0x22
    411e:	01 97       	sbiw	r24, 0x01	; 1
    4120:	9a a3       	std	Y+34, r25	; 0x22
    4122:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4124:	89 a1       	ldd	r24, Y+33	; 0x21
    4126:	9a a1       	ldd	r25, Y+34	; 0x22
    4128:	00 97       	sbiw	r24, 0x00	; 0
    412a:	69 f7       	brne	.-38     	; 0x4106 <HAL_LCD_u8GoTo+0x220>
    412c:	14 c0       	rjmp	.+40     	; 0x4156 <HAL_LCD_u8GoTo+0x270>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    412e:	6b a1       	ldd	r22, Y+35	; 0x23
    4130:	7c a1       	ldd	r23, Y+36	; 0x24
    4132:	8d a1       	ldd	r24, Y+37	; 0x25
    4134:	9e a1       	ldd	r25, Y+38	; 0x26
    4136:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    413a:	dc 01       	movw	r26, r24
    413c:	cb 01       	movw	r24, r22
    413e:	9a a3       	std	Y+34, r25	; 0x22
    4140:	89 a3       	std	Y+33, r24	; 0x21
    4142:	89 a1       	ldd	r24, Y+33	; 0x21
    4144:	9a a1       	ldd	r25, Y+34	; 0x22
    4146:	9e 8f       	std	Y+30, r25	; 0x1e
    4148:	8d 8f       	std	Y+29, r24	; 0x1d
    414a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    414c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    414e:	01 97       	sbiw	r24, 0x01	; 1
    4150:	f1 f7       	brne	.-4      	; 0x414e <HAL_LCD_u8GoTo+0x268>
    4152:	9e 8f       	std	Y+30, r25	; 0x1e
    4154:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(2);
			HAL_LCD_u8SendCommands(Left_Shift_Command);
    4156:	88 e1       	ldi	r24, 0x18	; 24
    4158:	0e 94 d6 1c 	call	0x39ac	; 0x39ac <HAL_LCD_u8SendCommands>
		for (u32 count = 0; count < Loc_u8NumOfShift; count++) {
			_delay_ms(2);
			HAL_LCD_u8SendCommands(Right_Shift_Command);
		}
	} else if (Loc_u8TypeOfShift == Left_Shift) {
		for (u32 count = 0; count < Loc_u8NumOfShift; count++) {
    415c:	89 ad       	ldd	r24, Y+57	; 0x39
    415e:	9a ad       	ldd	r25, Y+58	; 0x3a
    4160:	ab ad       	ldd	r26, Y+59	; 0x3b
    4162:	bc ad       	ldd	r27, Y+60	; 0x3c
    4164:	01 96       	adiw	r24, 0x01	; 1
    4166:	a1 1d       	adc	r26, r1
    4168:	b1 1d       	adc	r27, r1
    416a:	89 af       	std	Y+57, r24	; 0x39
    416c:	9a af       	std	Y+58, r25	; 0x3a
    416e:	ab af       	std	Y+59, r26	; 0x3b
    4170:	bc af       	std	Y+60, r27	; 0x3c
    4172:	fe 01       	movw	r30, r28
    4174:	ee 5b       	subi	r30, 0xBE	; 190
    4176:	ff 4f       	sbci	r31, 0xFF	; 255
    4178:	80 81       	ld	r24, Z
    417a:	28 2f       	mov	r18, r24
    417c:	30 e0       	ldi	r19, 0x00	; 0
    417e:	40 e0       	ldi	r20, 0x00	; 0
    4180:	50 e0       	ldi	r21, 0x00	; 0
    4182:	89 ad       	ldd	r24, Y+57	; 0x39
    4184:	9a ad       	ldd	r25, Y+58	; 0x3a
    4186:	ab ad       	ldd	r26, Y+59	; 0x3b
    4188:	bc ad       	ldd	r27, Y+60	; 0x3c
    418a:	82 17       	cp	r24, r18
    418c:	93 07       	cpc	r25, r19
    418e:	a4 07       	cpc	r26, r20
    4190:	b5 07       	cpc	r27, r21
    4192:	08 f4       	brcc	.+2      	; 0x4196 <HAL_LCD_u8GoTo+0x2b0>
    4194:	6e cf       	rjmp	.-292    	; 0x4072 <HAL_LCD_u8GoTo+0x18c>
    4196:	f9 c0       	rjmp	.+498    	; 0x438a <HAL_LCD_u8GoTo+0x4a4>
			_delay_ms(2);
			HAL_LCD_u8SendCommands(Left_Shift_Command);
		}
	} else if (Loc_u8TypeOfShift == First_Line) {
    4198:	fe 01       	movw	r30, r28
    419a:	ef 5b       	subi	r30, 0xBF	; 191
    419c:	ff 4f       	sbci	r31, 0xFF	; 255
    419e:	80 81       	ld	r24, Z
    41a0:	82 30       	cpi	r24, 0x02	; 2
    41a2:	09 f0       	breq	.+2      	; 0x41a6 <HAL_LCD_u8GoTo+0x2c0>
    41a4:	76 c0       	rjmp	.+236    	; 0x4292 <HAL_LCD_u8GoTo+0x3ac>
    41a6:	80 e0       	ldi	r24, 0x00	; 0
    41a8:	90 e0       	ldi	r25, 0x00	; 0
    41aa:	a0 e0       	ldi	r26, 0x00	; 0
    41ac:	b0 e4       	ldi	r27, 0x40	; 64
    41ae:	89 8f       	std	Y+25, r24	; 0x19
    41b0:	9a 8f       	std	Y+26, r25	; 0x1a
    41b2:	ab 8f       	std	Y+27, r26	; 0x1b
    41b4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    41b6:	69 8d       	ldd	r22, Y+25	; 0x19
    41b8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    41ba:	8b 8d       	ldd	r24, Y+27	; 0x1b
    41bc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    41be:	20 e0       	ldi	r18, 0x00	; 0
    41c0:	30 e0       	ldi	r19, 0x00	; 0
    41c2:	4a e7       	ldi	r20, 0x7A	; 122
    41c4:	55 e4       	ldi	r21, 0x45	; 69
    41c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    41ca:	dc 01       	movw	r26, r24
    41cc:	cb 01       	movw	r24, r22
    41ce:	8d 8b       	std	Y+21, r24	; 0x15
    41d0:	9e 8b       	std	Y+22, r25	; 0x16
    41d2:	af 8b       	std	Y+23, r26	; 0x17
    41d4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    41d6:	6d 89       	ldd	r22, Y+21	; 0x15
    41d8:	7e 89       	ldd	r23, Y+22	; 0x16
    41da:	8f 89       	ldd	r24, Y+23	; 0x17
    41dc:	98 8d       	ldd	r25, Y+24	; 0x18
    41de:	20 e0       	ldi	r18, 0x00	; 0
    41e0:	30 e0       	ldi	r19, 0x00	; 0
    41e2:	40 e8       	ldi	r20, 0x80	; 128
    41e4:	5f e3       	ldi	r21, 0x3F	; 63
    41e6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    41ea:	88 23       	and	r24, r24
    41ec:	2c f4       	brge	.+10     	; 0x41f8 <HAL_LCD_u8GoTo+0x312>
		__ticks = 1;
    41ee:	81 e0       	ldi	r24, 0x01	; 1
    41f0:	90 e0       	ldi	r25, 0x00	; 0
    41f2:	9c 8b       	std	Y+20, r25	; 0x14
    41f4:	8b 8b       	std	Y+19, r24	; 0x13
    41f6:	3f c0       	rjmp	.+126    	; 0x4276 <HAL_LCD_u8GoTo+0x390>
	else if (__tmp > 65535)
    41f8:	6d 89       	ldd	r22, Y+21	; 0x15
    41fa:	7e 89       	ldd	r23, Y+22	; 0x16
    41fc:	8f 89       	ldd	r24, Y+23	; 0x17
    41fe:	98 8d       	ldd	r25, Y+24	; 0x18
    4200:	20 e0       	ldi	r18, 0x00	; 0
    4202:	3f ef       	ldi	r19, 0xFF	; 255
    4204:	4f e7       	ldi	r20, 0x7F	; 127
    4206:	57 e4       	ldi	r21, 0x47	; 71
    4208:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    420c:	18 16       	cp	r1, r24
    420e:	4c f5       	brge	.+82     	; 0x4262 <HAL_LCD_u8GoTo+0x37c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4210:	69 8d       	ldd	r22, Y+25	; 0x19
    4212:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4214:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4216:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4218:	20 e0       	ldi	r18, 0x00	; 0
    421a:	30 e0       	ldi	r19, 0x00	; 0
    421c:	40 e2       	ldi	r20, 0x20	; 32
    421e:	51 e4       	ldi	r21, 0x41	; 65
    4220:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4224:	dc 01       	movw	r26, r24
    4226:	cb 01       	movw	r24, r22
    4228:	bc 01       	movw	r22, r24
    422a:	cd 01       	movw	r24, r26
    422c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4230:	dc 01       	movw	r26, r24
    4232:	cb 01       	movw	r24, r22
    4234:	9c 8b       	std	Y+20, r25	; 0x14
    4236:	8b 8b       	std	Y+19, r24	; 0x13
    4238:	0f c0       	rjmp	.+30     	; 0x4258 <HAL_LCD_u8GoTo+0x372>
    423a:	80 e9       	ldi	r24, 0x90	; 144
    423c:	91 e0       	ldi	r25, 0x01	; 1
    423e:	9a 8b       	std	Y+18, r25	; 0x12
    4240:	89 8b       	std	Y+17, r24	; 0x11
    4242:	89 89       	ldd	r24, Y+17	; 0x11
    4244:	9a 89       	ldd	r25, Y+18	; 0x12
    4246:	01 97       	sbiw	r24, 0x01	; 1
    4248:	f1 f7       	brne	.-4      	; 0x4246 <HAL_LCD_u8GoTo+0x360>
    424a:	9a 8b       	std	Y+18, r25	; 0x12
    424c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    424e:	8b 89       	ldd	r24, Y+19	; 0x13
    4250:	9c 89       	ldd	r25, Y+20	; 0x14
    4252:	01 97       	sbiw	r24, 0x01	; 1
    4254:	9c 8b       	std	Y+20, r25	; 0x14
    4256:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4258:	8b 89       	ldd	r24, Y+19	; 0x13
    425a:	9c 89       	ldd	r25, Y+20	; 0x14
    425c:	00 97       	sbiw	r24, 0x00	; 0
    425e:	69 f7       	brne	.-38     	; 0x423a <HAL_LCD_u8GoTo+0x354>
    4260:	14 c0       	rjmp	.+40     	; 0x428a <HAL_LCD_u8GoTo+0x3a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4262:	6d 89       	ldd	r22, Y+21	; 0x15
    4264:	7e 89       	ldd	r23, Y+22	; 0x16
    4266:	8f 89       	ldd	r24, Y+23	; 0x17
    4268:	98 8d       	ldd	r25, Y+24	; 0x18
    426a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    426e:	dc 01       	movw	r26, r24
    4270:	cb 01       	movw	r24, r22
    4272:	9c 8b       	std	Y+20, r25	; 0x14
    4274:	8b 8b       	std	Y+19, r24	; 0x13
    4276:	8b 89       	ldd	r24, Y+19	; 0x13
    4278:	9c 89       	ldd	r25, Y+20	; 0x14
    427a:	98 8b       	std	Y+16, r25	; 0x10
    427c:	8f 87       	std	Y+15, r24	; 0x0f
    427e:	8f 85       	ldd	r24, Y+15	; 0x0f
    4280:	98 89       	ldd	r25, Y+16	; 0x10
    4282:	01 97       	sbiw	r24, 0x01	; 1
    4284:	f1 f7       	brne	.-4      	; 0x4282 <HAL_LCD_u8GoTo+0x39c>
    4286:	98 8b       	std	Y+16, r25	; 0x10
    4288:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(2);
		HAL_LCD_u8SendCommands(beginning_1stLine);
    428a:	80 e8       	ldi	r24, 0x80	; 128
    428c:	0e 94 d6 1c 	call	0x39ac	; 0x39ac <HAL_LCD_u8SendCommands>
    4290:	7c c0       	rjmp	.+248    	; 0x438a <HAL_LCD_u8GoTo+0x4a4>
	} else if (Loc_u8TypeOfShift == Second_Line) {
    4292:	fe 01       	movw	r30, r28
    4294:	ef 5b       	subi	r30, 0xBF	; 191
    4296:	ff 4f       	sbci	r31, 0xFF	; 255
    4298:	80 81       	ld	r24, Z
    429a:	83 30       	cpi	r24, 0x03	; 3
    429c:	09 f0       	breq	.+2      	; 0x42a0 <HAL_LCD_u8GoTo+0x3ba>
    429e:	75 c0       	rjmp	.+234    	; 0x438a <HAL_LCD_u8GoTo+0x4a4>
    42a0:	80 e0       	ldi	r24, 0x00	; 0
    42a2:	90 e0       	ldi	r25, 0x00	; 0
    42a4:	a0 e0       	ldi	r26, 0x00	; 0
    42a6:	b0 e4       	ldi	r27, 0x40	; 64
    42a8:	8b 87       	std	Y+11, r24	; 0x0b
    42aa:	9c 87       	std	Y+12, r25	; 0x0c
    42ac:	ad 87       	std	Y+13, r26	; 0x0d
    42ae:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    42b0:	6b 85       	ldd	r22, Y+11	; 0x0b
    42b2:	7c 85       	ldd	r23, Y+12	; 0x0c
    42b4:	8d 85       	ldd	r24, Y+13	; 0x0d
    42b6:	9e 85       	ldd	r25, Y+14	; 0x0e
    42b8:	20 e0       	ldi	r18, 0x00	; 0
    42ba:	30 e0       	ldi	r19, 0x00	; 0
    42bc:	4a e7       	ldi	r20, 0x7A	; 122
    42be:	55 e4       	ldi	r21, 0x45	; 69
    42c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    42c4:	dc 01       	movw	r26, r24
    42c6:	cb 01       	movw	r24, r22
    42c8:	8f 83       	std	Y+7, r24	; 0x07
    42ca:	98 87       	std	Y+8, r25	; 0x08
    42cc:	a9 87       	std	Y+9, r26	; 0x09
    42ce:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    42d0:	6f 81       	ldd	r22, Y+7	; 0x07
    42d2:	78 85       	ldd	r23, Y+8	; 0x08
    42d4:	89 85       	ldd	r24, Y+9	; 0x09
    42d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    42d8:	20 e0       	ldi	r18, 0x00	; 0
    42da:	30 e0       	ldi	r19, 0x00	; 0
    42dc:	40 e8       	ldi	r20, 0x80	; 128
    42de:	5f e3       	ldi	r21, 0x3F	; 63
    42e0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    42e4:	88 23       	and	r24, r24
    42e6:	2c f4       	brge	.+10     	; 0x42f2 <HAL_LCD_u8GoTo+0x40c>
		__ticks = 1;
    42e8:	81 e0       	ldi	r24, 0x01	; 1
    42ea:	90 e0       	ldi	r25, 0x00	; 0
    42ec:	9e 83       	std	Y+6, r25	; 0x06
    42ee:	8d 83       	std	Y+5, r24	; 0x05
    42f0:	3f c0       	rjmp	.+126    	; 0x4370 <HAL_LCD_u8GoTo+0x48a>
	else if (__tmp > 65535)
    42f2:	6f 81       	ldd	r22, Y+7	; 0x07
    42f4:	78 85       	ldd	r23, Y+8	; 0x08
    42f6:	89 85       	ldd	r24, Y+9	; 0x09
    42f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    42fa:	20 e0       	ldi	r18, 0x00	; 0
    42fc:	3f ef       	ldi	r19, 0xFF	; 255
    42fe:	4f e7       	ldi	r20, 0x7F	; 127
    4300:	57 e4       	ldi	r21, 0x47	; 71
    4302:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4306:	18 16       	cp	r1, r24
    4308:	4c f5       	brge	.+82     	; 0x435c <HAL_LCD_u8GoTo+0x476>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    430a:	6b 85       	ldd	r22, Y+11	; 0x0b
    430c:	7c 85       	ldd	r23, Y+12	; 0x0c
    430e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4310:	9e 85       	ldd	r25, Y+14	; 0x0e
    4312:	20 e0       	ldi	r18, 0x00	; 0
    4314:	30 e0       	ldi	r19, 0x00	; 0
    4316:	40 e2       	ldi	r20, 0x20	; 32
    4318:	51 e4       	ldi	r21, 0x41	; 65
    431a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    431e:	dc 01       	movw	r26, r24
    4320:	cb 01       	movw	r24, r22
    4322:	bc 01       	movw	r22, r24
    4324:	cd 01       	movw	r24, r26
    4326:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    432a:	dc 01       	movw	r26, r24
    432c:	cb 01       	movw	r24, r22
    432e:	9e 83       	std	Y+6, r25	; 0x06
    4330:	8d 83       	std	Y+5, r24	; 0x05
    4332:	0f c0       	rjmp	.+30     	; 0x4352 <HAL_LCD_u8GoTo+0x46c>
    4334:	80 e9       	ldi	r24, 0x90	; 144
    4336:	91 e0       	ldi	r25, 0x01	; 1
    4338:	9c 83       	std	Y+4, r25	; 0x04
    433a:	8b 83       	std	Y+3, r24	; 0x03
    433c:	8b 81       	ldd	r24, Y+3	; 0x03
    433e:	9c 81       	ldd	r25, Y+4	; 0x04
    4340:	01 97       	sbiw	r24, 0x01	; 1
    4342:	f1 f7       	brne	.-4      	; 0x4340 <HAL_LCD_u8GoTo+0x45a>
    4344:	9c 83       	std	Y+4, r25	; 0x04
    4346:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4348:	8d 81       	ldd	r24, Y+5	; 0x05
    434a:	9e 81       	ldd	r25, Y+6	; 0x06
    434c:	01 97       	sbiw	r24, 0x01	; 1
    434e:	9e 83       	std	Y+6, r25	; 0x06
    4350:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4352:	8d 81       	ldd	r24, Y+5	; 0x05
    4354:	9e 81       	ldd	r25, Y+6	; 0x06
    4356:	00 97       	sbiw	r24, 0x00	; 0
    4358:	69 f7       	brne	.-38     	; 0x4334 <HAL_LCD_u8GoTo+0x44e>
    435a:	14 c0       	rjmp	.+40     	; 0x4384 <HAL_LCD_u8GoTo+0x49e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    435c:	6f 81       	ldd	r22, Y+7	; 0x07
    435e:	78 85       	ldd	r23, Y+8	; 0x08
    4360:	89 85       	ldd	r24, Y+9	; 0x09
    4362:	9a 85       	ldd	r25, Y+10	; 0x0a
    4364:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4368:	dc 01       	movw	r26, r24
    436a:	cb 01       	movw	r24, r22
    436c:	9e 83       	std	Y+6, r25	; 0x06
    436e:	8d 83       	std	Y+5, r24	; 0x05
    4370:	8d 81       	ldd	r24, Y+5	; 0x05
    4372:	9e 81       	ldd	r25, Y+6	; 0x06
    4374:	9a 83       	std	Y+2, r25	; 0x02
    4376:	89 83       	std	Y+1, r24	; 0x01
    4378:	89 81       	ldd	r24, Y+1	; 0x01
    437a:	9a 81       	ldd	r25, Y+2	; 0x02
    437c:	01 97       	sbiw	r24, 0x01	; 1
    437e:	f1 f7       	brne	.-4      	; 0x437c <HAL_LCD_u8GoTo+0x496>
    4380:	9a 83       	std	Y+2, r25	; 0x02
    4382:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2);
		HAL_LCD_u8SendCommands(beginning_2stLine);
    4384:	80 ec       	ldi	r24, 0xC0	; 192
    4386:	0e 94 d6 1c 	call	0x39ac	; 0x39ac <HAL_LCD_u8SendCommands>
	}
}
    438a:	ce 5b       	subi	r28, 0xBE	; 190
    438c:	df 4f       	sbci	r29, 0xFF	; 255
    438e:	0f b6       	in	r0, 0x3f	; 63
    4390:	f8 94       	cli
    4392:	de bf       	out	0x3e, r29	; 62
    4394:	0f be       	out	0x3f, r0	; 63
    4396:	cd bf       	out	0x3d, r28	; 61
    4398:	cf 91       	pop	r28
    439a:	df 91       	pop	r29
    439c:	08 95       	ret

0000439e <HAL_LCD_u8Clear>:

void HAL_LCD_u8Clear() {
    439e:	df 93       	push	r29
    43a0:	cf 93       	push	r28
    43a2:	cd b7       	in	r28, 0x3d	; 61
    43a4:	de b7       	in	r29, 0x3e	; 62
    43a6:	2e 97       	sbiw	r28, 0x0e	; 14
    43a8:	0f b6       	in	r0, 0x3f	; 63
    43aa:	f8 94       	cli
    43ac:	de bf       	out	0x3e, r29	; 62
    43ae:	0f be       	out	0x3f, r0	; 63
    43b0:	cd bf       	out	0x3d, r28	; 61
    43b2:	80 e0       	ldi	r24, 0x00	; 0
    43b4:	90 e0       	ldi	r25, 0x00	; 0
    43b6:	a0 e0       	ldi	r26, 0x00	; 0
    43b8:	b0 e4       	ldi	r27, 0x40	; 64
    43ba:	8b 87       	std	Y+11, r24	; 0x0b
    43bc:	9c 87       	std	Y+12, r25	; 0x0c
    43be:	ad 87       	std	Y+13, r26	; 0x0d
    43c0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    43c2:	6b 85       	ldd	r22, Y+11	; 0x0b
    43c4:	7c 85       	ldd	r23, Y+12	; 0x0c
    43c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    43c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    43ca:	20 e0       	ldi	r18, 0x00	; 0
    43cc:	30 e0       	ldi	r19, 0x00	; 0
    43ce:	4a e7       	ldi	r20, 0x7A	; 122
    43d0:	55 e4       	ldi	r21, 0x45	; 69
    43d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    43d6:	dc 01       	movw	r26, r24
    43d8:	cb 01       	movw	r24, r22
    43da:	8f 83       	std	Y+7, r24	; 0x07
    43dc:	98 87       	std	Y+8, r25	; 0x08
    43de:	a9 87       	std	Y+9, r26	; 0x09
    43e0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    43e2:	6f 81       	ldd	r22, Y+7	; 0x07
    43e4:	78 85       	ldd	r23, Y+8	; 0x08
    43e6:	89 85       	ldd	r24, Y+9	; 0x09
    43e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    43ea:	20 e0       	ldi	r18, 0x00	; 0
    43ec:	30 e0       	ldi	r19, 0x00	; 0
    43ee:	40 e8       	ldi	r20, 0x80	; 128
    43f0:	5f e3       	ldi	r21, 0x3F	; 63
    43f2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    43f6:	88 23       	and	r24, r24
    43f8:	2c f4       	brge	.+10     	; 0x4404 <HAL_LCD_u8Clear+0x66>
		__ticks = 1;
    43fa:	81 e0       	ldi	r24, 0x01	; 1
    43fc:	90 e0       	ldi	r25, 0x00	; 0
    43fe:	9e 83       	std	Y+6, r25	; 0x06
    4400:	8d 83       	std	Y+5, r24	; 0x05
    4402:	3f c0       	rjmp	.+126    	; 0x4482 <HAL_LCD_u8Clear+0xe4>
	else if (__tmp > 65535)
    4404:	6f 81       	ldd	r22, Y+7	; 0x07
    4406:	78 85       	ldd	r23, Y+8	; 0x08
    4408:	89 85       	ldd	r24, Y+9	; 0x09
    440a:	9a 85       	ldd	r25, Y+10	; 0x0a
    440c:	20 e0       	ldi	r18, 0x00	; 0
    440e:	3f ef       	ldi	r19, 0xFF	; 255
    4410:	4f e7       	ldi	r20, 0x7F	; 127
    4412:	57 e4       	ldi	r21, 0x47	; 71
    4414:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4418:	18 16       	cp	r1, r24
    441a:	4c f5       	brge	.+82     	; 0x446e <HAL_LCD_u8Clear+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    441c:	6b 85       	ldd	r22, Y+11	; 0x0b
    441e:	7c 85       	ldd	r23, Y+12	; 0x0c
    4420:	8d 85       	ldd	r24, Y+13	; 0x0d
    4422:	9e 85       	ldd	r25, Y+14	; 0x0e
    4424:	20 e0       	ldi	r18, 0x00	; 0
    4426:	30 e0       	ldi	r19, 0x00	; 0
    4428:	40 e2       	ldi	r20, 0x20	; 32
    442a:	51 e4       	ldi	r21, 0x41	; 65
    442c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4430:	dc 01       	movw	r26, r24
    4432:	cb 01       	movw	r24, r22
    4434:	bc 01       	movw	r22, r24
    4436:	cd 01       	movw	r24, r26
    4438:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    443c:	dc 01       	movw	r26, r24
    443e:	cb 01       	movw	r24, r22
    4440:	9e 83       	std	Y+6, r25	; 0x06
    4442:	8d 83       	std	Y+5, r24	; 0x05
    4444:	0f c0       	rjmp	.+30     	; 0x4464 <HAL_LCD_u8Clear+0xc6>
    4446:	80 e9       	ldi	r24, 0x90	; 144
    4448:	91 e0       	ldi	r25, 0x01	; 1
    444a:	9c 83       	std	Y+4, r25	; 0x04
    444c:	8b 83       	std	Y+3, r24	; 0x03
    444e:	8b 81       	ldd	r24, Y+3	; 0x03
    4450:	9c 81       	ldd	r25, Y+4	; 0x04
    4452:	01 97       	sbiw	r24, 0x01	; 1
    4454:	f1 f7       	brne	.-4      	; 0x4452 <HAL_LCD_u8Clear+0xb4>
    4456:	9c 83       	std	Y+4, r25	; 0x04
    4458:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    445a:	8d 81       	ldd	r24, Y+5	; 0x05
    445c:	9e 81       	ldd	r25, Y+6	; 0x06
    445e:	01 97       	sbiw	r24, 0x01	; 1
    4460:	9e 83       	std	Y+6, r25	; 0x06
    4462:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4464:	8d 81       	ldd	r24, Y+5	; 0x05
    4466:	9e 81       	ldd	r25, Y+6	; 0x06
    4468:	00 97       	sbiw	r24, 0x00	; 0
    446a:	69 f7       	brne	.-38     	; 0x4446 <HAL_LCD_u8Clear+0xa8>
    446c:	14 c0       	rjmp	.+40     	; 0x4496 <HAL_LCD_u8Clear+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    446e:	6f 81       	ldd	r22, Y+7	; 0x07
    4470:	78 85       	ldd	r23, Y+8	; 0x08
    4472:	89 85       	ldd	r24, Y+9	; 0x09
    4474:	9a 85       	ldd	r25, Y+10	; 0x0a
    4476:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    447a:	dc 01       	movw	r26, r24
    447c:	cb 01       	movw	r24, r22
    447e:	9e 83       	std	Y+6, r25	; 0x06
    4480:	8d 83       	std	Y+5, r24	; 0x05
    4482:	8d 81       	ldd	r24, Y+5	; 0x05
    4484:	9e 81       	ldd	r25, Y+6	; 0x06
    4486:	9a 83       	std	Y+2, r25	; 0x02
    4488:	89 83       	std	Y+1, r24	; 0x01
    448a:	89 81       	ldd	r24, Y+1	; 0x01
    448c:	9a 81       	ldd	r25, Y+2	; 0x02
    448e:	01 97       	sbiw	r24, 0x01	; 1
    4490:	f1 f7       	brne	.-4      	; 0x448e <HAL_LCD_u8Clear+0xf0>
    4492:	9a 83       	std	Y+2, r25	; 0x02
    4494:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	HAL_LCD_u8SendCommands(Display_Clear);
    4496:	81 e0       	ldi	r24, 0x01	; 1
    4498:	0e 94 d6 1c 	call	0x39ac	; 0x39ac <HAL_LCD_u8SendCommands>
}
    449c:	2e 96       	adiw	r28, 0x0e	; 14
    449e:	0f b6       	in	r0, 0x3f	; 63
    44a0:	f8 94       	cli
    44a2:	de bf       	out	0x3e, r29	; 62
    44a4:	0f be       	out	0x3f, r0	; 63
    44a6:	cd bf       	out	0x3d, r28	; 61
    44a8:	cf 91       	pop	r28
    44aa:	df 91       	pop	r29
    44ac:	08 95       	ret

000044ae <HAL_LCD_u8CustomChar>:

void HAL_LCD_u8CustomChar(u8 Loc_u8Location, u8* Loc_u8msg) {
    44ae:	df 93       	push	r29
    44b0:	cf 93       	push	r28
    44b2:	00 d0       	rcall	.+0      	; 0x44b4 <HAL_LCD_u8CustomChar+0x6>
    44b4:	00 d0       	rcall	.+0      	; 0x44b6 <HAL_LCD_u8CustomChar+0x8>
    44b6:	cd b7       	in	r28, 0x3d	; 61
    44b8:	de b7       	in	r29, 0x3e	; 62
    44ba:	8a 83       	std	Y+2, r24	; 0x02
    44bc:	7c 83       	std	Y+4, r23	; 0x04
    44be:	6b 83       	std	Y+3, r22	; 0x03
	if (Loc_u8Location < 8) {
    44c0:	8a 81       	ldd	r24, Y+2	; 0x02
    44c2:	88 30       	cpi	r24, 0x08	; 8
    44c4:	f8 f4       	brcc	.+62     	; 0x4504 <HAL_LCD_u8CustomChar+0x56>
		HAL_LCD_u8SendCommands(0x40 + (Loc_u8Location*8));
    44c6:	8a 81       	ldd	r24, Y+2	; 0x02
    44c8:	88 2f       	mov	r24, r24
    44ca:	90 e0       	ldi	r25, 0x00	; 0
    44cc:	08 96       	adiw	r24, 0x08	; 8
    44ce:	88 0f       	add	r24, r24
    44d0:	99 1f       	adc	r25, r25
    44d2:	88 0f       	add	r24, r24
    44d4:	99 1f       	adc	r25, r25
    44d6:	88 0f       	add	r24, r24
    44d8:	99 1f       	adc	r25, r25
    44da:	0e 94 d6 1c 	call	0x39ac	; 0x39ac <HAL_LCD_u8SendCommands>
		for( u8 count = 0; count < 8; count++)
    44de:	19 82       	std	Y+1, r1	; 0x01
    44e0:	0e c0       	rjmp	.+28     	; 0x44fe <HAL_LCD_u8CustomChar+0x50>
			HAL_LCD_u8SendChar(Loc_u8msg[count]);
    44e2:	89 81       	ldd	r24, Y+1	; 0x01
    44e4:	28 2f       	mov	r18, r24
    44e6:	30 e0       	ldi	r19, 0x00	; 0
    44e8:	8b 81       	ldd	r24, Y+3	; 0x03
    44ea:	9c 81       	ldd	r25, Y+4	; 0x04
    44ec:	fc 01       	movw	r30, r24
    44ee:	e2 0f       	add	r30, r18
    44f0:	f3 1f       	adc	r31, r19
    44f2:	80 81       	ld	r24, Z
    44f4:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <HAL_LCD_u8SendChar>
}

void HAL_LCD_u8CustomChar(u8 Loc_u8Location, u8* Loc_u8msg) {
	if (Loc_u8Location < 8) {
		HAL_LCD_u8SendCommands(0x40 + (Loc_u8Location*8));
		for( u8 count = 0; count < 8; count++)
    44f8:	89 81       	ldd	r24, Y+1	; 0x01
    44fa:	8f 5f       	subi	r24, 0xFF	; 255
    44fc:	89 83       	std	Y+1, r24	; 0x01
    44fe:	89 81       	ldd	r24, Y+1	; 0x01
    4500:	88 30       	cpi	r24, 0x08	; 8
    4502:	78 f3       	brcs	.-34     	; 0x44e2 <HAL_LCD_u8CustomChar+0x34>
			HAL_LCD_u8SendChar(Loc_u8msg[count]);
	}
	HAL_LCD_u8SendCommands(0x02);
    4504:	82 e0       	ldi	r24, 0x02	; 2
    4506:	0e 94 d6 1c 	call	0x39ac	; 0x39ac <HAL_LCD_u8SendCommands>
}
    450a:	0f 90       	pop	r0
    450c:	0f 90       	pop	r0
    450e:	0f 90       	pop	r0
    4510:	0f 90       	pop	r0
    4512:	cf 91       	pop	r28
    4514:	df 91       	pop	r29
    4516:	08 95       	ret

00004518 <HAL_void_H_BridgeInit>:
 *      Author: Mohamed
 */

#include "H_Bridge.h"

void HAL_void_H_BridgeInit() {
    4518:	df 93       	push	r29
    451a:	cf 93       	push	r28
    451c:	cd b7       	in	r28, 0x3d	; 61
    451e:	de b7       	in	r29, 0x3e	; 62
//	MCAL_DIO_u8SetPinDirection(PortD, Pin4, Pin_High);
//	MCAL_DIO_u8SetPinDirection(PortD, Pin5, Pin_High);
	MCAL_DIO_u8SetPinDirection(PortC, 3, Pin_High);
    4520:	82 e0       	ldi	r24, 0x02	; 2
    4522:	63 e0       	ldi	r22, 0x03	; 3
    4524:	41 e0       	ldi	r20, 0x01	; 1
    4526:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <MCAL_DIO_u8SetPinDirection>
	MCAL_DIO_u8SetPinDirection(PortC, 4, Pin_High);
    452a:	82 e0       	ldi	r24, 0x02	; 2
    452c:	64 e0       	ldi	r22, 0x04	; 4
    452e:	41 e0       	ldi	r20, 0x01	; 1
    4530:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <MCAL_DIO_u8SetPinDirection>
	MCAL_DIO_u8SetPinDirection(PortC, 5, Pin_High);
    4534:	82 e0       	ldi	r24, 0x02	; 2
    4536:	65 e0       	ldi	r22, 0x05	; 5
    4538:	41 e0       	ldi	r20, 0x01	; 1
    453a:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <MCAL_DIO_u8SetPinDirection>
	MCAL_DIO_u8SetPinDirection(PortC, 6, Pin_High);
    453e:	82 e0       	ldi	r24, 0x02	; 2
    4540:	66 e0       	ldi	r22, 0x06	; 6
    4542:	41 e0       	ldi	r20, 0x01	; 1
    4544:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <MCAL_DIO_u8SetPinDirection>
}
    4548:	cf 91       	pop	r28
    454a:	df 91       	pop	r29
    454c:	08 95       	ret

0000454e <HAL_void_H_BridgeCW>:

void HAL_void_H_BridgeCW(u8 copy_u8_speed) {
    454e:	df 93       	push	r29
    4550:	cf 93       	push	r28
    4552:	0f 92       	push	r0
    4554:	cd b7       	in	r28, 0x3d	; 61
    4556:	de b7       	in	r29, 0x3e	; 62
    4558:	89 83       	std	Y+1, r24	; 0x01
	MCAL_T1_FPWM_10bitRES(CHENNEL_B, copy_u8_speed);
    455a:	81 e0       	ldi	r24, 0x01	; 1
    455c:	69 81       	ldd	r22, Y+1	; 0x01
    455e:	0e 94 1e 0b 	call	0x163c	; 0x163c <MCAL_T1_FPWM_10bitRES>
	MCAL_T1_FPWM_10bitRES(CHENNEL_A, copy_u8_speed);
    4562:	80 e0       	ldi	r24, 0x00	; 0
    4564:	69 81       	ldd	r22, Y+1	; 0x01
    4566:	0e 94 1e 0b 	call	0x163c	; 0x163c <MCAL_T1_FPWM_10bitRES>
	MCAL_DIO_u8SetPinValue(PortC, Pin3, Pin_Low);
    456a:	82 e0       	ldi	r24, 0x02	; 2
    456c:	63 e0       	ldi	r22, 0x03	; 3
    456e:	40 e0       	ldi	r20, 0x00	; 0
    4570:	0e 94 68 13 	call	0x26d0	; 0x26d0 <MCAL_DIO_u8SetPinValue>
	MCAL_DIO_u8SetPinValue(PortC, Pin4, Pin_Low);
    4574:	82 e0       	ldi	r24, 0x02	; 2
    4576:	64 e0       	ldi	r22, 0x04	; 4
    4578:	40 e0       	ldi	r20, 0x00	; 0
    457a:	0e 94 68 13 	call	0x26d0	; 0x26d0 <MCAL_DIO_u8SetPinValue>
	MCAL_DIO_u8SetPinValue(PortC, Pin5, Pin_High);
    457e:	82 e0       	ldi	r24, 0x02	; 2
    4580:	65 e0       	ldi	r22, 0x05	; 5
    4582:	41 e0       	ldi	r20, 0x01	; 1
    4584:	0e 94 68 13 	call	0x26d0	; 0x26d0 <MCAL_DIO_u8SetPinValue>
	MCAL_DIO_u8SetPinValue(PortC, Pin6, Pin_Low);
    4588:	82 e0       	ldi	r24, 0x02	; 2
    458a:	66 e0       	ldi	r22, 0x06	; 6
    458c:	40 e0       	ldi	r20, 0x00	; 0
    458e:	0e 94 68 13 	call	0x26d0	; 0x26d0 <MCAL_DIO_u8SetPinValue>
}
    4592:	0f 90       	pop	r0
    4594:	cf 91       	pop	r28
    4596:	df 91       	pop	r29
    4598:	08 95       	ret

0000459a <HAL_void_H_BridgeFront>:
void HAL_void_H_BridgeFront(u8 copy_u8_speed) {
    459a:	df 93       	push	r29
    459c:	cf 93       	push	r28
    459e:	0f 92       	push	r0
    45a0:	cd b7       	in	r28, 0x3d	; 61
    45a2:	de b7       	in	r29, 0x3e	; 62
    45a4:	89 83       	std	Y+1, r24	; 0x01
	MCAL_T1_FPWM_10bitRES(CHENNEL_B, copy_u8_speed);
    45a6:	81 e0       	ldi	r24, 0x01	; 1
    45a8:	69 81       	ldd	r22, Y+1	; 0x01
    45aa:	0e 94 1e 0b 	call	0x163c	; 0x163c <MCAL_T1_FPWM_10bitRES>
	MCAL_T1_FPWM_10bitRES(CHENNEL_A, copy_u8_speed);
    45ae:	80 e0       	ldi	r24, 0x00	; 0
    45b0:	69 81       	ldd	r22, Y+1	; 0x01
    45b2:	0e 94 1e 0b 	call	0x163c	; 0x163c <MCAL_T1_FPWM_10bitRES>
	MCAL_DIO_u8SetPinValue(PortD, Pin4, Pin_High);
    45b6:	83 e0       	ldi	r24, 0x03	; 3
    45b8:	64 e0       	ldi	r22, 0x04	; 4
    45ba:	41 e0       	ldi	r20, 0x01	; 1
    45bc:	0e 94 68 13 	call	0x26d0	; 0x26d0 <MCAL_DIO_u8SetPinValue>
	MCAL_DIO_u8SetPinValue(PortD, Pin5, Pin_High);
    45c0:	83 e0       	ldi	r24, 0x03	; 3
    45c2:	65 e0       	ldi	r22, 0x05	; 5
    45c4:	41 e0       	ldi	r20, 0x01	; 1
    45c6:	0e 94 68 13 	call	0x26d0	; 0x26d0 <MCAL_DIO_u8SetPinValue>
	MCAL_DIO_u8SetPinValue(PortC, Pin3, Pin_Low);
    45ca:	82 e0       	ldi	r24, 0x02	; 2
    45cc:	63 e0       	ldi	r22, 0x03	; 3
    45ce:	40 e0       	ldi	r20, 0x00	; 0
    45d0:	0e 94 68 13 	call	0x26d0	; 0x26d0 <MCAL_DIO_u8SetPinValue>
	MCAL_DIO_u8SetPinValue(PortC, Pin4, Pin_High);
    45d4:	82 e0       	ldi	r24, 0x02	; 2
    45d6:	64 e0       	ldi	r22, 0x04	; 4
    45d8:	41 e0       	ldi	r20, 0x01	; 1
    45da:	0e 94 68 13 	call	0x26d0	; 0x26d0 <MCAL_DIO_u8SetPinValue>
	MCAL_DIO_u8SetPinValue(PortC, Pin5, Pin_High);
    45de:	82 e0       	ldi	r24, 0x02	; 2
    45e0:	65 e0       	ldi	r22, 0x05	; 5
    45e2:	41 e0       	ldi	r20, 0x01	; 1
    45e4:	0e 94 68 13 	call	0x26d0	; 0x26d0 <MCAL_DIO_u8SetPinValue>
	MCAL_DIO_u8SetPinValue(PortC, Pin6, Pin_Low);
    45e8:	82 e0       	ldi	r24, 0x02	; 2
    45ea:	66 e0       	ldi	r22, 0x06	; 6
    45ec:	40 e0       	ldi	r20, 0x00	; 0
    45ee:	0e 94 68 13 	call	0x26d0	; 0x26d0 <MCAL_DIO_u8SetPinValue>
}
    45f2:	0f 90       	pop	r0
    45f4:	cf 91       	pop	r28
    45f6:	df 91       	pop	r29
    45f8:	08 95       	ret

000045fa <HAL_void_H_BridgeBack>:
void HAL_void_H_BridgeBack(u8 copy_u8_speed) {
    45fa:	df 93       	push	r29
    45fc:	cf 93       	push	r28
    45fe:	0f 92       	push	r0
    4600:	cd b7       	in	r28, 0x3d	; 61
    4602:	de b7       	in	r29, 0x3e	; 62
    4604:	89 83       	std	Y+1, r24	; 0x01
	MCAL_T1_FPWM_10bitRES(CHENNEL_B, copy_u8_speed);
    4606:	81 e0       	ldi	r24, 0x01	; 1
    4608:	69 81       	ldd	r22, Y+1	; 0x01
    460a:	0e 94 1e 0b 	call	0x163c	; 0x163c <MCAL_T1_FPWM_10bitRES>
	MCAL_T1_FPWM_10bitRES(CHENNEL_A, copy_u8_speed);
    460e:	80 e0       	ldi	r24, 0x00	; 0
    4610:	69 81       	ldd	r22, Y+1	; 0x01
    4612:	0e 94 1e 0b 	call	0x163c	; 0x163c <MCAL_T1_FPWM_10bitRES>
	MCAL_DIO_u8SetPinValue(PortC, Pin3, Pin_High);
    4616:	82 e0       	ldi	r24, 0x02	; 2
    4618:	63 e0       	ldi	r22, 0x03	; 3
    461a:	41 e0       	ldi	r20, 0x01	; 1
    461c:	0e 94 68 13 	call	0x26d0	; 0x26d0 <MCAL_DIO_u8SetPinValue>
	MCAL_DIO_u8SetPinValue(PortC, Pin4, Pin_Low);
    4620:	82 e0       	ldi	r24, 0x02	; 2
    4622:	64 e0       	ldi	r22, 0x04	; 4
    4624:	40 e0       	ldi	r20, 0x00	; 0
    4626:	0e 94 68 13 	call	0x26d0	; 0x26d0 <MCAL_DIO_u8SetPinValue>
	MCAL_DIO_u8SetPinValue(PortC, Pin5, Pin_Low);
    462a:	82 e0       	ldi	r24, 0x02	; 2
    462c:	65 e0       	ldi	r22, 0x05	; 5
    462e:	40 e0       	ldi	r20, 0x00	; 0
    4630:	0e 94 68 13 	call	0x26d0	; 0x26d0 <MCAL_DIO_u8SetPinValue>
	MCAL_DIO_u8SetPinValue(PortC, Pin6, Pin_High);
    4634:	82 e0       	ldi	r24, 0x02	; 2
    4636:	66 e0       	ldi	r22, 0x06	; 6
    4638:	41 e0       	ldi	r20, 0x01	; 1
    463a:	0e 94 68 13 	call	0x26d0	; 0x26d0 <MCAL_DIO_u8SetPinValue>
}
    463e:	0f 90       	pop	r0
    4640:	cf 91       	pop	r28
    4642:	df 91       	pop	r29
    4644:	08 95       	ret

00004646 <HAL_void_H_BridgeCCW>:
void HAL_void_H_BridgeCCW(u8 copy_u8_speed) {
    4646:	df 93       	push	r29
    4648:	cf 93       	push	r28
    464a:	0f 92       	push	r0
    464c:	cd b7       	in	r28, 0x3d	; 61
    464e:	de b7       	in	r29, 0x3e	; 62
    4650:	89 83       	std	Y+1, r24	; 0x01
	MCAL_T1_FPWM_10bitRES(CHENNEL_B, copy_u8_speed);
    4652:	81 e0       	ldi	r24, 0x01	; 1
    4654:	69 81       	ldd	r22, Y+1	; 0x01
    4656:	0e 94 1e 0b 	call	0x163c	; 0x163c <MCAL_T1_FPWM_10bitRES>
	MCAL_T1_FPWM_10bitRES(CHENNEL_A, copy_u8_speed);
    465a:	80 e0       	ldi	r24, 0x00	; 0
    465c:	69 81       	ldd	r22, Y+1	; 0x01
    465e:	0e 94 1e 0b 	call	0x163c	; 0x163c <MCAL_T1_FPWM_10bitRES>
	MCAL_DIO_u8SetPinValue(PortC, Pin3, Pin_Low);
    4662:	82 e0       	ldi	r24, 0x02	; 2
    4664:	63 e0       	ldi	r22, 0x03	; 3
    4666:	40 e0       	ldi	r20, 0x00	; 0
    4668:	0e 94 68 13 	call	0x26d0	; 0x26d0 <MCAL_DIO_u8SetPinValue>
	MCAL_DIO_u8SetPinValue(PortC, Pin4, Pin_High);
    466c:	82 e0       	ldi	r24, 0x02	; 2
    466e:	64 e0       	ldi	r22, 0x04	; 4
    4670:	41 e0       	ldi	r20, 0x01	; 1
    4672:	0e 94 68 13 	call	0x26d0	; 0x26d0 <MCAL_DIO_u8SetPinValue>
	MCAL_DIO_u8SetPinValue(PortC, Pin5, Pin_Low);
    4676:	82 e0       	ldi	r24, 0x02	; 2
    4678:	65 e0       	ldi	r22, 0x05	; 5
    467a:	40 e0       	ldi	r20, 0x00	; 0
    467c:	0e 94 68 13 	call	0x26d0	; 0x26d0 <MCAL_DIO_u8SetPinValue>
	MCAL_DIO_u8SetPinValue(PortC, Pin6, Pin_Low);
    4680:	82 e0       	ldi	r24, 0x02	; 2
    4682:	66 e0       	ldi	r22, 0x06	; 6
    4684:	40 e0       	ldi	r20, 0x00	; 0
    4686:	0e 94 68 13 	call	0x26d0	; 0x26d0 <MCAL_DIO_u8SetPinValue>
}
    468a:	0f 90       	pop	r0
    468c:	cf 91       	pop	r28
    468e:	df 91       	pop	r29
    4690:	08 95       	ret

00004692 <HAL_void_H_BridgeStop>:

void HAL_void_H_BridgeStop(u8 copy_u8_speed) {
    4692:	df 93       	push	r29
    4694:	cf 93       	push	r28
    4696:	0f 92       	push	r0
    4698:	cd b7       	in	r28, 0x3d	; 61
    469a:	de b7       	in	r29, 0x3e	; 62
    469c:	89 83       	std	Y+1, r24	; 0x01
	MCAL_T1_FPWM_10bitRES(CHENNEL_B, copy_u8_speed);
    469e:	81 e0       	ldi	r24, 0x01	; 1
    46a0:	69 81       	ldd	r22, Y+1	; 0x01
    46a2:	0e 94 1e 0b 	call	0x163c	; 0x163c <MCAL_T1_FPWM_10bitRES>
	MCAL_T1_FPWM_10bitRES(CHENNEL_A, copy_u8_speed);
    46a6:	80 e0       	ldi	r24, 0x00	; 0
    46a8:	69 81       	ldd	r22, Y+1	; 0x01
    46aa:	0e 94 1e 0b 	call	0x163c	; 0x163c <MCAL_T1_FPWM_10bitRES>
	MCAL_DIO_u8SetPinValue(PortC, Pin3, Pin_Low);
    46ae:	82 e0       	ldi	r24, 0x02	; 2
    46b0:	63 e0       	ldi	r22, 0x03	; 3
    46b2:	40 e0       	ldi	r20, 0x00	; 0
    46b4:	0e 94 68 13 	call	0x26d0	; 0x26d0 <MCAL_DIO_u8SetPinValue>
	MCAL_DIO_u8SetPinValue(PortC, Pin4, Pin_Low);
    46b8:	82 e0       	ldi	r24, 0x02	; 2
    46ba:	64 e0       	ldi	r22, 0x04	; 4
    46bc:	40 e0       	ldi	r20, 0x00	; 0
    46be:	0e 94 68 13 	call	0x26d0	; 0x26d0 <MCAL_DIO_u8SetPinValue>
	MCAL_DIO_u8SetPinValue(PortC, Pin5, Pin_Low);
    46c2:	82 e0       	ldi	r24, 0x02	; 2
    46c4:	65 e0       	ldi	r22, 0x05	; 5
    46c6:	40 e0       	ldi	r20, 0x00	; 0
    46c8:	0e 94 68 13 	call	0x26d0	; 0x26d0 <MCAL_DIO_u8SetPinValue>
	MCAL_DIO_u8SetPinValue(PortC, Pin6, Pin_Low);
    46cc:	82 e0       	ldi	r24, 0x02	; 2
    46ce:	66 e0       	ldi	r22, 0x06	; 6
    46d0:	40 e0       	ldi	r20, 0x00	; 0
    46d2:	0e 94 68 13 	call	0x26d0	; 0x26d0 <MCAL_DIO_u8SetPinValue>
}
    46d6:	0f 90       	pop	r0
    46d8:	cf 91       	pop	r28
    46da:	df 91       	pop	r29
    46dc:	08 95       	ret

000046de <HAL_Buzzer_u8BuzzerInit>:
 *      Author: Mohamed
 */

#include "Buzzer.h"

STD_Type HAL_Buzzer_u8BuzzerInit(u8 Loc_u8BuzzerPortID, u8 Loc_u8BuzzerPinID) {
    46de:	df 93       	push	r29
    46e0:	cf 93       	push	r28
    46e2:	00 d0       	rcall	.+0      	; 0x46e4 <HAL_Buzzer_u8BuzzerInit+0x6>
    46e4:	0f 92       	push	r0
    46e6:	cd b7       	in	r28, 0x3d	; 61
    46e8:	de b7       	in	r29, 0x3e	; 62
    46ea:	8a 83       	std	Y+2, r24	; 0x02
    46ec:	6b 83       	std	Y+3, r22	; 0x03
	u8 Loc_u8Return_Value = E_NOT_OK;
    46ee:	81 e0       	ldi	r24, 0x01	; 1
    46f0:	89 83       	std	Y+1, r24	; 0x01
	if (Loc_u8BuzzerPortID <= PortD && Loc_u8BuzzerPinID <= Num_Of_Pins) {
    46f2:	8a 81       	ldd	r24, Y+2	; 0x02
    46f4:	84 30       	cpi	r24, 0x04	; 4
    46f6:	48 f4       	brcc	.+18     	; 0x470a <HAL_Buzzer_u8BuzzerInit+0x2c>
    46f8:	8b 81       	ldd	r24, Y+3	; 0x03
    46fa:	88 30       	cpi	r24, 0x08	; 8
    46fc:	30 f4       	brcc	.+12     	; 0x470a <HAL_Buzzer_u8BuzzerInit+0x2c>
		Loc_u8Return_Value=Loc_u8Return_Value = MCAL_DIO_u8SetPinDirection(Loc_u8BuzzerPortID,
    46fe:	8a 81       	ldd	r24, Y+2	; 0x02
    4700:	6b 81       	ldd	r22, Y+3	; 0x03
    4702:	41 e0       	ldi	r20, 0x01	; 1
    4704:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <MCAL_DIO_u8SetPinDirection>
    4708:	89 83       	std	Y+1, r24	; 0x01
				Loc_u8BuzzerPinID, Pin_High);
	} else {
		//Do Nothing
	}
	return Loc_u8Return_Value;
    470a:	89 81       	ldd	r24, Y+1	; 0x01
}
    470c:	0f 90       	pop	r0
    470e:	0f 90       	pop	r0
    4710:	0f 90       	pop	r0
    4712:	cf 91       	pop	r28
    4714:	df 91       	pop	r29
    4716:	08 95       	ret

00004718 <HAL_Buzzer_u8BuzzerMode>:

STD_Type HAL_Buzzer_u8BuzzerMode(u8 Loc_u8BuzzerPortID, u8 Loc_u8BuzzerPinID,
		u8 Loc_u8BuzzerMode) {
    4718:	df 93       	push	r29
    471a:	cf 93       	push	r28
    471c:	00 d0       	rcall	.+0      	; 0x471e <HAL_Buzzer_u8BuzzerMode+0x6>
    471e:	00 d0       	rcall	.+0      	; 0x4720 <HAL_Buzzer_u8BuzzerMode+0x8>
    4720:	cd b7       	in	r28, 0x3d	; 61
    4722:	de b7       	in	r29, 0x3e	; 62
    4724:	8a 83       	std	Y+2, r24	; 0x02
    4726:	6b 83       	std	Y+3, r22	; 0x03
    4728:	4c 83       	std	Y+4, r20	; 0x04
	u8 Loc_u8Return_Value = E_NOT_OK;
    472a:	81 e0       	ldi	r24, 0x01	; 1
    472c:	89 83       	std	Y+1, r24	; 0x01
	if (Loc_u8BuzzerPortID <= PortD && Loc_u8BuzzerPinID <= Num_Of_Pins
    472e:	8a 81       	ldd	r24, Y+2	; 0x02
    4730:	84 30       	cpi	r24, 0x04	; 4
    4732:	10 f5       	brcc	.+68     	; 0x4778 <HAL_Buzzer_u8BuzzerMode+0x60>
    4734:	8b 81       	ldd	r24, Y+3	; 0x03
    4736:	88 30       	cpi	r24, 0x08	; 8
    4738:	f8 f4       	brcc	.+62     	; 0x4778 <HAL_Buzzer_u8BuzzerMode+0x60>
    473a:	8c 81       	ldd	r24, Y+4	; 0x04
    473c:	83 30       	cpi	r24, 0x03	; 3
    473e:	e0 f4       	brcc	.+56     	; 0x4778 <HAL_Buzzer_u8BuzzerMode+0x60>
			&& Loc_u8BuzzerMode <= Buzzer_TOG) {
		if (Loc_u8BuzzerMode == Buzzer_ON) {
    4740:	8c 81       	ldd	r24, Y+4	; 0x04
    4742:	81 30       	cpi	r24, 0x01	; 1
    4744:	39 f4       	brne	.+14     	; 0x4754 <HAL_Buzzer_u8BuzzerMode+0x3c>
			Loc_u8Return_Value=MCAL_DIO_u8SetPinValue(Loc_u8BuzzerPortID, Loc_u8BuzzerPinID, Pin_High);
    4746:	8a 81       	ldd	r24, Y+2	; 0x02
    4748:	6b 81       	ldd	r22, Y+3	; 0x03
    474a:	41 e0       	ldi	r20, 0x01	; 1
    474c:	0e 94 68 13 	call	0x26d0	; 0x26d0 <MCAL_DIO_u8SetPinValue>
    4750:	89 83       	std	Y+1, r24	; 0x01
    4752:	12 c0       	rjmp	.+36     	; 0x4778 <HAL_Buzzer_u8BuzzerMode+0x60>
		} else if (Loc_u8BuzzerMode == Buzzer_OFF) {
    4754:	8c 81       	ldd	r24, Y+4	; 0x04
    4756:	88 23       	and	r24, r24
    4758:	39 f4       	brne	.+14     	; 0x4768 <HAL_Buzzer_u8BuzzerMode+0x50>
			Loc_u8Return_Value=MCAL_DIO_u8SetPinValue(Loc_u8BuzzerPortID, Loc_u8BuzzerPinID, Pin_Low);
    475a:	8a 81       	ldd	r24, Y+2	; 0x02
    475c:	6b 81       	ldd	r22, Y+3	; 0x03
    475e:	40 e0       	ldi	r20, 0x00	; 0
    4760:	0e 94 68 13 	call	0x26d0	; 0x26d0 <MCAL_DIO_u8SetPinValue>
    4764:	89 83       	std	Y+1, r24	; 0x01
    4766:	08 c0       	rjmp	.+16     	; 0x4778 <HAL_Buzzer_u8BuzzerMode+0x60>
		} else if (Loc_u8BuzzerMode == Buzzer_TOG) {
    4768:	8c 81       	ldd	r24, Y+4	; 0x04
    476a:	82 30       	cpi	r24, 0x02	; 2
    476c:	29 f4       	brne	.+10     	; 0x4778 <HAL_Buzzer_u8BuzzerMode+0x60>
			Loc_u8Return_Value=MCAL_DIO_u8TogglePinValue(Loc_u8BuzzerPortID,Loc_u8BuzzerPinID);
    476e:	8a 81       	ldd	r24, Y+2	; 0x02
    4770:	6b 81       	ldd	r22, Y+3	; 0x03
    4772:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <MCAL_DIO_u8TogglePinValue>
    4776:	89 83       	std	Y+1, r24	; 0x01
			//Do Nothing
		}
	} else {
		//Do Nothing
	}
	return Loc_u8Return_Value;
    4778:	89 81       	ldd	r24, Y+1	; 0x01
}
    477a:	0f 90       	pop	r0
    477c:	0f 90       	pop	r0
    477e:	0f 90       	pop	r0
    4780:	0f 90       	pop	r0
    4782:	cf 91       	pop	r28
    4784:	df 91       	pop	r29
    4786:	08 95       	ret

00004788 <APP_Autonomous_Car_voidInit>:
//#include "../../HAL/LED/LED.h"
//#include "../../HAL/LCD/LCD.h"
//#include "../../HAL/Buzzer/Buzzer.h"
//#include "Autonomous_Car.h"
//volatile f32 Glob_f32AnglesDistance[2];
void APP_Autonomous_Car_voidInit(void) {
    4788:	df 93       	push	r29
    478a:	cf 93       	push	r28
    478c:	cd b7       	in	r28, 0x3d	; 61
    478e:	de b7       	in	r29, 0x3e	; 62
	//Init Servo Motor
//	HAL_SM_voidSMInit();
	//Init UltraSonic Sensor
//	HAL_Ultrasonic_Sensor_voidInit();
	//Init H_Bridge
	HAL_void_H_BridgeInit();
    4790:	0e 94 8c 22 	call	0x4518	; 0x4518 <HAL_void_H_BridgeInit>
	//Leds
//	HAL_LED_u8LedInit(PortA, Pin0);
//	HAL_LED_u8LedInit(PortA, Pin1);
}
    4794:	cf 91       	pop	r28
    4796:	df 91       	pop	r29
    4798:	08 95       	ret

0000479a <APP_Autonomous_Car_voidApp>:
void APP_Autonomous_Car_voidApp(void) {
    479a:	df 93       	push	r29
    479c:	cf 93       	push	r28
    479e:	cd b7       	in	r28, 0x3d	; 61
    47a0:	de b7       	in	r29, 0x3e	; 62
	//Start
	HAL_void_H_BridgeFront(99);
    47a2:	83 e6       	ldi	r24, 0x63	; 99
    47a4:	0e 94 cd 22 	call	0x459a	; 0x459a <HAL_void_H_BridgeFront>
//			HAL_LED_u8LedMode(PortA, Pin1, Pin_Low);
//
//		}
////		HAL_void_H_BridgeFront(90);
//	}
}
    47a8:	cf 91       	pop	r28
    47aa:	df 91       	pop	r29
    47ac:	08 95       	ret

000047ae <main>:
 *      Author: Mohamed
 */

#include "Autonomous_Car/Autonomous_Car.h"
//#include "../HAL/Servo Motor/Servo_Motor.h"
int main(void) {
    47ae:	df 93       	push	r29
    47b0:	cf 93       	push	r28
    47b2:	cd b7       	in	r28, 0x3d	; 61
    47b4:	de b7       	in	r29, 0x3e	; 62
	APP_Autonomous_Car_voidInit();
    47b6:	0e 94 c4 23 	call	0x4788	; 0x4788 <APP_Autonomous_Car_voidInit>
	APP_Autonomous_Car_voidApp();
    47ba:	0e 94 cd 23 	call	0x479a	; 0x479a <APP_Autonomous_Car_voidApp>
    47be:	80 e0       	ldi	r24, 0x00	; 0
    47c0:	90 e0       	ldi	r25, 0x00	; 0
//				}
//
//			}
//		}
//	}
}
    47c2:	cf 91       	pop	r28
    47c4:	df 91       	pop	r29
    47c6:	08 95       	ret

000047c8 <__prologue_saves__>:
    47c8:	2f 92       	push	r2
    47ca:	3f 92       	push	r3
    47cc:	4f 92       	push	r4
    47ce:	5f 92       	push	r5
    47d0:	6f 92       	push	r6
    47d2:	7f 92       	push	r7
    47d4:	8f 92       	push	r8
    47d6:	9f 92       	push	r9
    47d8:	af 92       	push	r10
    47da:	bf 92       	push	r11
    47dc:	cf 92       	push	r12
    47de:	df 92       	push	r13
    47e0:	ef 92       	push	r14
    47e2:	ff 92       	push	r15
    47e4:	0f 93       	push	r16
    47e6:	1f 93       	push	r17
    47e8:	cf 93       	push	r28
    47ea:	df 93       	push	r29
    47ec:	cd b7       	in	r28, 0x3d	; 61
    47ee:	de b7       	in	r29, 0x3e	; 62
    47f0:	ca 1b       	sub	r28, r26
    47f2:	db 0b       	sbc	r29, r27
    47f4:	0f b6       	in	r0, 0x3f	; 63
    47f6:	f8 94       	cli
    47f8:	de bf       	out	0x3e, r29	; 62
    47fa:	0f be       	out	0x3f, r0	; 63
    47fc:	cd bf       	out	0x3d, r28	; 61
    47fe:	09 94       	ijmp

00004800 <__epilogue_restores__>:
    4800:	2a 88       	ldd	r2, Y+18	; 0x12
    4802:	39 88       	ldd	r3, Y+17	; 0x11
    4804:	48 88       	ldd	r4, Y+16	; 0x10
    4806:	5f 84       	ldd	r5, Y+15	; 0x0f
    4808:	6e 84       	ldd	r6, Y+14	; 0x0e
    480a:	7d 84       	ldd	r7, Y+13	; 0x0d
    480c:	8c 84       	ldd	r8, Y+12	; 0x0c
    480e:	9b 84       	ldd	r9, Y+11	; 0x0b
    4810:	aa 84       	ldd	r10, Y+10	; 0x0a
    4812:	b9 84       	ldd	r11, Y+9	; 0x09
    4814:	c8 84       	ldd	r12, Y+8	; 0x08
    4816:	df 80       	ldd	r13, Y+7	; 0x07
    4818:	ee 80       	ldd	r14, Y+6	; 0x06
    481a:	fd 80       	ldd	r15, Y+5	; 0x05
    481c:	0c 81       	ldd	r16, Y+4	; 0x04
    481e:	1b 81       	ldd	r17, Y+3	; 0x03
    4820:	aa 81       	ldd	r26, Y+2	; 0x02
    4822:	b9 81       	ldd	r27, Y+1	; 0x01
    4824:	ce 0f       	add	r28, r30
    4826:	d1 1d       	adc	r29, r1
    4828:	0f b6       	in	r0, 0x3f	; 63
    482a:	f8 94       	cli
    482c:	de bf       	out	0x3e, r29	; 62
    482e:	0f be       	out	0x3f, r0	; 63
    4830:	cd bf       	out	0x3d, r28	; 61
    4832:	ed 01       	movw	r28, r26
    4834:	08 95       	ret

00004836 <itoa>:
    4836:	fb 01       	movw	r30, r22
    4838:	9f 01       	movw	r18, r30
    483a:	e8 94       	clt
    483c:	42 30       	cpi	r20, 0x02	; 2
    483e:	c4 f0       	brlt	.+48     	; 0x4870 <itoa+0x3a>
    4840:	45 32       	cpi	r20, 0x25	; 37
    4842:	b4 f4       	brge	.+44     	; 0x4870 <itoa+0x3a>
    4844:	4a 30       	cpi	r20, 0x0A	; 10
    4846:	29 f4       	brne	.+10     	; 0x4852 <itoa+0x1c>
    4848:	97 fb       	bst	r25, 7
    484a:	1e f4       	brtc	.+6      	; 0x4852 <itoa+0x1c>
    484c:	90 95       	com	r25
    484e:	81 95       	neg	r24
    4850:	9f 4f       	sbci	r25, 0xFF	; 255
    4852:	64 2f       	mov	r22, r20
    4854:	77 27       	eor	r23, r23
    4856:	0e 94 4c 24 	call	0x4898	; 0x4898 <__udivmodhi4>
    485a:	80 5d       	subi	r24, 0xD0	; 208
    485c:	8a 33       	cpi	r24, 0x3A	; 58
    485e:	0c f0       	brlt	.+2      	; 0x4862 <itoa+0x2c>
    4860:	89 5d       	subi	r24, 0xD9	; 217
    4862:	81 93       	st	Z+, r24
    4864:	cb 01       	movw	r24, r22
    4866:	00 97       	sbiw	r24, 0x00	; 0
    4868:	a1 f7       	brne	.-24     	; 0x4852 <itoa+0x1c>
    486a:	16 f4       	brtc	.+4      	; 0x4870 <itoa+0x3a>
    486c:	5d e2       	ldi	r21, 0x2D	; 45
    486e:	51 93       	st	Z+, r21
    4870:	10 82       	st	Z, r1
    4872:	c9 01       	movw	r24, r18
    4874:	0c 94 3c 24 	jmp	0x4878	; 0x4878 <strrev>

00004878 <strrev>:
    4878:	dc 01       	movw	r26, r24
    487a:	fc 01       	movw	r30, r24
    487c:	67 2f       	mov	r22, r23
    487e:	71 91       	ld	r23, Z+
    4880:	77 23       	and	r23, r23
    4882:	e1 f7       	brne	.-8      	; 0x487c <strrev+0x4>
    4884:	32 97       	sbiw	r30, 0x02	; 2
    4886:	04 c0       	rjmp	.+8      	; 0x4890 <strrev+0x18>
    4888:	7c 91       	ld	r23, X
    488a:	6d 93       	st	X+, r22
    488c:	70 83       	st	Z, r23
    488e:	62 91       	ld	r22, -Z
    4890:	ae 17       	cp	r26, r30
    4892:	bf 07       	cpc	r27, r31
    4894:	c8 f3       	brcs	.-14     	; 0x4888 <strrev+0x10>
    4896:	08 95       	ret

00004898 <__udivmodhi4>:
    4898:	aa 1b       	sub	r26, r26
    489a:	bb 1b       	sub	r27, r27
    489c:	51 e1       	ldi	r21, 0x11	; 17
    489e:	07 c0       	rjmp	.+14     	; 0x48ae <__udivmodhi4_ep>

000048a0 <__udivmodhi4_loop>:
    48a0:	aa 1f       	adc	r26, r26
    48a2:	bb 1f       	adc	r27, r27
    48a4:	a6 17       	cp	r26, r22
    48a6:	b7 07       	cpc	r27, r23
    48a8:	10 f0       	brcs	.+4      	; 0x48ae <__udivmodhi4_ep>
    48aa:	a6 1b       	sub	r26, r22
    48ac:	b7 0b       	sbc	r27, r23

000048ae <__udivmodhi4_ep>:
    48ae:	88 1f       	adc	r24, r24
    48b0:	99 1f       	adc	r25, r25
    48b2:	5a 95       	dec	r21
    48b4:	a9 f7       	brne	.-22     	; 0x48a0 <__udivmodhi4_loop>
    48b6:	80 95       	com	r24
    48b8:	90 95       	com	r25
    48ba:	bc 01       	movw	r22, r24
    48bc:	cd 01       	movw	r24, r26
    48be:	08 95       	ret

000048c0 <_exit>:
    48c0:	f8 94       	cli

000048c2 <__stop_program>:
    48c2:	ff cf       	rjmp	.-2      	; 0x48c2 <__stop_program>
