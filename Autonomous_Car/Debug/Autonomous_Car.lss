
Autonomous_Car.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000058ba  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000118  00800060  000058ba  0000594e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001d  00800178  00800178  00005a66  2**0
                  ALLOC
  3 .stab         00007a70  00000000  00000000  00005a68  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00003593  00000000  00000000  0000d4d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001e0  00000000  00000000  00010a6b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000232  00000000  00000000  00010c4b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002891  00000000  00000000  00010e7d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001628  00000000  00000000  0001370e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000013de  00000000  00000000  00014d36  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000200  00000000  00000000  00016114  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000030f  00000000  00000000  00016314  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a56  00000000  00000000  00016623  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00017079  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 5e 18 	jmp	0x30bc	; 0x30bc <__vector_1>
       8:	0c 94 91 18 	jmp	0x3122	; 0x3122 <__vector_2>
       c:	0c 94 c4 18 	jmp	0x3188	; 0x3188 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 9d 10 	jmp	0x213a	; 0x213a <__vector_6>
      1c:	0c 94 37 10 	jmp	0x206e	; 0x206e <__vector_7>
      20:	0c 94 6a 10 	jmp	0x20d4	; 0x20d4 <__vector_8>
      24:	0c 94 04 10 	jmp	0x2008	; 0x2008 <__vector_9>
      28:	0c 94 8a 14 	jmp	0x2914	; 0x2914 <__vector_10>
      2c:	0c 94 57 14 	jmp	0x28ae	; 0x28ae <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 0a 1f 	jmp	0x3e14	; 0x3e14 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea eb       	ldi	r30, 0xBA	; 186
      68:	f8 e5       	ldi	r31, 0x58	; 88
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 37       	cpi	r26, 0x78	; 120
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a8 e7       	ldi	r26, 0x78	; 120
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 39       	cpi	r26, 0x95	; 149
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 6b 2b 	call	0x56d6	; 0x56d6 <main>
      8a:	0c 94 5b 2c 	jmp	0x58b6	; 0x58b6 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 df 2b 	jmp	0x57be	; 0x57be <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 fb 2b 	jmp	0x57f6	; 0x57f6 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 eb 2b 	jmp	0x57d6	; 0x57d6 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 07 2c 	jmp	0x580e	; 0x580e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 eb 2b 	jmp	0x57d6	; 0x57d6 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 07 2c 	jmp	0x580e	; 0x580e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 df 2b 	jmp	0x57be	; 0x57be <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 fb 2b 	jmp	0x57f6	; 0x57f6 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 e7 2b 	jmp	0x57ce	; 0x57ce <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 03 2c 	jmp	0x5806	; 0x5806 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 eb 2b 	jmp	0x57d6	; 0x57d6 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 07 2c 	jmp	0x580e	; 0x580e <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 eb 2b 	jmp	0x57d6	; 0x57d6 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 07 2c 	jmp	0x580e	; 0x580e <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 eb 2b 	jmp	0x57d6	; 0x57d6 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 07 2c 	jmp	0x580e	; 0x580e <__epilogue_restores__+0x18>

000008aa <__lesf2>:
     8aa:	a8 e1       	ldi	r26, 0x18	; 24
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 eb 2b 	jmp	0x57d6	; 0x57d6 <__prologue_saves__+0x18>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	2d 83       	std	Y+5, r18	; 0x05
     8c0:	3e 83       	std	Y+6, r19	; 0x06
     8c2:	4f 83       	std	Y+7, r20	; 0x07
     8c4:	58 87       	std	Y+8, r21	; 0x08
     8c6:	89 e0       	ldi	r24, 0x09	; 9
     8c8:	e8 2e       	mov	r14, r24
     8ca:	f1 2c       	mov	r15, r1
     8cc:	ec 0e       	add	r14, r28
     8ce:	fd 1e       	adc	r15, r29
     8d0:	ce 01       	movw	r24, r28
     8d2:	01 96       	adiw	r24, 0x01	; 1
     8d4:	b7 01       	movw	r22, r14
     8d6:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     8da:	8e 01       	movw	r16, r28
     8dc:	0f 5e       	subi	r16, 0xEF	; 239
     8de:	1f 4f       	sbci	r17, 0xFF	; 255
     8e0:	ce 01       	movw	r24, r28
     8e2:	05 96       	adiw	r24, 0x05	; 5
     8e4:	b8 01       	movw	r22, r16
     8e6:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     8ea:	89 85       	ldd	r24, Y+9	; 0x09
     8ec:	82 30       	cpi	r24, 0x02	; 2
     8ee:	40 f0       	brcs	.+16     	; 0x900 <__lesf2+0x56>
     8f0:	89 89       	ldd	r24, Y+17	; 0x11
     8f2:	82 30       	cpi	r24, 0x02	; 2
     8f4:	28 f0       	brcs	.+10     	; 0x900 <__lesf2+0x56>
     8f6:	c7 01       	movw	r24, r14
     8f8:	b8 01       	movw	r22, r16
     8fa:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fpcmp_parts_f>
     8fe:	01 c0       	rjmp	.+2      	; 0x902 <__lesf2+0x58>
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	68 96       	adiw	r28, 0x18	; 24
     904:	e6 e0       	ldi	r30, 0x06	; 6
     906:	0c 94 07 2c 	jmp	0x580e	; 0x580e <__epilogue_restores__+0x18>

0000090a <__floatsisf>:
     90a:	a8 e0       	ldi	r26, 0x08	; 8
     90c:	b0 e0       	ldi	r27, 0x00	; 0
     90e:	eb e8       	ldi	r30, 0x8B	; 139
     910:	f4 e0       	ldi	r31, 0x04	; 4
     912:	0c 94 e8 2b 	jmp	0x57d0	; 0x57d0 <__prologue_saves__+0x12>
     916:	9b 01       	movw	r18, r22
     918:	ac 01       	movw	r20, r24
     91a:	83 e0       	ldi	r24, 0x03	; 3
     91c:	89 83       	std	Y+1, r24	; 0x01
     91e:	da 01       	movw	r26, r20
     920:	c9 01       	movw	r24, r18
     922:	88 27       	eor	r24, r24
     924:	b7 fd       	sbrc	r27, 7
     926:	83 95       	inc	r24
     928:	99 27       	eor	r25, r25
     92a:	aa 27       	eor	r26, r26
     92c:	bb 27       	eor	r27, r27
     92e:	b8 2e       	mov	r11, r24
     930:	21 15       	cp	r18, r1
     932:	31 05       	cpc	r19, r1
     934:	41 05       	cpc	r20, r1
     936:	51 05       	cpc	r21, r1
     938:	19 f4       	brne	.+6      	; 0x940 <__floatsisf+0x36>
     93a:	82 e0       	ldi	r24, 0x02	; 2
     93c:	89 83       	std	Y+1, r24	; 0x01
     93e:	3a c0       	rjmp	.+116    	; 0x9b4 <__floatsisf+0xaa>
     940:	88 23       	and	r24, r24
     942:	a9 f0       	breq	.+42     	; 0x96e <__floatsisf+0x64>
     944:	20 30       	cpi	r18, 0x00	; 0
     946:	80 e0       	ldi	r24, 0x00	; 0
     948:	38 07       	cpc	r19, r24
     94a:	80 e0       	ldi	r24, 0x00	; 0
     94c:	48 07       	cpc	r20, r24
     94e:	80 e8       	ldi	r24, 0x80	; 128
     950:	58 07       	cpc	r21, r24
     952:	29 f4       	brne	.+10     	; 0x95e <__floatsisf+0x54>
     954:	60 e0       	ldi	r22, 0x00	; 0
     956:	70 e0       	ldi	r23, 0x00	; 0
     958:	80 e0       	ldi	r24, 0x00	; 0
     95a:	9f ec       	ldi	r25, 0xCF	; 207
     95c:	30 c0       	rjmp	.+96     	; 0x9be <__floatsisf+0xb4>
     95e:	ee 24       	eor	r14, r14
     960:	ff 24       	eor	r15, r15
     962:	87 01       	movw	r16, r14
     964:	e2 1a       	sub	r14, r18
     966:	f3 0a       	sbc	r15, r19
     968:	04 0b       	sbc	r16, r20
     96a:	15 0b       	sbc	r17, r21
     96c:	02 c0       	rjmp	.+4      	; 0x972 <__floatsisf+0x68>
     96e:	79 01       	movw	r14, r18
     970:	8a 01       	movw	r16, r20
     972:	8e e1       	ldi	r24, 0x1E	; 30
     974:	c8 2e       	mov	r12, r24
     976:	d1 2c       	mov	r13, r1
     978:	dc 82       	std	Y+4, r13	; 0x04
     97a:	cb 82       	std	Y+3, r12	; 0x03
     97c:	ed 82       	std	Y+5, r14	; 0x05
     97e:	fe 82       	std	Y+6, r15	; 0x06
     980:	0f 83       	std	Y+7, r16	; 0x07
     982:	18 87       	std	Y+8, r17	; 0x08
     984:	c8 01       	movw	r24, r16
     986:	b7 01       	movw	r22, r14
     988:	0e 94 b0 05 	call	0xb60	; 0xb60 <__clzsi2>
     98c:	01 97       	sbiw	r24, 0x01	; 1
     98e:	18 16       	cp	r1, r24
     990:	19 06       	cpc	r1, r25
     992:	84 f4       	brge	.+32     	; 0x9b4 <__floatsisf+0xaa>
     994:	08 2e       	mov	r0, r24
     996:	04 c0       	rjmp	.+8      	; 0x9a0 <__floatsisf+0x96>
     998:	ee 0c       	add	r14, r14
     99a:	ff 1c       	adc	r15, r15
     99c:	00 1f       	adc	r16, r16
     99e:	11 1f       	adc	r17, r17
     9a0:	0a 94       	dec	r0
     9a2:	d2 f7       	brpl	.-12     	; 0x998 <__floatsisf+0x8e>
     9a4:	ed 82       	std	Y+5, r14	; 0x05
     9a6:	fe 82       	std	Y+6, r15	; 0x06
     9a8:	0f 83       	std	Y+7, r16	; 0x07
     9aa:	18 87       	std	Y+8, r17	; 0x08
     9ac:	c8 1a       	sub	r12, r24
     9ae:	d9 0a       	sbc	r13, r25
     9b0:	dc 82       	std	Y+4, r13	; 0x04
     9b2:	cb 82       	std	Y+3, r12	; 0x03
     9b4:	ba 82       	std	Y+2, r11	; 0x02
     9b6:	ce 01       	movw	r24, r28
     9b8:	01 96       	adiw	r24, 0x01	; 1
     9ba:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     9be:	28 96       	adiw	r28, 0x08	; 8
     9c0:	e9 e0       	ldi	r30, 0x09	; 9
     9c2:	0c 94 04 2c 	jmp	0x5808	; 0x5808 <__epilogue_restores__+0x12>

000009c6 <__fixsfsi>:
     9c6:	ac e0       	ldi	r26, 0x0C	; 12
     9c8:	b0 e0       	ldi	r27, 0x00	; 0
     9ca:	e9 ee       	ldi	r30, 0xE9	; 233
     9cc:	f4 e0       	ldi	r31, 0x04	; 4
     9ce:	0c 94 ef 2b 	jmp	0x57de	; 0x57de <__prologue_saves__+0x20>
     9d2:	69 83       	std	Y+1, r22	; 0x01
     9d4:	7a 83       	std	Y+2, r23	; 0x02
     9d6:	8b 83       	std	Y+3, r24	; 0x03
     9d8:	9c 83       	std	Y+4, r25	; 0x04
     9da:	ce 01       	movw	r24, r28
     9dc:	01 96       	adiw	r24, 0x01	; 1
     9de:	be 01       	movw	r22, r28
     9e0:	6b 5f       	subi	r22, 0xFB	; 251
     9e2:	7f 4f       	sbci	r23, 0xFF	; 255
     9e4:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     9e8:	8d 81       	ldd	r24, Y+5	; 0x05
     9ea:	82 30       	cpi	r24, 0x02	; 2
     9ec:	61 f1       	breq	.+88     	; 0xa46 <__fixsfsi+0x80>
     9ee:	82 30       	cpi	r24, 0x02	; 2
     9f0:	50 f1       	brcs	.+84     	; 0xa46 <__fixsfsi+0x80>
     9f2:	84 30       	cpi	r24, 0x04	; 4
     9f4:	21 f4       	brne	.+8      	; 0x9fe <__fixsfsi+0x38>
     9f6:	8e 81       	ldd	r24, Y+6	; 0x06
     9f8:	88 23       	and	r24, r24
     9fa:	51 f1       	breq	.+84     	; 0xa50 <__fixsfsi+0x8a>
     9fc:	2e c0       	rjmp	.+92     	; 0xa5a <__fixsfsi+0x94>
     9fe:	2f 81       	ldd	r18, Y+7	; 0x07
     a00:	38 85       	ldd	r19, Y+8	; 0x08
     a02:	37 fd       	sbrc	r19, 7
     a04:	20 c0       	rjmp	.+64     	; 0xa46 <__fixsfsi+0x80>
     a06:	6e 81       	ldd	r22, Y+6	; 0x06
     a08:	2f 31       	cpi	r18, 0x1F	; 31
     a0a:	31 05       	cpc	r19, r1
     a0c:	1c f0       	brlt	.+6      	; 0xa14 <__fixsfsi+0x4e>
     a0e:	66 23       	and	r22, r22
     a10:	f9 f0       	breq	.+62     	; 0xa50 <__fixsfsi+0x8a>
     a12:	23 c0       	rjmp	.+70     	; 0xa5a <__fixsfsi+0x94>
     a14:	8e e1       	ldi	r24, 0x1E	; 30
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	82 1b       	sub	r24, r18
     a1a:	93 0b       	sbc	r25, r19
     a1c:	29 85       	ldd	r18, Y+9	; 0x09
     a1e:	3a 85       	ldd	r19, Y+10	; 0x0a
     a20:	4b 85       	ldd	r20, Y+11	; 0x0b
     a22:	5c 85       	ldd	r21, Y+12	; 0x0c
     a24:	04 c0       	rjmp	.+8      	; 0xa2e <__fixsfsi+0x68>
     a26:	56 95       	lsr	r21
     a28:	47 95       	ror	r20
     a2a:	37 95       	ror	r19
     a2c:	27 95       	ror	r18
     a2e:	8a 95       	dec	r24
     a30:	d2 f7       	brpl	.-12     	; 0xa26 <__fixsfsi+0x60>
     a32:	66 23       	and	r22, r22
     a34:	b1 f0       	breq	.+44     	; 0xa62 <__fixsfsi+0x9c>
     a36:	50 95       	com	r21
     a38:	40 95       	com	r20
     a3a:	30 95       	com	r19
     a3c:	21 95       	neg	r18
     a3e:	3f 4f       	sbci	r19, 0xFF	; 255
     a40:	4f 4f       	sbci	r20, 0xFF	; 255
     a42:	5f 4f       	sbci	r21, 0xFF	; 255
     a44:	0e c0       	rjmp	.+28     	; 0xa62 <__fixsfsi+0x9c>
     a46:	20 e0       	ldi	r18, 0x00	; 0
     a48:	30 e0       	ldi	r19, 0x00	; 0
     a4a:	40 e0       	ldi	r20, 0x00	; 0
     a4c:	50 e0       	ldi	r21, 0x00	; 0
     a4e:	09 c0       	rjmp	.+18     	; 0xa62 <__fixsfsi+0x9c>
     a50:	2f ef       	ldi	r18, 0xFF	; 255
     a52:	3f ef       	ldi	r19, 0xFF	; 255
     a54:	4f ef       	ldi	r20, 0xFF	; 255
     a56:	5f e7       	ldi	r21, 0x7F	; 127
     a58:	04 c0       	rjmp	.+8      	; 0xa62 <__fixsfsi+0x9c>
     a5a:	20 e0       	ldi	r18, 0x00	; 0
     a5c:	30 e0       	ldi	r19, 0x00	; 0
     a5e:	40 e0       	ldi	r20, 0x00	; 0
     a60:	50 e8       	ldi	r21, 0x80	; 128
     a62:	b9 01       	movw	r22, r18
     a64:	ca 01       	movw	r24, r20
     a66:	2c 96       	adiw	r28, 0x0c	; 12
     a68:	e2 e0       	ldi	r30, 0x02	; 2
     a6a:	0c 94 0b 2c 	jmp	0x5816	; 0x5816 <__epilogue_restores__+0x20>

00000a6e <__floatunsisf>:
     a6e:	a8 e0       	ldi	r26, 0x08	; 8
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	ed e3       	ldi	r30, 0x3D	; 61
     a74:	f5 e0       	ldi	r31, 0x05	; 5
     a76:	0c 94 e7 2b 	jmp	0x57ce	; 0x57ce <__prologue_saves__+0x10>
     a7a:	7b 01       	movw	r14, r22
     a7c:	8c 01       	movw	r16, r24
     a7e:	61 15       	cp	r22, r1
     a80:	71 05       	cpc	r23, r1
     a82:	81 05       	cpc	r24, r1
     a84:	91 05       	cpc	r25, r1
     a86:	19 f4       	brne	.+6      	; 0xa8e <__floatunsisf+0x20>
     a88:	82 e0       	ldi	r24, 0x02	; 2
     a8a:	89 83       	std	Y+1, r24	; 0x01
     a8c:	60 c0       	rjmp	.+192    	; 0xb4e <__floatunsisf+0xe0>
     a8e:	83 e0       	ldi	r24, 0x03	; 3
     a90:	89 83       	std	Y+1, r24	; 0x01
     a92:	8e e1       	ldi	r24, 0x1E	; 30
     a94:	c8 2e       	mov	r12, r24
     a96:	d1 2c       	mov	r13, r1
     a98:	dc 82       	std	Y+4, r13	; 0x04
     a9a:	cb 82       	std	Y+3, r12	; 0x03
     a9c:	ed 82       	std	Y+5, r14	; 0x05
     a9e:	fe 82       	std	Y+6, r15	; 0x06
     aa0:	0f 83       	std	Y+7, r16	; 0x07
     aa2:	18 87       	std	Y+8, r17	; 0x08
     aa4:	c8 01       	movw	r24, r16
     aa6:	b7 01       	movw	r22, r14
     aa8:	0e 94 b0 05 	call	0xb60	; 0xb60 <__clzsi2>
     aac:	fc 01       	movw	r30, r24
     aae:	31 97       	sbiw	r30, 0x01	; 1
     ab0:	f7 ff       	sbrs	r31, 7
     ab2:	3b c0       	rjmp	.+118    	; 0xb2a <__floatunsisf+0xbc>
     ab4:	22 27       	eor	r18, r18
     ab6:	33 27       	eor	r19, r19
     ab8:	2e 1b       	sub	r18, r30
     aba:	3f 0b       	sbc	r19, r31
     abc:	57 01       	movw	r10, r14
     abe:	68 01       	movw	r12, r16
     ac0:	02 2e       	mov	r0, r18
     ac2:	04 c0       	rjmp	.+8      	; 0xacc <__floatunsisf+0x5e>
     ac4:	d6 94       	lsr	r13
     ac6:	c7 94       	ror	r12
     ac8:	b7 94       	ror	r11
     aca:	a7 94       	ror	r10
     acc:	0a 94       	dec	r0
     ace:	d2 f7       	brpl	.-12     	; 0xac4 <__floatunsisf+0x56>
     ad0:	40 e0       	ldi	r20, 0x00	; 0
     ad2:	50 e0       	ldi	r21, 0x00	; 0
     ad4:	60 e0       	ldi	r22, 0x00	; 0
     ad6:	70 e0       	ldi	r23, 0x00	; 0
     ad8:	81 e0       	ldi	r24, 0x01	; 1
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	a0 e0       	ldi	r26, 0x00	; 0
     ade:	b0 e0       	ldi	r27, 0x00	; 0
     ae0:	04 c0       	rjmp	.+8      	; 0xaea <__floatunsisf+0x7c>
     ae2:	88 0f       	add	r24, r24
     ae4:	99 1f       	adc	r25, r25
     ae6:	aa 1f       	adc	r26, r26
     ae8:	bb 1f       	adc	r27, r27
     aea:	2a 95       	dec	r18
     aec:	d2 f7       	brpl	.-12     	; 0xae2 <__floatunsisf+0x74>
     aee:	01 97       	sbiw	r24, 0x01	; 1
     af0:	a1 09       	sbc	r26, r1
     af2:	b1 09       	sbc	r27, r1
     af4:	8e 21       	and	r24, r14
     af6:	9f 21       	and	r25, r15
     af8:	a0 23       	and	r26, r16
     afa:	b1 23       	and	r27, r17
     afc:	00 97       	sbiw	r24, 0x00	; 0
     afe:	a1 05       	cpc	r26, r1
     b00:	b1 05       	cpc	r27, r1
     b02:	21 f0       	breq	.+8      	; 0xb0c <__floatunsisf+0x9e>
     b04:	41 e0       	ldi	r20, 0x01	; 1
     b06:	50 e0       	ldi	r21, 0x00	; 0
     b08:	60 e0       	ldi	r22, 0x00	; 0
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	4a 29       	or	r20, r10
     b0e:	5b 29       	or	r21, r11
     b10:	6c 29       	or	r22, r12
     b12:	7d 29       	or	r23, r13
     b14:	4d 83       	std	Y+5, r20	; 0x05
     b16:	5e 83       	std	Y+6, r21	; 0x06
     b18:	6f 83       	std	Y+7, r22	; 0x07
     b1a:	78 87       	std	Y+8, r23	; 0x08
     b1c:	8e e1       	ldi	r24, 0x1E	; 30
     b1e:	90 e0       	ldi	r25, 0x00	; 0
     b20:	8e 1b       	sub	r24, r30
     b22:	9f 0b       	sbc	r25, r31
     b24:	9c 83       	std	Y+4, r25	; 0x04
     b26:	8b 83       	std	Y+3, r24	; 0x03
     b28:	12 c0       	rjmp	.+36     	; 0xb4e <__floatunsisf+0xe0>
     b2a:	30 97       	sbiw	r30, 0x00	; 0
     b2c:	81 f0       	breq	.+32     	; 0xb4e <__floatunsisf+0xe0>
     b2e:	0e 2e       	mov	r0, r30
     b30:	04 c0       	rjmp	.+8      	; 0xb3a <__floatunsisf+0xcc>
     b32:	ee 0c       	add	r14, r14
     b34:	ff 1c       	adc	r15, r15
     b36:	00 1f       	adc	r16, r16
     b38:	11 1f       	adc	r17, r17
     b3a:	0a 94       	dec	r0
     b3c:	d2 f7       	brpl	.-12     	; 0xb32 <__floatunsisf+0xc4>
     b3e:	ed 82       	std	Y+5, r14	; 0x05
     b40:	fe 82       	std	Y+6, r15	; 0x06
     b42:	0f 83       	std	Y+7, r16	; 0x07
     b44:	18 87       	std	Y+8, r17	; 0x08
     b46:	ce 1a       	sub	r12, r30
     b48:	df 0a       	sbc	r13, r31
     b4a:	dc 82       	std	Y+4, r13	; 0x04
     b4c:	cb 82       	std	Y+3, r12	; 0x03
     b4e:	1a 82       	std	Y+2, r1	; 0x02
     b50:	ce 01       	movw	r24, r28
     b52:	01 96       	adiw	r24, 0x01	; 1
     b54:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     b58:	28 96       	adiw	r28, 0x08	; 8
     b5a:	ea e0       	ldi	r30, 0x0A	; 10
     b5c:	0c 94 03 2c 	jmp	0x5806	; 0x5806 <__epilogue_restores__+0x10>

00000b60 <__clzsi2>:
     b60:	ef 92       	push	r14
     b62:	ff 92       	push	r15
     b64:	0f 93       	push	r16
     b66:	1f 93       	push	r17
     b68:	7b 01       	movw	r14, r22
     b6a:	8c 01       	movw	r16, r24
     b6c:	80 e0       	ldi	r24, 0x00	; 0
     b6e:	e8 16       	cp	r14, r24
     b70:	80 e0       	ldi	r24, 0x00	; 0
     b72:	f8 06       	cpc	r15, r24
     b74:	81 e0       	ldi	r24, 0x01	; 1
     b76:	08 07       	cpc	r16, r24
     b78:	80 e0       	ldi	r24, 0x00	; 0
     b7a:	18 07       	cpc	r17, r24
     b7c:	88 f4       	brcc	.+34     	; 0xba0 <__clzsi2+0x40>
     b7e:	8f ef       	ldi	r24, 0xFF	; 255
     b80:	e8 16       	cp	r14, r24
     b82:	f1 04       	cpc	r15, r1
     b84:	01 05       	cpc	r16, r1
     b86:	11 05       	cpc	r17, r1
     b88:	31 f0       	breq	.+12     	; 0xb96 <__clzsi2+0x36>
     b8a:	28 f0       	brcs	.+10     	; 0xb96 <__clzsi2+0x36>
     b8c:	88 e0       	ldi	r24, 0x08	; 8
     b8e:	90 e0       	ldi	r25, 0x00	; 0
     b90:	a0 e0       	ldi	r26, 0x00	; 0
     b92:	b0 e0       	ldi	r27, 0x00	; 0
     b94:	17 c0       	rjmp	.+46     	; 0xbc4 <__clzsi2+0x64>
     b96:	80 e0       	ldi	r24, 0x00	; 0
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	a0 e0       	ldi	r26, 0x00	; 0
     b9c:	b0 e0       	ldi	r27, 0x00	; 0
     b9e:	12 c0       	rjmp	.+36     	; 0xbc4 <__clzsi2+0x64>
     ba0:	80 e0       	ldi	r24, 0x00	; 0
     ba2:	e8 16       	cp	r14, r24
     ba4:	80 e0       	ldi	r24, 0x00	; 0
     ba6:	f8 06       	cpc	r15, r24
     ba8:	80 e0       	ldi	r24, 0x00	; 0
     baa:	08 07       	cpc	r16, r24
     bac:	81 e0       	ldi	r24, 0x01	; 1
     bae:	18 07       	cpc	r17, r24
     bb0:	28 f0       	brcs	.+10     	; 0xbbc <__clzsi2+0x5c>
     bb2:	88 e1       	ldi	r24, 0x18	; 24
     bb4:	90 e0       	ldi	r25, 0x00	; 0
     bb6:	a0 e0       	ldi	r26, 0x00	; 0
     bb8:	b0 e0       	ldi	r27, 0x00	; 0
     bba:	04 c0       	rjmp	.+8      	; 0xbc4 <__clzsi2+0x64>
     bbc:	80 e1       	ldi	r24, 0x10	; 16
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	a0 e0       	ldi	r26, 0x00	; 0
     bc2:	b0 e0       	ldi	r27, 0x00	; 0
     bc4:	20 e2       	ldi	r18, 0x20	; 32
     bc6:	30 e0       	ldi	r19, 0x00	; 0
     bc8:	40 e0       	ldi	r20, 0x00	; 0
     bca:	50 e0       	ldi	r21, 0x00	; 0
     bcc:	28 1b       	sub	r18, r24
     bce:	39 0b       	sbc	r19, r25
     bd0:	4a 0b       	sbc	r20, r26
     bd2:	5b 0b       	sbc	r21, r27
     bd4:	04 c0       	rjmp	.+8      	; 0xbde <__clzsi2+0x7e>
     bd6:	16 95       	lsr	r17
     bd8:	07 95       	ror	r16
     bda:	f7 94       	ror	r15
     bdc:	e7 94       	ror	r14
     bde:	8a 95       	dec	r24
     be0:	d2 f7       	brpl	.-12     	; 0xbd6 <__clzsi2+0x76>
     be2:	f7 01       	movw	r30, r14
     be4:	e8 59       	subi	r30, 0x98	; 152
     be6:	ff 4f       	sbci	r31, 0xFF	; 255
     be8:	80 81       	ld	r24, Z
     bea:	28 1b       	sub	r18, r24
     bec:	31 09       	sbc	r19, r1
     bee:	41 09       	sbc	r20, r1
     bf0:	51 09       	sbc	r21, r1
     bf2:	c9 01       	movw	r24, r18
     bf4:	1f 91       	pop	r17
     bf6:	0f 91       	pop	r16
     bf8:	ff 90       	pop	r15
     bfa:	ef 90       	pop	r14
     bfc:	08 95       	ret

00000bfe <__pack_f>:
     bfe:	df 92       	push	r13
     c00:	ef 92       	push	r14
     c02:	ff 92       	push	r15
     c04:	0f 93       	push	r16
     c06:	1f 93       	push	r17
     c08:	fc 01       	movw	r30, r24
     c0a:	e4 80       	ldd	r14, Z+4	; 0x04
     c0c:	f5 80       	ldd	r15, Z+5	; 0x05
     c0e:	06 81       	ldd	r16, Z+6	; 0x06
     c10:	17 81       	ldd	r17, Z+7	; 0x07
     c12:	d1 80       	ldd	r13, Z+1	; 0x01
     c14:	80 81       	ld	r24, Z
     c16:	82 30       	cpi	r24, 0x02	; 2
     c18:	48 f4       	brcc	.+18     	; 0xc2c <__pack_f+0x2e>
     c1a:	80 e0       	ldi	r24, 0x00	; 0
     c1c:	90 e0       	ldi	r25, 0x00	; 0
     c1e:	a0 e1       	ldi	r26, 0x10	; 16
     c20:	b0 e0       	ldi	r27, 0x00	; 0
     c22:	e8 2a       	or	r14, r24
     c24:	f9 2a       	or	r15, r25
     c26:	0a 2b       	or	r16, r26
     c28:	1b 2b       	or	r17, r27
     c2a:	a5 c0       	rjmp	.+330    	; 0xd76 <__pack_f+0x178>
     c2c:	84 30       	cpi	r24, 0x04	; 4
     c2e:	09 f4       	brne	.+2      	; 0xc32 <__pack_f+0x34>
     c30:	9f c0       	rjmp	.+318    	; 0xd70 <__pack_f+0x172>
     c32:	82 30       	cpi	r24, 0x02	; 2
     c34:	21 f4       	brne	.+8      	; 0xc3e <__pack_f+0x40>
     c36:	ee 24       	eor	r14, r14
     c38:	ff 24       	eor	r15, r15
     c3a:	87 01       	movw	r16, r14
     c3c:	05 c0       	rjmp	.+10     	; 0xc48 <__pack_f+0x4a>
     c3e:	e1 14       	cp	r14, r1
     c40:	f1 04       	cpc	r15, r1
     c42:	01 05       	cpc	r16, r1
     c44:	11 05       	cpc	r17, r1
     c46:	19 f4       	brne	.+6      	; 0xc4e <__pack_f+0x50>
     c48:	e0 e0       	ldi	r30, 0x00	; 0
     c4a:	f0 e0       	ldi	r31, 0x00	; 0
     c4c:	96 c0       	rjmp	.+300    	; 0xd7a <__pack_f+0x17c>
     c4e:	62 81       	ldd	r22, Z+2	; 0x02
     c50:	73 81       	ldd	r23, Z+3	; 0x03
     c52:	9f ef       	ldi	r25, 0xFF	; 255
     c54:	62 38       	cpi	r22, 0x82	; 130
     c56:	79 07       	cpc	r23, r25
     c58:	0c f0       	brlt	.+2      	; 0xc5c <__pack_f+0x5e>
     c5a:	5b c0       	rjmp	.+182    	; 0xd12 <__pack_f+0x114>
     c5c:	22 e8       	ldi	r18, 0x82	; 130
     c5e:	3f ef       	ldi	r19, 0xFF	; 255
     c60:	26 1b       	sub	r18, r22
     c62:	37 0b       	sbc	r19, r23
     c64:	2a 31       	cpi	r18, 0x1A	; 26
     c66:	31 05       	cpc	r19, r1
     c68:	2c f0       	brlt	.+10     	; 0xc74 <__pack_f+0x76>
     c6a:	20 e0       	ldi	r18, 0x00	; 0
     c6c:	30 e0       	ldi	r19, 0x00	; 0
     c6e:	40 e0       	ldi	r20, 0x00	; 0
     c70:	50 e0       	ldi	r21, 0x00	; 0
     c72:	2a c0       	rjmp	.+84     	; 0xcc8 <__pack_f+0xca>
     c74:	b8 01       	movw	r22, r16
     c76:	a7 01       	movw	r20, r14
     c78:	02 2e       	mov	r0, r18
     c7a:	04 c0       	rjmp	.+8      	; 0xc84 <__pack_f+0x86>
     c7c:	76 95       	lsr	r23
     c7e:	67 95       	ror	r22
     c80:	57 95       	ror	r21
     c82:	47 95       	ror	r20
     c84:	0a 94       	dec	r0
     c86:	d2 f7       	brpl	.-12     	; 0xc7c <__pack_f+0x7e>
     c88:	81 e0       	ldi	r24, 0x01	; 1
     c8a:	90 e0       	ldi	r25, 0x00	; 0
     c8c:	a0 e0       	ldi	r26, 0x00	; 0
     c8e:	b0 e0       	ldi	r27, 0x00	; 0
     c90:	04 c0       	rjmp	.+8      	; 0xc9a <__pack_f+0x9c>
     c92:	88 0f       	add	r24, r24
     c94:	99 1f       	adc	r25, r25
     c96:	aa 1f       	adc	r26, r26
     c98:	bb 1f       	adc	r27, r27
     c9a:	2a 95       	dec	r18
     c9c:	d2 f7       	brpl	.-12     	; 0xc92 <__pack_f+0x94>
     c9e:	01 97       	sbiw	r24, 0x01	; 1
     ca0:	a1 09       	sbc	r26, r1
     ca2:	b1 09       	sbc	r27, r1
     ca4:	8e 21       	and	r24, r14
     ca6:	9f 21       	and	r25, r15
     ca8:	a0 23       	and	r26, r16
     caa:	b1 23       	and	r27, r17
     cac:	00 97       	sbiw	r24, 0x00	; 0
     cae:	a1 05       	cpc	r26, r1
     cb0:	b1 05       	cpc	r27, r1
     cb2:	21 f0       	breq	.+8      	; 0xcbc <__pack_f+0xbe>
     cb4:	81 e0       	ldi	r24, 0x01	; 1
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	a0 e0       	ldi	r26, 0x00	; 0
     cba:	b0 e0       	ldi	r27, 0x00	; 0
     cbc:	9a 01       	movw	r18, r20
     cbe:	ab 01       	movw	r20, r22
     cc0:	28 2b       	or	r18, r24
     cc2:	39 2b       	or	r19, r25
     cc4:	4a 2b       	or	r20, r26
     cc6:	5b 2b       	or	r21, r27
     cc8:	da 01       	movw	r26, r20
     cca:	c9 01       	movw	r24, r18
     ccc:	8f 77       	andi	r24, 0x7F	; 127
     cce:	90 70       	andi	r25, 0x00	; 0
     cd0:	a0 70       	andi	r26, 0x00	; 0
     cd2:	b0 70       	andi	r27, 0x00	; 0
     cd4:	80 34       	cpi	r24, 0x40	; 64
     cd6:	91 05       	cpc	r25, r1
     cd8:	a1 05       	cpc	r26, r1
     cda:	b1 05       	cpc	r27, r1
     cdc:	39 f4       	brne	.+14     	; 0xcec <__pack_f+0xee>
     cde:	27 ff       	sbrs	r18, 7
     ce0:	09 c0       	rjmp	.+18     	; 0xcf4 <__pack_f+0xf6>
     ce2:	20 5c       	subi	r18, 0xC0	; 192
     ce4:	3f 4f       	sbci	r19, 0xFF	; 255
     ce6:	4f 4f       	sbci	r20, 0xFF	; 255
     ce8:	5f 4f       	sbci	r21, 0xFF	; 255
     cea:	04 c0       	rjmp	.+8      	; 0xcf4 <__pack_f+0xf6>
     cec:	21 5c       	subi	r18, 0xC1	; 193
     cee:	3f 4f       	sbci	r19, 0xFF	; 255
     cf0:	4f 4f       	sbci	r20, 0xFF	; 255
     cf2:	5f 4f       	sbci	r21, 0xFF	; 255
     cf4:	e0 e0       	ldi	r30, 0x00	; 0
     cf6:	f0 e0       	ldi	r31, 0x00	; 0
     cf8:	20 30       	cpi	r18, 0x00	; 0
     cfa:	a0 e0       	ldi	r26, 0x00	; 0
     cfc:	3a 07       	cpc	r19, r26
     cfe:	a0 e0       	ldi	r26, 0x00	; 0
     d00:	4a 07       	cpc	r20, r26
     d02:	a0 e4       	ldi	r26, 0x40	; 64
     d04:	5a 07       	cpc	r21, r26
     d06:	10 f0       	brcs	.+4      	; 0xd0c <__pack_f+0x10e>
     d08:	e1 e0       	ldi	r30, 0x01	; 1
     d0a:	f0 e0       	ldi	r31, 0x00	; 0
     d0c:	79 01       	movw	r14, r18
     d0e:	8a 01       	movw	r16, r20
     d10:	27 c0       	rjmp	.+78     	; 0xd60 <__pack_f+0x162>
     d12:	60 38       	cpi	r22, 0x80	; 128
     d14:	71 05       	cpc	r23, r1
     d16:	64 f5       	brge	.+88     	; 0xd70 <__pack_f+0x172>
     d18:	fb 01       	movw	r30, r22
     d1a:	e1 58       	subi	r30, 0x81	; 129
     d1c:	ff 4f       	sbci	r31, 0xFF	; 255
     d1e:	d8 01       	movw	r26, r16
     d20:	c7 01       	movw	r24, r14
     d22:	8f 77       	andi	r24, 0x7F	; 127
     d24:	90 70       	andi	r25, 0x00	; 0
     d26:	a0 70       	andi	r26, 0x00	; 0
     d28:	b0 70       	andi	r27, 0x00	; 0
     d2a:	80 34       	cpi	r24, 0x40	; 64
     d2c:	91 05       	cpc	r25, r1
     d2e:	a1 05       	cpc	r26, r1
     d30:	b1 05       	cpc	r27, r1
     d32:	39 f4       	brne	.+14     	; 0xd42 <__pack_f+0x144>
     d34:	e7 fe       	sbrs	r14, 7
     d36:	0d c0       	rjmp	.+26     	; 0xd52 <__pack_f+0x154>
     d38:	80 e4       	ldi	r24, 0x40	; 64
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	a0 e0       	ldi	r26, 0x00	; 0
     d3e:	b0 e0       	ldi	r27, 0x00	; 0
     d40:	04 c0       	rjmp	.+8      	; 0xd4a <__pack_f+0x14c>
     d42:	8f e3       	ldi	r24, 0x3F	; 63
     d44:	90 e0       	ldi	r25, 0x00	; 0
     d46:	a0 e0       	ldi	r26, 0x00	; 0
     d48:	b0 e0       	ldi	r27, 0x00	; 0
     d4a:	e8 0e       	add	r14, r24
     d4c:	f9 1e       	adc	r15, r25
     d4e:	0a 1f       	adc	r16, r26
     d50:	1b 1f       	adc	r17, r27
     d52:	17 ff       	sbrs	r17, 7
     d54:	05 c0       	rjmp	.+10     	; 0xd60 <__pack_f+0x162>
     d56:	16 95       	lsr	r17
     d58:	07 95       	ror	r16
     d5a:	f7 94       	ror	r15
     d5c:	e7 94       	ror	r14
     d5e:	31 96       	adiw	r30, 0x01	; 1
     d60:	87 e0       	ldi	r24, 0x07	; 7
     d62:	16 95       	lsr	r17
     d64:	07 95       	ror	r16
     d66:	f7 94       	ror	r15
     d68:	e7 94       	ror	r14
     d6a:	8a 95       	dec	r24
     d6c:	d1 f7       	brne	.-12     	; 0xd62 <__pack_f+0x164>
     d6e:	05 c0       	rjmp	.+10     	; 0xd7a <__pack_f+0x17c>
     d70:	ee 24       	eor	r14, r14
     d72:	ff 24       	eor	r15, r15
     d74:	87 01       	movw	r16, r14
     d76:	ef ef       	ldi	r30, 0xFF	; 255
     d78:	f0 e0       	ldi	r31, 0x00	; 0
     d7a:	6e 2f       	mov	r22, r30
     d7c:	67 95       	ror	r22
     d7e:	66 27       	eor	r22, r22
     d80:	67 95       	ror	r22
     d82:	90 2f       	mov	r25, r16
     d84:	9f 77       	andi	r25, 0x7F	; 127
     d86:	d7 94       	ror	r13
     d88:	dd 24       	eor	r13, r13
     d8a:	d7 94       	ror	r13
     d8c:	8e 2f       	mov	r24, r30
     d8e:	86 95       	lsr	r24
     d90:	49 2f       	mov	r20, r25
     d92:	46 2b       	or	r20, r22
     d94:	58 2f       	mov	r21, r24
     d96:	5d 29       	or	r21, r13
     d98:	b7 01       	movw	r22, r14
     d9a:	ca 01       	movw	r24, r20
     d9c:	1f 91       	pop	r17
     d9e:	0f 91       	pop	r16
     da0:	ff 90       	pop	r15
     da2:	ef 90       	pop	r14
     da4:	df 90       	pop	r13
     da6:	08 95       	ret

00000da8 <__unpack_f>:
     da8:	fc 01       	movw	r30, r24
     daa:	db 01       	movw	r26, r22
     dac:	40 81       	ld	r20, Z
     dae:	51 81       	ldd	r21, Z+1	; 0x01
     db0:	22 81       	ldd	r18, Z+2	; 0x02
     db2:	62 2f       	mov	r22, r18
     db4:	6f 77       	andi	r22, 0x7F	; 127
     db6:	70 e0       	ldi	r23, 0x00	; 0
     db8:	22 1f       	adc	r18, r18
     dba:	22 27       	eor	r18, r18
     dbc:	22 1f       	adc	r18, r18
     dbe:	93 81       	ldd	r25, Z+3	; 0x03
     dc0:	89 2f       	mov	r24, r25
     dc2:	88 0f       	add	r24, r24
     dc4:	82 2b       	or	r24, r18
     dc6:	28 2f       	mov	r18, r24
     dc8:	30 e0       	ldi	r19, 0x00	; 0
     dca:	99 1f       	adc	r25, r25
     dcc:	99 27       	eor	r25, r25
     dce:	99 1f       	adc	r25, r25
     dd0:	11 96       	adiw	r26, 0x01	; 1
     dd2:	9c 93       	st	X, r25
     dd4:	11 97       	sbiw	r26, 0x01	; 1
     dd6:	21 15       	cp	r18, r1
     dd8:	31 05       	cpc	r19, r1
     dda:	a9 f5       	brne	.+106    	; 0xe46 <__unpack_f+0x9e>
     ddc:	41 15       	cp	r20, r1
     dde:	51 05       	cpc	r21, r1
     de0:	61 05       	cpc	r22, r1
     de2:	71 05       	cpc	r23, r1
     de4:	11 f4       	brne	.+4      	; 0xdea <__unpack_f+0x42>
     de6:	82 e0       	ldi	r24, 0x02	; 2
     de8:	37 c0       	rjmp	.+110    	; 0xe58 <__unpack_f+0xb0>
     dea:	82 e8       	ldi	r24, 0x82	; 130
     dec:	9f ef       	ldi	r25, 0xFF	; 255
     dee:	13 96       	adiw	r26, 0x03	; 3
     df0:	9c 93       	st	X, r25
     df2:	8e 93       	st	-X, r24
     df4:	12 97       	sbiw	r26, 0x02	; 2
     df6:	9a 01       	movw	r18, r20
     df8:	ab 01       	movw	r20, r22
     dfa:	67 e0       	ldi	r22, 0x07	; 7
     dfc:	22 0f       	add	r18, r18
     dfe:	33 1f       	adc	r19, r19
     e00:	44 1f       	adc	r20, r20
     e02:	55 1f       	adc	r21, r21
     e04:	6a 95       	dec	r22
     e06:	d1 f7       	brne	.-12     	; 0xdfc <__unpack_f+0x54>
     e08:	83 e0       	ldi	r24, 0x03	; 3
     e0a:	8c 93       	st	X, r24
     e0c:	0d c0       	rjmp	.+26     	; 0xe28 <__unpack_f+0x80>
     e0e:	22 0f       	add	r18, r18
     e10:	33 1f       	adc	r19, r19
     e12:	44 1f       	adc	r20, r20
     e14:	55 1f       	adc	r21, r21
     e16:	12 96       	adiw	r26, 0x02	; 2
     e18:	8d 91       	ld	r24, X+
     e1a:	9c 91       	ld	r25, X
     e1c:	13 97       	sbiw	r26, 0x03	; 3
     e1e:	01 97       	sbiw	r24, 0x01	; 1
     e20:	13 96       	adiw	r26, 0x03	; 3
     e22:	9c 93       	st	X, r25
     e24:	8e 93       	st	-X, r24
     e26:	12 97       	sbiw	r26, 0x02	; 2
     e28:	20 30       	cpi	r18, 0x00	; 0
     e2a:	80 e0       	ldi	r24, 0x00	; 0
     e2c:	38 07       	cpc	r19, r24
     e2e:	80 e0       	ldi	r24, 0x00	; 0
     e30:	48 07       	cpc	r20, r24
     e32:	80 e4       	ldi	r24, 0x40	; 64
     e34:	58 07       	cpc	r21, r24
     e36:	58 f3       	brcs	.-42     	; 0xe0e <__unpack_f+0x66>
     e38:	14 96       	adiw	r26, 0x04	; 4
     e3a:	2d 93       	st	X+, r18
     e3c:	3d 93       	st	X+, r19
     e3e:	4d 93       	st	X+, r20
     e40:	5c 93       	st	X, r21
     e42:	17 97       	sbiw	r26, 0x07	; 7
     e44:	08 95       	ret
     e46:	2f 3f       	cpi	r18, 0xFF	; 255
     e48:	31 05       	cpc	r19, r1
     e4a:	79 f4       	brne	.+30     	; 0xe6a <__unpack_f+0xc2>
     e4c:	41 15       	cp	r20, r1
     e4e:	51 05       	cpc	r21, r1
     e50:	61 05       	cpc	r22, r1
     e52:	71 05       	cpc	r23, r1
     e54:	19 f4       	brne	.+6      	; 0xe5c <__unpack_f+0xb4>
     e56:	84 e0       	ldi	r24, 0x04	; 4
     e58:	8c 93       	st	X, r24
     e5a:	08 95       	ret
     e5c:	64 ff       	sbrs	r22, 4
     e5e:	03 c0       	rjmp	.+6      	; 0xe66 <__unpack_f+0xbe>
     e60:	81 e0       	ldi	r24, 0x01	; 1
     e62:	8c 93       	st	X, r24
     e64:	12 c0       	rjmp	.+36     	; 0xe8a <__unpack_f+0xe2>
     e66:	1c 92       	st	X, r1
     e68:	10 c0       	rjmp	.+32     	; 0xe8a <__unpack_f+0xe2>
     e6a:	2f 57       	subi	r18, 0x7F	; 127
     e6c:	30 40       	sbci	r19, 0x00	; 0
     e6e:	13 96       	adiw	r26, 0x03	; 3
     e70:	3c 93       	st	X, r19
     e72:	2e 93       	st	-X, r18
     e74:	12 97       	sbiw	r26, 0x02	; 2
     e76:	83 e0       	ldi	r24, 0x03	; 3
     e78:	8c 93       	st	X, r24
     e7a:	87 e0       	ldi	r24, 0x07	; 7
     e7c:	44 0f       	add	r20, r20
     e7e:	55 1f       	adc	r21, r21
     e80:	66 1f       	adc	r22, r22
     e82:	77 1f       	adc	r23, r23
     e84:	8a 95       	dec	r24
     e86:	d1 f7       	brne	.-12     	; 0xe7c <__unpack_f+0xd4>
     e88:	70 64       	ori	r23, 0x40	; 64
     e8a:	14 96       	adiw	r26, 0x04	; 4
     e8c:	4d 93       	st	X+, r20
     e8e:	5d 93       	st	X+, r21
     e90:	6d 93       	st	X+, r22
     e92:	7c 93       	st	X, r23
     e94:	17 97       	sbiw	r26, 0x07	; 7
     e96:	08 95       	ret

00000e98 <__fpcmp_parts_f>:
     e98:	1f 93       	push	r17
     e9a:	dc 01       	movw	r26, r24
     e9c:	fb 01       	movw	r30, r22
     e9e:	9c 91       	ld	r25, X
     ea0:	92 30       	cpi	r25, 0x02	; 2
     ea2:	08 f4       	brcc	.+2      	; 0xea6 <__fpcmp_parts_f+0xe>
     ea4:	47 c0       	rjmp	.+142    	; 0xf34 <__fpcmp_parts_f+0x9c>
     ea6:	80 81       	ld	r24, Z
     ea8:	82 30       	cpi	r24, 0x02	; 2
     eaa:	08 f4       	brcc	.+2      	; 0xeae <__fpcmp_parts_f+0x16>
     eac:	43 c0       	rjmp	.+134    	; 0xf34 <__fpcmp_parts_f+0x9c>
     eae:	94 30       	cpi	r25, 0x04	; 4
     eb0:	51 f4       	brne	.+20     	; 0xec6 <__fpcmp_parts_f+0x2e>
     eb2:	11 96       	adiw	r26, 0x01	; 1
     eb4:	1c 91       	ld	r17, X
     eb6:	84 30       	cpi	r24, 0x04	; 4
     eb8:	99 f5       	brne	.+102    	; 0xf20 <__fpcmp_parts_f+0x88>
     eba:	81 81       	ldd	r24, Z+1	; 0x01
     ebc:	68 2f       	mov	r22, r24
     ebe:	70 e0       	ldi	r23, 0x00	; 0
     ec0:	61 1b       	sub	r22, r17
     ec2:	71 09       	sbc	r23, r1
     ec4:	3f c0       	rjmp	.+126    	; 0xf44 <__fpcmp_parts_f+0xac>
     ec6:	84 30       	cpi	r24, 0x04	; 4
     ec8:	21 f0       	breq	.+8      	; 0xed2 <__fpcmp_parts_f+0x3a>
     eca:	92 30       	cpi	r25, 0x02	; 2
     ecc:	31 f4       	brne	.+12     	; 0xeda <__fpcmp_parts_f+0x42>
     ece:	82 30       	cpi	r24, 0x02	; 2
     ed0:	b9 f1       	breq	.+110    	; 0xf40 <__fpcmp_parts_f+0xa8>
     ed2:	81 81       	ldd	r24, Z+1	; 0x01
     ed4:	88 23       	and	r24, r24
     ed6:	89 f1       	breq	.+98     	; 0xf3a <__fpcmp_parts_f+0xa2>
     ed8:	2d c0       	rjmp	.+90     	; 0xf34 <__fpcmp_parts_f+0x9c>
     eda:	11 96       	adiw	r26, 0x01	; 1
     edc:	1c 91       	ld	r17, X
     ede:	11 97       	sbiw	r26, 0x01	; 1
     ee0:	82 30       	cpi	r24, 0x02	; 2
     ee2:	f1 f0       	breq	.+60     	; 0xf20 <__fpcmp_parts_f+0x88>
     ee4:	81 81       	ldd	r24, Z+1	; 0x01
     ee6:	18 17       	cp	r17, r24
     ee8:	d9 f4       	brne	.+54     	; 0xf20 <__fpcmp_parts_f+0x88>
     eea:	12 96       	adiw	r26, 0x02	; 2
     eec:	2d 91       	ld	r18, X+
     eee:	3c 91       	ld	r19, X
     ef0:	13 97       	sbiw	r26, 0x03	; 3
     ef2:	82 81       	ldd	r24, Z+2	; 0x02
     ef4:	93 81       	ldd	r25, Z+3	; 0x03
     ef6:	82 17       	cp	r24, r18
     ef8:	93 07       	cpc	r25, r19
     efa:	94 f0       	brlt	.+36     	; 0xf20 <__fpcmp_parts_f+0x88>
     efc:	28 17       	cp	r18, r24
     efe:	39 07       	cpc	r19, r25
     f00:	bc f0       	brlt	.+46     	; 0xf30 <__fpcmp_parts_f+0x98>
     f02:	14 96       	adiw	r26, 0x04	; 4
     f04:	8d 91       	ld	r24, X+
     f06:	9d 91       	ld	r25, X+
     f08:	0d 90       	ld	r0, X+
     f0a:	bc 91       	ld	r27, X
     f0c:	a0 2d       	mov	r26, r0
     f0e:	24 81       	ldd	r18, Z+4	; 0x04
     f10:	35 81       	ldd	r19, Z+5	; 0x05
     f12:	46 81       	ldd	r20, Z+6	; 0x06
     f14:	57 81       	ldd	r21, Z+7	; 0x07
     f16:	28 17       	cp	r18, r24
     f18:	39 07       	cpc	r19, r25
     f1a:	4a 07       	cpc	r20, r26
     f1c:	5b 07       	cpc	r21, r27
     f1e:	18 f4       	brcc	.+6      	; 0xf26 <__fpcmp_parts_f+0x8e>
     f20:	11 23       	and	r17, r17
     f22:	41 f0       	breq	.+16     	; 0xf34 <__fpcmp_parts_f+0x9c>
     f24:	0a c0       	rjmp	.+20     	; 0xf3a <__fpcmp_parts_f+0xa2>
     f26:	82 17       	cp	r24, r18
     f28:	93 07       	cpc	r25, r19
     f2a:	a4 07       	cpc	r26, r20
     f2c:	b5 07       	cpc	r27, r21
     f2e:	40 f4       	brcc	.+16     	; 0xf40 <__fpcmp_parts_f+0xa8>
     f30:	11 23       	and	r17, r17
     f32:	19 f0       	breq	.+6      	; 0xf3a <__fpcmp_parts_f+0xa2>
     f34:	61 e0       	ldi	r22, 0x01	; 1
     f36:	70 e0       	ldi	r23, 0x00	; 0
     f38:	05 c0       	rjmp	.+10     	; 0xf44 <__fpcmp_parts_f+0xac>
     f3a:	6f ef       	ldi	r22, 0xFF	; 255
     f3c:	7f ef       	ldi	r23, 0xFF	; 255
     f3e:	02 c0       	rjmp	.+4      	; 0xf44 <__fpcmp_parts_f+0xac>
     f40:	60 e0       	ldi	r22, 0x00	; 0
     f42:	70 e0       	ldi	r23, 0x00	; 0
     f44:	cb 01       	movw	r24, r22
     f46:	1f 91       	pop	r17
     f48:	08 95       	ret

00000f4a <ICU_SW_init>:
#include "../MCAL/DIO/DIO.h"
#include "ICU_Interface.h"
static volatile u8 LOC_u8counter = NUMBER_0;
static volatile u16 period_Ticks = NUMBER_0;
static volatile u16 on_Ticks = NUMBER_0;
void ICU_SW_init(u16 * copy_pu16period_Ticks, u16 * copy_pu16on_Ticks) {
     f4a:	df 93       	push	r29
     f4c:	cf 93       	push	r28
     f4e:	cd b7       	in	r28, 0x3d	; 61
     f50:	de b7       	in	r29, 0x3e	; 62
     f52:	28 97       	sbiw	r28, 0x08	; 8
     f54:	0f b6       	in	r0, 0x3f	; 63
     f56:	f8 94       	cli
     f58:	de bf       	out	0x3e, r29	; 62
     f5a:	0f be       	out	0x3f, r0	; 63
     f5c:	cd bf       	out	0x3d, r28	; 61
     f5e:	9e 83       	std	Y+6, r25	; 0x06
     f60:	8d 83       	std	Y+5, r24	; 0x05
     f62:	78 87       	std	Y+8, r23	; 0x08
     f64:	6f 83       	std	Y+7, r22	; 0x07
	f32 y = NUMBER_0;
     f66:	80 e0       	ldi	r24, 0x00	; 0
     f68:	90 e0       	ldi	r25, 0x00	; 0
     f6a:	a0 e0       	ldi	r26, 0x00	; 0
     f6c:	b0 e0       	ldi	r27, 0x00	; 0
     f6e:	89 83       	std	Y+1, r24	; 0x01
     f70:	9a 83       	std	Y+2, r25	; 0x02
     f72:	ab 83       	std	Y+3, r26	; 0x03
     f74:	bc 83       	std	Y+4, r27	; 0x04
	MCAL_DIO_u8SetPinDirection(PortD, Pin2, Pin_Low);
     f76:	83 e0       	ldi	r24, 0x03	; 3
     f78:	62 e0       	ldi	r22, 0x02	; 2
     f7a:	40 e0       	ldi	r20, 0x00	; 0
     f7c:	0e 94 7a 19 	call	0x32f4	; 0x32f4 <MCAL_DIO_u8SetPinDirection>
	//Timer 1
	MCAL_T1_u8T1Init(NORMAL_MODE);
     f80:	80 e0       	ldi	r24, 0x00	; 0
     f82:	0e 94 bb 09 	call	0x1376	; 0x1376 <MCAL_T1_u8T1Init>
	MCAL_T1_u8T1Prescaler(PRESCALLING_8, &y);
     f86:	82 e0       	ldi	r24, 0x02	; 2
     f88:	9e 01       	movw	r18, r28
     f8a:	2f 5f       	subi	r18, 0xFF	; 255
     f8c:	3f 4f       	sbci	r19, 0xFF	; 255
     f8e:	b9 01       	movw	r22, r18
     f90:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <MCAL_T1_u8T1Prescaler>
	//Int0
	MCAL_Interrupt_InterruptInit();
     f94:	0e 94 4d 18 	call	0x309a	; 0x309a <MCAL_Interrupt_InterruptInit>
	SET_BIT(MCUCR, Pin1);
     f98:	a5 e5       	ldi	r26, 0x55	; 85
     f9a:	b0 e0       	ldi	r27, 0x00	; 0
     f9c:	e5 e5       	ldi	r30, 0x55	; 85
     f9e:	f0 e0       	ldi	r31, 0x00	; 0
     fa0:	80 81       	ld	r24, Z
     fa2:	82 60       	ori	r24, 0x02	; 2
     fa4:	8c 93       	st	X, r24
	SET_BIT(MCUCR, Pin0);
     fa6:	a5 e5       	ldi	r26, 0x55	; 85
     fa8:	b0 e0       	ldi	r27, 0x00	; 0
     faa:	e5 e5       	ldi	r30, 0x55	; 85
     fac:	f0 e0       	ldi	r31, 0x00	; 0
     fae:	80 81       	ld	r24, Z
     fb0:	81 60       	ori	r24, 0x01	; 1
     fb2:	8c 93       	st	X, r24
	MCAL_Interrupt_EXIT_CallBack_0(ICU_SW);
     fb4:	8b e0       	ldi	r24, 0x0B	; 11
     fb6:	98 e0       	ldi	r25, 0x08	; 8
     fb8:	0e 94 f0 17 	call	0x2fe0	; 0x2fe0 <MCAL_Interrupt_EXIT_CallBack_0>
	//Bsy wait the ICU measure value
	while ((period_Ticks == 0) && (on_Ticks == 0))
     fbc:	80 91 79 01 	lds	r24, 0x0179
     fc0:	90 91 7a 01 	lds	r25, 0x017A
     fc4:	00 97       	sbiw	r24, 0x00	; 0
     fc6:	31 f4       	brne	.+12     	; 0xfd4 <ICU_SW_init+0x8a>
     fc8:	80 91 7b 01 	lds	r24, 0x017B
     fcc:	90 91 7c 01 	lds	r25, 0x017C
     fd0:	00 97       	sbiw	r24, 0x00	; 0
     fd2:	a1 f3       	breq	.-24     	; 0xfbc <ICU_SW_init+0x72>
		;
	if ((copy_pu16on_Ticks != '\0') && (copy_pu16period_Ticks != '\0')) {
     fd4:	8f 81       	ldd	r24, Y+7	; 0x07
     fd6:	98 85       	ldd	r25, Y+8	; 0x08
     fd8:	00 97       	sbiw	r24, 0x00	; 0
     fda:	a1 f0       	breq	.+40     	; 0x1004 <ICU_SW_init+0xba>
     fdc:	8d 81       	ldd	r24, Y+5	; 0x05
     fde:	9e 81       	ldd	r25, Y+6	; 0x06
     fe0:	00 97       	sbiw	r24, 0x00	; 0
     fe2:	81 f0       	breq	.+32     	; 0x1004 <ICU_SW_init+0xba>
		*copy_pu16period_Ticks = period_Ticks;
     fe4:	80 91 79 01 	lds	r24, 0x0179
     fe8:	90 91 7a 01 	lds	r25, 0x017A
     fec:	ed 81       	ldd	r30, Y+5	; 0x05
     fee:	fe 81       	ldd	r31, Y+6	; 0x06
     ff0:	91 83       	std	Z+1, r25	; 0x01
     ff2:	80 83       	st	Z, r24
		*copy_pu16on_Ticks = on_Ticks;
     ff4:	80 91 7b 01 	lds	r24, 0x017B
     ff8:	90 91 7c 01 	lds	r25, 0x017C
     ffc:	ef 81       	ldd	r30, Y+7	; 0x07
     ffe:	f8 85       	ldd	r31, Y+8	; 0x08
    1000:	91 83       	std	Z+1, r25	; 0x01
    1002:	80 83       	st	Z, r24
	} else {
		//NOTHING
	}
}
    1004:	28 96       	adiw	r28, 0x08	; 8
    1006:	0f b6       	in	r0, 0x3f	; 63
    1008:	f8 94       	cli
    100a:	de bf       	out	0x3e, r29	; 62
    100c:	0f be       	out	0x3f, r0	; 63
    100e:	cd bf       	out	0x3d, r28	; 61
    1010:	cf 91       	pop	r28
    1012:	df 91       	pop	r29
    1014:	08 95       	ret

00001016 <ICU_SW>:
void ICU_SW(void) {
    1016:	df 93       	push	r29
    1018:	cf 93       	push	r28
    101a:	cd b7       	in	r28, 0x3d	; 61
    101c:	de b7       	in	r29, 0x3e	; 62
	LOC_u8counter++;
    101e:	80 91 78 01 	lds	r24, 0x0178
    1022:	8f 5f       	subi	r24, 0xFF	; 255
    1024:	80 93 78 01 	sts	0x0178, r24
	//Frist Rising Edge
	if (LOC_u8counter == 1) {
    1028:	80 91 78 01 	lds	r24, 0x0178
    102c:	81 30       	cpi	r24, 0x01	; 1
    102e:	99 f4       	brne	.+38     	; 0x1056 <ICU_SW+0x40>
		//Timer Starts counter
		MCAL_T1_voidSetTCNT1Value(NUMBER_0);
    1030:	80 e0       	ldi	r24, 0x00	; 0
    1032:	90 e0       	ldi	r25, 0x00	; 0
    1034:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <MCAL_T1_voidSetTCNT1Value>
		SET_BIT(MCUCR, Pin1);
    1038:	a5 e5       	ldi	r26, 0x55	; 85
    103a:	b0 e0       	ldi	r27, 0x00	; 0
    103c:	e5 e5       	ldi	r30, 0x55	; 85
    103e:	f0 e0       	ldi	r31, 0x00	; 0
    1040:	80 81       	ld	r24, Z
    1042:	82 60       	ori	r24, 0x02	; 2
    1044:	8c 93       	st	X, r24
		CLR_BIT(MCUCR, Pin0);
    1046:	a5 e5       	ldi	r26, 0x55	; 85
    1048:	b0 e0       	ldi	r27, 0x00	; 0
    104a:	e5 e5       	ldi	r30, 0x55	; 85
    104c:	f0 e0       	ldi	r31, 0x00	; 0
    104e:	80 81       	ld	r24, Z
    1050:	8e 7f       	andi	r24, 0xFE	; 254
    1052:	8c 93       	st	X, r24
    1054:	34 c0       	rjmp	.+104    	; 0x10be <ICU_SW+0xa8>
	} else if (LOC_u8counter == 2) {
    1056:	80 91 78 01 	lds	r24, 0x0178
    105a:	82 30       	cpi	r24, 0x02	; 2
    105c:	e1 f4       	brne	.+56     	; 0x1096 <ICU_SW+0x80>
		//second rising edge
		MCAL_T1_voidGetTCNT1Value(&on_Ticks);
    105e:	8b e7       	ldi	r24, 0x7B	; 123
    1060:	91 e0       	ldi	r25, 0x01	; 1
    1062:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <MCAL_T1_voidGetTCNT1Value>
		on_Ticks--;
    1066:	80 91 7b 01 	lds	r24, 0x017B
    106a:	90 91 7c 01 	lds	r25, 0x017C
    106e:	01 97       	sbiw	r24, 0x01	; 1
    1070:	90 93 7c 01 	sts	0x017C, r25
    1074:	80 93 7b 01 	sts	0x017B, r24
		//Change Int0 to Trigger to falling edge
		SET_BIT(MCUCR, Pin1);
    1078:	a5 e5       	ldi	r26, 0x55	; 85
    107a:	b0 e0       	ldi	r27, 0x00	; 0
    107c:	e5 e5       	ldi	r30, 0x55	; 85
    107e:	f0 e0       	ldi	r31, 0x00	; 0
    1080:	80 81       	ld	r24, Z
    1082:	82 60       	ori	r24, 0x02	; 2
    1084:	8c 93       	st	X, r24
		SET_BIT(MCUCR, Pin0);
    1086:	a5 e5       	ldi	r26, 0x55	; 85
    1088:	b0 e0       	ldi	r27, 0x00	; 0
    108a:	e5 e5       	ldi	r30, 0x55	; 85
    108c:	f0 e0       	ldi	r31, 0x00	; 0
    108e:	80 81       	ld	r24, Z
    1090:	81 60       	ori	r24, 0x01	; 1
    1092:	8c 93       	st	X, r24
    1094:	14 c0       	rjmp	.+40     	; 0x10be <ICU_SW+0xa8>
	} else if (LOC_u8counter == 3) {
    1096:	80 91 78 01 	lds	r24, 0x0178
    109a:	83 30       	cpi	r24, 0x03	; 3
    109c:	81 f4       	brne	.+32     	; 0x10be <ICU_SW+0xa8>
		//Falling edge to get on time
		MCAL_T1_voidGetTCNT1Value(&period_Ticks);
    109e:	89 e7       	ldi	r24, 0x79	; 121
    10a0:	91 e0       	ldi	r25, 0x01	; 1
    10a2:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <MCAL_T1_voidGetTCNT1Value>
		period_Ticks--;
    10a6:	80 91 79 01 	lds	r24, 0x0179
    10aa:	90 91 7a 01 	lds	r25, 0x017A
    10ae:	01 97       	sbiw	r24, 0x01	; 1
    10b0:	90 93 7a 01 	sts	0x017A, r25
    10b4:	80 93 79 01 	sts	0x0179, r24
		MCAL_Interrupt_EnableGIE(Disable);
    10b8:	80 e0       	ldi	r24, 0x00	; 0
    10ba:	0e 94 32 18 	call	0x3064	; 0x3064 <MCAL_Interrupt_EnableGIE>
	}
}
    10be:	cf 91       	pop	r28
    10c0:	df 91       	pop	r29
    10c2:	08 95       	ret

000010c4 <MCAL_WDT_u8Enable>:
 *      Author: Mohamed
 */

#include "WDT.h"

void MCAL_WDT_u8Enable(void) {
    10c4:	df 93       	push	r29
    10c6:	cf 93       	push	r28
    10c8:	cd b7       	in	r28, 0x3d	; 61
    10ca:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(WDTCR, WDTCR_Pin3);
    10cc:	a1 e4       	ldi	r26, 0x41	; 65
    10ce:	b0 e0       	ldi	r27, 0x00	; 0
    10d0:	e1 e4       	ldi	r30, 0x41	; 65
    10d2:	f0 e0       	ldi	r31, 0x00	; 0
    10d4:	80 81       	ld	r24, Z
    10d6:	88 60       	ori	r24, 0x08	; 8
    10d8:	8c 93       	st	X, r24
	SET_BIT(WDTCR, WDTCR_Pin4);
    10da:	a1 e4       	ldi	r26, 0x41	; 65
    10dc:	b0 e0       	ldi	r27, 0x00	; 0
    10de:	e1 e4       	ldi	r30, 0x41	; 65
    10e0:	f0 e0       	ldi	r31, 0x00	; 0
    10e2:	80 81       	ld	r24, Z
    10e4:	80 61       	ori	r24, 0x10	; 16
    10e6:	8c 93       	st	X, r24
}
    10e8:	cf 91       	pop	r28
    10ea:	df 91       	pop	r29
    10ec:	08 95       	ret

000010ee <MCAL_WDT_u8SetTime>:
void MCAL_WDT_u8SetTime(u8 Loc_u8Time) {
    10ee:	df 93       	push	r29
    10f0:	cf 93       	push	r28
    10f2:	0f 92       	push	r0
    10f4:	cd b7       	in	r28, 0x3d	; 61
    10f6:	de b7       	in	r29, 0x3e	; 62
    10f8:	89 83       	std	Y+1, r24	; 0x01
	if (Loc_u8Time == Time_16_3_ms) {
    10fa:	89 81       	ldd	r24, Y+1	; 0x01
    10fc:	88 23       	and	r24, r24
    10fe:	b1 f4       	brne	.+44     	; 0x112c <MCAL_WDT_u8SetTime+0x3e>
		CLR_BIT(WDTCR, WDTCR_Pin0);
    1100:	a1 e4       	ldi	r26, 0x41	; 65
    1102:	b0 e0       	ldi	r27, 0x00	; 0
    1104:	e1 e4       	ldi	r30, 0x41	; 65
    1106:	f0 e0       	ldi	r31, 0x00	; 0
    1108:	80 81       	ld	r24, Z
    110a:	8e 7f       	andi	r24, 0xFE	; 254
    110c:	8c 93       	st	X, r24
		CLR_BIT(WDTCR, WDTCR_Pin1);
    110e:	a1 e4       	ldi	r26, 0x41	; 65
    1110:	b0 e0       	ldi	r27, 0x00	; 0
    1112:	e1 e4       	ldi	r30, 0x41	; 65
    1114:	f0 e0       	ldi	r31, 0x00	; 0
    1116:	80 81       	ld	r24, Z
    1118:	8d 7f       	andi	r24, 0xFD	; 253
    111a:	8c 93       	st	X, r24
		CLR_BIT(WDTCR, WDTCR_Pin2);
    111c:	a1 e4       	ldi	r26, 0x41	; 65
    111e:	b0 e0       	ldi	r27, 0x00	; 0
    1120:	e1 e4       	ldi	r30, 0x41	; 65
    1122:	f0 e0       	ldi	r31, 0x00	; 0
    1124:	80 81       	ld	r24, Z
    1126:	8b 7f       	andi	r24, 0xFB	; 251
    1128:	8c 93       	st	X, r24
    112a:	ae c0       	rjmp	.+348    	; 0x1288 <MCAL_WDT_u8SetTime+0x19a>
	} else if (Loc_u8Time == Time_32_5_ms) {
    112c:	89 81       	ldd	r24, Y+1	; 0x01
    112e:	81 30       	cpi	r24, 0x01	; 1
    1130:	b1 f4       	brne	.+44     	; 0x115e <MCAL_WDT_u8SetTime+0x70>
		SET_BIT(WDTCR, WDTCR_Pin0);
    1132:	a1 e4       	ldi	r26, 0x41	; 65
    1134:	b0 e0       	ldi	r27, 0x00	; 0
    1136:	e1 e4       	ldi	r30, 0x41	; 65
    1138:	f0 e0       	ldi	r31, 0x00	; 0
    113a:	80 81       	ld	r24, Z
    113c:	81 60       	ori	r24, 0x01	; 1
    113e:	8c 93       	st	X, r24
		CLR_BIT(WDTCR, WDTCR_Pin1);
    1140:	a1 e4       	ldi	r26, 0x41	; 65
    1142:	b0 e0       	ldi	r27, 0x00	; 0
    1144:	e1 e4       	ldi	r30, 0x41	; 65
    1146:	f0 e0       	ldi	r31, 0x00	; 0
    1148:	80 81       	ld	r24, Z
    114a:	8d 7f       	andi	r24, 0xFD	; 253
    114c:	8c 93       	st	X, r24
		CLR_BIT(WDTCR, WDTCR_Pin2);
    114e:	a1 e4       	ldi	r26, 0x41	; 65
    1150:	b0 e0       	ldi	r27, 0x00	; 0
    1152:	e1 e4       	ldi	r30, 0x41	; 65
    1154:	f0 e0       	ldi	r31, 0x00	; 0
    1156:	80 81       	ld	r24, Z
    1158:	8b 7f       	andi	r24, 0xFB	; 251
    115a:	8c 93       	st	X, r24
    115c:	95 c0       	rjmp	.+298    	; 0x1288 <MCAL_WDT_u8SetTime+0x19a>
	} else if (Loc_u8Time == Time_65_0_ms) {
    115e:	89 81       	ldd	r24, Y+1	; 0x01
    1160:	82 30       	cpi	r24, 0x02	; 2
    1162:	b1 f4       	brne	.+44     	; 0x1190 <MCAL_WDT_u8SetTime+0xa2>
		CLR_BIT(WDTCR, WDTCR_Pin0);
    1164:	a1 e4       	ldi	r26, 0x41	; 65
    1166:	b0 e0       	ldi	r27, 0x00	; 0
    1168:	e1 e4       	ldi	r30, 0x41	; 65
    116a:	f0 e0       	ldi	r31, 0x00	; 0
    116c:	80 81       	ld	r24, Z
    116e:	8e 7f       	andi	r24, 0xFE	; 254
    1170:	8c 93       	st	X, r24
		SET_BIT(WDTCR, WDTCR_Pin1);
    1172:	a1 e4       	ldi	r26, 0x41	; 65
    1174:	b0 e0       	ldi	r27, 0x00	; 0
    1176:	e1 e4       	ldi	r30, 0x41	; 65
    1178:	f0 e0       	ldi	r31, 0x00	; 0
    117a:	80 81       	ld	r24, Z
    117c:	82 60       	ori	r24, 0x02	; 2
    117e:	8c 93       	st	X, r24
		CLR_BIT(WDTCR, WDTCR_Pin2);
    1180:	a1 e4       	ldi	r26, 0x41	; 65
    1182:	b0 e0       	ldi	r27, 0x00	; 0
    1184:	e1 e4       	ldi	r30, 0x41	; 65
    1186:	f0 e0       	ldi	r31, 0x00	; 0
    1188:	80 81       	ld	r24, Z
    118a:	8b 7f       	andi	r24, 0xFB	; 251
    118c:	8c 93       	st	X, r24
    118e:	7c c0       	rjmp	.+248    	; 0x1288 <MCAL_WDT_u8SetTime+0x19a>
	} else if (Loc_u8Time == Time_0_13_s) {
    1190:	89 81       	ldd	r24, Y+1	; 0x01
    1192:	83 30       	cpi	r24, 0x03	; 3
    1194:	b1 f4       	brne	.+44     	; 0x11c2 <MCAL_WDT_u8SetTime+0xd4>
		SET_BIT(WDTCR, WDTCR_Pin0);
    1196:	a1 e4       	ldi	r26, 0x41	; 65
    1198:	b0 e0       	ldi	r27, 0x00	; 0
    119a:	e1 e4       	ldi	r30, 0x41	; 65
    119c:	f0 e0       	ldi	r31, 0x00	; 0
    119e:	80 81       	ld	r24, Z
    11a0:	81 60       	ori	r24, 0x01	; 1
    11a2:	8c 93       	st	X, r24
		SET_BIT(WDTCR, WDTCR_Pin1);
    11a4:	a1 e4       	ldi	r26, 0x41	; 65
    11a6:	b0 e0       	ldi	r27, 0x00	; 0
    11a8:	e1 e4       	ldi	r30, 0x41	; 65
    11aa:	f0 e0       	ldi	r31, 0x00	; 0
    11ac:	80 81       	ld	r24, Z
    11ae:	82 60       	ori	r24, 0x02	; 2
    11b0:	8c 93       	st	X, r24
		CLR_BIT(WDTCR, WDTCR_Pin2);
    11b2:	a1 e4       	ldi	r26, 0x41	; 65
    11b4:	b0 e0       	ldi	r27, 0x00	; 0
    11b6:	e1 e4       	ldi	r30, 0x41	; 65
    11b8:	f0 e0       	ldi	r31, 0x00	; 0
    11ba:	80 81       	ld	r24, Z
    11bc:	8b 7f       	andi	r24, 0xFB	; 251
    11be:	8c 93       	st	X, r24
    11c0:	63 c0       	rjmp	.+198    	; 0x1288 <MCAL_WDT_u8SetTime+0x19a>
	} else if (Loc_u8Time == Time_0_26_s) {
    11c2:	89 81       	ldd	r24, Y+1	; 0x01
    11c4:	84 30       	cpi	r24, 0x04	; 4
    11c6:	b1 f4       	brne	.+44     	; 0x11f4 <MCAL_WDT_u8SetTime+0x106>
		CLR_BIT(WDTCR, WDTCR_Pin0);
    11c8:	a1 e4       	ldi	r26, 0x41	; 65
    11ca:	b0 e0       	ldi	r27, 0x00	; 0
    11cc:	e1 e4       	ldi	r30, 0x41	; 65
    11ce:	f0 e0       	ldi	r31, 0x00	; 0
    11d0:	80 81       	ld	r24, Z
    11d2:	8e 7f       	andi	r24, 0xFE	; 254
    11d4:	8c 93       	st	X, r24
		CLR_BIT(WDTCR, WDTCR_Pin1);
    11d6:	a1 e4       	ldi	r26, 0x41	; 65
    11d8:	b0 e0       	ldi	r27, 0x00	; 0
    11da:	e1 e4       	ldi	r30, 0x41	; 65
    11dc:	f0 e0       	ldi	r31, 0x00	; 0
    11de:	80 81       	ld	r24, Z
    11e0:	8d 7f       	andi	r24, 0xFD	; 253
    11e2:	8c 93       	st	X, r24
		SET_BIT(WDTCR, WDTCR_Pin2);
    11e4:	a1 e4       	ldi	r26, 0x41	; 65
    11e6:	b0 e0       	ldi	r27, 0x00	; 0
    11e8:	e1 e4       	ldi	r30, 0x41	; 65
    11ea:	f0 e0       	ldi	r31, 0x00	; 0
    11ec:	80 81       	ld	r24, Z
    11ee:	84 60       	ori	r24, 0x04	; 4
    11f0:	8c 93       	st	X, r24
    11f2:	4a c0       	rjmp	.+148    	; 0x1288 <MCAL_WDT_u8SetTime+0x19a>
	} else if (Loc_u8Time == Time_0_52_s) {
    11f4:	89 81       	ldd	r24, Y+1	; 0x01
    11f6:	85 30       	cpi	r24, 0x05	; 5
    11f8:	b1 f4       	brne	.+44     	; 0x1226 <MCAL_WDT_u8SetTime+0x138>
		SET_BIT(WDTCR, WDTCR_Pin0);
    11fa:	a1 e4       	ldi	r26, 0x41	; 65
    11fc:	b0 e0       	ldi	r27, 0x00	; 0
    11fe:	e1 e4       	ldi	r30, 0x41	; 65
    1200:	f0 e0       	ldi	r31, 0x00	; 0
    1202:	80 81       	ld	r24, Z
    1204:	81 60       	ori	r24, 0x01	; 1
    1206:	8c 93       	st	X, r24
		CLR_BIT(WDTCR, WDTCR_Pin1);
    1208:	a1 e4       	ldi	r26, 0x41	; 65
    120a:	b0 e0       	ldi	r27, 0x00	; 0
    120c:	e1 e4       	ldi	r30, 0x41	; 65
    120e:	f0 e0       	ldi	r31, 0x00	; 0
    1210:	80 81       	ld	r24, Z
    1212:	8d 7f       	andi	r24, 0xFD	; 253
    1214:	8c 93       	st	X, r24
		SET_BIT(WDTCR, WDTCR_Pin2);
    1216:	a1 e4       	ldi	r26, 0x41	; 65
    1218:	b0 e0       	ldi	r27, 0x00	; 0
    121a:	e1 e4       	ldi	r30, 0x41	; 65
    121c:	f0 e0       	ldi	r31, 0x00	; 0
    121e:	80 81       	ld	r24, Z
    1220:	84 60       	ori	r24, 0x04	; 4
    1222:	8c 93       	st	X, r24
    1224:	31 c0       	rjmp	.+98     	; 0x1288 <MCAL_WDT_u8SetTime+0x19a>
	} else if (Loc_u8Time == Time_1_0_s) {
    1226:	89 81       	ldd	r24, Y+1	; 0x01
    1228:	86 30       	cpi	r24, 0x06	; 6
    122a:	b1 f4       	brne	.+44     	; 0x1258 <MCAL_WDT_u8SetTime+0x16a>
		CLR_BIT(WDTCR, WDTCR_Pin0);
    122c:	a1 e4       	ldi	r26, 0x41	; 65
    122e:	b0 e0       	ldi	r27, 0x00	; 0
    1230:	e1 e4       	ldi	r30, 0x41	; 65
    1232:	f0 e0       	ldi	r31, 0x00	; 0
    1234:	80 81       	ld	r24, Z
    1236:	8e 7f       	andi	r24, 0xFE	; 254
    1238:	8c 93       	st	X, r24
		SET_BIT(WDTCR, WDTCR_Pin1);
    123a:	a1 e4       	ldi	r26, 0x41	; 65
    123c:	b0 e0       	ldi	r27, 0x00	; 0
    123e:	e1 e4       	ldi	r30, 0x41	; 65
    1240:	f0 e0       	ldi	r31, 0x00	; 0
    1242:	80 81       	ld	r24, Z
    1244:	82 60       	ori	r24, 0x02	; 2
    1246:	8c 93       	st	X, r24
		SET_BIT(WDTCR, WDTCR_Pin2);
    1248:	a1 e4       	ldi	r26, 0x41	; 65
    124a:	b0 e0       	ldi	r27, 0x00	; 0
    124c:	e1 e4       	ldi	r30, 0x41	; 65
    124e:	f0 e0       	ldi	r31, 0x00	; 0
    1250:	80 81       	ld	r24, Z
    1252:	84 60       	ori	r24, 0x04	; 4
    1254:	8c 93       	st	X, r24
    1256:	18 c0       	rjmp	.+48     	; 0x1288 <MCAL_WDT_u8SetTime+0x19a>
	} else if (Loc_u8Time == Time_2_1_s) {
    1258:	89 81       	ldd	r24, Y+1	; 0x01
    125a:	87 30       	cpi	r24, 0x07	; 7
    125c:	a9 f4       	brne	.+42     	; 0x1288 <MCAL_WDT_u8SetTime+0x19a>
		SET_BIT(WDTCR, WDTCR_Pin0);
    125e:	a1 e4       	ldi	r26, 0x41	; 65
    1260:	b0 e0       	ldi	r27, 0x00	; 0
    1262:	e1 e4       	ldi	r30, 0x41	; 65
    1264:	f0 e0       	ldi	r31, 0x00	; 0
    1266:	80 81       	ld	r24, Z
    1268:	81 60       	ori	r24, 0x01	; 1
    126a:	8c 93       	st	X, r24
		SET_BIT(WDTCR, WDTCR_Pin1);
    126c:	a1 e4       	ldi	r26, 0x41	; 65
    126e:	b0 e0       	ldi	r27, 0x00	; 0
    1270:	e1 e4       	ldi	r30, 0x41	; 65
    1272:	f0 e0       	ldi	r31, 0x00	; 0
    1274:	80 81       	ld	r24, Z
    1276:	82 60       	ori	r24, 0x02	; 2
    1278:	8c 93       	st	X, r24
		SET_BIT(WDTCR, WDTCR_Pin2);
    127a:	a1 e4       	ldi	r26, 0x41	; 65
    127c:	b0 e0       	ldi	r27, 0x00	; 0
    127e:	e1 e4       	ldi	r30, 0x41	; 65
    1280:	f0 e0       	ldi	r31, 0x00	; 0
    1282:	80 81       	ld	r24, Z
    1284:	84 60       	ori	r24, 0x04	; 4
    1286:	8c 93       	st	X, r24
	}
}
    1288:	0f 90       	pop	r0
    128a:	cf 91       	pop	r28
    128c:	df 91       	pop	r29
    128e:	08 95       	ret

00001290 <MCAL_WDT_u8Disable>:
void MCAL_WDT_u8Disable(void) {
    1290:	df 93       	push	r29
    1292:	cf 93       	push	r28
    1294:	cd b7       	in	r28, 0x3d	; 61
    1296:	de b7       	in	r29, 0x3e	; 62
	WDTCR = WDTCR_Disable;
    1298:	e1 e4       	ldi	r30, 0x41	; 65
    129a:	f0 e0       	ldi	r31, 0x00	; 0
    129c:	88 e1       	ldi	r24, 0x18	; 24
    129e:	80 83       	st	Z, r24
	WDTCR = WDTCR_Zero;
    12a0:	e1 e4       	ldi	r30, 0x41	; 65
    12a2:	f0 e0       	ldi	r31, 0x00	; 0
    12a4:	10 82       	st	Z, r1
}
    12a6:	cf 91       	pop	r28
    12a8:	df 91       	pop	r29
    12aa:	08 95       	ret

000012ac <MCAL_UART_UARTInit>:
 */

#include "UART.h"
//#include "avr/interrupt.h"

void MCAL_UART_UARTInit(void) {
    12ac:	df 93       	push	r29
    12ae:	cf 93       	push	r28
    12b0:	cd b7       	in	r28, 0x3d	; 61
    12b2:	de b7       	in	r29, 0x3e	; 62
	/* Set baud rate */
	UBRRH = (u8) (Baud_Rate >> Shift_8_bit);
    12b4:	e0 e4       	ldi	r30, 0x40	; 64
    12b6:	f0 e0       	ldi	r31, 0x00	; 0
    12b8:	10 82       	st	Z, r1
	UBRRL = (u8) Baud_Rate;
    12ba:	e9 e2       	ldi	r30, 0x29	; 41
    12bc:	f0 e0       	ldi	r31, 0x00	; 0
    12be:	87 e6       	ldi	r24, 0x67	; 103
    12c0:	80 83       	st	Z, r24

	/* Enable RX and TX */
//	UCSRB = (1 << RXEN) | (1 << TXEN);
	SET_BIT(UCSRB,RXEN_PIN);
    12c2:	aa e2       	ldi	r26, 0x2A	; 42
    12c4:	b0 e0       	ldi	r27, 0x00	; 0
    12c6:	ea e2       	ldi	r30, 0x2A	; 42
    12c8:	f0 e0       	ldi	r31, 0x00	; 0
    12ca:	80 81       	ld	r24, Z
    12cc:	80 61       	ori	r24, 0x10	; 16
    12ce:	8c 93       	st	X, r24
	SET_BIT(UCSRB,TXEN_PIN);
    12d0:	aa e2       	ldi	r26, 0x2A	; 42
    12d2:	b0 e0       	ldi	r27, 0x00	; 0
    12d4:	ea e2       	ldi	r30, 0x2A	; 42
    12d6:	f0 e0       	ldi	r31, 0x00	; 0
    12d8:	80 81       	ld	r24, Z
    12da:	88 60       	ori	r24, 0x08	; 8
    12dc:	8c 93       	st	X, r24

	/* Set frame format: 8data, 2stop bit */
//	UCSRC = (1 << URSEL) | (1 << USBS) | (3 << UCSZ0);
	UCSRC = UCSRC_Size;
    12de:	e0 e4       	ldi	r30, 0x40	; 64
    12e0:	f0 e0       	ldi	r31, 0x00	; 0
    12e2:	8e e8       	ldi	r24, 0x8E	; 142
    12e4:	80 83       	st	Z, r24
	//Logical Error
//	SET_BIT(UCSRC,URSEL_PIN);
//	SET_BIT(UCSRC,USBS_PIN);
//	SET_BIT(UCSRC,UCSZ0_PIN);
//	SET_BIT(UCSRC,UCSZ1_PIN);
}
    12e6:	cf 91       	pop	r28
    12e8:	df 91       	pop	r29
    12ea:	08 95       	ret

000012ec <MCAL_UART_UARTTransmit>:

void MCAL_UART_UARTTransmit(u8 Loc_u8data) {
    12ec:	df 93       	push	r29
    12ee:	cf 93       	push	r28
    12f0:	0f 92       	push	r0
    12f2:	cd b7       	in	r28, 0x3d	; 61
    12f4:	de b7       	in	r29, 0x3e	; 62
    12f6:	89 83       	std	Y+1, r24	; 0x01
	/* Wait for empty transmit buffer */
//	while (!( UCSRA & (1 << UDRE_PIN)));
	while (GET_BIT(UCSRA,UDRE_PIN)==0);
    12f8:	eb e2       	ldi	r30, 0x2B	; 43
    12fa:	f0 e0       	ldi	r31, 0x00	; 0
    12fc:	80 81       	ld	r24, Z
    12fe:	82 95       	swap	r24
    1300:	86 95       	lsr	r24
    1302:	87 70       	andi	r24, 0x07	; 7
    1304:	88 2f       	mov	r24, r24
    1306:	90 e0       	ldi	r25, 0x00	; 0
    1308:	81 70       	andi	r24, 0x01	; 1
    130a:	90 70       	andi	r25, 0x00	; 0
    130c:	00 97       	sbiw	r24, 0x00	; 0
    130e:	a1 f3       	breq	.-24     	; 0x12f8 <MCAL_UART_UARTTransmit+0xc>

	/* Put data into buffer, sends the data */
	UDR = Loc_u8data;
    1310:	ec e2       	ldi	r30, 0x2C	; 44
    1312:	f0 e0       	ldi	r31, 0x00	; 0
    1314:	89 81       	ldd	r24, Y+1	; 0x01
    1316:	80 83       	st	Z, r24

	/* Wait for data to be transmitted */
	while (GET_BIT(UCSRA,TXC_PIN)==0);
    1318:	eb e2       	ldi	r30, 0x2B	; 43
    131a:	f0 e0       	ldi	r31, 0x00	; 0
    131c:	80 81       	ld	r24, Z
    131e:	82 95       	swap	r24
    1320:	86 95       	lsr	r24
    1322:	86 95       	lsr	r24
    1324:	83 70       	andi	r24, 0x03	; 3
    1326:	88 2f       	mov	r24, r24
    1328:	90 e0       	ldi	r25, 0x00	; 0
    132a:	81 70       	andi	r24, 0x01	; 1
    132c:	90 70       	andi	r25, 0x00	; 0
    132e:	00 97       	sbiw	r24, 0x00	; 0
    1330:	99 f3       	breq	.-26     	; 0x1318 <MCAL_UART_UARTTransmit+0x2c>
	SET_BIT(UCSRA,TXC_PIN);
    1332:	ab e2       	ldi	r26, 0x2B	; 43
    1334:	b0 e0       	ldi	r27, 0x00	; 0
    1336:	eb e2       	ldi	r30, 0x2B	; 43
    1338:	f0 e0       	ldi	r31, 0x00	; 0
    133a:	80 81       	ld	r24, Z
    133c:	80 64       	ori	r24, 0x40	; 64
    133e:	8c 93       	st	X, r24

}
    1340:	0f 90       	pop	r0
    1342:	cf 91       	pop	r28
    1344:	df 91       	pop	r29
    1346:	08 95       	ret

00001348 <MCAL_UART_UARTReceive>:
//		MCAL_UART_UARTTransmit(Loc_u8data[i]);
//	}
//
//}

void MCAL_UART_UARTReceive(u8* Loc_u8data) {
    1348:	df 93       	push	r29
    134a:	cf 93       	push	r28
    134c:	00 d0       	rcall	.+0      	; 0x134e <MCAL_UART_UARTReceive+0x6>
    134e:	cd b7       	in	r28, 0x3d	; 61
    1350:	de b7       	in	r29, 0x3e	; 62
    1352:	9a 83       	std	Y+2, r25	; 0x02
    1354:	89 83       	std	Y+1, r24	; 0x01
	/* Wait for data to be received */
//	while (!(UCSRA & (1 << RXC_PIN)));
	while (GET_BIT(UCSRA,RXC_PIN)==0);
    1356:	eb e2       	ldi	r30, 0x2B	; 43
    1358:	f0 e0       	ldi	r31, 0x00	; 0
    135a:	80 81       	ld	r24, Z
    135c:	88 23       	and	r24, r24
    135e:	dc f7       	brge	.-10     	; 0x1356 <MCAL_UART_UARTReceive+0xe>

	/* 	Save Received Data in Var-Loc_u8data */
	*Loc_u8data=UDR;
    1360:	ec e2       	ldi	r30, 0x2C	; 44
    1362:	f0 e0       	ldi	r31, 0x00	; 0
    1364:	80 81       	ld	r24, Z
    1366:	e9 81       	ldd	r30, Y+1	; 0x01
    1368:	fa 81       	ldd	r31, Y+2	; 0x02
    136a:	80 83       	st	Z, r24
}
    136c:	0f 90       	pop	r0
    136e:	0f 90       	pop	r0
    1370:	cf 91       	pop	r28
    1372:	df 91       	pop	r29
    1374:	08 95       	ret

00001376 <MCAL_T1_u8T1Init>:
 *  Created on: Oct 22, 2023
 *      Author: TOP_WORLD
 */
#include "Timer1.h"
void (*Gptr_3)(void)='\0';
u8 MCAL_T1_u8T1Init(u8 LOC_u8Timer1Mode) {
    1376:	df 93       	push	r29
    1378:	cf 93       	push	r28
    137a:	00 d0       	rcall	.+0      	; 0x137c <MCAL_T1_u8T1Init+0x6>
    137c:	cd b7       	in	r28, 0x3d	; 61
    137e:	de b7       	in	r29, 0x3e	; 62
    1380:	8a 83       	std	Y+2, r24	; 0x02
	u8 LOC_u8ReturnValue = E_NOT_OK;
    1382:	81 e0       	ldi	r24, 0x01	; 1
    1384:	89 83       	std	Y+1, r24	; 0x01
	if (LOC_u8Timer1Mode <= FAST_PWM_OCR1A) {
    1386:	8a 81       	ldd	r24, Y+2	; 0x02
    1388:	80 31       	cpi	r24, 0x10	; 16
    138a:	08 f0       	brcs	.+2      	; 0x138e <MCAL_T1_u8T1Init+0x18>
    138c:	0f c2       	rjmp	.+1054   	; 0x17ac <MCAL_T1_u8T1Init+0x436>
		if (LOC_u8Timer1Mode == NORMAL_MODE) {
    138e:	8a 81       	ldd	r24, Y+2	; 0x02
    1390:	88 23       	and	r24, r24
    1392:	f1 f4       	brne	.+60     	; 0x13d0 <MCAL_T1_u8T1Init+0x5a>
			CLR_BIT(TCCR1A, Pin0);
    1394:	af e4       	ldi	r26, 0x4F	; 79
    1396:	b0 e0       	ldi	r27, 0x00	; 0
    1398:	ef e4       	ldi	r30, 0x4F	; 79
    139a:	f0 e0       	ldi	r31, 0x00	; 0
    139c:	80 81       	ld	r24, Z
    139e:	8e 7f       	andi	r24, 0xFE	; 254
    13a0:	8c 93       	st	X, r24
			CLR_BIT(TCCR1A, Pin1);
    13a2:	af e4       	ldi	r26, 0x4F	; 79
    13a4:	b0 e0       	ldi	r27, 0x00	; 0
    13a6:	ef e4       	ldi	r30, 0x4F	; 79
    13a8:	f0 e0       	ldi	r31, 0x00	; 0
    13aa:	80 81       	ld	r24, Z
    13ac:	8d 7f       	andi	r24, 0xFD	; 253
    13ae:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B, Pin3);
    13b0:	ae e4       	ldi	r26, 0x4E	; 78
    13b2:	b0 e0       	ldi	r27, 0x00	; 0
    13b4:	ee e4       	ldi	r30, 0x4E	; 78
    13b6:	f0 e0       	ldi	r31, 0x00	; 0
    13b8:	80 81       	ld	r24, Z
    13ba:	87 7f       	andi	r24, 0xF7	; 247
    13bc:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B, Pin4);
    13be:	ae e4       	ldi	r26, 0x4E	; 78
    13c0:	b0 e0       	ldi	r27, 0x00	; 0
    13c2:	ee e4       	ldi	r30, 0x4E	; 78
    13c4:	f0 e0       	ldi	r31, 0x00	; 0
    13c6:	80 81       	ld	r24, Z
    13c8:	8f 7e       	andi	r24, 0xEF	; 239
    13ca:	8c 93       	st	X, r24
			LOC_u8ReturnValue = E_OK;
    13cc:	19 82       	std	Y+1, r1	; 0x01
    13ce:	ee c1       	rjmp	.+988    	; 0x17ac <MCAL_T1_u8T1Init+0x436>
		} else if (LOC_u8Timer1Mode == PWM_PHASE_CORRECT_8bit) {
    13d0:	8a 81       	ldd	r24, Y+2	; 0x02
    13d2:	81 30       	cpi	r24, 0x01	; 1
    13d4:	f1 f4       	brne	.+60     	; 0x1412 <MCAL_T1_u8T1Init+0x9c>
			SET_BIT(TCCR1A, Pin0);
    13d6:	af e4       	ldi	r26, 0x4F	; 79
    13d8:	b0 e0       	ldi	r27, 0x00	; 0
    13da:	ef e4       	ldi	r30, 0x4F	; 79
    13dc:	f0 e0       	ldi	r31, 0x00	; 0
    13de:	80 81       	ld	r24, Z
    13e0:	81 60       	ori	r24, 0x01	; 1
    13e2:	8c 93       	st	X, r24
			CLR_BIT(TCCR1A, Pin1);
    13e4:	af e4       	ldi	r26, 0x4F	; 79
    13e6:	b0 e0       	ldi	r27, 0x00	; 0
    13e8:	ef e4       	ldi	r30, 0x4F	; 79
    13ea:	f0 e0       	ldi	r31, 0x00	; 0
    13ec:	80 81       	ld	r24, Z
    13ee:	8d 7f       	andi	r24, 0xFD	; 253
    13f0:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B, Pin3);
    13f2:	ae e4       	ldi	r26, 0x4E	; 78
    13f4:	b0 e0       	ldi	r27, 0x00	; 0
    13f6:	ee e4       	ldi	r30, 0x4E	; 78
    13f8:	f0 e0       	ldi	r31, 0x00	; 0
    13fa:	80 81       	ld	r24, Z
    13fc:	87 7f       	andi	r24, 0xF7	; 247
    13fe:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B, Pin4);
    1400:	ae e4       	ldi	r26, 0x4E	; 78
    1402:	b0 e0       	ldi	r27, 0x00	; 0
    1404:	ee e4       	ldi	r30, 0x4E	; 78
    1406:	f0 e0       	ldi	r31, 0x00	; 0
    1408:	80 81       	ld	r24, Z
    140a:	8f 7e       	andi	r24, 0xEF	; 239
    140c:	8c 93       	st	X, r24
			LOC_u8ReturnValue = E_OK;
    140e:	19 82       	std	Y+1, r1	; 0x01
    1410:	cd c1       	rjmp	.+922    	; 0x17ac <MCAL_T1_u8T1Init+0x436>
		} else if (LOC_u8Timer1Mode == PWM_PHASE_CORRECT_9bit) {
    1412:	8a 81       	ldd	r24, Y+2	; 0x02
    1414:	82 30       	cpi	r24, 0x02	; 2
    1416:	f1 f4       	brne	.+60     	; 0x1454 <MCAL_T1_u8T1Init+0xde>
			CLR_BIT(TCCR1A, Pin0);
    1418:	af e4       	ldi	r26, 0x4F	; 79
    141a:	b0 e0       	ldi	r27, 0x00	; 0
    141c:	ef e4       	ldi	r30, 0x4F	; 79
    141e:	f0 e0       	ldi	r31, 0x00	; 0
    1420:	80 81       	ld	r24, Z
    1422:	8e 7f       	andi	r24, 0xFE	; 254
    1424:	8c 93       	st	X, r24
			SET_BIT(TCCR1A, Pin1);
    1426:	af e4       	ldi	r26, 0x4F	; 79
    1428:	b0 e0       	ldi	r27, 0x00	; 0
    142a:	ef e4       	ldi	r30, 0x4F	; 79
    142c:	f0 e0       	ldi	r31, 0x00	; 0
    142e:	80 81       	ld	r24, Z
    1430:	82 60       	ori	r24, 0x02	; 2
    1432:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B, Pin3);
    1434:	ae e4       	ldi	r26, 0x4E	; 78
    1436:	b0 e0       	ldi	r27, 0x00	; 0
    1438:	ee e4       	ldi	r30, 0x4E	; 78
    143a:	f0 e0       	ldi	r31, 0x00	; 0
    143c:	80 81       	ld	r24, Z
    143e:	87 7f       	andi	r24, 0xF7	; 247
    1440:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B, Pin4);
    1442:	ae e4       	ldi	r26, 0x4E	; 78
    1444:	b0 e0       	ldi	r27, 0x00	; 0
    1446:	ee e4       	ldi	r30, 0x4E	; 78
    1448:	f0 e0       	ldi	r31, 0x00	; 0
    144a:	80 81       	ld	r24, Z
    144c:	8f 7e       	andi	r24, 0xEF	; 239
    144e:	8c 93       	st	X, r24
			LOC_u8ReturnValue = E_OK;
    1450:	19 82       	std	Y+1, r1	; 0x01
    1452:	ac c1       	rjmp	.+856    	; 0x17ac <MCAL_T1_u8T1Init+0x436>
		} else if (LOC_u8Timer1Mode == PWM_PHASE_CORRECT_10bit) {
    1454:	8a 81       	ldd	r24, Y+2	; 0x02
    1456:	83 30       	cpi	r24, 0x03	; 3
    1458:	f1 f4       	brne	.+60     	; 0x1496 <MCAL_T1_u8T1Init+0x120>
			SET_BIT(TCCR1A, Pin0);
    145a:	af e4       	ldi	r26, 0x4F	; 79
    145c:	b0 e0       	ldi	r27, 0x00	; 0
    145e:	ef e4       	ldi	r30, 0x4F	; 79
    1460:	f0 e0       	ldi	r31, 0x00	; 0
    1462:	80 81       	ld	r24, Z
    1464:	81 60       	ori	r24, 0x01	; 1
    1466:	8c 93       	st	X, r24
			SET_BIT(TCCR1A, Pin1);
    1468:	af e4       	ldi	r26, 0x4F	; 79
    146a:	b0 e0       	ldi	r27, 0x00	; 0
    146c:	ef e4       	ldi	r30, 0x4F	; 79
    146e:	f0 e0       	ldi	r31, 0x00	; 0
    1470:	80 81       	ld	r24, Z
    1472:	82 60       	ori	r24, 0x02	; 2
    1474:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B, Pin3);
    1476:	ae e4       	ldi	r26, 0x4E	; 78
    1478:	b0 e0       	ldi	r27, 0x00	; 0
    147a:	ee e4       	ldi	r30, 0x4E	; 78
    147c:	f0 e0       	ldi	r31, 0x00	; 0
    147e:	80 81       	ld	r24, Z
    1480:	87 7f       	andi	r24, 0xF7	; 247
    1482:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B, Pin4);
    1484:	ae e4       	ldi	r26, 0x4E	; 78
    1486:	b0 e0       	ldi	r27, 0x00	; 0
    1488:	ee e4       	ldi	r30, 0x4E	; 78
    148a:	f0 e0       	ldi	r31, 0x00	; 0
    148c:	80 81       	ld	r24, Z
    148e:	8f 7e       	andi	r24, 0xEF	; 239
    1490:	8c 93       	st	X, r24
			LOC_u8ReturnValue = E_OK;
    1492:	19 82       	std	Y+1, r1	; 0x01
    1494:	8b c1       	rjmp	.+790    	; 0x17ac <MCAL_T1_u8T1Init+0x436>
		} else if (LOC_u8Timer1Mode == CTC_OCR1A) {
    1496:	8a 81       	ldd	r24, Y+2	; 0x02
    1498:	84 30       	cpi	r24, 0x04	; 4
    149a:	f1 f4       	brne	.+60     	; 0x14d8 <MCAL_T1_u8T1Init+0x162>
			CLR_BIT(TCCR1A, Pin0);
    149c:	af e4       	ldi	r26, 0x4F	; 79
    149e:	b0 e0       	ldi	r27, 0x00	; 0
    14a0:	ef e4       	ldi	r30, 0x4F	; 79
    14a2:	f0 e0       	ldi	r31, 0x00	; 0
    14a4:	80 81       	ld	r24, Z
    14a6:	8e 7f       	andi	r24, 0xFE	; 254
    14a8:	8c 93       	st	X, r24
			CLR_BIT(TCCR1A, Pin1);
    14aa:	af e4       	ldi	r26, 0x4F	; 79
    14ac:	b0 e0       	ldi	r27, 0x00	; 0
    14ae:	ef e4       	ldi	r30, 0x4F	; 79
    14b0:	f0 e0       	ldi	r31, 0x00	; 0
    14b2:	80 81       	ld	r24, Z
    14b4:	8d 7f       	andi	r24, 0xFD	; 253
    14b6:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, Pin3);
    14b8:	ae e4       	ldi	r26, 0x4E	; 78
    14ba:	b0 e0       	ldi	r27, 0x00	; 0
    14bc:	ee e4       	ldi	r30, 0x4E	; 78
    14be:	f0 e0       	ldi	r31, 0x00	; 0
    14c0:	80 81       	ld	r24, Z
    14c2:	88 60       	ori	r24, 0x08	; 8
    14c4:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B, Pin4);
    14c6:	ae e4       	ldi	r26, 0x4E	; 78
    14c8:	b0 e0       	ldi	r27, 0x00	; 0
    14ca:	ee e4       	ldi	r30, 0x4E	; 78
    14cc:	f0 e0       	ldi	r31, 0x00	; 0
    14ce:	80 81       	ld	r24, Z
    14d0:	8f 7e       	andi	r24, 0xEF	; 239
    14d2:	8c 93       	st	X, r24
			LOC_u8ReturnValue = E_OK;
    14d4:	19 82       	std	Y+1, r1	; 0x01
    14d6:	6a c1       	rjmp	.+724    	; 0x17ac <MCAL_T1_u8T1Init+0x436>
		} else if (LOC_u8Timer1Mode == FAST_PWM_8bit) {
    14d8:	8a 81       	ldd	r24, Y+2	; 0x02
    14da:	85 30       	cpi	r24, 0x05	; 5
    14dc:	f1 f4       	brne	.+60     	; 0x151a <MCAL_T1_u8T1Init+0x1a4>
			SET_BIT(TCCR1A, Pin0);
    14de:	af e4       	ldi	r26, 0x4F	; 79
    14e0:	b0 e0       	ldi	r27, 0x00	; 0
    14e2:	ef e4       	ldi	r30, 0x4F	; 79
    14e4:	f0 e0       	ldi	r31, 0x00	; 0
    14e6:	80 81       	ld	r24, Z
    14e8:	81 60       	ori	r24, 0x01	; 1
    14ea:	8c 93       	st	X, r24
			CLR_BIT(TCCR1A, Pin1);
    14ec:	af e4       	ldi	r26, 0x4F	; 79
    14ee:	b0 e0       	ldi	r27, 0x00	; 0
    14f0:	ef e4       	ldi	r30, 0x4F	; 79
    14f2:	f0 e0       	ldi	r31, 0x00	; 0
    14f4:	80 81       	ld	r24, Z
    14f6:	8d 7f       	andi	r24, 0xFD	; 253
    14f8:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, Pin3);
    14fa:	ae e4       	ldi	r26, 0x4E	; 78
    14fc:	b0 e0       	ldi	r27, 0x00	; 0
    14fe:	ee e4       	ldi	r30, 0x4E	; 78
    1500:	f0 e0       	ldi	r31, 0x00	; 0
    1502:	80 81       	ld	r24, Z
    1504:	88 60       	ori	r24, 0x08	; 8
    1506:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B, Pin4);
    1508:	ae e4       	ldi	r26, 0x4E	; 78
    150a:	b0 e0       	ldi	r27, 0x00	; 0
    150c:	ee e4       	ldi	r30, 0x4E	; 78
    150e:	f0 e0       	ldi	r31, 0x00	; 0
    1510:	80 81       	ld	r24, Z
    1512:	8f 7e       	andi	r24, 0xEF	; 239
    1514:	8c 93       	st	X, r24
			LOC_u8ReturnValue = E_OK;
    1516:	19 82       	std	Y+1, r1	; 0x01
    1518:	49 c1       	rjmp	.+658    	; 0x17ac <MCAL_T1_u8T1Init+0x436>
		} else if (LOC_u8Timer1Mode == FAST_PWM_9bit) {
    151a:	8a 81       	ldd	r24, Y+2	; 0x02
    151c:	86 30       	cpi	r24, 0x06	; 6
    151e:	f1 f4       	brne	.+60     	; 0x155c <MCAL_T1_u8T1Init+0x1e6>
			CLR_BIT(TCCR1A, Pin0);
    1520:	af e4       	ldi	r26, 0x4F	; 79
    1522:	b0 e0       	ldi	r27, 0x00	; 0
    1524:	ef e4       	ldi	r30, 0x4F	; 79
    1526:	f0 e0       	ldi	r31, 0x00	; 0
    1528:	80 81       	ld	r24, Z
    152a:	8e 7f       	andi	r24, 0xFE	; 254
    152c:	8c 93       	st	X, r24
			SET_BIT(TCCR1A, Pin1);
    152e:	af e4       	ldi	r26, 0x4F	; 79
    1530:	b0 e0       	ldi	r27, 0x00	; 0
    1532:	ef e4       	ldi	r30, 0x4F	; 79
    1534:	f0 e0       	ldi	r31, 0x00	; 0
    1536:	80 81       	ld	r24, Z
    1538:	82 60       	ori	r24, 0x02	; 2
    153a:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, Pin3);
    153c:	ae e4       	ldi	r26, 0x4E	; 78
    153e:	b0 e0       	ldi	r27, 0x00	; 0
    1540:	ee e4       	ldi	r30, 0x4E	; 78
    1542:	f0 e0       	ldi	r31, 0x00	; 0
    1544:	80 81       	ld	r24, Z
    1546:	88 60       	ori	r24, 0x08	; 8
    1548:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B, Pin4);
    154a:	ae e4       	ldi	r26, 0x4E	; 78
    154c:	b0 e0       	ldi	r27, 0x00	; 0
    154e:	ee e4       	ldi	r30, 0x4E	; 78
    1550:	f0 e0       	ldi	r31, 0x00	; 0
    1552:	80 81       	ld	r24, Z
    1554:	8f 7e       	andi	r24, 0xEF	; 239
    1556:	8c 93       	st	X, r24
			LOC_u8ReturnValue = E_OK;
    1558:	19 82       	std	Y+1, r1	; 0x01
    155a:	28 c1       	rjmp	.+592    	; 0x17ac <MCAL_T1_u8T1Init+0x436>
		} else if (LOC_u8Timer1Mode == FAST_PWM_10bit) {
    155c:	8a 81       	ldd	r24, Y+2	; 0x02
    155e:	87 30       	cpi	r24, 0x07	; 7
    1560:	f1 f4       	brne	.+60     	; 0x159e <MCAL_T1_u8T1Init+0x228>
			SET_BIT(TCCR1A, Pin0);
    1562:	af e4       	ldi	r26, 0x4F	; 79
    1564:	b0 e0       	ldi	r27, 0x00	; 0
    1566:	ef e4       	ldi	r30, 0x4F	; 79
    1568:	f0 e0       	ldi	r31, 0x00	; 0
    156a:	80 81       	ld	r24, Z
    156c:	81 60       	ori	r24, 0x01	; 1
    156e:	8c 93       	st	X, r24
			SET_BIT(TCCR1A, Pin1);
    1570:	af e4       	ldi	r26, 0x4F	; 79
    1572:	b0 e0       	ldi	r27, 0x00	; 0
    1574:	ef e4       	ldi	r30, 0x4F	; 79
    1576:	f0 e0       	ldi	r31, 0x00	; 0
    1578:	80 81       	ld	r24, Z
    157a:	82 60       	ori	r24, 0x02	; 2
    157c:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, Pin3);
    157e:	ae e4       	ldi	r26, 0x4E	; 78
    1580:	b0 e0       	ldi	r27, 0x00	; 0
    1582:	ee e4       	ldi	r30, 0x4E	; 78
    1584:	f0 e0       	ldi	r31, 0x00	; 0
    1586:	80 81       	ld	r24, Z
    1588:	88 60       	ori	r24, 0x08	; 8
    158a:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B, Pin4);
    158c:	ae e4       	ldi	r26, 0x4E	; 78
    158e:	b0 e0       	ldi	r27, 0x00	; 0
    1590:	ee e4       	ldi	r30, 0x4E	; 78
    1592:	f0 e0       	ldi	r31, 0x00	; 0
    1594:	80 81       	ld	r24, Z
    1596:	8f 7e       	andi	r24, 0xEF	; 239
    1598:	8c 93       	st	X, r24
			LOC_u8ReturnValue = E_OK;
    159a:	19 82       	std	Y+1, r1	; 0x01
    159c:	07 c1       	rjmp	.+526    	; 0x17ac <MCAL_T1_u8T1Init+0x436>
		} else if (LOC_u8Timer1Mode == PWM_PHASE_AND_FREQUANCY_CORRECT_ICR1) {
    159e:	8a 81       	ldd	r24, Y+2	; 0x02
    15a0:	88 30       	cpi	r24, 0x08	; 8
    15a2:	f1 f4       	brne	.+60     	; 0x15e0 <MCAL_T1_u8T1Init+0x26a>
			CLR_BIT(TCCR1A, Pin0);
    15a4:	af e4       	ldi	r26, 0x4F	; 79
    15a6:	b0 e0       	ldi	r27, 0x00	; 0
    15a8:	ef e4       	ldi	r30, 0x4F	; 79
    15aa:	f0 e0       	ldi	r31, 0x00	; 0
    15ac:	80 81       	ld	r24, Z
    15ae:	8e 7f       	andi	r24, 0xFE	; 254
    15b0:	8c 93       	st	X, r24
			CLR_BIT(TCCR1A, Pin1);
    15b2:	af e4       	ldi	r26, 0x4F	; 79
    15b4:	b0 e0       	ldi	r27, 0x00	; 0
    15b6:	ef e4       	ldi	r30, 0x4F	; 79
    15b8:	f0 e0       	ldi	r31, 0x00	; 0
    15ba:	80 81       	ld	r24, Z
    15bc:	8d 7f       	andi	r24, 0xFD	; 253
    15be:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B, Pin3);
    15c0:	ae e4       	ldi	r26, 0x4E	; 78
    15c2:	b0 e0       	ldi	r27, 0x00	; 0
    15c4:	ee e4       	ldi	r30, 0x4E	; 78
    15c6:	f0 e0       	ldi	r31, 0x00	; 0
    15c8:	80 81       	ld	r24, Z
    15ca:	87 7f       	andi	r24, 0xF7	; 247
    15cc:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, Pin4);
    15ce:	ae e4       	ldi	r26, 0x4E	; 78
    15d0:	b0 e0       	ldi	r27, 0x00	; 0
    15d2:	ee e4       	ldi	r30, 0x4E	; 78
    15d4:	f0 e0       	ldi	r31, 0x00	; 0
    15d6:	80 81       	ld	r24, Z
    15d8:	80 61       	ori	r24, 0x10	; 16
    15da:	8c 93       	st	X, r24
			LOC_u8ReturnValue = E_OK;
    15dc:	19 82       	std	Y+1, r1	; 0x01
    15de:	e6 c0       	rjmp	.+460    	; 0x17ac <MCAL_T1_u8T1Init+0x436>
		} else if (LOC_u8Timer1Mode == PWM_PHASE_AND_FREQUANCY_CORRECT_OCR1A) {
    15e0:	8a 81       	ldd	r24, Y+2	; 0x02
    15e2:	89 30       	cpi	r24, 0x09	; 9
    15e4:	f1 f4       	brne	.+60     	; 0x1622 <MCAL_T1_u8T1Init+0x2ac>
			SET_BIT(TCCR1A, Pin0);
    15e6:	af e4       	ldi	r26, 0x4F	; 79
    15e8:	b0 e0       	ldi	r27, 0x00	; 0
    15ea:	ef e4       	ldi	r30, 0x4F	; 79
    15ec:	f0 e0       	ldi	r31, 0x00	; 0
    15ee:	80 81       	ld	r24, Z
    15f0:	81 60       	ori	r24, 0x01	; 1
    15f2:	8c 93       	st	X, r24
			CLR_BIT(TCCR1A, Pin1);
    15f4:	af e4       	ldi	r26, 0x4F	; 79
    15f6:	b0 e0       	ldi	r27, 0x00	; 0
    15f8:	ef e4       	ldi	r30, 0x4F	; 79
    15fa:	f0 e0       	ldi	r31, 0x00	; 0
    15fc:	80 81       	ld	r24, Z
    15fe:	8d 7f       	andi	r24, 0xFD	; 253
    1600:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B, Pin3);
    1602:	ae e4       	ldi	r26, 0x4E	; 78
    1604:	b0 e0       	ldi	r27, 0x00	; 0
    1606:	ee e4       	ldi	r30, 0x4E	; 78
    1608:	f0 e0       	ldi	r31, 0x00	; 0
    160a:	80 81       	ld	r24, Z
    160c:	87 7f       	andi	r24, 0xF7	; 247
    160e:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, Pin4);
    1610:	ae e4       	ldi	r26, 0x4E	; 78
    1612:	b0 e0       	ldi	r27, 0x00	; 0
    1614:	ee e4       	ldi	r30, 0x4E	; 78
    1616:	f0 e0       	ldi	r31, 0x00	; 0
    1618:	80 81       	ld	r24, Z
    161a:	80 61       	ori	r24, 0x10	; 16
    161c:	8c 93       	st	X, r24
			LOC_u8ReturnValue = E_OK;
    161e:	19 82       	std	Y+1, r1	; 0x01
    1620:	c5 c0       	rjmp	.+394    	; 0x17ac <MCAL_T1_u8T1Init+0x436>
		} else if (LOC_u8Timer1Mode == PWM_PHASE_CORRECT_ICR1) {
    1622:	8a 81       	ldd	r24, Y+2	; 0x02
    1624:	8a 30       	cpi	r24, 0x0A	; 10
    1626:	f1 f4       	brne	.+60     	; 0x1664 <MCAL_T1_u8T1Init+0x2ee>
			CLR_BIT(TCCR1A, Pin0);
    1628:	af e4       	ldi	r26, 0x4F	; 79
    162a:	b0 e0       	ldi	r27, 0x00	; 0
    162c:	ef e4       	ldi	r30, 0x4F	; 79
    162e:	f0 e0       	ldi	r31, 0x00	; 0
    1630:	80 81       	ld	r24, Z
    1632:	8e 7f       	andi	r24, 0xFE	; 254
    1634:	8c 93       	st	X, r24
			SET_BIT(TCCR1A, Pin1);
    1636:	af e4       	ldi	r26, 0x4F	; 79
    1638:	b0 e0       	ldi	r27, 0x00	; 0
    163a:	ef e4       	ldi	r30, 0x4F	; 79
    163c:	f0 e0       	ldi	r31, 0x00	; 0
    163e:	80 81       	ld	r24, Z
    1640:	82 60       	ori	r24, 0x02	; 2
    1642:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B, Pin3);
    1644:	ae e4       	ldi	r26, 0x4E	; 78
    1646:	b0 e0       	ldi	r27, 0x00	; 0
    1648:	ee e4       	ldi	r30, 0x4E	; 78
    164a:	f0 e0       	ldi	r31, 0x00	; 0
    164c:	80 81       	ld	r24, Z
    164e:	87 7f       	andi	r24, 0xF7	; 247
    1650:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, Pin4);
    1652:	ae e4       	ldi	r26, 0x4E	; 78
    1654:	b0 e0       	ldi	r27, 0x00	; 0
    1656:	ee e4       	ldi	r30, 0x4E	; 78
    1658:	f0 e0       	ldi	r31, 0x00	; 0
    165a:	80 81       	ld	r24, Z
    165c:	80 61       	ori	r24, 0x10	; 16
    165e:	8c 93       	st	X, r24
			LOC_u8ReturnValue = E_OK;
    1660:	19 82       	std	Y+1, r1	; 0x01
    1662:	a4 c0       	rjmp	.+328    	; 0x17ac <MCAL_T1_u8T1Init+0x436>
		} else if (LOC_u8Timer1Mode == PWM_PHASE_CORRECT_OCR1A) {
    1664:	8a 81       	ldd	r24, Y+2	; 0x02
    1666:	8b 30       	cpi	r24, 0x0B	; 11
    1668:	f1 f4       	brne	.+60     	; 0x16a6 <MCAL_T1_u8T1Init+0x330>
			SET_BIT(TCCR1A, Pin0);
    166a:	af e4       	ldi	r26, 0x4F	; 79
    166c:	b0 e0       	ldi	r27, 0x00	; 0
    166e:	ef e4       	ldi	r30, 0x4F	; 79
    1670:	f0 e0       	ldi	r31, 0x00	; 0
    1672:	80 81       	ld	r24, Z
    1674:	81 60       	ori	r24, 0x01	; 1
    1676:	8c 93       	st	X, r24
			SET_BIT(TCCR1A, Pin1);
    1678:	af e4       	ldi	r26, 0x4F	; 79
    167a:	b0 e0       	ldi	r27, 0x00	; 0
    167c:	ef e4       	ldi	r30, 0x4F	; 79
    167e:	f0 e0       	ldi	r31, 0x00	; 0
    1680:	80 81       	ld	r24, Z
    1682:	82 60       	ori	r24, 0x02	; 2
    1684:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B, Pin3);
    1686:	ae e4       	ldi	r26, 0x4E	; 78
    1688:	b0 e0       	ldi	r27, 0x00	; 0
    168a:	ee e4       	ldi	r30, 0x4E	; 78
    168c:	f0 e0       	ldi	r31, 0x00	; 0
    168e:	80 81       	ld	r24, Z
    1690:	87 7f       	andi	r24, 0xF7	; 247
    1692:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, Pin4);
    1694:	ae e4       	ldi	r26, 0x4E	; 78
    1696:	b0 e0       	ldi	r27, 0x00	; 0
    1698:	ee e4       	ldi	r30, 0x4E	; 78
    169a:	f0 e0       	ldi	r31, 0x00	; 0
    169c:	80 81       	ld	r24, Z
    169e:	80 61       	ori	r24, 0x10	; 16
    16a0:	8c 93       	st	X, r24
			LOC_u8ReturnValue = E_OK;
    16a2:	19 82       	std	Y+1, r1	; 0x01
    16a4:	83 c0       	rjmp	.+262    	; 0x17ac <MCAL_T1_u8T1Init+0x436>
		} else if (LOC_u8Timer1Mode == CTC_ICR1) {
    16a6:	8a 81       	ldd	r24, Y+2	; 0x02
    16a8:	8c 30       	cpi	r24, 0x0C	; 12
    16aa:	f1 f4       	brne	.+60     	; 0x16e8 <MCAL_T1_u8T1Init+0x372>
			CLR_BIT(TCCR1A, Pin0);
    16ac:	af e4       	ldi	r26, 0x4F	; 79
    16ae:	b0 e0       	ldi	r27, 0x00	; 0
    16b0:	ef e4       	ldi	r30, 0x4F	; 79
    16b2:	f0 e0       	ldi	r31, 0x00	; 0
    16b4:	80 81       	ld	r24, Z
    16b6:	8e 7f       	andi	r24, 0xFE	; 254
    16b8:	8c 93       	st	X, r24
			CLR_BIT(TCCR1A, Pin1);
    16ba:	af e4       	ldi	r26, 0x4F	; 79
    16bc:	b0 e0       	ldi	r27, 0x00	; 0
    16be:	ef e4       	ldi	r30, 0x4F	; 79
    16c0:	f0 e0       	ldi	r31, 0x00	; 0
    16c2:	80 81       	ld	r24, Z
    16c4:	8d 7f       	andi	r24, 0xFD	; 253
    16c6:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, Pin3);
    16c8:	ae e4       	ldi	r26, 0x4E	; 78
    16ca:	b0 e0       	ldi	r27, 0x00	; 0
    16cc:	ee e4       	ldi	r30, 0x4E	; 78
    16ce:	f0 e0       	ldi	r31, 0x00	; 0
    16d0:	80 81       	ld	r24, Z
    16d2:	88 60       	ori	r24, 0x08	; 8
    16d4:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, Pin4);
    16d6:	ae e4       	ldi	r26, 0x4E	; 78
    16d8:	b0 e0       	ldi	r27, 0x00	; 0
    16da:	ee e4       	ldi	r30, 0x4E	; 78
    16dc:	f0 e0       	ldi	r31, 0x00	; 0
    16de:	80 81       	ld	r24, Z
    16e0:	80 61       	ori	r24, 0x10	; 16
    16e2:	8c 93       	st	X, r24
			LOC_u8ReturnValue = E_OK;
    16e4:	19 82       	std	Y+1, r1	; 0x01
    16e6:	62 c0       	rjmp	.+196    	; 0x17ac <MCAL_T1_u8T1Init+0x436>
		} else if (LOC_u8Timer1Mode == REVERSED_MODE) {
    16e8:	8a 81       	ldd	r24, Y+2	; 0x02
    16ea:	8d 30       	cpi	r24, 0x0D	; 13
    16ec:	f1 f4       	brne	.+60     	; 0x172a <MCAL_T1_u8T1Init+0x3b4>
			SET_BIT(TCCR1A, Pin0);
    16ee:	af e4       	ldi	r26, 0x4F	; 79
    16f0:	b0 e0       	ldi	r27, 0x00	; 0
    16f2:	ef e4       	ldi	r30, 0x4F	; 79
    16f4:	f0 e0       	ldi	r31, 0x00	; 0
    16f6:	80 81       	ld	r24, Z
    16f8:	81 60       	ori	r24, 0x01	; 1
    16fa:	8c 93       	st	X, r24
			CLR_BIT(TCCR1A, Pin1);
    16fc:	af e4       	ldi	r26, 0x4F	; 79
    16fe:	b0 e0       	ldi	r27, 0x00	; 0
    1700:	ef e4       	ldi	r30, 0x4F	; 79
    1702:	f0 e0       	ldi	r31, 0x00	; 0
    1704:	80 81       	ld	r24, Z
    1706:	8d 7f       	andi	r24, 0xFD	; 253
    1708:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, Pin3);
    170a:	ae e4       	ldi	r26, 0x4E	; 78
    170c:	b0 e0       	ldi	r27, 0x00	; 0
    170e:	ee e4       	ldi	r30, 0x4E	; 78
    1710:	f0 e0       	ldi	r31, 0x00	; 0
    1712:	80 81       	ld	r24, Z
    1714:	88 60       	ori	r24, 0x08	; 8
    1716:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, Pin4);
    1718:	ae e4       	ldi	r26, 0x4E	; 78
    171a:	b0 e0       	ldi	r27, 0x00	; 0
    171c:	ee e4       	ldi	r30, 0x4E	; 78
    171e:	f0 e0       	ldi	r31, 0x00	; 0
    1720:	80 81       	ld	r24, Z
    1722:	80 61       	ori	r24, 0x10	; 16
    1724:	8c 93       	st	X, r24
			LOC_u8ReturnValue = E_OK;
    1726:	19 82       	std	Y+1, r1	; 0x01
    1728:	41 c0       	rjmp	.+130    	; 0x17ac <MCAL_T1_u8T1Init+0x436>
		} else if (LOC_u8Timer1Mode == FAST_PWM_ICR1) {
    172a:	8a 81       	ldd	r24, Y+2	; 0x02
    172c:	8e 30       	cpi	r24, 0x0E	; 14
    172e:	f1 f4       	brne	.+60     	; 0x176c <MCAL_T1_u8T1Init+0x3f6>
			CLR_BIT(TCCR1A, Pin0);
    1730:	af e4       	ldi	r26, 0x4F	; 79
    1732:	b0 e0       	ldi	r27, 0x00	; 0
    1734:	ef e4       	ldi	r30, 0x4F	; 79
    1736:	f0 e0       	ldi	r31, 0x00	; 0
    1738:	80 81       	ld	r24, Z
    173a:	8e 7f       	andi	r24, 0xFE	; 254
    173c:	8c 93       	st	X, r24
			SET_BIT(TCCR1A, Pin1);
    173e:	af e4       	ldi	r26, 0x4F	; 79
    1740:	b0 e0       	ldi	r27, 0x00	; 0
    1742:	ef e4       	ldi	r30, 0x4F	; 79
    1744:	f0 e0       	ldi	r31, 0x00	; 0
    1746:	80 81       	ld	r24, Z
    1748:	82 60       	ori	r24, 0x02	; 2
    174a:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, Pin3);
    174c:	ae e4       	ldi	r26, 0x4E	; 78
    174e:	b0 e0       	ldi	r27, 0x00	; 0
    1750:	ee e4       	ldi	r30, 0x4E	; 78
    1752:	f0 e0       	ldi	r31, 0x00	; 0
    1754:	80 81       	ld	r24, Z
    1756:	88 60       	ori	r24, 0x08	; 8
    1758:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, Pin4);
    175a:	ae e4       	ldi	r26, 0x4E	; 78
    175c:	b0 e0       	ldi	r27, 0x00	; 0
    175e:	ee e4       	ldi	r30, 0x4E	; 78
    1760:	f0 e0       	ldi	r31, 0x00	; 0
    1762:	80 81       	ld	r24, Z
    1764:	80 61       	ori	r24, 0x10	; 16
    1766:	8c 93       	st	X, r24
			LOC_u8ReturnValue = E_OK;
    1768:	19 82       	std	Y+1, r1	; 0x01
    176a:	20 c0       	rjmp	.+64     	; 0x17ac <MCAL_T1_u8T1Init+0x436>
		} else if (LOC_u8Timer1Mode == FAST_PWM_OCR1A) {
    176c:	8a 81       	ldd	r24, Y+2	; 0x02
    176e:	8f 30       	cpi	r24, 0x0F	; 15
    1770:	e9 f4       	brne	.+58     	; 0x17ac <MCAL_T1_u8T1Init+0x436>
			SET_BIT(TCCR1A, Pin0);
    1772:	af e4       	ldi	r26, 0x4F	; 79
    1774:	b0 e0       	ldi	r27, 0x00	; 0
    1776:	ef e4       	ldi	r30, 0x4F	; 79
    1778:	f0 e0       	ldi	r31, 0x00	; 0
    177a:	80 81       	ld	r24, Z
    177c:	81 60       	ori	r24, 0x01	; 1
    177e:	8c 93       	st	X, r24
			SET_BIT(TCCR1A, Pin1);
    1780:	af e4       	ldi	r26, 0x4F	; 79
    1782:	b0 e0       	ldi	r27, 0x00	; 0
    1784:	ef e4       	ldi	r30, 0x4F	; 79
    1786:	f0 e0       	ldi	r31, 0x00	; 0
    1788:	80 81       	ld	r24, Z
    178a:	82 60       	ori	r24, 0x02	; 2
    178c:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, Pin3);
    178e:	ae e4       	ldi	r26, 0x4E	; 78
    1790:	b0 e0       	ldi	r27, 0x00	; 0
    1792:	ee e4       	ldi	r30, 0x4E	; 78
    1794:	f0 e0       	ldi	r31, 0x00	; 0
    1796:	80 81       	ld	r24, Z
    1798:	88 60       	ori	r24, 0x08	; 8
    179a:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, Pin4);
    179c:	ae e4       	ldi	r26, 0x4E	; 78
    179e:	b0 e0       	ldi	r27, 0x00	; 0
    17a0:	ee e4       	ldi	r30, 0x4E	; 78
    17a2:	f0 e0       	ldi	r31, 0x00	; 0
    17a4:	80 81       	ld	r24, Z
    17a6:	80 61       	ori	r24, 0x10	; 16
    17a8:	8c 93       	st	X, r24
			LOC_u8ReturnValue = E_OK;
    17aa:	19 82       	std	Y+1, r1	; 0x01
			//NOTHING
		}
	} else {
		//NOTHING
	}
	return LOC_u8ReturnValue;
    17ac:	89 81       	ldd	r24, Y+1	; 0x01
}
    17ae:	0f 90       	pop	r0
    17b0:	0f 90       	pop	r0
    17b2:	cf 91       	pop	r28
    17b4:	df 91       	pop	r29
    17b6:	08 95       	ret

000017b8 <MCAL_T1_u8T1Prescaler>:
u8 MCAL_T1_u8T1Prescaler(u8 LOC_u8Clock_Selection, f32 *LOC_pf32TickTime) {
    17b8:	df 93       	push	r29
    17ba:	cf 93       	push	r28
    17bc:	00 d0       	rcall	.+0      	; 0x17be <MCAL_T1_u8T1Prescaler+0x6>
    17be:	00 d0       	rcall	.+0      	; 0x17c0 <MCAL_T1_u8T1Prescaler+0x8>
    17c0:	cd b7       	in	r28, 0x3d	; 61
    17c2:	de b7       	in	r29, 0x3e	; 62
    17c4:	8a 83       	std	Y+2, r24	; 0x02
    17c6:	7c 83       	std	Y+4, r23	; 0x04
    17c8:	6b 83       	std	Y+3, r22	; 0x03
	u8 LOC_u8ReturnValue = E_NOT_OK;
    17ca:	81 e0       	ldi	r24, 0x01	; 1
    17cc:	89 83       	std	Y+1, r24	; 0x01
	if (LOC_u8Clock_Selection <= EXTERNAL_RISING_EDGE) {
    17ce:	8a 81       	ldd	r24, Y+2	; 0x02
    17d0:	88 30       	cpi	r24, 0x08	; 8
    17d2:	08 f0       	brcs	.+2      	; 0x17d6 <MCAL_T1_u8T1Prescaler+0x1e>
    17d4:	01 c1       	rjmp	.+514    	; 0x19d8 <MCAL_T1_u8T1Prescaler+0x220>
		if (LOC_u8Clock_Selection == COUNTER_STOP) {
    17d6:	8a 81       	ldd	r24, Y+2	; 0x02
    17d8:	88 23       	and	r24, r24
    17da:	b9 f4       	brne	.+46     	; 0x180a <MCAL_T1_u8T1Prescaler+0x52>
			CLR_BIT(TCCR1B, Pin0);
    17dc:	ae e4       	ldi	r26, 0x4E	; 78
    17de:	b0 e0       	ldi	r27, 0x00	; 0
    17e0:	ee e4       	ldi	r30, 0x4E	; 78
    17e2:	f0 e0       	ldi	r31, 0x00	; 0
    17e4:	80 81       	ld	r24, Z
    17e6:	8e 7f       	andi	r24, 0xFE	; 254
    17e8:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B, Pin1);
    17ea:	ae e4       	ldi	r26, 0x4E	; 78
    17ec:	b0 e0       	ldi	r27, 0x00	; 0
    17ee:	ee e4       	ldi	r30, 0x4E	; 78
    17f0:	f0 e0       	ldi	r31, 0x00	; 0
    17f2:	80 81       	ld	r24, Z
    17f4:	8d 7f       	andi	r24, 0xFD	; 253
    17f6:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B, Pin2);
    17f8:	ae e4       	ldi	r26, 0x4E	; 78
    17fa:	b0 e0       	ldi	r27, 0x00	; 0
    17fc:	ee e4       	ldi	r30, 0x4E	; 78
    17fe:	f0 e0       	ldi	r31, 0x00	; 0
    1800:	80 81       	ld	r24, Z
    1802:	8b 7f       	andi	r24, 0xFB	; 251
    1804:	8c 93       	st	X, r24
			LOC_u8ReturnValue = E_OK;
    1806:	19 82       	std	Y+1, r1	; 0x01
    1808:	e7 c0       	rjmp	.+462    	; 0x19d8 <MCAL_T1_u8T1Prescaler+0x220>
		} else if (LOC_u8Clock_Selection == PRESCALLING_0) {
    180a:	8a 81       	ldd	r24, Y+2	; 0x02
    180c:	81 30       	cpi	r24, 0x01	; 1
    180e:	09 f5       	brne	.+66     	; 0x1852 <MCAL_T1_u8T1Prescaler+0x9a>
			SET_BIT(TCCR1B, Pin0);
    1810:	ae e4       	ldi	r26, 0x4E	; 78
    1812:	b0 e0       	ldi	r27, 0x00	; 0
    1814:	ee e4       	ldi	r30, 0x4E	; 78
    1816:	f0 e0       	ldi	r31, 0x00	; 0
    1818:	80 81       	ld	r24, Z
    181a:	81 60       	ori	r24, 0x01	; 1
    181c:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B, Pin1);
    181e:	ae e4       	ldi	r26, 0x4E	; 78
    1820:	b0 e0       	ldi	r27, 0x00	; 0
    1822:	ee e4       	ldi	r30, 0x4E	; 78
    1824:	f0 e0       	ldi	r31, 0x00	; 0
    1826:	80 81       	ld	r24, Z
    1828:	8d 7f       	andi	r24, 0xFD	; 253
    182a:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B, Pin2);
    182c:	ae e4       	ldi	r26, 0x4E	; 78
    182e:	b0 e0       	ldi	r27, 0x00	; 0
    1830:	ee e4       	ldi	r30, 0x4E	; 78
    1832:	f0 e0       	ldi	r31, 0x00	; 0
    1834:	80 81       	ld	r24, Z
    1836:	8b 7f       	andi	r24, 0xFB	; 251
    1838:	8c 93       	st	X, r24
			*LOC_pf32TickTime = PRESCALLING0 / (f32) CPU_FREQUNCY;
    183a:	eb 81       	ldd	r30, Y+3	; 0x03
    183c:	fc 81       	ldd	r31, Y+4	; 0x04
    183e:	8d eb       	ldi	r24, 0xBD	; 189
    1840:	97 e3       	ldi	r25, 0x37	; 55
    1842:	a6 e8       	ldi	r26, 0x86	; 134
    1844:	b3 e3       	ldi	r27, 0x33	; 51
    1846:	80 83       	st	Z, r24
    1848:	91 83       	std	Z+1, r25	; 0x01
    184a:	a2 83       	std	Z+2, r26	; 0x02
    184c:	b3 83       	std	Z+3, r27	; 0x03
			LOC_u8ReturnValue = E_OK;
    184e:	19 82       	std	Y+1, r1	; 0x01
    1850:	c3 c0       	rjmp	.+390    	; 0x19d8 <MCAL_T1_u8T1Prescaler+0x220>
		} else if (LOC_u8Clock_Selection == PRESCALLING_8) {
    1852:	8a 81       	ldd	r24, Y+2	; 0x02
    1854:	82 30       	cpi	r24, 0x02	; 2
    1856:	09 f5       	brne	.+66     	; 0x189a <MCAL_T1_u8T1Prescaler+0xe2>
			CLR_BIT(TCCR1B, Pin0);
    1858:	ae e4       	ldi	r26, 0x4E	; 78
    185a:	b0 e0       	ldi	r27, 0x00	; 0
    185c:	ee e4       	ldi	r30, 0x4E	; 78
    185e:	f0 e0       	ldi	r31, 0x00	; 0
    1860:	80 81       	ld	r24, Z
    1862:	8e 7f       	andi	r24, 0xFE	; 254
    1864:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, Pin1);
    1866:	ae e4       	ldi	r26, 0x4E	; 78
    1868:	b0 e0       	ldi	r27, 0x00	; 0
    186a:	ee e4       	ldi	r30, 0x4E	; 78
    186c:	f0 e0       	ldi	r31, 0x00	; 0
    186e:	80 81       	ld	r24, Z
    1870:	82 60       	ori	r24, 0x02	; 2
    1872:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B, Pin2);
    1874:	ae e4       	ldi	r26, 0x4E	; 78
    1876:	b0 e0       	ldi	r27, 0x00	; 0
    1878:	ee e4       	ldi	r30, 0x4E	; 78
    187a:	f0 e0       	ldi	r31, 0x00	; 0
    187c:	80 81       	ld	r24, Z
    187e:	8b 7f       	andi	r24, 0xFB	; 251
    1880:	8c 93       	st	X, r24
			*LOC_pf32TickTime = PRESCALLING8 / (f32) CPU_FREQUNCY;
    1882:	eb 81       	ldd	r30, Y+3	; 0x03
    1884:	fc 81       	ldd	r31, Y+4	; 0x04
    1886:	8d eb       	ldi	r24, 0xBD	; 189
    1888:	97 e3       	ldi	r25, 0x37	; 55
    188a:	a6 e0       	ldi	r26, 0x06	; 6
    188c:	b5 e3       	ldi	r27, 0x35	; 53
    188e:	80 83       	st	Z, r24
    1890:	91 83       	std	Z+1, r25	; 0x01
    1892:	a2 83       	std	Z+2, r26	; 0x02
    1894:	b3 83       	std	Z+3, r27	; 0x03
			LOC_u8ReturnValue = E_OK;
    1896:	19 82       	std	Y+1, r1	; 0x01
    1898:	9f c0       	rjmp	.+318    	; 0x19d8 <MCAL_T1_u8T1Prescaler+0x220>
		} else if (LOC_u8Clock_Selection == PRESCALLING_64) {
    189a:	8a 81       	ldd	r24, Y+2	; 0x02
    189c:	83 30       	cpi	r24, 0x03	; 3
    189e:	09 f5       	brne	.+66     	; 0x18e2 <MCAL_T1_u8T1Prescaler+0x12a>
			SET_BIT(TCCR1B, Pin0);
    18a0:	ae e4       	ldi	r26, 0x4E	; 78
    18a2:	b0 e0       	ldi	r27, 0x00	; 0
    18a4:	ee e4       	ldi	r30, 0x4E	; 78
    18a6:	f0 e0       	ldi	r31, 0x00	; 0
    18a8:	80 81       	ld	r24, Z
    18aa:	81 60       	ori	r24, 0x01	; 1
    18ac:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, Pin1);
    18ae:	ae e4       	ldi	r26, 0x4E	; 78
    18b0:	b0 e0       	ldi	r27, 0x00	; 0
    18b2:	ee e4       	ldi	r30, 0x4E	; 78
    18b4:	f0 e0       	ldi	r31, 0x00	; 0
    18b6:	80 81       	ld	r24, Z
    18b8:	82 60       	ori	r24, 0x02	; 2
    18ba:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B, Pin2);
    18bc:	ae e4       	ldi	r26, 0x4E	; 78
    18be:	b0 e0       	ldi	r27, 0x00	; 0
    18c0:	ee e4       	ldi	r30, 0x4E	; 78
    18c2:	f0 e0       	ldi	r31, 0x00	; 0
    18c4:	80 81       	ld	r24, Z
    18c6:	8b 7f       	andi	r24, 0xFB	; 251
    18c8:	8c 93       	st	X, r24
			*LOC_pf32TickTime = PRESCALLING64 / (f32) CPU_FREQUNCY;
    18ca:	eb 81       	ldd	r30, Y+3	; 0x03
    18cc:	fc 81       	ldd	r31, Y+4	; 0x04
    18ce:	8d eb       	ldi	r24, 0xBD	; 189
    18d0:	97 e3       	ldi	r25, 0x37	; 55
    18d2:	a6 e8       	ldi	r26, 0x86	; 134
    18d4:	b6 e3       	ldi	r27, 0x36	; 54
    18d6:	80 83       	st	Z, r24
    18d8:	91 83       	std	Z+1, r25	; 0x01
    18da:	a2 83       	std	Z+2, r26	; 0x02
    18dc:	b3 83       	std	Z+3, r27	; 0x03
			LOC_u8ReturnValue = E_OK;
    18de:	19 82       	std	Y+1, r1	; 0x01
    18e0:	7b c0       	rjmp	.+246    	; 0x19d8 <MCAL_T1_u8T1Prescaler+0x220>
		} else if (LOC_u8Clock_Selection == PRESCALLING_256) {
    18e2:	8a 81       	ldd	r24, Y+2	; 0x02
    18e4:	84 30       	cpi	r24, 0x04	; 4
    18e6:	09 f5       	brne	.+66     	; 0x192a <MCAL_T1_u8T1Prescaler+0x172>
			CLR_BIT(TCCR1B, Pin0);
    18e8:	ae e4       	ldi	r26, 0x4E	; 78
    18ea:	b0 e0       	ldi	r27, 0x00	; 0
    18ec:	ee e4       	ldi	r30, 0x4E	; 78
    18ee:	f0 e0       	ldi	r31, 0x00	; 0
    18f0:	80 81       	ld	r24, Z
    18f2:	8e 7f       	andi	r24, 0xFE	; 254
    18f4:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B, Pin1);
    18f6:	ae e4       	ldi	r26, 0x4E	; 78
    18f8:	b0 e0       	ldi	r27, 0x00	; 0
    18fa:	ee e4       	ldi	r30, 0x4E	; 78
    18fc:	f0 e0       	ldi	r31, 0x00	; 0
    18fe:	80 81       	ld	r24, Z
    1900:	8d 7f       	andi	r24, 0xFD	; 253
    1902:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, Pin2);
    1904:	ae e4       	ldi	r26, 0x4E	; 78
    1906:	b0 e0       	ldi	r27, 0x00	; 0
    1908:	ee e4       	ldi	r30, 0x4E	; 78
    190a:	f0 e0       	ldi	r31, 0x00	; 0
    190c:	80 81       	ld	r24, Z
    190e:	84 60       	ori	r24, 0x04	; 4
    1910:	8c 93       	st	X, r24
			*LOC_pf32TickTime = PRESCALLING256 / (f32) CPU_FREQUNCY;
    1912:	eb 81       	ldd	r30, Y+3	; 0x03
    1914:	fc 81       	ldd	r31, Y+4	; 0x04
    1916:	8d eb       	ldi	r24, 0xBD	; 189
    1918:	97 e3       	ldi	r25, 0x37	; 55
    191a:	a6 e8       	ldi	r26, 0x86	; 134
    191c:	b7 e3       	ldi	r27, 0x37	; 55
    191e:	80 83       	st	Z, r24
    1920:	91 83       	std	Z+1, r25	; 0x01
    1922:	a2 83       	std	Z+2, r26	; 0x02
    1924:	b3 83       	std	Z+3, r27	; 0x03
			LOC_u8ReturnValue = E_OK;
    1926:	19 82       	std	Y+1, r1	; 0x01
    1928:	57 c0       	rjmp	.+174    	; 0x19d8 <MCAL_T1_u8T1Prescaler+0x220>
		} else if (LOC_u8Clock_Selection == PRESCALLING_1024) {
    192a:	8a 81       	ldd	r24, Y+2	; 0x02
    192c:	85 30       	cpi	r24, 0x05	; 5
    192e:	09 f5       	brne	.+66     	; 0x1972 <MCAL_T1_u8T1Prescaler+0x1ba>
			SET_BIT(TCCR1B, Pin0);
    1930:	ae e4       	ldi	r26, 0x4E	; 78
    1932:	b0 e0       	ldi	r27, 0x00	; 0
    1934:	ee e4       	ldi	r30, 0x4E	; 78
    1936:	f0 e0       	ldi	r31, 0x00	; 0
    1938:	80 81       	ld	r24, Z
    193a:	81 60       	ori	r24, 0x01	; 1
    193c:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B, Pin1);
    193e:	ae e4       	ldi	r26, 0x4E	; 78
    1940:	b0 e0       	ldi	r27, 0x00	; 0
    1942:	ee e4       	ldi	r30, 0x4E	; 78
    1944:	f0 e0       	ldi	r31, 0x00	; 0
    1946:	80 81       	ld	r24, Z
    1948:	8d 7f       	andi	r24, 0xFD	; 253
    194a:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, Pin2);
    194c:	ae e4       	ldi	r26, 0x4E	; 78
    194e:	b0 e0       	ldi	r27, 0x00	; 0
    1950:	ee e4       	ldi	r30, 0x4E	; 78
    1952:	f0 e0       	ldi	r31, 0x00	; 0
    1954:	80 81       	ld	r24, Z
    1956:	84 60       	ori	r24, 0x04	; 4
    1958:	8c 93       	st	X, r24
			*LOC_pf32TickTime = PRESCALLING1024 / (f32) CPU_FREQUNCY;
    195a:	eb 81       	ldd	r30, Y+3	; 0x03
    195c:	fc 81       	ldd	r31, Y+4	; 0x04
    195e:	8d eb       	ldi	r24, 0xBD	; 189
    1960:	97 e3       	ldi	r25, 0x37	; 55
    1962:	a6 e8       	ldi	r26, 0x86	; 134
    1964:	b8 e3       	ldi	r27, 0x38	; 56
    1966:	80 83       	st	Z, r24
    1968:	91 83       	std	Z+1, r25	; 0x01
    196a:	a2 83       	std	Z+2, r26	; 0x02
    196c:	b3 83       	std	Z+3, r27	; 0x03
			LOC_u8ReturnValue = E_OK;
    196e:	19 82       	std	Y+1, r1	; 0x01
    1970:	33 c0       	rjmp	.+102    	; 0x19d8 <MCAL_T1_u8T1Prescaler+0x220>
		} else if (LOC_u8Clock_Selection == EXTERNAL_FALLING_EDGE) {
    1972:	8a 81       	ldd	r24, Y+2	; 0x02
    1974:	86 30       	cpi	r24, 0x06	; 6
    1976:	b9 f4       	brne	.+46     	; 0x19a6 <MCAL_T1_u8T1Prescaler+0x1ee>
			CLR_BIT(TCCR1B, Pin0);
    1978:	ae e4       	ldi	r26, 0x4E	; 78
    197a:	b0 e0       	ldi	r27, 0x00	; 0
    197c:	ee e4       	ldi	r30, 0x4E	; 78
    197e:	f0 e0       	ldi	r31, 0x00	; 0
    1980:	80 81       	ld	r24, Z
    1982:	8e 7f       	andi	r24, 0xFE	; 254
    1984:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, Pin1);
    1986:	ae e4       	ldi	r26, 0x4E	; 78
    1988:	b0 e0       	ldi	r27, 0x00	; 0
    198a:	ee e4       	ldi	r30, 0x4E	; 78
    198c:	f0 e0       	ldi	r31, 0x00	; 0
    198e:	80 81       	ld	r24, Z
    1990:	82 60       	ori	r24, 0x02	; 2
    1992:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, Pin2);
    1994:	ae e4       	ldi	r26, 0x4E	; 78
    1996:	b0 e0       	ldi	r27, 0x00	; 0
    1998:	ee e4       	ldi	r30, 0x4E	; 78
    199a:	f0 e0       	ldi	r31, 0x00	; 0
    199c:	80 81       	ld	r24, Z
    199e:	84 60       	ori	r24, 0x04	; 4
    19a0:	8c 93       	st	X, r24
			LOC_u8ReturnValue = E_OK;
    19a2:	19 82       	std	Y+1, r1	; 0x01
    19a4:	19 c0       	rjmp	.+50     	; 0x19d8 <MCAL_T1_u8T1Prescaler+0x220>
		} else if (LOC_u8Clock_Selection == EXTERNAL_RISING_EDGE) {
    19a6:	8a 81       	ldd	r24, Y+2	; 0x02
    19a8:	87 30       	cpi	r24, 0x07	; 7
    19aa:	b1 f4       	brne	.+44     	; 0x19d8 <MCAL_T1_u8T1Prescaler+0x220>
			SET_BIT(TCCR1B, Pin0);
    19ac:	ae e4       	ldi	r26, 0x4E	; 78
    19ae:	b0 e0       	ldi	r27, 0x00	; 0
    19b0:	ee e4       	ldi	r30, 0x4E	; 78
    19b2:	f0 e0       	ldi	r31, 0x00	; 0
    19b4:	80 81       	ld	r24, Z
    19b6:	81 60       	ori	r24, 0x01	; 1
    19b8:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, Pin1);
    19ba:	ae e4       	ldi	r26, 0x4E	; 78
    19bc:	b0 e0       	ldi	r27, 0x00	; 0
    19be:	ee e4       	ldi	r30, 0x4E	; 78
    19c0:	f0 e0       	ldi	r31, 0x00	; 0
    19c2:	80 81       	ld	r24, Z
    19c4:	82 60       	ori	r24, 0x02	; 2
    19c6:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, Pin2);
    19c8:	ae e4       	ldi	r26, 0x4E	; 78
    19ca:	b0 e0       	ldi	r27, 0x00	; 0
    19cc:	ee e4       	ldi	r30, 0x4E	; 78
    19ce:	f0 e0       	ldi	r31, 0x00	; 0
    19d0:	80 81       	ld	r24, Z
    19d2:	84 60       	ori	r24, 0x04	; 4
    19d4:	8c 93       	st	X, r24
			LOC_u8ReturnValue = E_OK;
    19d6:	19 82       	std	Y+1, r1	; 0x01
			//NOTHING
		}
	} else {
		//NOTHING
	}
	return LOC_u8ReturnValue;
    19d8:	89 81       	ldd	r24, Y+1	; 0x01
}
    19da:	0f 90       	pop	r0
    19dc:	0f 90       	pop	r0
    19de:	0f 90       	pop	r0
    19e0:	0f 90       	pop	r0
    19e2:	cf 91       	pop	r28
    19e4:	df 91       	pop	r29
    19e6:	08 95       	ret

000019e8 <MCAL_T1_u8T1CompareOutputMode>:
//Fast MODE PWM & PHASE CORRECT
u8 MCAL_T1_u8T1CompareOutputMode(u8 LOC_u8OutputMode, u8 LOC_u8Channel) {
    19e8:	df 93       	push	r29
    19ea:	cf 93       	push	r28
    19ec:	00 d0       	rcall	.+0      	; 0x19ee <MCAL_T1_u8T1CompareOutputMode+0x6>
    19ee:	0f 92       	push	r0
    19f0:	cd b7       	in	r28, 0x3d	; 61
    19f2:	de b7       	in	r29, 0x3e	; 62
    19f4:	8a 83       	std	Y+2, r24	; 0x02
    19f6:	6b 83       	std	Y+3, r22	; 0x03
	u8 LOC_u8ReturnValue = E_NOT_OK;
    19f8:	81 e0       	ldi	r24, 0x01	; 1
    19fa:	89 83       	std	Y+1, r24	; 0x01
	if (LOC_u8OutputMode <= INVERTING_MODE && LOC_u8Channel <= CHENNEL_B) {
    19fc:	8a 81       	ldd	r24, Y+2	; 0x02
    19fe:	82 30       	cpi	r24, 0x02	; 2
    1a00:	08 f0       	brcs	.+2      	; 0x1a04 <MCAL_T1_u8T1CompareOutputMode+0x1c>
    1a02:	72 c0       	rjmp	.+228    	; 0x1ae8 <MCAL_T1_u8T1CompareOutputMode+0x100>
    1a04:	8b 81       	ldd	r24, Y+3	; 0x03
    1a06:	82 30       	cpi	r24, 0x02	; 2
    1a08:	08 f0       	brcs	.+2      	; 0x1a0c <MCAL_T1_u8T1CompareOutputMode+0x24>
    1a0a:	6e c0       	rjmp	.+220    	; 0x1ae8 <MCAL_T1_u8T1CompareOutputMode+0x100>
		if (LOC_u8Channel == CHENNEL_A) {
    1a0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a0e:	88 23       	and	r24, r24
    1a10:	a9 f5       	brne	.+106    	; 0x1a7c <MCAL_T1_u8T1CompareOutputMode+0x94>
			if (LOC_u8OutputMode == NON_INVERTING_MODE) {
    1a12:	8a 81       	ldd	r24, Y+2	; 0x02
    1a14:	88 23       	and	r24, r24
    1a16:	b9 f4       	brne	.+46     	; 0x1a46 <MCAL_T1_u8T1CompareOutputMode+0x5e>
				CLR_BIT(TCCR1A, Pin6);
    1a18:	af e4       	ldi	r26, 0x4F	; 79
    1a1a:	b0 e0       	ldi	r27, 0x00	; 0
    1a1c:	ef e4       	ldi	r30, 0x4F	; 79
    1a1e:	f0 e0       	ldi	r31, 0x00	; 0
    1a20:	80 81       	ld	r24, Z
    1a22:	8f 7b       	andi	r24, 0xBF	; 191
    1a24:	8c 93       	st	X, r24
				SET_BIT(TCCR1A, Pin7);
    1a26:	af e4       	ldi	r26, 0x4F	; 79
    1a28:	b0 e0       	ldi	r27, 0x00	; 0
    1a2a:	ef e4       	ldi	r30, 0x4F	; 79
    1a2c:	f0 e0       	ldi	r31, 0x00	; 0
    1a2e:	80 81       	ld	r24, Z
    1a30:	80 68       	ori	r24, 0x80	; 128
    1a32:	8c 93       	st	X, r24
				SET_BIT(DDRD, Pin5);
    1a34:	a1 e3       	ldi	r26, 0x31	; 49
    1a36:	b0 e0       	ldi	r27, 0x00	; 0
    1a38:	e1 e3       	ldi	r30, 0x31	; 49
    1a3a:	f0 e0       	ldi	r31, 0x00	; 0
    1a3c:	80 81       	ld	r24, Z
    1a3e:	80 62       	ori	r24, 0x20	; 32
    1a40:	8c 93       	st	X, r24
				LOC_u8ReturnValue = E_OK;
    1a42:	19 82       	std	Y+1, r1	; 0x01
    1a44:	51 c0       	rjmp	.+162    	; 0x1ae8 <MCAL_T1_u8T1CompareOutputMode+0x100>
			} else if (LOC_u8OutputMode == INVERTING_MODE) {
    1a46:	8a 81       	ldd	r24, Y+2	; 0x02
    1a48:	81 30       	cpi	r24, 0x01	; 1
    1a4a:	09 f0       	breq	.+2      	; 0x1a4e <MCAL_T1_u8T1CompareOutputMode+0x66>
    1a4c:	4d c0       	rjmp	.+154    	; 0x1ae8 <MCAL_T1_u8T1CompareOutputMode+0x100>
				SET_BIT(TCCR1A, Pin6);
    1a4e:	af e4       	ldi	r26, 0x4F	; 79
    1a50:	b0 e0       	ldi	r27, 0x00	; 0
    1a52:	ef e4       	ldi	r30, 0x4F	; 79
    1a54:	f0 e0       	ldi	r31, 0x00	; 0
    1a56:	80 81       	ld	r24, Z
    1a58:	80 64       	ori	r24, 0x40	; 64
    1a5a:	8c 93       	st	X, r24
				SET_BIT(TCCR1A, Pin7);
    1a5c:	af e4       	ldi	r26, 0x4F	; 79
    1a5e:	b0 e0       	ldi	r27, 0x00	; 0
    1a60:	ef e4       	ldi	r30, 0x4F	; 79
    1a62:	f0 e0       	ldi	r31, 0x00	; 0
    1a64:	80 81       	ld	r24, Z
    1a66:	80 68       	ori	r24, 0x80	; 128
    1a68:	8c 93       	st	X, r24
				SET_BIT(DDRD, Pin5);
    1a6a:	a1 e3       	ldi	r26, 0x31	; 49
    1a6c:	b0 e0       	ldi	r27, 0x00	; 0
    1a6e:	e1 e3       	ldi	r30, 0x31	; 49
    1a70:	f0 e0       	ldi	r31, 0x00	; 0
    1a72:	80 81       	ld	r24, Z
    1a74:	80 62       	ori	r24, 0x20	; 32
    1a76:	8c 93       	st	X, r24
				LOC_u8ReturnValue = E_OK;
    1a78:	19 82       	std	Y+1, r1	; 0x01
    1a7a:	36 c0       	rjmp	.+108    	; 0x1ae8 <MCAL_T1_u8T1CompareOutputMode+0x100>
			} else {
				//NOTHING
			}
		} else if (LOC_u8Channel == CHENNEL_B) {
    1a7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a7e:	81 30       	cpi	r24, 0x01	; 1
    1a80:	99 f5       	brne	.+102    	; 0x1ae8 <MCAL_T1_u8T1CompareOutputMode+0x100>
			if (LOC_u8OutputMode == NON_INVERTING_MODE) {
    1a82:	8a 81       	ldd	r24, Y+2	; 0x02
    1a84:	88 23       	and	r24, r24
    1a86:	b9 f4       	brne	.+46     	; 0x1ab6 <MCAL_T1_u8T1CompareOutputMode+0xce>
				CLR_BIT(TCCR1A, Pin4);
    1a88:	af e4       	ldi	r26, 0x4F	; 79
    1a8a:	b0 e0       	ldi	r27, 0x00	; 0
    1a8c:	ef e4       	ldi	r30, 0x4F	; 79
    1a8e:	f0 e0       	ldi	r31, 0x00	; 0
    1a90:	80 81       	ld	r24, Z
    1a92:	8f 7e       	andi	r24, 0xEF	; 239
    1a94:	8c 93       	st	X, r24
				SET_BIT(TCCR1A, Pin5);
    1a96:	af e4       	ldi	r26, 0x4F	; 79
    1a98:	b0 e0       	ldi	r27, 0x00	; 0
    1a9a:	ef e4       	ldi	r30, 0x4F	; 79
    1a9c:	f0 e0       	ldi	r31, 0x00	; 0
    1a9e:	80 81       	ld	r24, Z
    1aa0:	80 62       	ori	r24, 0x20	; 32
    1aa2:	8c 93       	st	X, r24
				SET_BIT(DDRD, Pin4);
    1aa4:	a1 e3       	ldi	r26, 0x31	; 49
    1aa6:	b0 e0       	ldi	r27, 0x00	; 0
    1aa8:	e1 e3       	ldi	r30, 0x31	; 49
    1aaa:	f0 e0       	ldi	r31, 0x00	; 0
    1aac:	80 81       	ld	r24, Z
    1aae:	80 61       	ori	r24, 0x10	; 16
    1ab0:	8c 93       	st	X, r24
				LOC_u8ReturnValue = E_OK;
    1ab2:	19 82       	std	Y+1, r1	; 0x01
    1ab4:	19 c0       	rjmp	.+50     	; 0x1ae8 <MCAL_T1_u8T1CompareOutputMode+0x100>
			} else if (LOC_u8OutputMode == INVERTING_MODE) {
    1ab6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ab8:	81 30       	cpi	r24, 0x01	; 1
    1aba:	b1 f4       	brne	.+44     	; 0x1ae8 <MCAL_T1_u8T1CompareOutputMode+0x100>
				SET_BIT(TCCR1A, Pin4);
    1abc:	af e4       	ldi	r26, 0x4F	; 79
    1abe:	b0 e0       	ldi	r27, 0x00	; 0
    1ac0:	ef e4       	ldi	r30, 0x4F	; 79
    1ac2:	f0 e0       	ldi	r31, 0x00	; 0
    1ac4:	80 81       	ld	r24, Z
    1ac6:	80 61       	ori	r24, 0x10	; 16
    1ac8:	8c 93       	st	X, r24
				SET_BIT(TCCR1A, Pin5);
    1aca:	af e4       	ldi	r26, 0x4F	; 79
    1acc:	b0 e0       	ldi	r27, 0x00	; 0
    1ace:	ef e4       	ldi	r30, 0x4F	; 79
    1ad0:	f0 e0       	ldi	r31, 0x00	; 0
    1ad2:	80 81       	ld	r24, Z
    1ad4:	80 62       	ori	r24, 0x20	; 32
    1ad6:	8c 93       	st	X, r24
				SET_BIT(DDRD, Pin4);
    1ad8:	a1 e3       	ldi	r26, 0x31	; 49
    1ada:	b0 e0       	ldi	r27, 0x00	; 0
    1adc:	e1 e3       	ldi	r30, 0x31	; 49
    1ade:	f0 e0       	ldi	r31, 0x00	; 0
    1ae0:	80 81       	ld	r24, Z
    1ae2:	80 61       	ori	r24, 0x10	; 16
    1ae4:	8c 93       	st	X, r24
				LOC_u8ReturnValue = E_OK;
    1ae6:	19 82       	std	Y+1, r1	; 0x01
			//NOTHING
		}
	} else {
		//NOTHING
	}
	return LOC_u8ReturnValue;
    1ae8:	89 81       	ldd	r24, Y+1	; 0x01
}
    1aea:	0f 90       	pop	r0
    1aec:	0f 90       	pop	r0
    1aee:	0f 90       	pop	r0
    1af0:	cf 91       	pop	r28
    1af2:	df 91       	pop	r29
    1af4:	08 95       	ret

00001af6 <MCAL_T1_voidNoiseCancller>:
//NOISE CANCLLER
void MCAL_T1_voidNoiseCancller(void) {
    1af6:	df 93       	push	r29
    1af8:	cf 93       	push	r28
    1afa:	cd b7       	in	r28, 0x3d	; 61
    1afc:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TCCR1B, Pin7);
    1afe:	ae e4       	ldi	r26, 0x4E	; 78
    1b00:	b0 e0       	ldi	r27, 0x00	; 0
    1b02:	ee e4       	ldi	r30, 0x4E	; 78
    1b04:	f0 e0       	ldi	r31, 0x00	; 0
    1b06:	80 81       	ld	r24, Z
    1b08:	80 68       	ori	r24, 0x80	; 128
    1b0a:	8c 93       	st	X, r24
}
    1b0c:	cf 91       	pop	r28
    1b0e:	df 91       	pop	r29
    1b10:	08 95       	ret

00001b12 <MCAL_T1_voidSetTCNT1Value>:
//Set TCNT1 Value
void MCAL_T1_voidSetTCNT1Value(u16 LOC_u16Value) {
    1b12:	df 93       	push	r29
    1b14:	cf 93       	push	r28
    1b16:	00 d0       	rcall	.+0      	; 0x1b18 <MCAL_T1_voidSetTCNT1Value+0x6>
    1b18:	cd b7       	in	r28, 0x3d	; 61
    1b1a:	de b7       	in	r29, 0x3e	; 62
    1b1c:	9a 83       	std	Y+2, r25	; 0x02
    1b1e:	89 83       	std	Y+1, r24	; 0x01
	if (LOC_u16Value <= SIXTEEN_BIT_MAX_VALUE) {
		TCNT1 = LOC_u16Value;
    1b20:	ec e4       	ldi	r30, 0x4C	; 76
    1b22:	f0 e0       	ldi	r31, 0x00	; 0
    1b24:	89 81       	ldd	r24, Y+1	; 0x01
    1b26:	9a 81       	ldd	r25, Y+2	; 0x02
    1b28:	91 83       	std	Z+1, r25	; 0x01
    1b2a:	80 83       	st	Z, r24
	} else {
		//NOTHING
	}
}
    1b2c:	0f 90       	pop	r0
    1b2e:	0f 90       	pop	r0
    1b30:	cf 91       	pop	r28
    1b32:	df 91       	pop	r29
    1b34:	08 95       	ret

00001b36 <MCAL_T1_voidGetTCNT1Value>:
//GIT TCNT1
void MCAL_T1_voidGetTCNT1Value(u16 *LOC_pu16Value) {
    1b36:	df 93       	push	r29
    1b38:	cf 93       	push	r28
    1b3a:	00 d0       	rcall	.+0      	; 0x1b3c <MCAL_T1_voidGetTCNT1Value+0x6>
    1b3c:	cd b7       	in	r28, 0x3d	; 61
    1b3e:	de b7       	in	r29, 0x3e	; 62
    1b40:	9a 83       	std	Y+2, r25	; 0x02
    1b42:	89 83       	std	Y+1, r24	; 0x01
	if (LOC_pu16Value) {
    1b44:	89 81       	ldd	r24, Y+1	; 0x01
    1b46:	9a 81       	ldd	r25, Y+2	; 0x02
    1b48:	00 97       	sbiw	r24, 0x00	; 0
    1b4a:	41 f0       	breq	.+16     	; 0x1b5c <MCAL_T1_voidGetTCNT1Value+0x26>
		*LOC_pu16Value = TCNT1;
    1b4c:	ec e4       	ldi	r30, 0x4C	; 76
    1b4e:	f0 e0       	ldi	r31, 0x00	; 0
    1b50:	80 81       	ld	r24, Z
    1b52:	91 81       	ldd	r25, Z+1	; 0x01
    1b54:	e9 81       	ldd	r30, Y+1	; 0x01
    1b56:	fa 81       	ldd	r31, Y+2	; 0x02
    1b58:	91 83       	std	Z+1, r25	; 0x01
    1b5a:	80 83       	st	Z, r24
	}
}
    1b5c:	0f 90       	pop	r0
    1b5e:	0f 90       	pop	r0
    1b60:	cf 91       	pop	r28
    1b62:	df 91       	pop	r29
    1b64:	08 95       	ret

00001b66 <MCAL_T1_voidSetOCR1AValue>:
//Set OCR1A
void MCAL_T1_voidSetOCR1AValue(u16 LOC_u16Value) {
    1b66:	df 93       	push	r29
    1b68:	cf 93       	push	r28
    1b6a:	00 d0       	rcall	.+0      	; 0x1b6c <MCAL_T1_voidSetOCR1AValue+0x6>
    1b6c:	cd b7       	in	r28, 0x3d	; 61
    1b6e:	de b7       	in	r29, 0x3e	; 62
    1b70:	9a 83       	std	Y+2, r25	; 0x02
    1b72:	89 83       	std	Y+1, r24	; 0x01
	if (LOC_u16Value <= SIXTEEN_BIT_MAX_VALUE) {
		OCR1A = LOC_u16Value;
    1b74:	ea e4       	ldi	r30, 0x4A	; 74
    1b76:	f0 e0       	ldi	r31, 0x00	; 0
    1b78:	89 81       	ldd	r24, Y+1	; 0x01
    1b7a:	9a 81       	ldd	r25, Y+2	; 0x02
    1b7c:	91 83       	std	Z+1, r25	; 0x01
    1b7e:	80 83       	st	Z, r24
	} else {
		//NOTHING
	}
}
    1b80:	0f 90       	pop	r0
    1b82:	0f 90       	pop	r0
    1b84:	cf 91       	pop	r28
    1b86:	df 91       	pop	r29
    1b88:	08 95       	ret

00001b8a <MCAL_T1_voidSetOCR1BValue>:
//SET OCR1B
void MCAL_T1_voidSetOCR1BValue(u16 LOC_u16Value) {
    1b8a:	df 93       	push	r29
    1b8c:	cf 93       	push	r28
    1b8e:	00 d0       	rcall	.+0      	; 0x1b90 <MCAL_T1_voidSetOCR1BValue+0x6>
    1b90:	cd b7       	in	r28, 0x3d	; 61
    1b92:	de b7       	in	r29, 0x3e	; 62
    1b94:	9a 83       	std	Y+2, r25	; 0x02
    1b96:	89 83       	std	Y+1, r24	; 0x01
	if (LOC_u16Value <= SIXTEEN_BIT_MAX_VALUE) {
		OCR1B = LOC_u16Value;
    1b98:	e8 e4       	ldi	r30, 0x48	; 72
    1b9a:	f0 e0       	ldi	r31, 0x00	; 0
    1b9c:	89 81       	ldd	r24, Y+1	; 0x01
    1b9e:	9a 81       	ldd	r25, Y+2	; 0x02
    1ba0:	91 83       	std	Z+1, r25	; 0x01
    1ba2:	80 83       	st	Z, r24
	} else {
		//NOTHING
	}
}
    1ba4:	0f 90       	pop	r0
    1ba6:	0f 90       	pop	r0
    1ba8:	cf 91       	pop	r28
    1baa:	df 91       	pop	r29
    1bac:	08 95       	ret

00001bae <MCAL_T1_voidSetICR1Value>:
//SET ICR1
void MCAL_T1_voidSetICR1Value(u16 LOC_u16Value) {
    1bae:	df 93       	push	r29
    1bb0:	cf 93       	push	r28
    1bb2:	00 d0       	rcall	.+0      	; 0x1bb4 <MCAL_T1_voidSetICR1Value+0x6>
    1bb4:	cd b7       	in	r28, 0x3d	; 61
    1bb6:	de b7       	in	r29, 0x3e	; 62
    1bb8:	9a 83       	std	Y+2, r25	; 0x02
    1bba:	89 83       	std	Y+1, r24	; 0x01
	if (LOC_u16Value <= SIXTEEN_BIT_MAX_VALUE) {
		ICR1 = LOC_u16Value;
    1bbc:	e6 e4       	ldi	r30, 0x46	; 70
    1bbe:	f0 e0       	ldi	r31, 0x00	; 0
    1bc0:	89 81       	ldd	r24, Y+1	; 0x01
    1bc2:	9a 81       	ldd	r25, Y+2	; 0x02
    1bc4:	91 83       	std	Z+1, r25	; 0x01
    1bc6:	80 83       	st	Z, r24
	} else {
		//NOTHING
	}
}
    1bc8:	0f 90       	pop	r0
    1bca:	0f 90       	pop	r0
    1bcc:	cf 91       	pop	r28
    1bce:	df 91       	pop	r29
    1bd0:	08 95       	ret

00001bd2 <MCAL_T1_voidGetICR1Value>:
//Get ICR1
void MCAL_T1_voidGetICR1Value(u16 *LOC_pu16Value) {
    1bd2:	df 93       	push	r29
    1bd4:	cf 93       	push	r28
    1bd6:	00 d0       	rcall	.+0      	; 0x1bd8 <MCAL_T1_voidGetICR1Value+0x6>
    1bd8:	cd b7       	in	r28, 0x3d	; 61
    1bda:	de b7       	in	r29, 0x3e	; 62
    1bdc:	9a 83       	std	Y+2, r25	; 0x02
    1bde:	89 83       	std	Y+1, r24	; 0x01
	if (LOC_pu16Value) {
    1be0:	89 81       	ldd	r24, Y+1	; 0x01
    1be2:	9a 81       	ldd	r25, Y+2	; 0x02
    1be4:	00 97       	sbiw	r24, 0x00	; 0
    1be6:	41 f0       	breq	.+16     	; 0x1bf8 <MCAL_T1_voidGetICR1Value+0x26>
		*LOC_pu16Value = ICR1;
    1be8:	e6 e4       	ldi	r30, 0x46	; 70
    1bea:	f0 e0       	ldi	r31, 0x00	; 0
    1bec:	80 81       	ld	r24, Z
    1bee:	91 81       	ldd	r25, Z+1	; 0x01
    1bf0:	e9 81       	ldd	r30, Y+1	; 0x01
    1bf2:	fa 81       	ldd	r31, Y+2	; 0x02
    1bf4:	91 83       	std	Z+1, r25	; 0x01
    1bf6:	80 83       	st	Z, r24
	}
}
    1bf8:	0f 90       	pop	r0
    1bfa:	0f 90       	pop	r0
    1bfc:	cf 91       	pop	r28
    1bfe:	df 91       	pop	r29
    1c00:	08 95       	ret

00001c02 <MCAL_T1_voidTCNT1_GIEEnable>:
//TCNT1 PIE
void MCAL_T1_voidTCNT1_GIEEnable(void) {
    1c02:	df 93       	push	r29
    1c04:	cf 93       	push	r28
    1c06:	cd b7       	in	r28, 0x3d	; 61
    1c08:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG, Pin7);
    1c0a:	af e5       	ldi	r26, 0x5F	; 95
    1c0c:	b0 e0       	ldi	r27, 0x00	; 0
    1c0e:	ef e5       	ldi	r30, 0x5F	; 95
    1c10:	f0 e0       	ldi	r31, 0x00	; 0
    1c12:	80 81       	ld	r24, Z
    1c14:	80 68       	ori	r24, 0x80	; 128
    1c16:	8c 93       	st	X, r24
	SET_BIT(TIMSK, Pin2);
    1c18:	a9 e5       	ldi	r26, 0x59	; 89
    1c1a:	b0 e0       	ldi	r27, 0x00	; 0
    1c1c:	e9 e5       	ldi	r30, 0x59	; 89
    1c1e:	f0 e0       	ldi	r31, 0x00	; 0
    1c20:	80 81       	ld	r24, Z
    1c22:	84 60       	ori	r24, 0x04	; 4
    1c24:	8c 93       	st	X, r24
}
    1c26:	cf 91       	pop	r28
    1c28:	df 91       	pop	r29
    1c2a:	08 95       	ret

00001c2c <MCAL_T1_voidTCNT1_GIEDisable>:
void MCAL_T1_voidTCNT1_GIEDisable(void) {
    1c2c:	df 93       	push	r29
    1c2e:	cf 93       	push	r28
    1c30:	cd b7       	in	r28, 0x3d	; 61
    1c32:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK, Pin2);
    1c34:	a9 e5       	ldi	r26, 0x59	; 89
    1c36:	b0 e0       	ldi	r27, 0x00	; 0
    1c38:	e9 e5       	ldi	r30, 0x59	; 89
    1c3a:	f0 e0       	ldi	r31, 0x00	; 0
    1c3c:	80 81       	ld	r24, Z
    1c3e:	8b 7f       	andi	r24, 0xFB	; 251
    1c40:	8c 93       	st	X, r24
}
    1c42:	cf 91       	pop	r28
    1c44:	df 91       	pop	r29
    1c46:	08 95       	ret

00001c48 <MCAL_T1_voidOCR1B_GIEEnable>:
//OCR1B PIE
void MCAL_T1_voidOCR1B_GIEEnable(void) {
    1c48:	df 93       	push	r29
    1c4a:	cf 93       	push	r28
    1c4c:	cd b7       	in	r28, 0x3d	; 61
    1c4e:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG, Pin7);
    1c50:	af e5       	ldi	r26, 0x5F	; 95
    1c52:	b0 e0       	ldi	r27, 0x00	; 0
    1c54:	ef e5       	ldi	r30, 0x5F	; 95
    1c56:	f0 e0       	ldi	r31, 0x00	; 0
    1c58:	80 81       	ld	r24, Z
    1c5a:	80 68       	ori	r24, 0x80	; 128
    1c5c:	8c 93       	st	X, r24
	SET_BIT(TIMSK, Pin3);
    1c5e:	a9 e5       	ldi	r26, 0x59	; 89
    1c60:	b0 e0       	ldi	r27, 0x00	; 0
    1c62:	e9 e5       	ldi	r30, 0x59	; 89
    1c64:	f0 e0       	ldi	r31, 0x00	; 0
    1c66:	80 81       	ld	r24, Z
    1c68:	88 60       	ori	r24, 0x08	; 8
    1c6a:	8c 93       	st	X, r24
}
    1c6c:	cf 91       	pop	r28
    1c6e:	df 91       	pop	r29
    1c70:	08 95       	ret

00001c72 <MCAL_T1_voidOCR1B_GIEDisable>:
void MCAL_T1_voidOCR1B_GIEDisable(void) {
    1c72:	df 93       	push	r29
    1c74:	cf 93       	push	r28
    1c76:	cd b7       	in	r28, 0x3d	; 61
    1c78:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK, Pin3);
    1c7a:	a9 e5       	ldi	r26, 0x59	; 89
    1c7c:	b0 e0       	ldi	r27, 0x00	; 0
    1c7e:	e9 e5       	ldi	r30, 0x59	; 89
    1c80:	f0 e0       	ldi	r31, 0x00	; 0
    1c82:	80 81       	ld	r24, Z
    1c84:	87 7f       	andi	r24, 0xF7	; 247
    1c86:	8c 93       	st	X, r24
}
    1c88:	cf 91       	pop	r28
    1c8a:	df 91       	pop	r29
    1c8c:	08 95       	ret

00001c8e <MCAL_T1_voidOCR1A_GIEEnable>:
//OCR1A PIE
void MCAL_T1_voidOCR1A_GIEEnable(void) {
    1c8e:	df 93       	push	r29
    1c90:	cf 93       	push	r28
    1c92:	cd b7       	in	r28, 0x3d	; 61
    1c94:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG, Pin7);
    1c96:	af e5       	ldi	r26, 0x5F	; 95
    1c98:	b0 e0       	ldi	r27, 0x00	; 0
    1c9a:	ef e5       	ldi	r30, 0x5F	; 95
    1c9c:	f0 e0       	ldi	r31, 0x00	; 0
    1c9e:	80 81       	ld	r24, Z
    1ca0:	80 68       	ori	r24, 0x80	; 128
    1ca2:	8c 93       	st	X, r24
	SET_BIT(TIMSK, Pin4);
    1ca4:	a9 e5       	ldi	r26, 0x59	; 89
    1ca6:	b0 e0       	ldi	r27, 0x00	; 0
    1ca8:	e9 e5       	ldi	r30, 0x59	; 89
    1caa:	f0 e0       	ldi	r31, 0x00	; 0
    1cac:	80 81       	ld	r24, Z
    1cae:	80 61       	ori	r24, 0x10	; 16
    1cb0:	8c 93       	st	X, r24
}
    1cb2:	cf 91       	pop	r28
    1cb4:	df 91       	pop	r29
    1cb6:	08 95       	ret

00001cb8 <MCAL_T1_voidOCR1A_GIEDisable>:
void MCAL_T1_voidOCR1A_GIEDisable(void) {
    1cb8:	df 93       	push	r29
    1cba:	cf 93       	push	r28
    1cbc:	cd b7       	in	r28, 0x3d	; 61
    1cbe:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK, Pin4);
    1cc0:	a9 e5       	ldi	r26, 0x59	; 89
    1cc2:	b0 e0       	ldi	r27, 0x00	; 0
    1cc4:	e9 e5       	ldi	r30, 0x59	; 89
    1cc6:	f0 e0       	ldi	r31, 0x00	; 0
    1cc8:	80 81       	ld	r24, Z
    1cca:	8f 7e       	andi	r24, 0xEF	; 239
    1ccc:	8c 93       	st	X, r24
}
    1cce:	cf 91       	pop	r28
    1cd0:	df 91       	pop	r29
    1cd2:	08 95       	ret

00001cd4 <MCAL_T1_voidICR1_GIEEnable>:
//ICR1 PIE
void MCAL_T1_voidICR1_GIEEnable(void) {
    1cd4:	df 93       	push	r29
    1cd6:	cf 93       	push	r28
    1cd8:	cd b7       	in	r28, 0x3d	; 61
    1cda:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG, Pin7);
    1cdc:	af e5       	ldi	r26, 0x5F	; 95
    1cde:	b0 e0       	ldi	r27, 0x00	; 0
    1ce0:	ef e5       	ldi	r30, 0x5F	; 95
    1ce2:	f0 e0       	ldi	r31, 0x00	; 0
    1ce4:	80 81       	ld	r24, Z
    1ce6:	80 68       	ori	r24, 0x80	; 128
    1ce8:	8c 93       	st	X, r24
	SET_BIT(TIMSK, Pin5);
    1cea:	a9 e5       	ldi	r26, 0x59	; 89
    1cec:	b0 e0       	ldi	r27, 0x00	; 0
    1cee:	e9 e5       	ldi	r30, 0x59	; 89
    1cf0:	f0 e0       	ldi	r31, 0x00	; 0
    1cf2:	80 81       	ld	r24, Z
    1cf4:	80 62       	ori	r24, 0x20	; 32
    1cf6:	8c 93       	st	X, r24
}
    1cf8:	cf 91       	pop	r28
    1cfa:	df 91       	pop	r29
    1cfc:	08 95       	ret

00001cfe <MCAL_T1_voidICR1_GIEDisable>:
void MCAL_T1_voidICR1_GIEDisable(void) {
    1cfe:	df 93       	push	r29
    1d00:	cf 93       	push	r28
    1d02:	cd b7       	in	r28, 0x3d	; 61
    1d04:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK, Pin5);
    1d06:	a9 e5       	ldi	r26, 0x59	; 89
    1d08:	b0 e0       	ldi	r27, 0x00	; 0
    1d0a:	e9 e5       	ldi	r30, 0x59	; 89
    1d0c:	f0 e0       	ldi	r31, 0x00	; 0
    1d0e:	80 81       	ld	r24, Z
    1d10:	8f 7d       	andi	r24, 0xDF	; 223
    1d12:	8c 93       	st	X, r24
}
    1d14:	cf 91       	pop	r28
    1d16:	df 91       	pop	r29
    1d18:	08 95       	ret

00001d1a <MCAL_T1_u8T1DelayNormalMode>:

u8 MCAL_T1_u8T1DelayNormalMode(u8 LOC_u8Clock_Selection,
		f32 LOC_f32NumOFSecond, u16 *LOC_pu8StartValue, u16 *LOC_pu16Counter) {
    1d1a:	0f 93       	push	r16
    1d1c:	1f 93       	push	r17
    1d1e:	df 93       	push	r29
    1d20:	cf 93       	push	r28
    1d22:	cd b7       	in	r28, 0x3d	; 61
    1d24:	de b7       	in	r29, 0x3e	; 62
    1d26:	66 97       	sbiw	r28, 0x16	; 22
    1d28:	0f b6       	in	r0, 0x3f	; 63
    1d2a:	f8 94       	cli
    1d2c:	de bf       	out	0x3e, r29	; 62
    1d2e:	0f be       	out	0x3f, r0	; 63
    1d30:	cd bf       	out	0x3d, r28	; 61
    1d32:	8e 87       	std	Y+14, r24	; 0x0e
    1d34:	4f 87       	std	Y+15, r20	; 0x0f
    1d36:	58 8b       	std	Y+16, r21	; 0x10
    1d38:	69 8b       	std	Y+17, r22	; 0x11
    1d3a:	7a 8b       	std	Y+18, r23	; 0x12
    1d3c:	3c 8b       	std	Y+20, r19	; 0x14
    1d3e:	2b 8b       	std	Y+19, r18	; 0x13
    1d40:	1e 8b       	std	Y+22, r17	; 0x16
    1d42:	0d 8b       	std	Y+21, r16	; 0x15
	u8 LOC_u8ReturnValue = E_NOT_OK;
    1d44:	81 e0       	ldi	r24, 0x01	; 1
    1d46:	89 87       	std	Y+9, r24	; 0x09
	f32 TickTime = NUMBER_0;
    1d48:	80 e0       	ldi	r24, 0x00	; 0
    1d4a:	90 e0       	ldi	r25, 0x00	; 0
    1d4c:	a0 e0       	ldi	r26, 0x00	; 0
    1d4e:	b0 e0       	ldi	r27, 0x00	; 0
    1d50:	8a 87       	std	Y+10, r24	; 0x0a
    1d52:	9b 87       	std	Y+11, r25	; 0x0b
    1d54:	ac 87       	std	Y+12, r26	; 0x0c
    1d56:	bd 87       	std	Y+13, r27	; 0x0d
	u32 N = NUMBER_0;
    1d58:	1d 82       	std	Y+5, r1	; 0x05
    1d5a:	1e 82       	std	Y+6, r1	; 0x06
    1d5c:	1f 82       	std	Y+7, r1	; 0x07
    1d5e:	18 86       	std	Y+8, r1	; 0x08
	u16 counter = NUMBER_0;
    1d60:	1c 82       	std	Y+4, r1	; 0x04
    1d62:	1b 82       	std	Y+3, r1	; 0x03
	u16 Reminder = NUMBER_0;
    1d64:	1a 82       	std	Y+2, r1	; 0x02
    1d66:	19 82       	std	Y+1, r1	; 0x01
	MCAL_T1_u8T1Prescaler(LOC_u8Clock_Selection, &TickTime);
    1d68:	9e 01       	movw	r18, r28
    1d6a:	26 5f       	subi	r18, 0xF6	; 246
    1d6c:	3f 4f       	sbci	r19, 0xFF	; 255
    1d6e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1d70:	b9 01       	movw	r22, r18
    1d72:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <MCAL_T1_u8T1Prescaler>
	if (LOC_f32NumOFSecond <= 0 || LOC_f32NumOFSecond > 0) {
    1d76:	6f 85       	ldd	r22, Y+15	; 0x0f
    1d78:	78 89       	ldd	r23, Y+16	; 0x10
    1d7a:	89 89       	ldd	r24, Y+17	; 0x11
    1d7c:	9a 89       	ldd	r25, Y+18	; 0x12
    1d7e:	20 e0       	ldi	r18, 0x00	; 0
    1d80:	30 e0       	ldi	r19, 0x00	; 0
    1d82:	40 e0       	ldi	r20, 0x00	; 0
    1d84:	50 e0       	ldi	r21, 0x00	; 0
    1d86:	0e 94 55 04 	call	0x8aa	; 0x8aa <__lesf2>
    1d8a:	18 16       	cp	r1, r24
    1d8c:	6c f4       	brge	.+26     	; 0x1da8 <MCAL_T1_u8T1DelayNormalMode+0x8e>
    1d8e:	6f 85       	ldd	r22, Y+15	; 0x0f
    1d90:	78 89       	ldd	r23, Y+16	; 0x10
    1d92:	89 89       	ldd	r24, Y+17	; 0x11
    1d94:	9a 89       	ldd	r25, Y+18	; 0x12
    1d96:	20 e0       	ldi	r18, 0x00	; 0
    1d98:	30 e0       	ldi	r19, 0x00	; 0
    1d9a:	40 e0       	ldi	r20, 0x00	; 0
    1d9c:	50 e0       	ldi	r21, 0x00	; 0
    1d9e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1da2:	18 16       	cp	r1, r24
    1da4:	0c f0       	brlt	.+2      	; 0x1da8 <MCAL_T1_u8T1DelayNormalMode+0x8e>
    1da6:	6b c0       	rjmp	.+214    	; 0x1e7e <MCAL_T1_u8T1DelayNormalMode+0x164>
		N = LOC_f32NumOFSecond / (f32) TickTime;
    1da8:	2a 85       	ldd	r18, Y+10	; 0x0a
    1daa:	3b 85       	ldd	r19, Y+11	; 0x0b
    1dac:	4c 85       	ldd	r20, Y+12	; 0x0c
    1dae:	5d 85       	ldd	r21, Y+13	; 0x0d
    1db0:	6f 85       	ldd	r22, Y+15	; 0x0f
    1db2:	78 89       	ldd	r23, Y+16	; 0x10
    1db4:	89 89       	ldd	r24, Y+17	; 0x11
    1db6:	9a 89       	ldd	r25, Y+18	; 0x12
    1db8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1dbc:	dc 01       	movw	r26, r24
    1dbe:	cb 01       	movw	r24, r22
    1dc0:	bc 01       	movw	r22, r24
    1dc2:	cd 01       	movw	r24, r26
    1dc4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dc8:	dc 01       	movw	r26, r24
    1dca:	cb 01       	movw	r24, r22
    1dcc:	8d 83       	std	Y+5, r24	; 0x05
    1dce:	9e 83       	std	Y+6, r25	; 0x06
    1dd0:	af 83       	std	Y+7, r26	; 0x07
    1dd2:	b8 87       	std	Y+8, r27	; 0x08
		Reminder = N % OVER_FLOW_COUNT;
    1dd4:	8d 81       	ldd	r24, Y+5	; 0x05
    1dd6:	9e 81       	ldd	r25, Y+6	; 0x06
    1dd8:	af 81       	ldd	r26, Y+7	; 0x07
    1dda:	b8 85       	ldd	r27, Y+8	; 0x08
    1ddc:	2f ef       	ldi	r18, 0xFF	; 255
    1dde:	3f ef       	ldi	r19, 0xFF	; 255
    1de0:	40 e0       	ldi	r20, 0x00	; 0
    1de2:	50 e0       	ldi	r21, 0x00	; 0
    1de4:	bc 01       	movw	r22, r24
    1de6:	cd 01       	movw	r24, r26
    1de8:	0e 94 bd 2b 	call	0x577a	; 0x577a <__udivmodsi4>
    1dec:	dc 01       	movw	r26, r24
    1dee:	cb 01       	movw	r24, r22
    1df0:	9a 83       	std	Y+2, r25	; 0x02
    1df2:	89 83       	std	Y+1, r24	; 0x01
		*LOC_pu8StartValue = Reminder;
    1df4:	eb 89       	ldd	r30, Y+19	; 0x13
    1df6:	fc 89       	ldd	r31, Y+20	; 0x14
    1df8:	89 81       	ldd	r24, Y+1	; 0x01
    1dfa:	9a 81       	ldd	r25, Y+2	; 0x02
    1dfc:	91 83       	std	Z+1, r25	; 0x01
    1dfe:	80 83       	st	Z, r24
		if (Reminder == NUMBER_0) {
    1e00:	89 81       	ldd	r24, Y+1	; 0x01
    1e02:	9a 81       	ldd	r25, Y+2	; 0x02
    1e04:	00 97       	sbiw	r24, 0x00	; 0
    1e06:	d9 f4       	brne	.+54     	; 0x1e3e <MCAL_T1_u8T1DelayNormalMode+0x124>
			MCAL_T1_voidSetTCNT1Value(Reminder);
    1e08:	89 81       	ldd	r24, Y+1	; 0x01
    1e0a:	9a 81       	ldd	r25, Y+2	; 0x02
    1e0c:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <MCAL_T1_voidSetTCNT1Value>
			counter = N / OVER_FLOW_COUNT;
    1e10:	8d 81       	ldd	r24, Y+5	; 0x05
    1e12:	9e 81       	ldd	r25, Y+6	; 0x06
    1e14:	af 81       	ldd	r26, Y+7	; 0x07
    1e16:	b8 85       	ldd	r27, Y+8	; 0x08
    1e18:	2f ef       	ldi	r18, 0xFF	; 255
    1e1a:	3f ef       	ldi	r19, 0xFF	; 255
    1e1c:	40 e0       	ldi	r20, 0x00	; 0
    1e1e:	50 e0       	ldi	r21, 0x00	; 0
    1e20:	bc 01       	movw	r22, r24
    1e22:	cd 01       	movw	r24, r26
    1e24:	0e 94 bd 2b 	call	0x577a	; 0x577a <__udivmodsi4>
    1e28:	da 01       	movw	r26, r20
    1e2a:	c9 01       	movw	r24, r18
    1e2c:	9c 83       	std	Y+4, r25	; 0x04
    1e2e:	8b 83       	std	Y+3, r24	; 0x03
			*LOC_pu16Counter = counter;
    1e30:	ed 89       	ldd	r30, Y+21	; 0x15
    1e32:	fe 89       	ldd	r31, Y+22	; 0x16
    1e34:	8b 81       	ldd	r24, Y+3	; 0x03
    1e36:	9c 81       	ldd	r25, Y+4	; 0x04
    1e38:	91 83       	std	Z+1, r25	; 0x01
    1e3a:	80 83       	st	Z, r24
    1e3c:	1f c0       	rjmp	.+62     	; 0x1e7c <MCAL_T1_u8T1DelayNormalMode+0x162>
		} else if (Reminder != NUMBER_0) {
    1e3e:	89 81       	ldd	r24, Y+1	; 0x01
    1e40:	9a 81       	ldd	r25, Y+2	; 0x02
    1e42:	00 97       	sbiw	r24, 0x00	; 0
    1e44:	d9 f0       	breq	.+54     	; 0x1e7c <MCAL_T1_u8T1DelayNormalMode+0x162>
			MCAL_T1_voidSetTCNT1Value(Reminder);
    1e46:	89 81       	ldd	r24, Y+1	; 0x01
    1e48:	9a 81       	ldd	r25, Y+2	; 0x02
    1e4a:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <MCAL_T1_voidSetTCNT1Value>
			counter = ((N / OVER_FLOW_COUNT) + NUMBER_1);
    1e4e:	8d 81       	ldd	r24, Y+5	; 0x05
    1e50:	9e 81       	ldd	r25, Y+6	; 0x06
    1e52:	af 81       	ldd	r26, Y+7	; 0x07
    1e54:	b8 85       	ldd	r27, Y+8	; 0x08
    1e56:	2f ef       	ldi	r18, 0xFF	; 255
    1e58:	3f ef       	ldi	r19, 0xFF	; 255
    1e5a:	40 e0       	ldi	r20, 0x00	; 0
    1e5c:	50 e0       	ldi	r21, 0x00	; 0
    1e5e:	bc 01       	movw	r22, r24
    1e60:	cd 01       	movw	r24, r26
    1e62:	0e 94 bd 2b 	call	0x577a	; 0x577a <__udivmodsi4>
    1e66:	da 01       	movw	r26, r20
    1e68:	c9 01       	movw	r24, r18
    1e6a:	01 96       	adiw	r24, 0x01	; 1
    1e6c:	9c 83       	std	Y+4, r25	; 0x04
    1e6e:	8b 83       	std	Y+3, r24	; 0x03
			*LOC_pu16Counter = counter;
    1e70:	ed 89       	ldd	r30, Y+21	; 0x15
    1e72:	fe 89       	ldd	r31, Y+22	; 0x16
    1e74:	8b 81       	ldd	r24, Y+3	; 0x03
    1e76:	9c 81       	ldd	r25, Y+4	; 0x04
    1e78:	91 83       	std	Z+1, r25	; 0x01
    1e7a:	80 83       	st	Z, r24
		} else {
			//NOTHING
		}
		LOC_u8ReturnValue = E_OK;
    1e7c:	19 86       	std	Y+9, r1	; 0x09
	}
	return LOC_u8ReturnValue;
    1e7e:	89 85       	ldd	r24, Y+9	; 0x09

}
    1e80:	66 96       	adiw	r28, 0x16	; 22
    1e82:	0f b6       	in	r0, 0x3f	; 63
    1e84:	f8 94       	cli
    1e86:	de bf       	out	0x3e, r29	; 62
    1e88:	0f be       	out	0x3f, r0	; 63
    1e8a:	cd bf       	out	0x3d, r28	; 61
    1e8c:	cf 91       	pop	r28
    1e8e:	df 91       	pop	r29
    1e90:	1f 91       	pop	r17
    1e92:	0f 91       	pop	r16
    1e94:	08 95       	ret

00001e96 <MCAL_T1_voidDelayCTCMode>:

void MCAL_T1_voidDelayCTCMode(u8 LOC_u8Clock_Selection,
		f32 LOC_f32NumOFSecond, u16 *LOC_pu16Counter) {
    1e96:	df 93       	push	r29
    1e98:	cf 93       	push	r28
    1e9a:	cd b7       	in	r28, 0x3d	; 61
    1e9c:	de b7       	in	r29, 0x3e	; 62
    1e9e:	61 97       	sbiw	r28, 0x11	; 17
    1ea0:	0f b6       	in	r0, 0x3f	; 63
    1ea2:	f8 94       	cli
    1ea4:	de bf       	out	0x3e, r29	; 62
    1ea6:	0f be       	out	0x3f, r0	; 63
    1ea8:	cd bf       	out	0x3d, r28	; 61
    1eaa:	8b 87       	std	Y+11, r24	; 0x0b
    1eac:	4c 87       	std	Y+12, r20	; 0x0c
    1eae:	5d 87       	std	Y+13, r21	; 0x0d
    1eb0:	6e 87       	std	Y+14, r22	; 0x0e
    1eb2:	7f 87       	std	Y+15, r23	; 0x0f
    1eb4:	39 8b       	std	Y+17, r19	; 0x11
    1eb6:	28 8b       	std	Y+16, r18	; 0x10
	f32 TickTime = NUMBER_0;
    1eb8:	80 e0       	ldi	r24, 0x00	; 0
    1eba:	90 e0       	ldi	r25, 0x00	; 0
    1ebc:	a0 e0       	ldi	r26, 0x00	; 0
    1ebe:	b0 e0       	ldi	r27, 0x00	; 0
    1ec0:	8f 83       	std	Y+7, r24	; 0x07
    1ec2:	98 87       	std	Y+8, r25	; 0x08
    1ec4:	a9 87       	std	Y+9, r26	; 0x09
    1ec6:	ba 87       	std	Y+10, r27	; 0x0a
	f32 N = NUMBER_0;
    1ec8:	80 e0       	ldi	r24, 0x00	; 0
    1eca:	90 e0       	ldi	r25, 0x00	; 0
    1ecc:	a0 e0       	ldi	r26, 0x00	; 0
    1ece:	b0 e0       	ldi	r27, 0x00	; 0
    1ed0:	8b 83       	std	Y+3, r24	; 0x03
    1ed2:	9c 83       	std	Y+4, r25	; 0x04
    1ed4:	ad 83       	std	Y+5, r26	; 0x05
    1ed6:	be 83       	std	Y+6, r27	; 0x06
	u16 counter = NUMBER_0;
    1ed8:	1a 82       	std	Y+2, r1	; 0x02
    1eda:	19 82       	std	Y+1, r1	; 0x01
	MCAL_T1_u8T1Prescaler(LOC_u8Clock_Selection, &TickTime);
    1edc:	9e 01       	movw	r18, r28
    1ede:	29 5f       	subi	r18, 0xF9	; 249
    1ee0:	3f 4f       	sbci	r19, 0xFF	; 255
    1ee2:	8b 85       	ldd	r24, Y+11	; 0x0b
    1ee4:	b9 01       	movw	r22, r18
    1ee6:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <MCAL_T1_u8T1Prescaler>
	MCAL_T1_voidSetOCR1AValue(CTC_DELAY_CONST);
    1eea:	87 ec       	ldi	r24, 0xC7	; 199
    1eec:	90 e0       	ldi	r25, 0x00	; 0
    1eee:	0e 94 b3 0d 	call	0x1b66	; 0x1b66 <MCAL_T1_voidSetOCR1AValue>
	if (LOC_f32NumOFSecond <= 0 || LOC_f32NumOFSecond > 0) {
    1ef2:	6c 85       	ldd	r22, Y+12	; 0x0c
    1ef4:	7d 85       	ldd	r23, Y+13	; 0x0d
    1ef6:	8e 85       	ldd	r24, Y+14	; 0x0e
    1ef8:	9f 85       	ldd	r25, Y+15	; 0x0f
    1efa:	20 e0       	ldi	r18, 0x00	; 0
    1efc:	30 e0       	ldi	r19, 0x00	; 0
    1efe:	40 e0       	ldi	r20, 0x00	; 0
    1f00:	50 e0       	ldi	r21, 0x00	; 0
    1f02:	0e 94 55 04 	call	0x8aa	; 0x8aa <__lesf2>
    1f06:	18 16       	cp	r1, r24
    1f08:	64 f4       	brge	.+24     	; 0x1f22 <MCAL_T1_voidDelayCTCMode+0x8c>
    1f0a:	6c 85       	ldd	r22, Y+12	; 0x0c
    1f0c:	7d 85       	ldd	r23, Y+13	; 0x0d
    1f0e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1f10:	9f 85       	ldd	r25, Y+15	; 0x0f
    1f12:	20 e0       	ldi	r18, 0x00	; 0
    1f14:	30 e0       	ldi	r19, 0x00	; 0
    1f16:	40 e0       	ldi	r20, 0x00	; 0
    1f18:	50 e0       	ldi	r21, 0x00	; 0
    1f1a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f1e:	18 16       	cp	r1, r24
    1f20:	64 f5       	brge	.+88     	; 0x1f7a <MCAL_T1_voidDelayCTCMode+0xe4>
		N = ((CTC_DELAY_CONST + NUMBER_1) * TickTime);
    1f22:	8f 81       	ldd	r24, Y+7	; 0x07
    1f24:	98 85       	ldd	r25, Y+8	; 0x08
    1f26:	a9 85       	ldd	r26, Y+9	; 0x09
    1f28:	ba 85       	ldd	r27, Y+10	; 0x0a
    1f2a:	bc 01       	movw	r22, r24
    1f2c:	cd 01       	movw	r24, r26
    1f2e:	20 e0       	ldi	r18, 0x00	; 0
    1f30:	30 e0       	ldi	r19, 0x00	; 0
    1f32:	48 e4       	ldi	r20, 0x48	; 72
    1f34:	53 e4       	ldi	r21, 0x43	; 67
    1f36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f3a:	dc 01       	movw	r26, r24
    1f3c:	cb 01       	movw	r24, r22
    1f3e:	8b 83       	std	Y+3, r24	; 0x03
    1f40:	9c 83       	std	Y+4, r25	; 0x04
    1f42:	ad 83       	std	Y+5, r26	; 0x05
    1f44:	be 83       	std	Y+6, r27	; 0x06
		counter = (LOC_f32NumOFSecond / N);
    1f46:	6c 85       	ldd	r22, Y+12	; 0x0c
    1f48:	7d 85       	ldd	r23, Y+13	; 0x0d
    1f4a:	8e 85       	ldd	r24, Y+14	; 0x0e
    1f4c:	9f 85       	ldd	r25, Y+15	; 0x0f
    1f4e:	2b 81       	ldd	r18, Y+3	; 0x03
    1f50:	3c 81       	ldd	r19, Y+4	; 0x04
    1f52:	4d 81       	ldd	r20, Y+5	; 0x05
    1f54:	5e 81       	ldd	r21, Y+6	; 0x06
    1f56:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1f5a:	dc 01       	movw	r26, r24
    1f5c:	cb 01       	movw	r24, r22
    1f5e:	bc 01       	movw	r22, r24
    1f60:	cd 01       	movw	r24, r26
    1f62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f66:	dc 01       	movw	r26, r24
    1f68:	cb 01       	movw	r24, r22
    1f6a:	9a 83       	std	Y+2, r25	; 0x02
    1f6c:	89 83       	std	Y+1, r24	; 0x01
		*LOC_pu16Counter = counter;
    1f6e:	e8 89       	ldd	r30, Y+16	; 0x10
    1f70:	f9 89       	ldd	r31, Y+17	; 0x11
    1f72:	89 81       	ldd	r24, Y+1	; 0x01
    1f74:	9a 81       	ldd	r25, Y+2	; 0x02
    1f76:	91 83       	std	Z+1, r25	; 0x01
    1f78:	80 83       	st	Z, r24
	} else {
		//NOTING
	}
}
    1f7a:	61 96       	adiw	r28, 0x11	; 17
    1f7c:	0f b6       	in	r0, 0x3f	; 63
    1f7e:	f8 94       	cli
    1f80:	de bf       	out	0x3e, r29	; 62
    1f82:	0f be       	out	0x3f, r0	; 63
    1f84:	cd bf       	out	0x3d, r28	; 61
    1f86:	cf 91       	pop	r28
    1f88:	df 91       	pop	r29
    1f8a:	08 95       	ret

00001f8c <MCAL_T1_voidSetTriggerEdge>:
//ICU EDGE
void MCAL_T1_voidSetTriggerEdge(u8 LOC_u8TriggerEdge) {
    1f8c:	df 93       	push	r29
    1f8e:	cf 93       	push	r28
    1f90:	0f 92       	push	r0
    1f92:	cd b7       	in	r28, 0x3d	; 61
    1f94:	de b7       	in	r29, 0x3e	; 62
    1f96:	89 83       	std	Y+1, r24	; 0x01
	if (LOC_u8TriggerEdge <= RISING_EDGE) {
    1f98:	89 81       	ldd	r24, Y+1	; 0x01
    1f9a:	82 30       	cpi	r24, 0x02	; 2
    1f9c:	a8 f4       	brcc	.+42     	; 0x1fc8 <MCAL_T1_voidSetTriggerEdge+0x3c>
		if (LOC_u8TriggerEdge == RISING_EDGE) {
    1f9e:	89 81       	ldd	r24, Y+1	; 0x01
    1fa0:	81 30       	cpi	r24, 0x01	; 1
    1fa2:	41 f4       	brne	.+16     	; 0x1fb4 <MCAL_T1_voidSetTriggerEdge+0x28>
			SET_BIT(TCCR1B, Pin6);
    1fa4:	ae e4       	ldi	r26, 0x4E	; 78
    1fa6:	b0 e0       	ldi	r27, 0x00	; 0
    1fa8:	ee e4       	ldi	r30, 0x4E	; 78
    1faa:	f0 e0       	ldi	r31, 0x00	; 0
    1fac:	80 81       	ld	r24, Z
    1fae:	80 64       	ori	r24, 0x40	; 64
    1fb0:	8c 93       	st	X, r24
    1fb2:	0a c0       	rjmp	.+20     	; 0x1fc8 <MCAL_T1_voidSetTriggerEdge+0x3c>
		} else if (LOC_u8TriggerEdge == FALLING_EDGE) {
    1fb4:	89 81       	ldd	r24, Y+1	; 0x01
    1fb6:	88 23       	and	r24, r24
    1fb8:	39 f4       	brne	.+14     	; 0x1fc8 <MCAL_T1_voidSetTriggerEdge+0x3c>
			CLR_BIT(TCCR1B, Pin6);
    1fba:	ae e4       	ldi	r26, 0x4E	; 78
    1fbc:	b0 e0       	ldi	r27, 0x00	; 0
    1fbe:	ee e4       	ldi	r30, 0x4E	; 78
    1fc0:	f0 e0       	ldi	r31, 0x00	; 0
    1fc2:	80 81       	ld	r24, Z
    1fc4:	8f 7b       	andi	r24, 0xBF	; 191
    1fc6:	8c 93       	st	X, r24
			//NOTHING
		}
	} else {
		//NOTHING
	}
}
    1fc8:	0f 90       	pop	r0
    1fca:	cf 91       	pop	r28
    1fcc:	df 91       	pop	r29
    1fce:	08 95       	ret

00001fd0 <MCAL_T1_u8T1_Callback>:
u8 MCAL_T1_u8T1_Callback(void (*ptr)(void)) {
    1fd0:	df 93       	push	r29
    1fd2:	cf 93       	push	r28
    1fd4:	00 d0       	rcall	.+0      	; 0x1fd6 <MCAL_T1_u8T1_Callback+0x6>
    1fd6:	0f 92       	push	r0
    1fd8:	cd b7       	in	r28, 0x3d	; 61
    1fda:	de b7       	in	r29, 0x3e	; 62
    1fdc:	9b 83       	std	Y+3, r25	; 0x03
    1fde:	8a 83       	std	Y+2, r24	; 0x02
	u8 LOC_u8ReturnValue = E_NOT_OK;
    1fe0:	81 e0       	ldi	r24, 0x01	; 1
    1fe2:	89 83       	std	Y+1, r24	; 0x01
	if (ptr != '\0') {
    1fe4:	8a 81       	ldd	r24, Y+2	; 0x02
    1fe6:	9b 81       	ldd	r25, Y+3	; 0x03
    1fe8:	00 97       	sbiw	r24, 0x00	; 0
    1fea:	39 f0       	breq	.+14     	; 0x1ffa <MCAL_T1_u8T1_Callback+0x2a>
		Gptr_3 = ptr;
    1fec:	8a 81       	ldd	r24, Y+2	; 0x02
    1fee:	9b 81       	ldd	r25, Y+3	; 0x03
    1ff0:	90 93 7e 01 	sts	0x017E, r25
    1ff4:	80 93 7d 01 	sts	0x017D, r24
		LOC_u8ReturnValue = E_OK;
    1ff8:	19 82       	std	Y+1, r1	; 0x01
	}
	return LOC_u8ReturnValue;
    1ffa:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ffc:	0f 90       	pop	r0
    1ffe:	0f 90       	pop	r0
    2000:	0f 90       	pop	r0
    2002:	cf 91       	pop	r28
    2004:	df 91       	pop	r29
    2006:	08 95       	ret

00002008 <__vector_9>:

ISR(TIMER1_OVF_vect) {
    2008:	1f 92       	push	r1
    200a:	0f 92       	push	r0
    200c:	0f b6       	in	r0, 0x3f	; 63
    200e:	0f 92       	push	r0
    2010:	11 24       	eor	r1, r1
    2012:	2f 93       	push	r18
    2014:	3f 93       	push	r19
    2016:	4f 93       	push	r20
    2018:	5f 93       	push	r21
    201a:	6f 93       	push	r22
    201c:	7f 93       	push	r23
    201e:	8f 93       	push	r24
    2020:	9f 93       	push	r25
    2022:	af 93       	push	r26
    2024:	bf 93       	push	r27
    2026:	ef 93       	push	r30
    2028:	ff 93       	push	r31
    202a:	df 93       	push	r29
    202c:	cf 93       	push	r28
    202e:	cd b7       	in	r28, 0x3d	; 61
    2030:	de b7       	in	r29, 0x3e	; 62
	if (Gptr_3 != '\0') {
    2032:	80 91 7d 01 	lds	r24, 0x017D
    2036:	90 91 7e 01 	lds	r25, 0x017E
    203a:	00 97       	sbiw	r24, 0x00	; 0
    203c:	29 f0       	breq	.+10     	; 0x2048 <__vector_9+0x40>
		Gptr_3();
    203e:	e0 91 7d 01 	lds	r30, 0x017D
    2042:	f0 91 7e 01 	lds	r31, 0x017E
    2046:	09 95       	icall
	}
}
    2048:	cf 91       	pop	r28
    204a:	df 91       	pop	r29
    204c:	ff 91       	pop	r31
    204e:	ef 91       	pop	r30
    2050:	bf 91       	pop	r27
    2052:	af 91       	pop	r26
    2054:	9f 91       	pop	r25
    2056:	8f 91       	pop	r24
    2058:	7f 91       	pop	r23
    205a:	6f 91       	pop	r22
    205c:	5f 91       	pop	r21
    205e:	4f 91       	pop	r20
    2060:	3f 91       	pop	r19
    2062:	2f 91       	pop	r18
    2064:	0f 90       	pop	r0
    2066:	0f be       	out	0x3f, r0	; 63
    2068:	0f 90       	pop	r0
    206a:	1f 90       	pop	r1
    206c:	18 95       	reti

0000206e <__vector_7>:
ISR(TIMER1_COMPA_vect) {
    206e:	1f 92       	push	r1
    2070:	0f 92       	push	r0
    2072:	0f b6       	in	r0, 0x3f	; 63
    2074:	0f 92       	push	r0
    2076:	11 24       	eor	r1, r1
    2078:	2f 93       	push	r18
    207a:	3f 93       	push	r19
    207c:	4f 93       	push	r20
    207e:	5f 93       	push	r21
    2080:	6f 93       	push	r22
    2082:	7f 93       	push	r23
    2084:	8f 93       	push	r24
    2086:	9f 93       	push	r25
    2088:	af 93       	push	r26
    208a:	bf 93       	push	r27
    208c:	ef 93       	push	r30
    208e:	ff 93       	push	r31
    2090:	df 93       	push	r29
    2092:	cf 93       	push	r28
    2094:	cd b7       	in	r28, 0x3d	; 61
    2096:	de b7       	in	r29, 0x3e	; 62
	if (Gptr_3 != '\0') {
    2098:	80 91 7d 01 	lds	r24, 0x017D
    209c:	90 91 7e 01 	lds	r25, 0x017E
    20a0:	00 97       	sbiw	r24, 0x00	; 0
    20a2:	29 f0       	breq	.+10     	; 0x20ae <__vector_7+0x40>
		Gptr_3();
    20a4:	e0 91 7d 01 	lds	r30, 0x017D
    20a8:	f0 91 7e 01 	lds	r31, 0x017E
    20ac:	09 95       	icall
	}
}
    20ae:	cf 91       	pop	r28
    20b0:	df 91       	pop	r29
    20b2:	ff 91       	pop	r31
    20b4:	ef 91       	pop	r30
    20b6:	bf 91       	pop	r27
    20b8:	af 91       	pop	r26
    20ba:	9f 91       	pop	r25
    20bc:	8f 91       	pop	r24
    20be:	7f 91       	pop	r23
    20c0:	6f 91       	pop	r22
    20c2:	5f 91       	pop	r21
    20c4:	4f 91       	pop	r20
    20c6:	3f 91       	pop	r19
    20c8:	2f 91       	pop	r18
    20ca:	0f 90       	pop	r0
    20cc:	0f be       	out	0x3f, r0	; 63
    20ce:	0f 90       	pop	r0
    20d0:	1f 90       	pop	r1
    20d2:	18 95       	reti

000020d4 <__vector_8>:
ISR(TIMER1_COMPB_vect) {
    20d4:	1f 92       	push	r1
    20d6:	0f 92       	push	r0
    20d8:	0f b6       	in	r0, 0x3f	; 63
    20da:	0f 92       	push	r0
    20dc:	11 24       	eor	r1, r1
    20de:	2f 93       	push	r18
    20e0:	3f 93       	push	r19
    20e2:	4f 93       	push	r20
    20e4:	5f 93       	push	r21
    20e6:	6f 93       	push	r22
    20e8:	7f 93       	push	r23
    20ea:	8f 93       	push	r24
    20ec:	9f 93       	push	r25
    20ee:	af 93       	push	r26
    20f0:	bf 93       	push	r27
    20f2:	ef 93       	push	r30
    20f4:	ff 93       	push	r31
    20f6:	df 93       	push	r29
    20f8:	cf 93       	push	r28
    20fa:	cd b7       	in	r28, 0x3d	; 61
    20fc:	de b7       	in	r29, 0x3e	; 62
	if (Gptr_3 != '\0') {
    20fe:	80 91 7d 01 	lds	r24, 0x017D
    2102:	90 91 7e 01 	lds	r25, 0x017E
    2106:	00 97       	sbiw	r24, 0x00	; 0
    2108:	29 f0       	breq	.+10     	; 0x2114 <__vector_8+0x40>
		Gptr_3();
    210a:	e0 91 7d 01 	lds	r30, 0x017D
    210e:	f0 91 7e 01 	lds	r31, 0x017E
    2112:	09 95       	icall
	}
}
    2114:	cf 91       	pop	r28
    2116:	df 91       	pop	r29
    2118:	ff 91       	pop	r31
    211a:	ef 91       	pop	r30
    211c:	bf 91       	pop	r27
    211e:	af 91       	pop	r26
    2120:	9f 91       	pop	r25
    2122:	8f 91       	pop	r24
    2124:	7f 91       	pop	r23
    2126:	6f 91       	pop	r22
    2128:	5f 91       	pop	r21
    212a:	4f 91       	pop	r20
    212c:	3f 91       	pop	r19
    212e:	2f 91       	pop	r18
    2130:	0f 90       	pop	r0
    2132:	0f be       	out	0x3f, r0	; 63
    2134:	0f 90       	pop	r0
    2136:	1f 90       	pop	r1
    2138:	18 95       	reti

0000213a <__vector_6>:
ISR(TIMER1_CAPT_vect) {
    213a:	1f 92       	push	r1
    213c:	0f 92       	push	r0
    213e:	0f b6       	in	r0, 0x3f	; 63
    2140:	0f 92       	push	r0
    2142:	11 24       	eor	r1, r1
    2144:	2f 93       	push	r18
    2146:	3f 93       	push	r19
    2148:	4f 93       	push	r20
    214a:	5f 93       	push	r21
    214c:	6f 93       	push	r22
    214e:	7f 93       	push	r23
    2150:	8f 93       	push	r24
    2152:	9f 93       	push	r25
    2154:	af 93       	push	r26
    2156:	bf 93       	push	r27
    2158:	ef 93       	push	r30
    215a:	ff 93       	push	r31
    215c:	df 93       	push	r29
    215e:	cf 93       	push	r28
    2160:	cd b7       	in	r28, 0x3d	; 61
    2162:	de b7       	in	r29, 0x3e	; 62
	if (Gptr_3 != '\0') {
    2164:	80 91 7d 01 	lds	r24, 0x017D
    2168:	90 91 7e 01 	lds	r25, 0x017E
    216c:	00 97       	sbiw	r24, 0x00	; 0
    216e:	29 f0       	breq	.+10     	; 0x217a <__vector_6+0x40>
		Gptr_3();
    2170:	e0 91 7d 01 	lds	r30, 0x017D
    2174:	f0 91 7e 01 	lds	r31, 0x017E
    2178:	09 95       	icall
	}
}
    217a:	cf 91       	pop	r28
    217c:	df 91       	pop	r29
    217e:	ff 91       	pop	r31
    2180:	ef 91       	pop	r30
    2182:	bf 91       	pop	r27
    2184:	af 91       	pop	r26
    2186:	9f 91       	pop	r25
    2188:	8f 91       	pop	r24
    218a:	7f 91       	pop	r23
    218c:	6f 91       	pop	r22
    218e:	5f 91       	pop	r21
    2190:	4f 91       	pop	r20
    2192:	3f 91       	pop	r19
    2194:	2f 91       	pop	r18
    2196:	0f 90       	pop	r0
    2198:	0f be       	out	0x3f, r0	; 63
    219a:	0f 90       	pop	r0
    219c:	1f 90       	pop	r1
    219e:	18 95       	reti

000021a0 <MCAL_T1_FPWM_10bitRES>:

void MCAL_T1_FPWM_10bitRES(u8 copy_u8Channel, u8 copy_u8Duty) {
    21a0:	0f 93       	push	r16
    21a2:	1f 93       	push	r17
    21a4:	df 93       	push	r29
    21a6:	cf 93       	push	r28
    21a8:	00 d0       	rcall	.+0      	; 0x21aa <MCAL_T1_FPWM_10bitRES+0xa>
    21aa:	00 d0       	rcall	.+0      	; 0x21ac <MCAL_T1_FPWM_10bitRES+0xc>
    21ac:	00 d0       	rcall	.+0      	; 0x21ae <MCAL_T1_FPWM_10bitRES+0xe>
    21ae:	cd b7       	in	r28, 0x3d	; 61
    21b0:	de b7       	in	r29, 0x3e	; 62
    21b2:	8d 83       	std	Y+5, r24	; 0x05
    21b4:	6e 83       	std	Y+6, r22	; 0x06
	f32 LOC_f32tickTime = 0;
    21b6:	80 e0       	ldi	r24, 0x00	; 0
    21b8:	90 e0       	ldi	r25, 0x00	; 0
    21ba:	a0 e0       	ldi	r26, 0x00	; 0
    21bc:	b0 e0       	ldi	r27, 0x00	; 0
    21be:	89 83       	std	Y+1, r24	; 0x01
    21c0:	9a 83       	std	Y+2, r25	; 0x02
    21c2:	ab 83       	std	Y+3, r26	; 0x03
    21c4:	bc 83       	std	Y+4, r27	; 0x04
	//Set Mode
	MCAL_T1_u8T1Init(PWM_PHASE_CORRECT_10bit);
    21c6:	83 e0       	ldi	r24, 0x03	; 3
    21c8:	0e 94 bb 09 	call	0x1376	; 0x1376 <MCAL_T1_u8T1Init>
	//Select Prescaler
	MCAL_T1_u8T1Prescaler(PRESCALLING_64, &LOC_f32tickTime);
    21cc:	83 e0       	ldi	r24, 0x03	; 3
    21ce:	9e 01       	movw	r18, r28
    21d0:	2f 5f       	subi	r18, 0xFF	; 255
    21d2:	3f 4f       	sbci	r19, 0xFF	; 255
    21d4:	b9 01       	movw	r22, r18
    21d6:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <MCAL_T1_u8T1Prescaler>
	MCAL_T1_u8T1CompareOutputMode(NON_INVERTING_MODE, copy_u8Channel);
    21da:	80 e0       	ldi	r24, 0x00	; 0
    21dc:	6d 81       	ldd	r22, Y+5	; 0x05
    21de:	0e 94 f4 0c 	call	0x19e8	; 0x19e8 <MCAL_T1_u8T1CompareOutputMode>
	if (copy_u8Channel == CHENNEL_A) {
    21e2:	8d 81       	ldd	r24, Y+5	; 0x05
    21e4:	88 23       	and	r24, r24
    21e6:	19 f5       	brne	.+70     	; 0x222e <MCAL_T1_FPWM_10bitRES+0x8e>
		OCR1A = copy_u8Duty * 10.23;
    21e8:	0a e4       	ldi	r16, 0x4A	; 74
    21ea:	10 e0       	ldi	r17, 0x00	; 0
    21ec:	8e 81       	ldd	r24, Y+6	; 0x06
    21ee:	88 2f       	mov	r24, r24
    21f0:	90 e0       	ldi	r25, 0x00	; 0
    21f2:	aa 27       	eor	r26, r26
    21f4:	97 fd       	sbrc	r25, 7
    21f6:	a0 95       	com	r26
    21f8:	ba 2f       	mov	r27, r26
    21fa:	bc 01       	movw	r22, r24
    21fc:	cd 01       	movw	r24, r26
    21fe:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    2202:	dc 01       	movw	r26, r24
    2204:	cb 01       	movw	r24, r22
    2206:	bc 01       	movw	r22, r24
    2208:	cd 01       	movw	r24, r26
    220a:	24 e1       	ldi	r18, 0x14	; 20
    220c:	3e ea       	ldi	r19, 0xAE	; 174
    220e:	43 e2       	ldi	r20, 0x23	; 35
    2210:	51 e4       	ldi	r21, 0x41	; 65
    2212:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2216:	dc 01       	movw	r26, r24
    2218:	cb 01       	movw	r24, r22
    221a:	bc 01       	movw	r22, r24
    221c:	cd 01       	movw	r24, r26
    221e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2222:	dc 01       	movw	r26, r24
    2224:	cb 01       	movw	r24, r22
    2226:	f8 01       	movw	r30, r16
    2228:	91 83       	std	Z+1, r25	; 0x01
    222a:	80 83       	st	Z, r24
    222c:	25 c0       	rjmp	.+74     	; 0x2278 <MCAL_T1_FPWM_10bitRES+0xd8>
	} else if (copy_u8Channel == CHENNEL_B) {
    222e:	8d 81       	ldd	r24, Y+5	; 0x05
    2230:	81 30       	cpi	r24, 0x01	; 1
    2232:	11 f5       	brne	.+68     	; 0x2278 <MCAL_T1_FPWM_10bitRES+0xd8>
		OCR1B = copy_u8Duty * 10.23;
    2234:	08 e4       	ldi	r16, 0x48	; 72
    2236:	10 e0       	ldi	r17, 0x00	; 0
    2238:	8e 81       	ldd	r24, Y+6	; 0x06
    223a:	88 2f       	mov	r24, r24
    223c:	90 e0       	ldi	r25, 0x00	; 0
    223e:	aa 27       	eor	r26, r26
    2240:	97 fd       	sbrc	r25, 7
    2242:	a0 95       	com	r26
    2244:	ba 2f       	mov	r27, r26
    2246:	bc 01       	movw	r22, r24
    2248:	cd 01       	movw	r24, r26
    224a:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    224e:	dc 01       	movw	r26, r24
    2250:	cb 01       	movw	r24, r22
    2252:	bc 01       	movw	r22, r24
    2254:	cd 01       	movw	r24, r26
    2256:	24 e1       	ldi	r18, 0x14	; 20
    2258:	3e ea       	ldi	r19, 0xAE	; 174
    225a:	43 e2       	ldi	r20, 0x23	; 35
    225c:	51 e4       	ldi	r21, 0x41	; 65
    225e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2262:	dc 01       	movw	r26, r24
    2264:	cb 01       	movw	r24, r22
    2266:	bc 01       	movw	r22, r24
    2268:	cd 01       	movw	r24, r26
    226a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    226e:	dc 01       	movw	r26, r24
    2270:	cb 01       	movw	r24, r22
    2272:	f8 01       	movw	r30, r16
    2274:	91 83       	std	Z+1, r25	; 0x01
    2276:	80 83       	st	Z, r24

	} else {
		//NOTHING
	}
}
    2278:	26 96       	adiw	r28, 0x06	; 6
    227a:	0f b6       	in	r0, 0x3f	; 63
    227c:	f8 94       	cli
    227e:	de bf       	out	0x3e, r29	; 62
    2280:	0f be       	out	0x3f, r0	; 63
    2282:	cd bf       	out	0x3d, r28	; 61
    2284:	cf 91       	pop	r28
    2286:	df 91       	pop	r29
    2288:	1f 91       	pop	r17
    228a:	0f 91       	pop	r16
    228c:	08 95       	ret

0000228e <MCAL_Timer0_Init>:
void (*Gptr3)(void)= '\0' ;
f32 Glob_TickTime;
u16 Start = 0;
u16 Counter = 0;

void MCAL_Timer0_Init(u8 Loc_u8Mode, u8 Loc_u8Prescaller,u8 Loc_u8OC0Mode) {
    228e:	df 93       	push	r29
    2290:	cf 93       	push	r28
    2292:	00 d0       	rcall	.+0      	; 0x2294 <MCAL_Timer0_Init+0x6>
    2294:	00 d0       	rcall	.+0      	; 0x2296 <MCAL_Timer0_Init+0x8>
    2296:	cd b7       	in	r28, 0x3d	; 61
    2298:	de b7       	in	r29, 0x3e	; 62
    229a:	8a 83       	std	Y+2, r24	; 0x02
    229c:	6b 83       	std	Y+3, r22	; 0x03
    229e:	4c 83       	std	Y+4, r20	; 0x04
	u8 LOC_u8ReturnValue = E_NOT_OK;
    22a0:	81 e0       	ldi	r24, 0x01	; 1
    22a2:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(SREG, 7);
    22a4:	af e5       	ldi	r26, 0x5F	; 95
    22a6:	b0 e0       	ldi	r27, 0x00	; 0
    22a8:	ef e5       	ldi	r30, 0x5F	; 95
    22aa:	f0 e0       	ldi	r31, 0x00	; 0
    22ac:	80 81       	ld	r24, Z
    22ae:	80 68       	ori	r24, 0x80	; 128
    22b0:	8c 93       	st	X, r24
	if (Loc_u8Mode == Normal_Mode) {
    22b2:	8a 81       	ldd	r24, Y+2	; 0x02
    22b4:	88 23       	and	r24, r24
    22b6:	b1 f4       	brne	.+44     	; 0x22e4 <MCAL_Timer0_Init+0x56>
		CLR_BIT(TCCR0, 3);
    22b8:	a3 e5       	ldi	r26, 0x53	; 83
    22ba:	b0 e0       	ldi	r27, 0x00	; 0
    22bc:	e3 e5       	ldi	r30, 0x53	; 83
    22be:	f0 e0       	ldi	r31, 0x00	; 0
    22c0:	80 81       	ld	r24, Z
    22c2:	87 7f       	andi	r24, 0xF7	; 247
    22c4:	8c 93       	st	X, r24
		CLR_BIT(TCCR0, 6);
    22c6:	a3 e5       	ldi	r26, 0x53	; 83
    22c8:	b0 e0       	ldi	r27, 0x00	; 0
    22ca:	e3 e5       	ldi	r30, 0x53	; 83
    22cc:	f0 e0       	ldi	r31, 0x00	; 0
    22ce:	80 81       	ld	r24, Z
    22d0:	8f 7b       	andi	r24, 0xBF	; 191
    22d2:	8c 93       	st	X, r24
		SET_BIT(TIMSK, 0);
    22d4:	a9 e5       	ldi	r26, 0x59	; 89
    22d6:	b0 e0       	ldi	r27, 0x00	; 0
    22d8:	e9 e5       	ldi	r30, 0x59	; 89
    22da:	f0 e0       	ldi	r31, 0x00	; 0
    22dc:	80 81       	ld	r24, Z
    22de:	81 60       	ori	r24, 0x01	; 1
    22e0:	8c 93       	st	X, r24
    22e2:	35 c0       	rjmp	.+106    	; 0x234e <MCAL_Timer0_Init+0xc0>
	} else if (Loc_u8Mode == CTC_Mode) {
    22e4:	8a 81       	ldd	r24, Y+2	; 0x02
    22e6:	81 30       	cpi	r24, 0x01	; 1
    22e8:	b1 f4       	brne	.+44     	; 0x2316 <MCAL_Timer0_Init+0x88>
		SET_BIT(TCCR0, 3);
    22ea:	a3 e5       	ldi	r26, 0x53	; 83
    22ec:	b0 e0       	ldi	r27, 0x00	; 0
    22ee:	e3 e5       	ldi	r30, 0x53	; 83
    22f0:	f0 e0       	ldi	r31, 0x00	; 0
    22f2:	80 81       	ld	r24, Z
    22f4:	88 60       	ori	r24, 0x08	; 8
    22f6:	8c 93       	st	X, r24
		CLR_BIT(TCCR0, 6);
    22f8:	a3 e5       	ldi	r26, 0x53	; 83
    22fa:	b0 e0       	ldi	r27, 0x00	; 0
    22fc:	e3 e5       	ldi	r30, 0x53	; 83
    22fe:	f0 e0       	ldi	r31, 0x00	; 0
    2300:	80 81       	ld	r24, Z
    2302:	8f 7b       	andi	r24, 0xBF	; 191
    2304:	8c 93       	st	X, r24
		SET_BIT(TIMSK, 1);
    2306:	a9 e5       	ldi	r26, 0x59	; 89
    2308:	b0 e0       	ldi	r27, 0x00	; 0
    230a:	e9 e5       	ldi	r30, 0x59	; 89
    230c:	f0 e0       	ldi	r31, 0x00	; 0
    230e:	80 81       	ld	r24, Z
    2310:	82 60       	ori	r24, 0x02	; 2
    2312:	8c 93       	st	X, r24
    2314:	1c c0       	rjmp	.+56     	; 0x234e <MCAL_Timer0_Init+0xc0>
	} else if (Loc_u8Mode == PWM_Mode) {
    2316:	8a 81       	ldd	r24, Y+2	; 0x02
    2318:	82 30       	cpi	r24, 0x02	; 2
    231a:	79 f4       	brne	.+30     	; 0x233a <MCAL_Timer0_Init+0xac>
		CLR_BIT(TCCR0, 3);
    231c:	a3 e5       	ldi	r26, 0x53	; 83
    231e:	b0 e0       	ldi	r27, 0x00	; 0
    2320:	e3 e5       	ldi	r30, 0x53	; 83
    2322:	f0 e0       	ldi	r31, 0x00	; 0
    2324:	80 81       	ld	r24, Z
    2326:	87 7f       	andi	r24, 0xF7	; 247
    2328:	8c 93       	st	X, r24
		SET_BIT(TCCR0, 6);
    232a:	a3 e5       	ldi	r26, 0x53	; 83
    232c:	b0 e0       	ldi	r27, 0x00	; 0
    232e:	e3 e5       	ldi	r30, 0x53	; 83
    2330:	f0 e0       	ldi	r31, 0x00	; 0
    2332:	80 81       	ld	r24, Z
    2334:	80 64       	ori	r24, 0x40	; 64
    2336:	8c 93       	st	X, r24
    2338:	0a c0       	rjmp	.+20     	; 0x234e <MCAL_Timer0_Init+0xc0>
	} else if (Loc_u8Mode == FastPWM_Mode) {
    233a:	8a 81       	ldd	r24, Y+2	; 0x02
    233c:	83 30       	cpi	r24, 0x03	; 3
    233e:	39 f4       	brne	.+14     	; 0x234e <MCAL_Timer0_Init+0xc0>
//		SET_BIT(TCCR0, 3);
//		SET_BIT(TCCR0, 6);
		SET_BIT(TIMSK, 1);
    2340:	a9 e5       	ldi	r26, 0x59	; 89
    2342:	b0 e0       	ldi	r27, 0x00	; 0
    2344:	e9 e5       	ldi	r30, 0x59	; 89
    2346:	f0 e0       	ldi	r31, 0x00	; 0
    2348:	80 81       	ld	r24, Z
    234a:	82 60       	ori	r24, 0x02	; 2
    234c:	8c 93       	st	X, r24
	}
	if (Loc_u8Prescaller == NoPrescaller) {
    234e:	8b 81       	ldd	r24, Y+3	; 0x03
    2350:	88 23       	and	r24, r24
    2352:	b9 f4       	brne	.+46     	; 0x2382 <MCAL_Timer0_Init+0xf4>
		CLR_BIT(TCCR0, 0);
    2354:	a3 e5       	ldi	r26, 0x53	; 83
    2356:	b0 e0       	ldi	r27, 0x00	; 0
    2358:	e3 e5       	ldi	r30, 0x53	; 83
    235a:	f0 e0       	ldi	r31, 0x00	; 0
    235c:	80 81       	ld	r24, Z
    235e:	8e 7f       	andi	r24, 0xFE	; 254
    2360:	8c 93       	st	X, r24
		CLR_BIT(TCCR0, 1);
    2362:	a3 e5       	ldi	r26, 0x53	; 83
    2364:	b0 e0       	ldi	r27, 0x00	; 0
    2366:	e3 e5       	ldi	r30, 0x53	; 83
    2368:	f0 e0       	ldi	r31, 0x00	; 0
    236a:	80 81       	ld	r24, Z
    236c:	8d 7f       	andi	r24, 0xFD	; 253
    236e:	8c 93       	st	X, r24
		CLR_BIT(TCCR0, 2);
    2370:	a3 e5       	ldi	r26, 0x53	; 83
    2372:	b0 e0       	ldi	r27, 0x00	; 0
    2374:	e3 e5       	ldi	r30, 0x53	; 83
    2376:	f0 e0       	ldi	r31, 0x00	; 0
    2378:	80 81       	ld	r24, Z
    237a:	8b 7f       	andi	r24, 0xFB	; 251
    237c:	8c 93       	st	X, r24
		LOC_u8ReturnValue = E_OK;
    237e:	19 82       	std	Y+1, r1	; 0x01
    2380:	f1 c0       	rjmp	.+482    	; 0x2564 <MCAL_Timer0_Init+0x2d6>
	} else if (Loc_u8Prescaller == Prescaller_1) {
    2382:	8b 81       	ldd	r24, Y+3	; 0x03
    2384:	81 30       	cpi	r24, 0x01	; 1
    2386:	19 f5       	brne	.+70     	; 0x23ce <MCAL_Timer0_Init+0x140>
		SET_BIT(TCCR0, 0);
    2388:	a3 e5       	ldi	r26, 0x53	; 83
    238a:	b0 e0       	ldi	r27, 0x00	; 0
    238c:	e3 e5       	ldi	r30, 0x53	; 83
    238e:	f0 e0       	ldi	r31, 0x00	; 0
    2390:	80 81       	ld	r24, Z
    2392:	81 60       	ori	r24, 0x01	; 1
    2394:	8c 93       	st	X, r24
		CLR_BIT(TCCR0, 1);
    2396:	a3 e5       	ldi	r26, 0x53	; 83
    2398:	b0 e0       	ldi	r27, 0x00	; 0
    239a:	e3 e5       	ldi	r30, 0x53	; 83
    239c:	f0 e0       	ldi	r31, 0x00	; 0
    239e:	80 81       	ld	r24, Z
    23a0:	8d 7f       	andi	r24, 0xFD	; 253
    23a2:	8c 93       	st	X, r24
		CLR_BIT(TCCR0, 2);
    23a4:	a3 e5       	ldi	r26, 0x53	; 83
    23a6:	b0 e0       	ldi	r27, 0x00	; 0
    23a8:	e3 e5       	ldi	r30, 0x53	; 83
    23aa:	f0 e0       	ldi	r31, 0x00	; 0
    23ac:	80 81       	ld	r24, Z
    23ae:	8b 7f       	andi	r24, 0xFB	; 251
    23b0:	8c 93       	st	X, r24
		Glob_TickTime = Prescaller1_Value / (f32) CPU_Frequancy;
    23b2:	8d eb       	ldi	r24, 0xBD	; 189
    23b4:	97 e3       	ldi	r25, 0x37	; 55
    23b6:	a6 e8       	ldi	r26, 0x86	; 134
    23b8:	b3 e3       	ldi	r27, 0x33	; 51
    23ba:	80 93 91 01 	sts	0x0191, r24
    23be:	90 93 92 01 	sts	0x0192, r25
    23c2:	a0 93 93 01 	sts	0x0193, r26
    23c6:	b0 93 94 01 	sts	0x0194, r27
		LOC_u8ReturnValue = E_OK;
    23ca:	19 82       	std	Y+1, r1	; 0x01
    23cc:	cb c0       	rjmp	.+406    	; 0x2564 <MCAL_Timer0_Init+0x2d6>
	} else if (Loc_u8Prescaller == Prescaller_8) {
    23ce:	8b 81       	ldd	r24, Y+3	; 0x03
    23d0:	82 30       	cpi	r24, 0x02	; 2
    23d2:	19 f5       	brne	.+70     	; 0x241a <MCAL_Timer0_Init+0x18c>
		CLR_BIT(TCCR0, 0);
    23d4:	a3 e5       	ldi	r26, 0x53	; 83
    23d6:	b0 e0       	ldi	r27, 0x00	; 0
    23d8:	e3 e5       	ldi	r30, 0x53	; 83
    23da:	f0 e0       	ldi	r31, 0x00	; 0
    23dc:	80 81       	ld	r24, Z
    23de:	8e 7f       	andi	r24, 0xFE	; 254
    23e0:	8c 93       	st	X, r24
		SET_BIT(TCCR0, 1);
    23e2:	a3 e5       	ldi	r26, 0x53	; 83
    23e4:	b0 e0       	ldi	r27, 0x00	; 0
    23e6:	e3 e5       	ldi	r30, 0x53	; 83
    23e8:	f0 e0       	ldi	r31, 0x00	; 0
    23ea:	80 81       	ld	r24, Z
    23ec:	82 60       	ori	r24, 0x02	; 2
    23ee:	8c 93       	st	X, r24
		CLR_BIT(TCCR0, 2);
    23f0:	a3 e5       	ldi	r26, 0x53	; 83
    23f2:	b0 e0       	ldi	r27, 0x00	; 0
    23f4:	e3 e5       	ldi	r30, 0x53	; 83
    23f6:	f0 e0       	ldi	r31, 0x00	; 0
    23f8:	80 81       	ld	r24, Z
    23fa:	8b 7f       	andi	r24, 0xFB	; 251
    23fc:	8c 93       	st	X, r24
		Glob_TickTime = Prescaller8_Value / (f32) CPU_Frequancy;
    23fe:	8d eb       	ldi	r24, 0xBD	; 189
    2400:	97 e3       	ldi	r25, 0x37	; 55
    2402:	a6 e0       	ldi	r26, 0x06	; 6
    2404:	b5 e3       	ldi	r27, 0x35	; 53
    2406:	80 93 91 01 	sts	0x0191, r24
    240a:	90 93 92 01 	sts	0x0192, r25
    240e:	a0 93 93 01 	sts	0x0193, r26
    2412:	b0 93 94 01 	sts	0x0194, r27
		LOC_u8ReturnValue = E_OK;
    2416:	19 82       	std	Y+1, r1	; 0x01
    2418:	a5 c0       	rjmp	.+330    	; 0x2564 <MCAL_Timer0_Init+0x2d6>
	} else if (Loc_u8Prescaller == Prescaller_64) {
    241a:	8b 81       	ldd	r24, Y+3	; 0x03
    241c:	83 30       	cpi	r24, 0x03	; 3
    241e:	19 f5       	brne	.+70     	; 0x2466 <MCAL_Timer0_Init+0x1d8>
		SET_BIT(TCCR0, 0);
    2420:	a3 e5       	ldi	r26, 0x53	; 83
    2422:	b0 e0       	ldi	r27, 0x00	; 0
    2424:	e3 e5       	ldi	r30, 0x53	; 83
    2426:	f0 e0       	ldi	r31, 0x00	; 0
    2428:	80 81       	ld	r24, Z
    242a:	81 60       	ori	r24, 0x01	; 1
    242c:	8c 93       	st	X, r24
		SET_BIT(TCCR0, 1);
    242e:	a3 e5       	ldi	r26, 0x53	; 83
    2430:	b0 e0       	ldi	r27, 0x00	; 0
    2432:	e3 e5       	ldi	r30, 0x53	; 83
    2434:	f0 e0       	ldi	r31, 0x00	; 0
    2436:	80 81       	ld	r24, Z
    2438:	82 60       	ori	r24, 0x02	; 2
    243a:	8c 93       	st	X, r24
		CLR_BIT(TCCR0, 2);
    243c:	a3 e5       	ldi	r26, 0x53	; 83
    243e:	b0 e0       	ldi	r27, 0x00	; 0
    2440:	e3 e5       	ldi	r30, 0x53	; 83
    2442:	f0 e0       	ldi	r31, 0x00	; 0
    2444:	80 81       	ld	r24, Z
    2446:	8b 7f       	andi	r24, 0xFB	; 251
    2448:	8c 93       	st	X, r24
		Glob_TickTime = Prescaller64_Value / (f32) CPU_Frequancy;
    244a:	8d eb       	ldi	r24, 0xBD	; 189
    244c:	97 e3       	ldi	r25, 0x37	; 55
    244e:	a6 e8       	ldi	r26, 0x86	; 134
    2450:	b6 e3       	ldi	r27, 0x36	; 54
    2452:	80 93 91 01 	sts	0x0191, r24
    2456:	90 93 92 01 	sts	0x0192, r25
    245a:	a0 93 93 01 	sts	0x0193, r26
    245e:	b0 93 94 01 	sts	0x0194, r27
		LOC_u8ReturnValue = E_OK;
    2462:	19 82       	std	Y+1, r1	; 0x01
    2464:	7f c0       	rjmp	.+254    	; 0x2564 <MCAL_Timer0_Init+0x2d6>
	} else if (Loc_u8Prescaller == Prescaller_256) {
    2466:	8b 81       	ldd	r24, Y+3	; 0x03
    2468:	84 30       	cpi	r24, 0x04	; 4
    246a:	19 f5       	brne	.+70     	; 0x24b2 <MCAL_Timer0_Init+0x224>
		CLR_BIT(TCCR0, 0);
    246c:	a3 e5       	ldi	r26, 0x53	; 83
    246e:	b0 e0       	ldi	r27, 0x00	; 0
    2470:	e3 e5       	ldi	r30, 0x53	; 83
    2472:	f0 e0       	ldi	r31, 0x00	; 0
    2474:	80 81       	ld	r24, Z
    2476:	8e 7f       	andi	r24, 0xFE	; 254
    2478:	8c 93       	st	X, r24
		CLR_BIT(TCCR0, 1);
    247a:	a3 e5       	ldi	r26, 0x53	; 83
    247c:	b0 e0       	ldi	r27, 0x00	; 0
    247e:	e3 e5       	ldi	r30, 0x53	; 83
    2480:	f0 e0       	ldi	r31, 0x00	; 0
    2482:	80 81       	ld	r24, Z
    2484:	8d 7f       	andi	r24, 0xFD	; 253
    2486:	8c 93       	st	X, r24
		SET_BIT(TCCR0, 2);
    2488:	a3 e5       	ldi	r26, 0x53	; 83
    248a:	b0 e0       	ldi	r27, 0x00	; 0
    248c:	e3 e5       	ldi	r30, 0x53	; 83
    248e:	f0 e0       	ldi	r31, 0x00	; 0
    2490:	80 81       	ld	r24, Z
    2492:	84 60       	ori	r24, 0x04	; 4
    2494:	8c 93       	st	X, r24
		Glob_TickTime = Prescaller256_Value / (f32) CPU_Frequancy;
    2496:	8d eb       	ldi	r24, 0xBD	; 189
    2498:	97 e3       	ldi	r25, 0x37	; 55
    249a:	a6 e8       	ldi	r26, 0x86	; 134
    249c:	b7 e3       	ldi	r27, 0x37	; 55
    249e:	80 93 91 01 	sts	0x0191, r24
    24a2:	90 93 92 01 	sts	0x0192, r25
    24a6:	a0 93 93 01 	sts	0x0193, r26
    24aa:	b0 93 94 01 	sts	0x0194, r27
		LOC_u8ReturnValue = E_OK;
    24ae:	19 82       	std	Y+1, r1	; 0x01
    24b0:	59 c0       	rjmp	.+178    	; 0x2564 <MCAL_Timer0_Init+0x2d6>
	} else if (Loc_u8Prescaller == Prescaller_1024) {
    24b2:	8b 81       	ldd	r24, Y+3	; 0x03
    24b4:	85 30       	cpi	r24, 0x05	; 5
    24b6:	19 f5       	brne	.+70     	; 0x24fe <MCAL_Timer0_Init+0x270>
		SET_BIT(TCCR0, 0);
    24b8:	a3 e5       	ldi	r26, 0x53	; 83
    24ba:	b0 e0       	ldi	r27, 0x00	; 0
    24bc:	e3 e5       	ldi	r30, 0x53	; 83
    24be:	f0 e0       	ldi	r31, 0x00	; 0
    24c0:	80 81       	ld	r24, Z
    24c2:	81 60       	ori	r24, 0x01	; 1
    24c4:	8c 93       	st	X, r24
		CLR_BIT(TCCR0, 1);
    24c6:	a3 e5       	ldi	r26, 0x53	; 83
    24c8:	b0 e0       	ldi	r27, 0x00	; 0
    24ca:	e3 e5       	ldi	r30, 0x53	; 83
    24cc:	f0 e0       	ldi	r31, 0x00	; 0
    24ce:	80 81       	ld	r24, Z
    24d0:	8d 7f       	andi	r24, 0xFD	; 253
    24d2:	8c 93       	st	X, r24
		SET_BIT(TCCR0, 2);
    24d4:	a3 e5       	ldi	r26, 0x53	; 83
    24d6:	b0 e0       	ldi	r27, 0x00	; 0
    24d8:	e3 e5       	ldi	r30, 0x53	; 83
    24da:	f0 e0       	ldi	r31, 0x00	; 0
    24dc:	80 81       	ld	r24, Z
    24de:	84 60       	ori	r24, 0x04	; 4
    24e0:	8c 93       	st	X, r24
		Glob_TickTime = Prescaller1024_Value / (f32) CPU_Frequancy;
    24e2:	8d eb       	ldi	r24, 0xBD	; 189
    24e4:	97 e3       	ldi	r25, 0x37	; 55
    24e6:	a6 e8       	ldi	r26, 0x86	; 134
    24e8:	b8 e3       	ldi	r27, 0x38	; 56
    24ea:	80 93 91 01 	sts	0x0191, r24
    24ee:	90 93 92 01 	sts	0x0192, r25
    24f2:	a0 93 93 01 	sts	0x0193, r26
    24f6:	b0 93 94 01 	sts	0x0194, r27
		LOC_u8ReturnValue = E_OK;
    24fa:	19 82       	std	Y+1, r1	; 0x01
    24fc:	33 c0       	rjmp	.+102    	; 0x2564 <MCAL_Timer0_Init+0x2d6>
	} else if (Loc_u8Prescaller == Clock_on_falling_edge) {
    24fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2500:	86 30       	cpi	r24, 0x06	; 6
    2502:	b9 f4       	brne	.+46     	; 0x2532 <MCAL_Timer0_Init+0x2a4>
		CLR_BIT(TCCR0, 0);
    2504:	a3 e5       	ldi	r26, 0x53	; 83
    2506:	b0 e0       	ldi	r27, 0x00	; 0
    2508:	e3 e5       	ldi	r30, 0x53	; 83
    250a:	f0 e0       	ldi	r31, 0x00	; 0
    250c:	80 81       	ld	r24, Z
    250e:	8e 7f       	andi	r24, 0xFE	; 254
    2510:	8c 93       	st	X, r24
		SET_BIT(TCCR0, 1);
    2512:	a3 e5       	ldi	r26, 0x53	; 83
    2514:	b0 e0       	ldi	r27, 0x00	; 0
    2516:	e3 e5       	ldi	r30, 0x53	; 83
    2518:	f0 e0       	ldi	r31, 0x00	; 0
    251a:	80 81       	ld	r24, Z
    251c:	82 60       	ori	r24, 0x02	; 2
    251e:	8c 93       	st	X, r24
		SET_BIT(TCCR0, 2);
    2520:	a3 e5       	ldi	r26, 0x53	; 83
    2522:	b0 e0       	ldi	r27, 0x00	; 0
    2524:	e3 e5       	ldi	r30, 0x53	; 83
    2526:	f0 e0       	ldi	r31, 0x00	; 0
    2528:	80 81       	ld	r24, Z
    252a:	84 60       	ori	r24, 0x04	; 4
    252c:	8c 93       	st	X, r24
		LOC_u8ReturnValue = E_OK;
    252e:	19 82       	std	Y+1, r1	; 0x01
    2530:	19 c0       	rjmp	.+50     	; 0x2564 <MCAL_Timer0_Init+0x2d6>
	} else if (Loc_u8Prescaller == Clock_on_rising_edge) {
    2532:	8b 81       	ldd	r24, Y+3	; 0x03
    2534:	87 30       	cpi	r24, 0x07	; 7
    2536:	b1 f4       	brne	.+44     	; 0x2564 <MCAL_Timer0_Init+0x2d6>
		SET_BIT(TCCR0, 0);
    2538:	a3 e5       	ldi	r26, 0x53	; 83
    253a:	b0 e0       	ldi	r27, 0x00	; 0
    253c:	e3 e5       	ldi	r30, 0x53	; 83
    253e:	f0 e0       	ldi	r31, 0x00	; 0
    2540:	80 81       	ld	r24, Z
    2542:	81 60       	ori	r24, 0x01	; 1
    2544:	8c 93       	st	X, r24
		SET_BIT(TCCR0, 1);
    2546:	a3 e5       	ldi	r26, 0x53	; 83
    2548:	b0 e0       	ldi	r27, 0x00	; 0
    254a:	e3 e5       	ldi	r30, 0x53	; 83
    254c:	f0 e0       	ldi	r31, 0x00	; 0
    254e:	80 81       	ld	r24, Z
    2550:	82 60       	ori	r24, 0x02	; 2
    2552:	8c 93       	st	X, r24
		SET_BIT(TCCR0, 2);
    2554:	a3 e5       	ldi	r26, 0x53	; 83
    2556:	b0 e0       	ldi	r27, 0x00	; 0
    2558:	e3 e5       	ldi	r30, 0x53	; 83
    255a:	f0 e0       	ldi	r31, 0x00	; 0
    255c:	80 81       	ld	r24, Z
    255e:	84 60       	ori	r24, 0x04	; 4
    2560:	8c 93       	st	X, r24
		LOC_u8ReturnValue = E_OK;
    2562:	19 82       	std	Y+1, r1	; 0x01
	} else {
		//NOTHING
	}
	if (Loc_u8OC0Mode == Disconnected) {
    2564:	8c 81       	ldd	r24, Y+4	; 0x04
    2566:	88 23       	and	r24, r24
    2568:	79 f4       	brne	.+30     	; 0x2588 <MCAL_Timer0_Init+0x2fa>
			CLR_BIT(TCCR0, 4);
    256a:	a3 e5       	ldi	r26, 0x53	; 83
    256c:	b0 e0       	ldi	r27, 0x00	; 0
    256e:	e3 e5       	ldi	r30, 0x53	; 83
    2570:	f0 e0       	ldi	r31, 0x00	; 0
    2572:	80 81       	ld	r24, Z
    2574:	8f 7e       	andi	r24, 0xEF	; 239
    2576:	8c 93       	st	X, r24
			CLR_BIT(TCCR0, 5);
    2578:	a3 e5       	ldi	r26, 0x53	; 83
    257a:	b0 e0       	ldi	r27, 0x00	; 0
    257c:	e3 e5       	ldi	r30, 0x53	; 83
    257e:	f0 e0       	ldi	r31, 0x00	; 0
    2580:	80 81       	ld	r24, Z
    2582:	8f 7d       	andi	r24, 0xDF	; 223
    2584:	8c 93       	st	X, r24
    2586:	43 c0       	rjmp	.+134    	; 0x260e <MCAL_Timer0_Init+0x380>
		} else if (Loc_u8OC0Mode == Reserved) {
    2588:	8c 81       	ldd	r24, Y+4	; 0x04
    258a:	81 30       	cpi	r24, 0x01	; 1
    258c:	79 f4       	brne	.+30     	; 0x25ac <MCAL_Timer0_Init+0x31e>
			SET_BIT(TCCR0, 4);
    258e:	a3 e5       	ldi	r26, 0x53	; 83
    2590:	b0 e0       	ldi	r27, 0x00	; 0
    2592:	e3 e5       	ldi	r30, 0x53	; 83
    2594:	f0 e0       	ldi	r31, 0x00	; 0
    2596:	80 81       	ld	r24, Z
    2598:	80 61       	ori	r24, 0x10	; 16
    259a:	8c 93       	st	X, r24
			CLR_BIT(TCCR0, 5);
    259c:	a3 e5       	ldi	r26, 0x53	; 83
    259e:	b0 e0       	ldi	r27, 0x00	; 0
    25a0:	e3 e5       	ldi	r30, 0x53	; 83
    25a2:	f0 e0       	ldi	r31, 0x00	; 0
    25a4:	80 81       	ld	r24, Z
    25a6:	8f 7d       	andi	r24, 0xDF	; 223
    25a8:	8c 93       	st	X, r24
    25aa:	31 c0       	rjmp	.+98     	; 0x260e <MCAL_Timer0_Init+0x380>
			//PWM, Fast PWM
		} else if (Loc_u8OC0Mode == Non_Inverted) {
    25ac:	8c 81       	ldd	r24, Y+4	; 0x04
    25ae:	82 30       	cpi	r24, 0x02	; 2
    25b0:	b1 f4       	brne	.+44     	; 0x25de <MCAL_Timer0_Init+0x350>
			SET_BIT(TCCR0, 5);
    25b2:	a3 e5       	ldi	r26, 0x53	; 83
    25b4:	b0 e0       	ldi	r27, 0x00	; 0
    25b6:	e3 e5       	ldi	r30, 0x53	; 83
    25b8:	f0 e0       	ldi	r31, 0x00	; 0
    25ba:	80 81       	ld	r24, Z
    25bc:	80 62       	ori	r24, 0x20	; 32
    25be:	8c 93       	st	X, r24
			CLR_BIT(TCCR0, 4);
    25c0:	a3 e5       	ldi	r26, 0x53	; 83
    25c2:	b0 e0       	ldi	r27, 0x00	; 0
    25c4:	e3 e5       	ldi	r30, 0x53	; 83
    25c6:	f0 e0       	ldi	r31, 0x00	; 0
    25c8:	80 81       	ld	r24, Z
    25ca:	8f 7e       	andi	r24, 0xEF	; 239
    25cc:	8c 93       	st	X, r24
			// OC0
			SET_BIT(DDRB, 3);
    25ce:	a7 e3       	ldi	r26, 0x37	; 55
    25d0:	b0 e0       	ldi	r27, 0x00	; 0
    25d2:	e7 e3       	ldi	r30, 0x37	; 55
    25d4:	f0 e0       	ldi	r31, 0x00	; 0
    25d6:	80 81       	ld	r24, Z
    25d8:	88 60       	ori	r24, 0x08	; 8
    25da:	8c 93       	st	X, r24
    25dc:	18 c0       	rjmp	.+48     	; 0x260e <MCAL_Timer0_Init+0x380>
			//PWM, Fast PWM
		} else if (Loc_u8OC0Mode == Inverted) {
    25de:	8c 81       	ldd	r24, Y+4	; 0x04
    25e0:	83 30       	cpi	r24, 0x03	; 3
    25e2:	a9 f4       	brne	.+42     	; 0x260e <MCAL_Timer0_Init+0x380>
			SET_BIT(TCCR0, 4);
    25e4:	a3 e5       	ldi	r26, 0x53	; 83
    25e6:	b0 e0       	ldi	r27, 0x00	; 0
    25e8:	e3 e5       	ldi	r30, 0x53	; 83
    25ea:	f0 e0       	ldi	r31, 0x00	; 0
    25ec:	80 81       	ld	r24, Z
    25ee:	80 61       	ori	r24, 0x10	; 16
    25f0:	8c 93       	st	X, r24
			SET_BIT(TCCR0, 5);
    25f2:	a3 e5       	ldi	r26, 0x53	; 83
    25f4:	b0 e0       	ldi	r27, 0x00	; 0
    25f6:	e3 e5       	ldi	r30, 0x53	; 83
    25f8:	f0 e0       	ldi	r31, 0x00	; 0
    25fa:	80 81       	ld	r24, Z
    25fc:	80 62       	ori	r24, 0x20	; 32
    25fe:	8c 93       	st	X, r24
			// OC0
			SET_BIT(DDRB, 3);
    2600:	a7 e3       	ldi	r26, 0x37	; 55
    2602:	b0 e0       	ldi	r27, 0x00	; 0
    2604:	e7 e3       	ldi	r30, 0x37	; 55
    2606:	f0 e0       	ldi	r31, 0x00	; 0
    2608:	80 81       	ld	r24, Z
    260a:	88 60       	ori	r24, 0x08	; 8
    260c:	8c 93       	st	X, r24
		}
}
    260e:	0f 90       	pop	r0
    2610:	0f 90       	pop	r0
    2612:	0f 90       	pop	r0
    2614:	0f 90       	pop	r0
    2616:	cf 91       	pop	r28
    2618:	df 91       	pop	r29
    261a:	08 95       	ret

0000261c <MCAL_Timer0_SetPreloadValue>:
void MCAL_Timer0_SetPreloadValue(u8 Loc_u8Value) {
    261c:	df 93       	push	r29
    261e:	cf 93       	push	r28
    2620:	0f 92       	push	r0
    2622:	cd b7       	in	r28, 0x3d	; 61
    2624:	de b7       	in	r29, 0x3e	; 62
    2626:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = Loc_u8Value;
    2628:	e2 e5       	ldi	r30, 0x52	; 82
    262a:	f0 e0       	ldi	r31, 0x00	; 0
    262c:	89 81       	ldd	r24, Y+1	; 0x01
    262e:	80 83       	st	Z, r24
}
    2630:	0f 90       	pop	r0
    2632:	cf 91       	pop	r28
    2634:	df 91       	pop	r29
    2636:	08 95       	ret

00002638 <MCAL_Timer0_SetCompareValue>:
void MCAL_Timer0_SetCompareValue(u8 Loc_u8Value) {
    2638:	df 93       	push	r29
    263a:	cf 93       	push	r28
    263c:	0f 92       	push	r0
    263e:	cd b7       	in	r28, 0x3d	; 61
    2640:	de b7       	in	r29, 0x3e	; 62
    2642:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = Loc_u8Value;
    2644:	ec e5       	ldi	r30, 0x5C	; 92
    2646:	f0 e0       	ldi	r31, 0x00	; 0
    2648:	89 81       	ldd	r24, Y+1	; 0x01
    264a:	80 83       	st	Z, r24
}
    264c:	0f 90       	pop	r0
    264e:	cf 91       	pop	r28
    2650:	df 91       	pop	r29
    2652:	08 95       	ret

00002654 <MCAL_Timer0_EnableNormalMode>:
void MCAL_Timer0_EnableNormalMode() {
    2654:	df 93       	push	r29
    2656:	cf 93       	push	r28
    2658:	cd b7       	in	r28, 0x3d	; 61
    265a:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK, 0);
    265c:	a9 e5       	ldi	r26, 0x59	; 89
    265e:	b0 e0       	ldi	r27, 0x00	; 0
    2660:	e9 e5       	ldi	r30, 0x59	; 89
    2662:	f0 e0       	ldi	r31, 0x00	; 0
    2664:	80 81       	ld	r24, Z
    2666:	81 60       	ori	r24, 0x01	; 1
    2668:	8c 93       	st	X, r24
}
    266a:	cf 91       	pop	r28
    266c:	df 91       	pop	r29
    266e:	08 95       	ret

00002670 <MCAL_Timer0_DisableNormalMode>:
void MCAL_Timer0_DisableNormalMode() {
    2670:	df 93       	push	r29
    2672:	cf 93       	push	r28
    2674:	cd b7       	in	r28, 0x3d	; 61
    2676:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK, 0);
    2678:	a9 e5       	ldi	r26, 0x59	; 89
    267a:	b0 e0       	ldi	r27, 0x00	; 0
    267c:	e9 e5       	ldi	r30, 0x59	; 89
    267e:	f0 e0       	ldi	r31, 0x00	; 0
    2680:	80 81       	ld	r24, Z
    2682:	8e 7f       	andi	r24, 0xFE	; 254
    2684:	8c 93       	st	X, r24
}
    2686:	cf 91       	pop	r28
    2688:	df 91       	pop	r29
    268a:	08 95       	ret

0000268c <MCAL_Timer0_EnableCTCMode>:
void MCAL_Timer0_EnableCTCMode() {
    268c:	df 93       	push	r29
    268e:	cf 93       	push	r28
    2690:	cd b7       	in	r28, 0x3d	; 61
    2692:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK, 1);
    2694:	a9 e5       	ldi	r26, 0x59	; 89
    2696:	b0 e0       	ldi	r27, 0x00	; 0
    2698:	e9 e5       	ldi	r30, 0x59	; 89
    269a:	f0 e0       	ldi	r31, 0x00	; 0
    269c:	80 81       	ld	r24, Z
    269e:	82 60       	ori	r24, 0x02	; 2
    26a0:	8c 93       	st	X, r24
}
    26a2:	cf 91       	pop	r28
    26a4:	df 91       	pop	r29
    26a6:	08 95       	ret

000026a8 <MCAL_Timer0_DisableCTCMode>:
void MCAL_Timer0_DisableCTCMode() {
    26a8:	df 93       	push	r29
    26aa:	cf 93       	push	r28
    26ac:	cd b7       	in	r28, 0x3d	; 61
    26ae:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK, 1);
    26b0:	a9 e5       	ldi	r26, 0x59	; 89
    26b2:	b0 e0       	ldi	r27, 0x00	; 0
    26b4:	e9 e5       	ldi	r30, 0x59	; 89
    26b6:	f0 e0       	ldi	r31, 0x00	; 0
    26b8:	80 81       	ld	r24, Z
    26ba:	8d 7f       	andi	r24, 0xFD	; 253
    26bc:	8c 93       	st	X, r24
}
    26be:	cf 91       	pop	r28
    26c0:	df 91       	pop	r29
    26c2:	08 95       	ret

000026c4 <MCAL_Timer0_Delayms_NormalMode>:

void MCAL_Timer0_Delayms_NormalMode(u32 Loc_u32MilliSeconds) {
    26c4:	df 93       	push	r29
    26c6:	cf 93       	push	r28
    26c8:	cd b7       	in	r28, 0x3d	; 61
    26ca:	de b7       	in	r29, 0x3e	; 62
    26cc:	28 97       	sbiw	r28, 0x08	; 8
    26ce:	0f b6       	in	r0, 0x3f	; 63
    26d0:	f8 94       	cli
    26d2:	de bf       	out	0x3e, r29	; 62
    26d4:	0f be       	out	0x3f, r0	; 63
    26d6:	cd bf       	out	0x3d, r28	; 61
    26d8:	6d 83       	std	Y+5, r22	; 0x05
    26da:	7e 83       	std	Y+6, r23	; 0x06
    26dc:	8f 83       	std	Y+7, r24	; 0x07
    26de:	98 87       	std	Y+8, r25	; 0x08
	u32 N = 0;
    26e0:	19 82       	std	Y+1, r1	; 0x01
    26e2:	1a 82       	std	Y+2, r1	; 0x02
    26e4:	1b 82       	std	Y+3, r1	; 0x03
    26e6:	1c 82       	std	Y+4, r1	; 0x04
	N = (Loc_u32MilliSeconds / 1000.0) / (f32) Glob_TickTime;
    26e8:	6d 81       	ldd	r22, Y+5	; 0x05
    26ea:	7e 81       	ldd	r23, Y+6	; 0x06
    26ec:	8f 81       	ldd	r24, Y+7	; 0x07
    26ee:	98 85       	ldd	r25, Y+8	; 0x08
    26f0:	0e 94 37 05 	call	0xa6e	; 0xa6e <__floatunsisf>
    26f4:	dc 01       	movw	r26, r24
    26f6:	cb 01       	movw	r24, r22
    26f8:	bc 01       	movw	r22, r24
    26fa:	cd 01       	movw	r24, r26
    26fc:	20 e0       	ldi	r18, 0x00	; 0
    26fe:	30 e0       	ldi	r19, 0x00	; 0
    2700:	4a e7       	ldi	r20, 0x7A	; 122
    2702:	54 e4       	ldi	r21, 0x44	; 68
    2704:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2708:	dc 01       	movw	r26, r24
    270a:	cb 01       	movw	r24, r22
    270c:	20 91 91 01 	lds	r18, 0x0191
    2710:	30 91 92 01 	lds	r19, 0x0192
    2714:	40 91 93 01 	lds	r20, 0x0193
    2718:	50 91 94 01 	lds	r21, 0x0194
    271c:	bc 01       	movw	r22, r24
    271e:	cd 01       	movw	r24, r26
    2720:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2724:	dc 01       	movw	r26, r24
    2726:	cb 01       	movw	r24, r22
    2728:	bc 01       	movw	r22, r24
    272a:	cd 01       	movw	r24, r26
    272c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2730:	dc 01       	movw	r26, r24
    2732:	cb 01       	movw	r24, r22
    2734:	89 83       	std	Y+1, r24	; 0x01
    2736:	9a 83       	std	Y+2, r25	; 0x02
    2738:	ab 83       	std	Y+3, r26	; 0x03
    273a:	bc 83       	std	Y+4, r27	; 0x04
	Start = N % 256;
    273c:	89 81       	ldd	r24, Y+1	; 0x01
    273e:	9a 81       	ldd	r25, Y+2	; 0x02
    2740:	90 70       	andi	r25, 0x00	; 0
    2742:	90 93 82 01 	sts	0x0182, r25
    2746:	80 93 81 01 	sts	0x0181, r24
	if (Start == 0) {
    274a:	80 91 81 01 	lds	r24, 0x0181
    274e:	90 91 82 01 	lds	r25, 0x0182
    2752:	00 97       	sbiw	r24, 0x00	; 0
    2754:	99 f4       	brne	.+38     	; 0x277c <MCAL_Timer0_Delayms_NormalMode+0xb8>
		MCAL_Timer0_SetPreloadValue(Start);
    2756:	80 91 81 01 	lds	r24, 0x0181
    275a:	90 91 82 01 	lds	r25, 0x0182
    275e:	0e 94 0e 13 	call	0x261c	; 0x261c <MCAL_Timer0_SetPreloadValue>
		Counter = N / 256;
    2762:	89 81       	ldd	r24, Y+1	; 0x01
    2764:	9a 81       	ldd	r25, Y+2	; 0x02
    2766:	ab 81       	ldd	r26, Y+3	; 0x03
    2768:	bc 81       	ldd	r27, Y+4	; 0x04
    276a:	89 2f       	mov	r24, r25
    276c:	9a 2f       	mov	r25, r26
    276e:	ab 2f       	mov	r26, r27
    2770:	bb 27       	eor	r27, r27
    2772:	90 93 84 01 	sts	0x0184, r25
    2776:	80 93 83 01 	sts	0x0183, r24
    277a:	19 c0       	rjmp	.+50     	; 0x27ae <MCAL_Timer0_Delayms_NormalMode+0xea>
	} else if (Start != 0) {
    277c:	80 91 81 01 	lds	r24, 0x0181
    2780:	90 91 82 01 	lds	r25, 0x0182
    2784:	00 97       	sbiw	r24, 0x00	; 0
    2786:	99 f0       	breq	.+38     	; 0x27ae <MCAL_Timer0_Delayms_NormalMode+0xea>
		MCAL_Timer0_SetPreloadValue(Start);
    2788:	80 91 81 01 	lds	r24, 0x0181
    278c:	90 91 82 01 	lds	r25, 0x0182
    2790:	0e 94 0e 13 	call	0x261c	; 0x261c <MCAL_Timer0_SetPreloadValue>
		Counter = ((N / 256) + 1);
    2794:	89 81       	ldd	r24, Y+1	; 0x01
    2796:	9a 81       	ldd	r25, Y+2	; 0x02
    2798:	ab 81       	ldd	r26, Y+3	; 0x03
    279a:	bc 81       	ldd	r27, Y+4	; 0x04
    279c:	89 2f       	mov	r24, r25
    279e:	9a 2f       	mov	r25, r26
    27a0:	ab 2f       	mov	r26, r27
    27a2:	bb 27       	eor	r27, r27
    27a4:	01 96       	adiw	r24, 0x01	; 1
    27a6:	90 93 84 01 	sts	0x0184, r25
    27aa:	80 93 83 01 	sts	0x0183, r24
	} else {
		//NOTHING
	}
}
    27ae:	28 96       	adiw	r28, 0x08	; 8
    27b0:	0f b6       	in	r0, 0x3f	; 63
    27b2:	f8 94       	cli
    27b4:	de bf       	out	0x3e, r29	; 62
    27b6:	0f be       	out	0x3f, r0	; 63
    27b8:	cd bf       	out	0x3d, r28	; 61
    27ba:	cf 91       	pop	r28
    27bc:	df 91       	pop	r29
    27be:	08 95       	ret

000027c0 <MCAL_Timer0_Delayms_CTCMode>:
void MCAL_Timer0_Delayms_CTCMode(u32 Loc_u32MilliSeconds) {
    27c0:	df 93       	push	r29
    27c2:	cf 93       	push	r28
    27c4:	cd b7       	in	r28, 0x3d	; 61
    27c6:	de b7       	in	r29, 0x3e	; 62
    27c8:	29 97       	sbiw	r28, 0x09	; 9
    27ca:	0f b6       	in	r0, 0x3f	; 63
    27cc:	f8 94       	cli
    27ce:	de bf       	out	0x3e, r29	; 62
    27d0:	0f be       	out	0x3f, r0	; 63
    27d2:	cd bf       	out	0x3d, r28	; 61
    27d4:	6e 83       	std	Y+6, r22	; 0x06
    27d6:	7f 83       	std	Y+7, r23	; 0x07
    27d8:	88 87       	std	Y+8, r24	; 0x08
    27da:	99 87       	std	Y+9, r25	; 0x09
	u8 LOC_u8ReturnValue = E_NOT_OK;
    27dc:	81 e0       	ldi	r24, 0x01	; 1
    27de:	8d 83       	std	Y+5, r24	; 0x05
	f32 N = 0;
    27e0:	80 e0       	ldi	r24, 0x00	; 0
    27e2:	90 e0       	ldi	r25, 0x00	; 0
    27e4:	a0 e0       	ldi	r26, 0x00	; 0
    27e6:	b0 e0       	ldi	r27, 0x00	; 0
    27e8:	89 83       	std	Y+1, r24	; 0x01
    27ea:	9a 83       	std	Y+2, r25	; 0x02
    27ec:	ab 83       	std	Y+3, r26	; 0x03
    27ee:	bc 83       	std	Y+4, r27	; 0x04
	MCAL_Timer0_SetCompareValue(CompareStartValue);
    27f0:	87 ec       	ldi	r24, 0xC7	; 199
    27f2:	0e 94 1c 13 	call	0x2638	; 0x2638 <MCAL_Timer0_SetCompareValue>
	N = ((CompareStartValue + 1) * Glob_TickTime);
    27f6:	80 91 91 01 	lds	r24, 0x0191
    27fa:	90 91 92 01 	lds	r25, 0x0192
    27fe:	a0 91 93 01 	lds	r26, 0x0193
    2802:	b0 91 94 01 	lds	r27, 0x0194
    2806:	bc 01       	movw	r22, r24
    2808:	cd 01       	movw	r24, r26
    280a:	20 e0       	ldi	r18, 0x00	; 0
    280c:	30 e0       	ldi	r19, 0x00	; 0
    280e:	48 e4       	ldi	r20, 0x48	; 72
    2810:	53 e4       	ldi	r21, 0x43	; 67
    2812:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2816:	dc 01       	movw	r26, r24
    2818:	cb 01       	movw	r24, r22
    281a:	89 83       	std	Y+1, r24	; 0x01
    281c:	9a 83       	std	Y+2, r25	; 0x02
    281e:	ab 83       	std	Y+3, r26	; 0x03
    2820:	bc 83       	std	Y+4, r27	; 0x04
	Counter = ((Loc_u32MilliSeconds/1000.0) / N);
    2822:	6e 81       	ldd	r22, Y+6	; 0x06
    2824:	7f 81       	ldd	r23, Y+7	; 0x07
    2826:	88 85       	ldd	r24, Y+8	; 0x08
    2828:	99 85       	ldd	r25, Y+9	; 0x09
    282a:	0e 94 37 05 	call	0xa6e	; 0xa6e <__floatunsisf>
    282e:	dc 01       	movw	r26, r24
    2830:	cb 01       	movw	r24, r22
    2832:	bc 01       	movw	r22, r24
    2834:	cd 01       	movw	r24, r26
    2836:	20 e0       	ldi	r18, 0x00	; 0
    2838:	30 e0       	ldi	r19, 0x00	; 0
    283a:	4a e7       	ldi	r20, 0x7A	; 122
    283c:	54 e4       	ldi	r21, 0x44	; 68
    283e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2842:	dc 01       	movw	r26, r24
    2844:	cb 01       	movw	r24, r22
    2846:	bc 01       	movw	r22, r24
    2848:	cd 01       	movw	r24, r26
    284a:	29 81       	ldd	r18, Y+1	; 0x01
    284c:	3a 81       	ldd	r19, Y+2	; 0x02
    284e:	4b 81       	ldd	r20, Y+3	; 0x03
    2850:	5c 81       	ldd	r21, Y+4	; 0x04
    2852:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2856:	dc 01       	movw	r26, r24
    2858:	cb 01       	movw	r24, r22
    285a:	bc 01       	movw	r22, r24
    285c:	cd 01       	movw	r24, r26
    285e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2862:	dc 01       	movw	r26, r24
    2864:	cb 01       	movw	r24, r22
    2866:	90 93 84 01 	sts	0x0184, r25
    286a:	80 93 83 01 	sts	0x0183, r24

	LOC_u8ReturnValue = E_OK;
    286e:	1d 82       	std	Y+5, r1	; 0x05
}
    2870:	29 96       	adiw	r28, 0x09	; 9
    2872:	0f b6       	in	r0, 0x3f	; 63
    2874:	f8 94       	cli
    2876:	de bf       	out	0x3e, r29	; 62
    2878:	0f be       	out	0x3f, r0	; 63
    287a:	cd bf       	out	0x3d, r28	; 61
    287c:	cf 91       	pop	r28
    287e:	df 91       	pop	r29
    2880:	08 95       	ret

00002882 <MCAL_Timer0_CallBack>:

void MCAL_Timer0_CallBack(void (*ptr)(void)) {
    2882:	df 93       	push	r29
    2884:	cf 93       	push	r28
    2886:	00 d0       	rcall	.+0      	; 0x2888 <MCAL_Timer0_CallBack+0x6>
    2888:	cd b7       	in	r28, 0x3d	; 61
    288a:	de b7       	in	r29, 0x3e	; 62
    288c:	9a 83       	std	Y+2, r25	; 0x02
    288e:	89 83       	std	Y+1, r24	; 0x01
	if (ptr != '\0')
    2890:	89 81       	ldd	r24, Y+1	; 0x01
    2892:	9a 81       	ldd	r25, Y+2	; 0x02
    2894:	00 97       	sbiw	r24, 0x00	; 0
    2896:	31 f0       	breq	.+12     	; 0x28a4 <MCAL_Timer0_CallBack+0x22>
		Gptr3 = ptr;
    2898:	89 81       	ldd	r24, Y+1	; 0x01
    289a:	9a 81       	ldd	r25, Y+2	; 0x02
    289c:	90 93 80 01 	sts	0x0180, r25
    28a0:	80 93 7f 01 	sts	0x017F, r24
}
    28a4:	0f 90       	pop	r0
    28a6:	0f 90       	pop	r0
    28a8:	cf 91       	pop	r28
    28aa:	df 91       	pop	r29
    28ac:	08 95       	ret

000028ae <__vector_11>:

ISR(TIMER0_OVF_vect) {
    28ae:	1f 92       	push	r1
    28b0:	0f 92       	push	r0
    28b2:	0f b6       	in	r0, 0x3f	; 63
    28b4:	0f 92       	push	r0
    28b6:	11 24       	eor	r1, r1
    28b8:	2f 93       	push	r18
    28ba:	3f 93       	push	r19
    28bc:	4f 93       	push	r20
    28be:	5f 93       	push	r21
    28c0:	6f 93       	push	r22
    28c2:	7f 93       	push	r23
    28c4:	8f 93       	push	r24
    28c6:	9f 93       	push	r25
    28c8:	af 93       	push	r26
    28ca:	bf 93       	push	r27
    28cc:	ef 93       	push	r30
    28ce:	ff 93       	push	r31
    28d0:	df 93       	push	r29
    28d2:	cf 93       	push	r28
    28d4:	cd b7       	in	r28, 0x3d	; 61
    28d6:	de b7       	in	r29, 0x3e	; 62
	if (Gptr3 != '\0')
    28d8:	80 91 7f 01 	lds	r24, 0x017F
    28dc:	90 91 80 01 	lds	r25, 0x0180
    28e0:	00 97       	sbiw	r24, 0x00	; 0
    28e2:	29 f0       	breq	.+10     	; 0x28ee <__vector_11+0x40>
		Gptr3();
    28e4:	e0 91 7f 01 	lds	r30, 0x017F
    28e8:	f0 91 80 01 	lds	r31, 0x0180
    28ec:	09 95       	icall
}
    28ee:	cf 91       	pop	r28
    28f0:	df 91       	pop	r29
    28f2:	ff 91       	pop	r31
    28f4:	ef 91       	pop	r30
    28f6:	bf 91       	pop	r27
    28f8:	af 91       	pop	r26
    28fa:	9f 91       	pop	r25
    28fc:	8f 91       	pop	r24
    28fe:	7f 91       	pop	r23
    2900:	6f 91       	pop	r22
    2902:	5f 91       	pop	r21
    2904:	4f 91       	pop	r20
    2906:	3f 91       	pop	r19
    2908:	2f 91       	pop	r18
    290a:	0f 90       	pop	r0
    290c:	0f be       	out	0x3f, r0	; 63
    290e:	0f 90       	pop	r0
    2910:	1f 90       	pop	r1
    2912:	18 95       	reti

00002914 <__vector_10>:
ISR(TIMER0_COMP_vect) {
    2914:	1f 92       	push	r1
    2916:	0f 92       	push	r0
    2918:	0f b6       	in	r0, 0x3f	; 63
    291a:	0f 92       	push	r0
    291c:	11 24       	eor	r1, r1
    291e:	2f 93       	push	r18
    2920:	3f 93       	push	r19
    2922:	4f 93       	push	r20
    2924:	5f 93       	push	r21
    2926:	6f 93       	push	r22
    2928:	7f 93       	push	r23
    292a:	8f 93       	push	r24
    292c:	9f 93       	push	r25
    292e:	af 93       	push	r26
    2930:	bf 93       	push	r27
    2932:	ef 93       	push	r30
    2934:	ff 93       	push	r31
    2936:	df 93       	push	r29
    2938:	cf 93       	push	r28
    293a:	cd b7       	in	r28, 0x3d	; 61
    293c:	de b7       	in	r29, 0x3e	; 62
	if (Gptr3 != '\0')
    293e:	80 91 7f 01 	lds	r24, 0x017F
    2942:	90 91 80 01 	lds	r25, 0x0180
    2946:	00 97       	sbiw	r24, 0x00	; 0
    2948:	29 f0       	breq	.+10     	; 0x2954 <__vector_10+0x40>
		Gptr3();
    294a:	e0 91 7f 01 	lds	r30, 0x017F
    294e:	f0 91 80 01 	lds	r31, 0x0180
    2952:	09 95       	icall
}
    2954:	cf 91       	pop	r28
    2956:	df 91       	pop	r29
    2958:	ff 91       	pop	r31
    295a:	ef 91       	pop	r30
    295c:	bf 91       	pop	r27
    295e:	af 91       	pop	r26
    2960:	9f 91       	pop	r25
    2962:	8f 91       	pop	r24
    2964:	7f 91       	pop	r23
    2966:	6f 91       	pop	r22
    2968:	5f 91       	pop	r21
    296a:	4f 91       	pop	r20
    296c:	3f 91       	pop	r19
    296e:	2f 91       	pop	r18
    2970:	0f 90       	pop	r0
    2972:	0f be       	out	0x3f, r0	; 63
    2974:	0f 90       	pop	r0
    2976:	1f 90       	pop	r1
    2978:	18 95       	reti

0000297a <MCAL_TWI_Master_Init>:
 */

#include "TWI.h"

// Master
void MCAL_TWI_Master_Init(void) {
    297a:	df 93       	push	r29
    297c:	cf 93       	push	r28
    297e:	cd b7       	in	r28, 0x3d	; 61
    2980:	de b7       	in	r29, 0x3e	; 62
	//Enable TWI
	SET_BIT(TWCR, Pin2);
    2982:	a6 e5       	ldi	r26, 0x56	; 86
    2984:	b0 e0       	ldi	r27, 0x00	; 0
    2986:	e6 e5       	ldi	r30, 0x56	; 86
    2988:	f0 e0       	ldi	r31, 0x00	; 0
    298a:	80 81       	ld	r24, Z
    298c:	84 60       	ori	r24, 0x04	; 4
    298e:	8c 93       	st	X, r24
	//Enable ACK
	SET_BIT(TWCR, Pin6);
    2990:	a6 e5       	ldi	r26, 0x56	; 86
    2992:	b0 e0       	ldi	r27, 0x00	; 0
    2994:	e6 e5       	ldi	r30, 0x56	; 86
    2996:	f0 e0       	ldi	r31, 0x00	; 0
    2998:	80 81       	ld	r24, Z
    299a:	80 64       	ori	r24, 0x40	; 64
    299c:	8c 93       	st	X, r24
	//Bit Rate
	TWBR = Bit_Rate;
    299e:	e0 e2       	ldi	r30, 0x20	; 32
    29a0:	f0 e0       	ldi	r31, 0x00	; 0
    29a2:	88 e9       	ldi	r24, 0x98	; 152
    29a4:	80 83       	st	Z, r24
}
    29a6:	cf 91       	pop	r28
    29a8:	df 91       	pop	r29
    29aa:	08 95       	ret

000029ac <MCAL_TWI_Master_SendStartCondition>:

void MCAL_TWI_Master_SendStartCondition(void) {
    29ac:	df 93       	push	r29
    29ae:	cf 93       	push	r28
    29b0:	cd b7       	in	r28, 0x3d	; 61
    29b2:	de b7       	in	r29, 0x3e	; 62
	// Enable Start
	SET_BIT(TWCR, Pin5);
    29b4:	a6 e5       	ldi	r26, 0x56	; 86
    29b6:	b0 e0       	ldi	r27, 0x00	; 0
    29b8:	e6 e5       	ldi	r30, 0x56	; 86
    29ba:	f0 e0       	ldi	r31, 0x00	; 0
    29bc:	80 81       	ld	r24, Z
    29be:	80 62       	ori	r24, 0x20	; 32
    29c0:	8c 93       	st	X, r24
	//CLR Flag
	SET_BIT(TWCR, Pin7);
    29c2:	a6 e5       	ldi	r26, 0x56	; 86
    29c4:	b0 e0       	ldi	r27, 0x00	; 0
    29c6:	e6 e5       	ldi	r30, 0x56	; 86
    29c8:	f0 e0       	ldi	r31, 0x00	; 0
    29ca:	80 81       	ld	r24, Z
    29cc:	80 68       	ori	r24, 0x80	; 128
    29ce:	8c 93       	st	X, r24
	//Wait
	while (GET_BIT(TWCR,Pin7) == 0)
    29d0:	e6 e5       	ldi	r30, 0x56	; 86
    29d2:	f0 e0       	ldi	r31, 0x00	; 0
    29d4:	80 81       	ld	r24, Z
    29d6:	88 23       	and	r24, r24
    29d8:	dc f7       	brge	.-10     	; 0x29d0 <MCAL_TWI_Master_SendStartCondition+0x24>
		;
}
    29da:	cf 91       	pop	r28
    29dc:	df 91       	pop	r29
    29de:	08 95       	ret

000029e0 <MCAL_TWI_Master_SendReStartCondition>:
void MCAL_TWI_Master_SendReStartCondition(void) {
    29e0:	df 93       	push	r29
    29e2:	cf 93       	push	r28
    29e4:	cd b7       	in	r28, 0x3d	; 61
    29e6:	de b7       	in	r29, 0x3e	; 62
	// Enable Start
	SET_BIT(TWCR, Pin5);
    29e8:	a6 e5       	ldi	r26, 0x56	; 86
    29ea:	b0 e0       	ldi	r27, 0x00	; 0
    29ec:	e6 e5       	ldi	r30, 0x56	; 86
    29ee:	f0 e0       	ldi	r31, 0x00	; 0
    29f0:	80 81       	ld	r24, Z
    29f2:	80 62       	ori	r24, 0x20	; 32
    29f4:	8c 93       	st	X, r24
	//CLR Flag
	SET_BIT(TWCR, Pin7);
    29f6:	a6 e5       	ldi	r26, 0x56	; 86
    29f8:	b0 e0       	ldi	r27, 0x00	; 0
    29fa:	e6 e5       	ldi	r30, 0x56	; 86
    29fc:	f0 e0       	ldi	r31, 0x00	; 0
    29fe:	80 81       	ld	r24, Z
    2a00:	80 68       	ori	r24, 0x80	; 128
    2a02:	8c 93       	st	X, r24
	//Wait
	while (GET_BIT(TWCR,Pin7) == 0)
    2a04:	e6 e5       	ldi	r30, 0x56	; 86
    2a06:	f0 e0       	ldi	r31, 0x00	; 0
    2a08:	80 81       	ld	r24, Z
    2a0a:	88 23       	and	r24, r24
    2a0c:	dc f7       	brge	.-10     	; 0x2a04 <MCAL_TWI_Master_SendReStartCondition+0x24>
		;
}
    2a0e:	cf 91       	pop	r28
    2a10:	df 91       	pop	r29
    2a12:	08 95       	ret

00002a14 <MCAL_TWI_Master_SendStopCondition>:

void MCAL_TWI_Master_SendStopCondition(void) {
    2a14:	df 93       	push	r29
    2a16:	cf 93       	push	r28
    2a18:	cd b7       	in	r28, 0x3d	; 61
    2a1a:	de b7       	in	r29, 0x3e	; 62
	// Enable Stop
	SET_BIT(TWCR, Pin4);
    2a1c:	a6 e5       	ldi	r26, 0x56	; 86
    2a1e:	b0 e0       	ldi	r27, 0x00	; 0
    2a20:	e6 e5       	ldi	r30, 0x56	; 86
    2a22:	f0 e0       	ldi	r31, 0x00	; 0
    2a24:	80 81       	ld	r24, Z
    2a26:	80 61       	ori	r24, 0x10	; 16
    2a28:	8c 93       	st	X, r24
	//CLR Flag
	SET_BIT(TWCR, Pin7);
    2a2a:	a6 e5       	ldi	r26, 0x56	; 86
    2a2c:	b0 e0       	ldi	r27, 0x00	; 0
    2a2e:	e6 e5       	ldi	r30, 0x56	; 86
    2a30:	f0 e0       	ldi	r31, 0x00	; 0
    2a32:	80 81       	ld	r24, Z
    2a34:	80 68       	ori	r24, 0x80	; 128
    2a36:	8c 93       	st	X, r24
}
    2a38:	cf 91       	pop	r28
    2a3a:	df 91       	pop	r29
    2a3c:	08 95       	ret

00002a3e <MCAL_TWI_Master_SendSlaveAddWithWrite>:

void MCAL_TWI_Master_SendSlaveAddWithWrite(u8 Address) {
    2a3e:	df 93       	push	r29
    2a40:	cf 93       	push	r28
    2a42:	0f 92       	push	r0
    2a44:	cd b7       	in	r28, 0x3d	; 61
    2a46:	de b7       	in	r29, 0x3e	; 62
    2a48:	89 83       	std	Y+1, r24	; 0x01
	TWDR = Address << 1;
    2a4a:	e3 e2       	ldi	r30, 0x23	; 35
    2a4c:	f0 e0       	ldi	r31, 0x00	; 0
    2a4e:	89 81       	ldd	r24, Y+1	; 0x01
    2a50:	88 0f       	add	r24, r24
    2a52:	80 83       	st	Z, r24
	//Write
	CLR_BIT(TWDR, Pin0);
    2a54:	a3 e2       	ldi	r26, 0x23	; 35
    2a56:	b0 e0       	ldi	r27, 0x00	; 0
    2a58:	e3 e2       	ldi	r30, 0x23	; 35
    2a5a:	f0 e0       	ldi	r31, 0x00	; 0
    2a5c:	80 81       	ld	r24, Z
    2a5e:	8e 7f       	andi	r24, 0xFE	; 254
    2a60:	8c 93       	st	X, r24
	//clr start cond
	CLR_BIT(TWCR, Pin5);
    2a62:	a6 e5       	ldi	r26, 0x56	; 86
    2a64:	b0 e0       	ldi	r27, 0x00	; 0
    2a66:	e6 e5       	ldi	r30, 0x56	; 86
    2a68:	f0 e0       	ldi	r31, 0x00	; 0
    2a6a:	80 81       	ld	r24, Z
    2a6c:	8f 7d       	andi	r24, 0xDF	; 223
    2a6e:	8c 93       	st	X, r24
	//clr flage
	SET_BIT(TWCR, Pin7);
    2a70:	a6 e5       	ldi	r26, 0x56	; 86
    2a72:	b0 e0       	ldi	r27, 0x00	; 0
    2a74:	e6 e5       	ldi	r30, 0x56	; 86
    2a76:	f0 e0       	ldi	r31, 0x00	; 0
    2a78:	80 81       	ld	r24, Z
    2a7a:	80 68       	ori	r24, 0x80	; 128
    2a7c:	8c 93       	st	X, r24
	//Wait
	while (GET_BIT(TWCR,Pin7) == 0)
    2a7e:	e6 e5       	ldi	r30, 0x56	; 86
    2a80:	f0 e0       	ldi	r31, 0x00	; 0
    2a82:	80 81       	ld	r24, Z
    2a84:	88 23       	and	r24, r24
    2a86:	dc f7       	brge	.-10     	; 0x2a7e <MCAL_TWI_Master_SendSlaveAddWithWrite+0x40>
		;
}
    2a88:	0f 90       	pop	r0
    2a8a:	cf 91       	pop	r28
    2a8c:	df 91       	pop	r29
    2a8e:	08 95       	ret

00002a90 <MCAL_TWI_Master_SendSlaveAddWithRead>:
void MCAL_TWI_Master_SendSlaveAddWithRead(u8 Address) {
    2a90:	df 93       	push	r29
    2a92:	cf 93       	push	r28
    2a94:	0f 92       	push	r0
    2a96:	cd b7       	in	r28, 0x3d	; 61
    2a98:	de b7       	in	r29, 0x3e	; 62
    2a9a:	89 83       	std	Y+1, r24	; 0x01
	TWDR = Address << 1;
    2a9c:	e3 e2       	ldi	r30, 0x23	; 35
    2a9e:	f0 e0       	ldi	r31, 0x00	; 0
    2aa0:	89 81       	ldd	r24, Y+1	; 0x01
    2aa2:	88 0f       	add	r24, r24
    2aa4:	80 83       	st	Z, r24
	//Read
	SET_BIT(TWDR, Pin0);
    2aa6:	a3 e2       	ldi	r26, 0x23	; 35
    2aa8:	b0 e0       	ldi	r27, 0x00	; 0
    2aaa:	e3 e2       	ldi	r30, 0x23	; 35
    2aac:	f0 e0       	ldi	r31, 0x00	; 0
    2aae:	80 81       	ld	r24, Z
    2ab0:	81 60       	ori	r24, 0x01	; 1
    2ab2:	8c 93       	st	X, r24
	//clr start cond
	CLR_BIT(TWCR, Pin5);
    2ab4:	a6 e5       	ldi	r26, 0x56	; 86
    2ab6:	b0 e0       	ldi	r27, 0x00	; 0
    2ab8:	e6 e5       	ldi	r30, 0x56	; 86
    2aba:	f0 e0       	ldi	r31, 0x00	; 0
    2abc:	80 81       	ld	r24, Z
    2abe:	8f 7d       	andi	r24, 0xDF	; 223
    2ac0:	8c 93       	st	X, r24
	//clr flage
	SET_BIT(TWCR, Pin7);
    2ac2:	a6 e5       	ldi	r26, 0x56	; 86
    2ac4:	b0 e0       	ldi	r27, 0x00	; 0
    2ac6:	e6 e5       	ldi	r30, 0x56	; 86
    2ac8:	f0 e0       	ldi	r31, 0x00	; 0
    2aca:	80 81       	ld	r24, Z
    2acc:	80 68       	ori	r24, 0x80	; 128
    2ace:	8c 93       	st	X, r24
	//Wait
	while (GET_BIT(TWCR,Pin7) == 0)
    2ad0:	e6 e5       	ldi	r30, 0x56	; 86
    2ad2:	f0 e0       	ldi	r31, 0x00	; 0
    2ad4:	80 81       	ld	r24, Z
    2ad6:	88 23       	and	r24, r24
    2ad8:	dc f7       	brge	.-10     	; 0x2ad0 <MCAL_TWI_Master_SendSlaveAddWithRead+0x40>
		;
}
    2ada:	0f 90       	pop	r0
    2adc:	cf 91       	pop	r28
    2ade:	df 91       	pop	r29
    2ae0:	08 95       	ret

00002ae2 <MCAL_TWI_Slave_Init>:

// Slave
void MCAL_TWI_Slave_Init(u8 Slave_Address) {
    2ae2:	df 93       	push	r29
    2ae4:	cf 93       	push	r28
    2ae6:	0f 92       	push	r0
    2ae8:	cd b7       	in	r28, 0x3d	; 61
    2aea:	de b7       	in	r29, 0x3e	; 62
    2aec:	89 83       	std	Y+1, r24	; 0x01
	//Enable TWI
	SET_BIT(TWCR, Pin2);
    2aee:	a6 e5       	ldi	r26, 0x56	; 86
    2af0:	b0 e0       	ldi	r27, 0x00	; 0
    2af2:	e6 e5       	ldi	r30, 0x56	; 86
    2af4:	f0 e0       	ldi	r31, 0x00	; 0
    2af6:	80 81       	ld	r24, Z
    2af8:	84 60       	ori	r24, 0x04	; 4
    2afa:	8c 93       	st	X, r24
	//Enable ACK
	SET_BIT(TWCR, Pin6);
    2afc:	a6 e5       	ldi	r26, 0x56	; 86
    2afe:	b0 e0       	ldi	r27, 0x00	; 0
    2b00:	e6 e5       	ldi	r30, 0x56	; 86
    2b02:	f0 e0       	ldi	r31, 0x00	; 0
    2b04:	80 81       	ld	r24, Z
    2b06:	80 64       	ori	r24, 0x40	; 64
    2b08:	8c 93       	st	X, r24
	//Set Slave Address
	TWAR = Slave_Address << 1;
    2b0a:	e2 e2       	ldi	r30, 0x22	; 34
    2b0c:	f0 e0       	ldi	r31, 0x00	; 0
    2b0e:	89 81       	ldd	r24, Y+1	; 0x01
    2b10:	88 0f       	add	r24, r24
    2b12:	80 83       	st	Z, r24
	//config general call
	CLR_BIT(TWAR, Pin0);
    2b14:	a2 e2       	ldi	r26, 0x22	; 34
    2b16:	b0 e0       	ldi	r27, 0x00	; 0
    2b18:	e2 e2       	ldi	r30, 0x22	; 34
    2b1a:	f0 e0       	ldi	r31, 0x00	; 0
    2b1c:	80 81       	ld	r24, Z
    2b1e:	8e 7f       	andi	r24, 0xFE	; 254
    2b20:	8c 93       	st	X, r24
	//CLr flag
	SET_BIT(TWCR, Pin7);
    2b22:	a6 e5       	ldi	r26, 0x56	; 86
    2b24:	b0 e0       	ldi	r27, 0x00	; 0
    2b26:	e6 e5       	ldi	r30, 0x56	; 86
    2b28:	f0 e0       	ldi	r31, 0x00	; 0
    2b2a:	80 81       	ld	r24, Z
    2b2c:	80 68       	ori	r24, 0x80	; 128
    2b2e:	8c 93       	st	X, r24
}
    2b30:	0f 90       	pop	r0
    2b32:	cf 91       	pop	r28
    2b34:	df 91       	pop	r29
    2b36:	08 95       	ret

00002b38 <MCAL_TWI_Slave_Listen>:

void MCAL_TWI_Slave_Listen(void) {
    2b38:	df 93       	push	r29
    2b3a:	cf 93       	push	r28
    2b3c:	cd b7       	in	r28, 0x3d	; 61
    2b3e:	de b7       	in	r29, 0x3e	; 62
	//clr flage
	SET_BIT(TWCR, Pin7);
    2b40:	a6 e5       	ldi	r26, 0x56	; 86
    2b42:	b0 e0       	ldi	r27, 0x00	; 0
    2b44:	e6 e5       	ldi	r30, 0x56	; 86
    2b46:	f0 e0       	ldi	r31, 0x00	; 0
    2b48:	80 81       	ld	r24, Z
    2b4a:	80 68       	ori	r24, 0x80	; 128
    2b4c:	8c 93       	st	X, r24

}
    2b4e:	cf 91       	pop	r28
    2b50:	df 91       	pop	r29
    2b52:	08 95       	ret

00002b54 <MCAL_TWI_SendData>:

// Common

void MCAL_TWI_SendData(u8 Data) {
    2b54:	df 93       	push	r29
    2b56:	cf 93       	push	r28
    2b58:	0f 92       	push	r0
    2b5a:	cd b7       	in	r28, 0x3d	; 61
    2b5c:	de b7       	in	r29, 0x3e	; 62
    2b5e:	89 83       	std	Y+1, r24	; 0x01
	TWDR = Data;
    2b60:	e3 e2       	ldi	r30, 0x23	; 35
    2b62:	f0 e0       	ldi	r31, 0x00	; 0
    2b64:	89 81       	ldd	r24, Y+1	; 0x01
    2b66:	80 83       	st	Z, r24
	//clr flage
	SET_BIT(TWCR, Pin7);
    2b68:	a6 e5       	ldi	r26, 0x56	; 86
    2b6a:	b0 e0       	ldi	r27, 0x00	; 0
    2b6c:	e6 e5       	ldi	r30, 0x56	; 86
    2b6e:	f0 e0       	ldi	r31, 0x00	; 0
    2b70:	80 81       	ld	r24, Z
    2b72:	80 68       	ori	r24, 0x80	; 128
    2b74:	8c 93       	st	X, r24
	//Wait
	while (GET_BIT(TWCR,Pin7) == 0)
    2b76:	e6 e5       	ldi	r30, 0x56	; 86
    2b78:	f0 e0       	ldi	r31, 0x00	; 0
    2b7a:	80 81       	ld	r24, Z
    2b7c:	88 23       	and	r24, r24
    2b7e:	dc f7       	brge	.-10     	; 0x2b76 <MCAL_TWI_SendData+0x22>
		;
}
    2b80:	0f 90       	pop	r0
    2b82:	cf 91       	pop	r28
    2b84:	df 91       	pop	r29
    2b86:	08 95       	ret

00002b88 <MCAL_TWI_RecieveData>:
void MCAL_TWI_RecieveData(u8* Data) {
    2b88:	df 93       	push	r29
    2b8a:	cf 93       	push	r28
    2b8c:	00 d0       	rcall	.+0      	; 0x2b8e <MCAL_TWI_RecieveData+0x6>
    2b8e:	cd b7       	in	r28, 0x3d	; 61
    2b90:	de b7       	in	r29, 0x3e	; 62
    2b92:	9a 83       	std	Y+2, r25	; 0x02
    2b94:	89 83       	std	Y+1, r24	; 0x01
	//clr flage
	SET_BIT(TWCR, Pin7);
    2b96:	a6 e5       	ldi	r26, 0x56	; 86
    2b98:	b0 e0       	ldi	r27, 0x00	; 0
    2b9a:	e6 e5       	ldi	r30, 0x56	; 86
    2b9c:	f0 e0       	ldi	r31, 0x00	; 0
    2b9e:	80 81       	ld	r24, Z
    2ba0:	80 68       	ori	r24, 0x80	; 128
    2ba2:	8c 93       	st	X, r24
	//Wait
	while (GET_BIT(TWCR,Pin7) == 0)
    2ba4:	e6 e5       	ldi	r30, 0x56	; 86
    2ba6:	f0 e0       	ldi	r31, 0x00	; 0
    2ba8:	80 81       	ld	r24, Z
    2baa:	88 23       	and	r24, r24
    2bac:	dc f7       	brge	.-10     	; 0x2ba4 <MCAL_TWI_RecieveData+0x1c>
		;
	*Data = TWDR;
    2bae:	e3 e2       	ldi	r30, 0x23	; 35
    2bb0:	f0 e0       	ldi	r31, 0x00	; 0
    2bb2:	80 81       	ld	r24, Z
    2bb4:	e9 81       	ldd	r30, Y+1	; 0x01
    2bb6:	fa 81       	ldd	r31, Y+2	; 0x02
    2bb8:	80 83       	st	Z, r24
}
    2bba:	0f 90       	pop	r0
    2bbc:	0f 90       	pop	r0
    2bbe:	cf 91       	pop	r28
    2bc0:	df 91       	pop	r29
    2bc2:	08 95       	ret

00002bc4 <MCAL_SPI_SPIInit>:
 */

//Slave
#include "SPI.h"

void MCAL_SPI_SPIInit(void) {
    2bc4:	df 93       	push	r29
    2bc6:	cf 93       	push	r28
    2bc8:	cd b7       	in	r28, 0x3d	; 61
    2bca:	de b7       	in	r29, 0x3e	; 62
#if SPI_Mode == SPI_Master
	//Master Enable   *
	SET_BIT(SPCR, MSTR_PIN);
    2bcc:	ad e2       	ldi	r26, 0x2D	; 45
    2bce:	b0 e0       	ldi	r27, 0x00	; 0
    2bd0:	ed e2       	ldi	r30, 0x2D	; 45
    2bd2:	f0 e0       	ldi	r31, 0x00	; 0
    2bd4:	80 81       	ld	r24, Z
    2bd6:	80 61       	ori	r24, 0x10	; 16
    2bd8:	8c 93       	st	X, r24

	//MOSI   *
	MCAL_DIO_u8SetPinDirection(PortB, Pin5, Pin_High);
    2bda:	81 e0       	ldi	r24, 0x01	; 1
    2bdc:	65 e0       	ldi	r22, 0x05	; 5
    2bde:	41 e0       	ldi	r20, 0x01	; 1
    2be0:	0e 94 7a 19 	call	0x32f4	; 0x32f4 <MCAL_DIO_u8SetPinDirection>
	//Disable SS  *
	MCAL_DIO_u8SetPinDirection(PortB, Pin4, Pin_High);
    2be4:	81 e0       	ldi	r24, 0x01	; 1
    2be6:	64 e0       	ldi	r22, 0x04	; 4
    2be8:	41 e0       	ldi	r20, 0x01	; 1
    2bea:	0e 94 7a 19 	call	0x32f4	; 0x32f4 <MCAL_DIO_u8SetPinDirection>
	//SDK  *
	MCAL_DIO_u8SetPinDirection(PortB, Pin7, Pin_High);
    2bee:	81 e0       	ldi	r24, 0x01	; 1
    2bf0:	67 e0       	ldi	r22, 0x07	; 7
    2bf2:	41 e0       	ldi	r20, 0x01	; 1
    2bf4:	0e 94 7a 19 	call	0x32f4	; 0x32f4 <MCAL_DIO_u8SetPinDirection>

	//SS Disable *
	MCAL_DIO_u8SetPinValue(PortB, Pin4, Pin_High);
    2bf8:	81 e0       	ldi	r24, 0x01	; 1
    2bfa:	64 e0       	ldi	r22, 0x04	; 4
    2bfc:	41 e0       	ldi	r20, 0x01	; 1
    2bfe:	0e 94 e8 1a 	call	0x35d0	; 0x35d0 <MCAL_DIO_u8SetPinValue>

	//Prescaler 64 *
	SET_BIT(SPCR, SPR0_PIN);
    2c02:	ad e2       	ldi	r26, 0x2D	; 45
    2c04:	b0 e0       	ldi	r27, 0x00	; 0
    2c06:	ed e2       	ldi	r30, 0x2D	; 45
    2c08:	f0 e0       	ldi	r31, 0x00	; 0
    2c0a:	80 81       	ld	r24, Z
    2c0c:	81 60       	ori	r24, 0x01	; 1
    2c0e:	8c 93       	st	X, r24
	SET_BIT(SPCR, SPR1_PIN);
    2c10:	ad e2       	ldi	r26, 0x2D	; 45
    2c12:	b0 e0       	ldi	r27, 0x00	; 0
    2c14:	ed e2       	ldi	r30, 0x2D	; 45
    2c16:	f0 e0       	ldi	r31, 0x00	; 0
    2c18:	80 81       	ld	r24, Z
    2c1a:	82 60       	ori	r24, 0x02	; 2
    2c1c:	8c 93       	st	X, r24
	//MISO *
	MCAL_DIO_u8SetPinDirection(PortB, Pin6, Pin_High);
#endif

//the LSB of the data word is transmitted first.
	SET_BIT(SPCR, DORD_PIN);
    2c1e:	ad e2       	ldi	r26, 0x2D	; 45
    2c20:	b0 e0       	ldi	r27, 0x00	; 0
    2c22:	ed e2       	ldi	r30, 0x2D	; 45
    2c24:	f0 e0       	ldi	r31, 0x00	; 0
    2c26:	80 81       	ld	r24, Z
    2c28:	80 62       	ori	r24, 0x20	; 32
    2c2a:	8c 93       	st	X, r24

	//Clock
//	SET_BIT(SPCR, CPOL_PIN);
	SET_BIT(SPCR, CPHA_PIN);
    2c2c:	ad e2       	ldi	r26, 0x2D	; 45
    2c2e:	b0 e0       	ldi	r27, 0x00	; 0
    2c30:	ed e2       	ldi	r30, 0x2D	; 45
    2c32:	f0 e0       	ldi	r31, 0x00	; 0
    2c34:	80 81       	ld	r24, Z
    2c36:	84 60       	ori	r24, 0x04	; 4
    2c38:	8c 93       	st	X, r24

//Enable Interrupt
//	SET_BIT(SPCR, SPIE_PIN);

//SPI Enable
	SET_BIT(SPCR, SPE_PIN);
    2c3a:	ad e2       	ldi	r26, 0x2D	; 45
    2c3c:	b0 e0       	ldi	r27, 0x00	; 0
    2c3e:	ed e2       	ldi	r30, 0x2D	; 45
    2c40:	f0 e0       	ldi	r31, 0x00	; 0
    2c42:	80 81       	ld	r24, Z
    2c44:	80 64       	ori	r24, 0x40	; 64
    2c46:	8c 93       	st	X, r24
}
    2c48:	cf 91       	pop	r28
    2c4a:	df 91       	pop	r29
    2c4c:	08 95       	ret

00002c4e <MCAL_SPI_SendString>:

void MCAL_SPI_SendString(u8* Loc_Data) {
    2c4e:	df 93       	push	r29
    2c50:	cf 93       	push	r28
    2c52:	00 d0       	rcall	.+0      	; 0x2c54 <MCAL_SPI_SendString+0x6>
    2c54:	00 d0       	rcall	.+0      	; 0x2c56 <MCAL_SPI_SendString+0x8>
    2c56:	00 d0       	rcall	.+0      	; 0x2c58 <MCAL_SPI_SendString+0xa>
    2c58:	cd b7       	in	r28, 0x3d	; 61
    2c5a:	de b7       	in	r29, 0x3e	; 62
    2c5c:	9e 83       	std	Y+6, r25	; 0x06
    2c5e:	8d 83       	std	Y+5, r24	; 0x05
	for (u32 i = 0; Loc_Data[i] != '\0'; i++) {
    2c60:	19 82       	std	Y+1, r1	; 0x01
    2c62:	1a 82       	std	Y+2, r1	; 0x02
    2c64:	1b 82       	std	Y+3, r1	; 0x03
    2c66:	1c 82       	std	Y+4, r1	; 0x04
    2c68:	15 c0       	rjmp	.+42     	; 0x2c94 <MCAL_SPI_SendString+0x46>
		MCAL_SPI_SPITranceive(Loc_Data[i]);
    2c6a:	29 81       	ldd	r18, Y+1	; 0x01
    2c6c:	3a 81       	ldd	r19, Y+2	; 0x02
    2c6e:	8d 81       	ldd	r24, Y+5	; 0x05
    2c70:	9e 81       	ldd	r25, Y+6	; 0x06
    2c72:	fc 01       	movw	r30, r24
    2c74:	e2 0f       	add	r30, r18
    2c76:	f3 1f       	adc	r31, r19
    2c78:	80 81       	ld	r24, Z
    2c7a:	0e 94 99 16 	call	0x2d32	; 0x2d32 <MCAL_SPI_SPITranceive>
//SPI Enable
	SET_BIT(SPCR, SPE_PIN);
}

void MCAL_SPI_SendString(u8* Loc_Data) {
	for (u32 i = 0; Loc_Data[i] != '\0'; i++) {
    2c7e:	89 81       	ldd	r24, Y+1	; 0x01
    2c80:	9a 81       	ldd	r25, Y+2	; 0x02
    2c82:	ab 81       	ldd	r26, Y+3	; 0x03
    2c84:	bc 81       	ldd	r27, Y+4	; 0x04
    2c86:	01 96       	adiw	r24, 0x01	; 1
    2c88:	a1 1d       	adc	r26, r1
    2c8a:	b1 1d       	adc	r27, r1
    2c8c:	89 83       	std	Y+1, r24	; 0x01
    2c8e:	9a 83       	std	Y+2, r25	; 0x02
    2c90:	ab 83       	std	Y+3, r26	; 0x03
    2c92:	bc 83       	std	Y+4, r27	; 0x04
    2c94:	29 81       	ldd	r18, Y+1	; 0x01
    2c96:	3a 81       	ldd	r19, Y+2	; 0x02
    2c98:	8d 81       	ldd	r24, Y+5	; 0x05
    2c9a:	9e 81       	ldd	r25, Y+6	; 0x06
    2c9c:	fc 01       	movw	r30, r24
    2c9e:	e2 0f       	add	r30, r18
    2ca0:	f3 1f       	adc	r31, r19
    2ca2:	80 81       	ld	r24, Z
    2ca4:	88 23       	and	r24, r24
    2ca6:	09 f7       	brne	.-62     	; 0x2c6a <MCAL_SPI_SendString+0x1c>
		MCAL_SPI_SPITranceive(Loc_Data[i]);
	}
}
    2ca8:	26 96       	adiw	r28, 0x06	; 6
    2caa:	0f b6       	in	r0, 0x3f	; 63
    2cac:	f8 94       	cli
    2cae:	de bf       	out	0x3e, r29	; 62
    2cb0:	0f be       	out	0x3f, r0	; 63
    2cb2:	cd bf       	out	0x3d, r28	; 61
    2cb4:	cf 91       	pop	r28
    2cb6:	df 91       	pop	r29
    2cb8:	08 95       	ret

00002cba <MCAL_SPI_RecieveString>:

void MCAL_SPI_RecieveString(u8* Loc_Data) {
    2cba:	0f 93       	push	r16
    2cbc:	1f 93       	push	r17
    2cbe:	df 93       	push	r29
    2cc0:	cf 93       	push	r28
    2cc2:	00 d0       	rcall	.+0      	; 0x2cc4 <MCAL_SPI_RecieveString+0xa>
    2cc4:	00 d0       	rcall	.+0      	; 0x2cc6 <MCAL_SPI_RecieveString+0xc>
    2cc6:	00 d0       	rcall	.+0      	; 0x2cc8 <MCAL_SPI_RecieveString+0xe>
    2cc8:	cd b7       	in	r28, 0x3d	; 61
    2cca:	de b7       	in	r29, 0x3e	; 62
    2ccc:	9e 83       	std	Y+6, r25	; 0x06
    2cce:	8d 83       	std	Y+5, r24	; 0x05
	for (u32 i = 0; Loc_Data[i] != '\0'; i++) {
    2cd0:	19 82       	std	Y+1, r1	; 0x01
    2cd2:	1a 82       	std	Y+2, r1	; 0x02
    2cd4:	1b 82       	std	Y+3, r1	; 0x03
    2cd6:	1c 82       	std	Y+4, r1	; 0x04
    2cd8:	17 c0       	rjmp	.+46     	; 0x2d08 <MCAL_SPI_RecieveString+0x4e>
		Loc_Data[i] = MCAL_SPI_SPITranceive(0xff);
    2cda:	29 81       	ldd	r18, Y+1	; 0x01
    2cdc:	3a 81       	ldd	r19, Y+2	; 0x02
    2cde:	8d 81       	ldd	r24, Y+5	; 0x05
    2ce0:	9e 81       	ldd	r25, Y+6	; 0x06
    2ce2:	8c 01       	movw	r16, r24
    2ce4:	02 0f       	add	r16, r18
    2ce6:	13 1f       	adc	r17, r19
    2ce8:	8f ef       	ldi	r24, 0xFF	; 255
    2cea:	0e 94 99 16 	call	0x2d32	; 0x2d32 <MCAL_SPI_SPITranceive>
    2cee:	f8 01       	movw	r30, r16
    2cf0:	80 83       	st	Z, r24
		MCAL_SPI_SPITranceive(Loc_Data[i]);
	}
}

void MCAL_SPI_RecieveString(u8* Loc_Data) {
	for (u32 i = 0; Loc_Data[i] != '\0'; i++) {
    2cf2:	89 81       	ldd	r24, Y+1	; 0x01
    2cf4:	9a 81       	ldd	r25, Y+2	; 0x02
    2cf6:	ab 81       	ldd	r26, Y+3	; 0x03
    2cf8:	bc 81       	ldd	r27, Y+4	; 0x04
    2cfa:	01 96       	adiw	r24, 0x01	; 1
    2cfc:	a1 1d       	adc	r26, r1
    2cfe:	b1 1d       	adc	r27, r1
    2d00:	89 83       	std	Y+1, r24	; 0x01
    2d02:	9a 83       	std	Y+2, r25	; 0x02
    2d04:	ab 83       	std	Y+3, r26	; 0x03
    2d06:	bc 83       	std	Y+4, r27	; 0x04
    2d08:	29 81       	ldd	r18, Y+1	; 0x01
    2d0a:	3a 81       	ldd	r19, Y+2	; 0x02
    2d0c:	8d 81       	ldd	r24, Y+5	; 0x05
    2d0e:	9e 81       	ldd	r25, Y+6	; 0x06
    2d10:	fc 01       	movw	r30, r24
    2d12:	e2 0f       	add	r30, r18
    2d14:	f3 1f       	adc	r31, r19
    2d16:	80 81       	ld	r24, Z
    2d18:	88 23       	and	r24, r24
    2d1a:	f9 f6       	brne	.-66     	; 0x2cda <MCAL_SPI_RecieveString+0x20>
		Loc_Data[i] = MCAL_SPI_SPITranceive(0xff);
	}
}
    2d1c:	26 96       	adiw	r28, 0x06	; 6
    2d1e:	0f b6       	in	r0, 0x3f	; 63
    2d20:	f8 94       	cli
    2d22:	de bf       	out	0x3e, r29	; 62
    2d24:	0f be       	out	0x3f, r0	; 63
    2d26:	cd bf       	out	0x3d, r28	; 61
    2d28:	cf 91       	pop	r28
    2d2a:	df 91       	pop	r29
    2d2c:	1f 91       	pop	r17
    2d2e:	0f 91       	pop	r16
    2d30:	08 95       	ret

00002d32 <MCAL_SPI_SPITranceive>:

u8 MCAL_SPI_SPITranceive(u8 Loc_u8Data) {
    2d32:	df 93       	push	r29
    2d34:	cf 93       	push	r28
    2d36:	0f 92       	push	r0
    2d38:	cd b7       	in	r28, 0x3d	; 61
    2d3a:	de b7       	in	r29, 0x3e	; 62
    2d3c:	89 83       	std	Y+1, r24	; 0x01
	SPDR = Loc_u8Data;
    2d3e:	ef e2       	ldi	r30, 0x2F	; 47
    2d40:	f0 e0       	ldi	r31, 0x00	; 0
    2d42:	89 81       	ldd	r24, Y+1	; 0x01
    2d44:	80 83       	st	Z, r24
	while (GET_BIT(SPSR,SPIF_PIN) == 0)
    2d46:	ee e2       	ldi	r30, 0x2E	; 46
    2d48:	f0 e0       	ldi	r31, 0x00	; 0
    2d4a:	80 81       	ld	r24, Z
    2d4c:	88 23       	and	r24, r24
    2d4e:	dc f7       	brge	.-10     	; 0x2d46 <MCAL_SPI_SPITranceive+0x14>
		;
	return SPDR;
    2d50:	ef e2       	ldi	r30, 0x2F	; 47
    2d52:	f0 e0       	ldi	r31, 0x00	; 0
    2d54:	80 81       	ld	r24, Z
}
    2d56:	0f 90       	pop	r0
    2d58:	cf 91       	pop	r28
    2d5a:	df 91       	pop	r29
    2d5c:	08 95       	ret

00002d5e <MCAL_Interrupt_u8SetRegister>:

void (*Gptr0)(void)= '\0' ;
void (*Gptr1)(void)= '\0' ;
void (*Gptr2)(void)= '\0' ;

void MCAL_Interrupt_u8SetRegister(u8 Loc_u8PortID, u8 Loc_u8PortValue) {
    2d5e:	df 93       	push	r29
    2d60:	cf 93       	push	r28
    2d62:	00 d0       	rcall	.+0      	; 0x2d64 <MCAL_Interrupt_u8SetRegister+0x6>
    2d64:	cd b7       	in	r28, 0x3d	; 61
    2d66:	de b7       	in	r29, 0x3e	; 62
    2d68:	89 83       	std	Y+1, r24	; 0x01
    2d6a:	6a 83       	std	Y+2, r22	; 0x02
	if (Loc_u8PortValue == PORT_OUTPUT) {
    2d6c:	8a 81       	ldd	r24, Y+2	; 0x02
    2d6e:	8f 3f       	cpi	r24, 0xFF	; 255
    2d70:	09 f5       	brne	.+66     	; 0x2db4 <MCAL_Interrupt_u8SetRegister+0x56>
		if (Loc_u8PortID == Sreg) {
    2d72:	89 81       	ldd	r24, Y+1	; 0x01
    2d74:	88 23       	and	r24, r24
    2d76:	29 f4       	brne	.+10     	; 0x2d82 <MCAL_Interrupt_u8SetRegister+0x24>
			SREG = PORT_OUTPUT;
    2d78:	ef e5       	ldi	r30, 0x5F	; 95
    2d7a:	f0 e0       	ldi	r31, 0x00	; 0
    2d7c:	8f ef       	ldi	r24, 0xFF	; 255
    2d7e:	80 83       	st	Z, r24
    2d80:	57 c0       	rjmp	.+174    	; 0x2e30 <MCAL_Interrupt_u8SetRegister+0xd2>
		} else if (Loc_u8PortID == Gicr) {
    2d82:	89 81       	ldd	r24, Y+1	; 0x01
    2d84:	81 30       	cpi	r24, 0x01	; 1
    2d86:	29 f4       	brne	.+10     	; 0x2d92 <MCAL_Interrupt_u8SetRegister+0x34>
			GICR = PORT_OUTPUT;
    2d88:	eb e5       	ldi	r30, 0x5B	; 91
    2d8a:	f0 e0       	ldi	r31, 0x00	; 0
    2d8c:	8f ef       	ldi	r24, 0xFF	; 255
    2d8e:	80 83       	st	Z, r24
    2d90:	4f c0       	rjmp	.+158    	; 0x2e30 <MCAL_Interrupt_u8SetRegister+0xd2>
		} else if (Loc_u8PortID == Mcucr) {
    2d92:	89 81       	ldd	r24, Y+1	; 0x01
    2d94:	82 30       	cpi	r24, 0x02	; 2
    2d96:	29 f4       	brne	.+10     	; 0x2da2 <MCAL_Interrupt_u8SetRegister+0x44>
			MCUCR = PORT_OUTPUT;
    2d98:	e5 e5       	ldi	r30, 0x55	; 85
    2d9a:	f0 e0       	ldi	r31, 0x00	; 0
    2d9c:	8f ef       	ldi	r24, 0xFF	; 255
    2d9e:	80 83       	st	Z, r24
    2da0:	47 c0       	rjmp	.+142    	; 0x2e30 <MCAL_Interrupt_u8SetRegister+0xd2>
		} else if (Loc_u8PortID == Mcucsr) {
    2da2:	89 81       	ldd	r24, Y+1	; 0x01
    2da4:	83 30       	cpi	r24, 0x03	; 3
    2da6:	09 f0       	breq	.+2      	; 0x2daa <MCAL_Interrupt_u8SetRegister+0x4c>
    2da8:	43 c0       	rjmp	.+134    	; 0x2e30 <MCAL_Interrupt_u8SetRegister+0xd2>
			MCUCSR = PORT_OUTPUT;
    2daa:	e4 e5       	ldi	r30, 0x54	; 84
    2dac:	f0 e0       	ldi	r31, 0x00	; 0
    2dae:	8f ef       	ldi	r24, 0xFF	; 255
    2db0:	80 83       	st	Z, r24
    2db2:	3e c0       	rjmp	.+124    	; 0x2e30 <MCAL_Interrupt_u8SetRegister+0xd2>
		} else {
			//Do Nothing
		}
	} else if (Loc_u8PortValue == PORT_INPUT) {
    2db4:	8a 81       	ldd	r24, Y+2	; 0x02
    2db6:	88 23       	and	r24, r24
    2db8:	e1 f4       	brne	.+56     	; 0x2df2 <MCAL_Interrupt_u8SetRegister+0x94>
		if (Loc_u8PortID == Sreg) {
    2dba:	89 81       	ldd	r24, Y+1	; 0x01
    2dbc:	88 23       	and	r24, r24
    2dbe:	21 f4       	brne	.+8      	; 0x2dc8 <MCAL_Interrupt_u8SetRegister+0x6a>
			SREG = PORT_INPUT;
    2dc0:	ef e5       	ldi	r30, 0x5F	; 95
    2dc2:	f0 e0       	ldi	r31, 0x00	; 0
    2dc4:	10 82       	st	Z, r1
    2dc6:	34 c0       	rjmp	.+104    	; 0x2e30 <MCAL_Interrupt_u8SetRegister+0xd2>
		} else if (Loc_u8PortID == Gicr) {
    2dc8:	89 81       	ldd	r24, Y+1	; 0x01
    2dca:	81 30       	cpi	r24, 0x01	; 1
    2dcc:	21 f4       	brne	.+8      	; 0x2dd6 <MCAL_Interrupt_u8SetRegister+0x78>
			GICR = PORT_INPUT;
    2dce:	eb e5       	ldi	r30, 0x5B	; 91
    2dd0:	f0 e0       	ldi	r31, 0x00	; 0
    2dd2:	10 82       	st	Z, r1
    2dd4:	2d c0       	rjmp	.+90     	; 0x2e30 <MCAL_Interrupt_u8SetRegister+0xd2>
		} else if (Loc_u8PortID == Mcucr) {
    2dd6:	89 81       	ldd	r24, Y+1	; 0x01
    2dd8:	82 30       	cpi	r24, 0x02	; 2
    2dda:	21 f4       	brne	.+8      	; 0x2de4 <MCAL_Interrupt_u8SetRegister+0x86>
			MCUCR = PORT_INPUT;
    2ddc:	e5 e5       	ldi	r30, 0x55	; 85
    2dde:	f0 e0       	ldi	r31, 0x00	; 0
    2de0:	10 82       	st	Z, r1
    2de2:	26 c0       	rjmp	.+76     	; 0x2e30 <MCAL_Interrupt_u8SetRegister+0xd2>
		} else if (Loc_u8PortID == Mcucsr) {
    2de4:	89 81       	ldd	r24, Y+1	; 0x01
    2de6:	83 30       	cpi	r24, 0x03	; 3
    2de8:	19 f5       	brne	.+70     	; 0x2e30 <MCAL_Interrupt_u8SetRegister+0xd2>
			MCUCSR = PORT_INPUT;
    2dea:	e4 e5       	ldi	r30, 0x54	; 84
    2dec:	f0 e0       	ldi	r31, 0x00	; 0
    2dee:	10 82       	st	Z, r1
    2df0:	1f c0       	rjmp	.+62     	; 0x2e30 <MCAL_Interrupt_u8SetRegister+0xd2>
		} else {
			//Do Nothing
		}
	} else {
		if (Loc_u8PortID == Sreg) {
    2df2:	89 81       	ldd	r24, Y+1	; 0x01
    2df4:	88 23       	and	r24, r24
    2df6:	29 f4       	brne	.+10     	; 0x2e02 <MCAL_Interrupt_u8SetRegister+0xa4>
			SREG = Loc_u8PortValue;
    2df8:	ef e5       	ldi	r30, 0x5F	; 95
    2dfa:	f0 e0       	ldi	r31, 0x00	; 0
    2dfc:	8a 81       	ldd	r24, Y+2	; 0x02
    2dfe:	80 83       	st	Z, r24
    2e00:	17 c0       	rjmp	.+46     	; 0x2e30 <MCAL_Interrupt_u8SetRegister+0xd2>
		} else if (Loc_u8PortID == Gicr) {
    2e02:	89 81       	ldd	r24, Y+1	; 0x01
    2e04:	81 30       	cpi	r24, 0x01	; 1
    2e06:	29 f4       	brne	.+10     	; 0x2e12 <MCAL_Interrupt_u8SetRegister+0xb4>
			GICR = Loc_u8PortValue;
    2e08:	eb e5       	ldi	r30, 0x5B	; 91
    2e0a:	f0 e0       	ldi	r31, 0x00	; 0
    2e0c:	8a 81       	ldd	r24, Y+2	; 0x02
    2e0e:	80 83       	st	Z, r24
    2e10:	0f c0       	rjmp	.+30     	; 0x2e30 <MCAL_Interrupt_u8SetRegister+0xd2>
		} else if (Loc_u8PortID == Mcucr) {
    2e12:	89 81       	ldd	r24, Y+1	; 0x01
    2e14:	82 30       	cpi	r24, 0x02	; 2
    2e16:	29 f4       	brne	.+10     	; 0x2e22 <MCAL_Interrupt_u8SetRegister+0xc4>
			MCUCR = Loc_u8PortValue;
    2e18:	e5 e5       	ldi	r30, 0x55	; 85
    2e1a:	f0 e0       	ldi	r31, 0x00	; 0
    2e1c:	8a 81       	ldd	r24, Y+2	; 0x02
    2e1e:	80 83       	st	Z, r24
    2e20:	07 c0       	rjmp	.+14     	; 0x2e30 <MCAL_Interrupt_u8SetRegister+0xd2>
		} else if (Loc_u8PortID == Mcucsr) {
    2e22:	89 81       	ldd	r24, Y+1	; 0x01
    2e24:	83 30       	cpi	r24, 0x03	; 3
    2e26:	21 f4       	brne	.+8      	; 0x2e30 <MCAL_Interrupt_u8SetRegister+0xd2>
			MCUCSR = Loc_u8PortValue;
    2e28:	e4 e5       	ldi	r30, 0x54	; 84
    2e2a:	f0 e0       	ldi	r31, 0x00	; 0
    2e2c:	8a 81       	ldd	r24, Y+2	; 0x02
    2e2e:	80 83       	st	Z, r24
		}
	}
}
    2e30:	0f 90       	pop	r0
    2e32:	0f 90       	pop	r0
    2e34:	cf 91       	pop	r28
    2e36:	df 91       	pop	r29
    2e38:	08 95       	ret

00002e3a <MCAL_Interrupt_u8SetRegisterPin>:

void MCAL_Interrupt_u8SetRegisterPin(u8 Loc_u8PortID, u8 Loc_u8PinID,
		u8 Loc_u8PinValue) {
    2e3a:	df 93       	push	r29
    2e3c:	cf 93       	push	r28
    2e3e:	00 d0       	rcall	.+0      	; 0x2e40 <MCAL_Interrupt_u8SetRegisterPin+0x6>
    2e40:	0f 92       	push	r0
    2e42:	cd b7       	in	r28, 0x3d	; 61
    2e44:	de b7       	in	r29, 0x3e	; 62
    2e46:	89 83       	std	Y+1, r24	; 0x01
    2e48:	6a 83       	std	Y+2, r22	; 0x02
    2e4a:	4b 83       	std	Y+3, r20	; 0x03
	if (Loc_u8PinValue == Pin_High) {
    2e4c:	8b 81       	ldd	r24, Y+3	; 0x03
    2e4e:	81 30       	cpi	r24, 0x01	; 1
    2e50:	09 f0       	breq	.+2      	; 0x2e54 <MCAL_Interrupt_u8SetRegisterPin+0x1a>
    2e52:	5d c0       	rjmp	.+186    	; 0x2f0e <MCAL_Interrupt_u8SetRegisterPin+0xd4>
		if (Loc_u8PortID == Sreg) {
    2e54:	89 81       	ldd	r24, Y+1	; 0x01
    2e56:	88 23       	and	r24, r24
    2e58:	a1 f4       	brne	.+40     	; 0x2e82 <MCAL_Interrupt_u8SetRegisterPin+0x48>
			SET_BIT(SREG, Loc_u8PinID);
    2e5a:	af e5       	ldi	r26, 0x5F	; 95
    2e5c:	b0 e0       	ldi	r27, 0x00	; 0
    2e5e:	ef e5       	ldi	r30, 0x5F	; 95
    2e60:	f0 e0       	ldi	r31, 0x00	; 0
    2e62:	80 81       	ld	r24, Z
    2e64:	48 2f       	mov	r20, r24
    2e66:	8a 81       	ldd	r24, Y+2	; 0x02
    2e68:	28 2f       	mov	r18, r24
    2e6a:	30 e0       	ldi	r19, 0x00	; 0
    2e6c:	81 e0       	ldi	r24, 0x01	; 1
    2e6e:	90 e0       	ldi	r25, 0x00	; 0
    2e70:	02 2e       	mov	r0, r18
    2e72:	02 c0       	rjmp	.+4      	; 0x2e78 <MCAL_Interrupt_u8SetRegisterPin+0x3e>
    2e74:	88 0f       	add	r24, r24
    2e76:	99 1f       	adc	r25, r25
    2e78:	0a 94       	dec	r0
    2e7a:	e2 f7       	brpl	.-8      	; 0x2e74 <MCAL_Interrupt_u8SetRegisterPin+0x3a>
    2e7c:	84 2b       	or	r24, r20
    2e7e:	8c 93       	st	X, r24
    2e80:	a9 c0       	rjmp	.+338    	; 0x2fd4 <MCAL_Interrupt_u8SetRegisterPin+0x19a>
		} else if (Loc_u8PortID == Gicr) {
    2e82:	89 81       	ldd	r24, Y+1	; 0x01
    2e84:	81 30       	cpi	r24, 0x01	; 1
    2e86:	a1 f4       	brne	.+40     	; 0x2eb0 <MCAL_Interrupt_u8SetRegisterPin+0x76>
			SET_BIT(GICR, Loc_u8PinID);
    2e88:	ab e5       	ldi	r26, 0x5B	; 91
    2e8a:	b0 e0       	ldi	r27, 0x00	; 0
    2e8c:	eb e5       	ldi	r30, 0x5B	; 91
    2e8e:	f0 e0       	ldi	r31, 0x00	; 0
    2e90:	80 81       	ld	r24, Z
    2e92:	48 2f       	mov	r20, r24
    2e94:	8a 81       	ldd	r24, Y+2	; 0x02
    2e96:	28 2f       	mov	r18, r24
    2e98:	30 e0       	ldi	r19, 0x00	; 0
    2e9a:	81 e0       	ldi	r24, 0x01	; 1
    2e9c:	90 e0       	ldi	r25, 0x00	; 0
    2e9e:	02 2e       	mov	r0, r18
    2ea0:	02 c0       	rjmp	.+4      	; 0x2ea6 <MCAL_Interrupt_u8SetRegisterPin+0x6c>
    2ea2:	88 0f       	add	r24, r24
    2ea4:	99 1f       	adc	r25, r25
    2ea6:	0a 94       	dec	r0
    2ea8:	e2 f7       	brpl	.-8      	; 0x2ea2 <MCAL_Interrupt_u8SetRegisterPin+0x68>
    2eaa:	84 2b       	or	r24, r20
    2eac:	8c 93       	st	X, r24
    2eae:	92 c0       	rjmp	.+292    	; 0x2fd4 <MCAL_Interrupt_u8SetRegisterPin+0x19a>
		} else if (Loc_u8PortID == Mcucr) {
    2eb0:	89 81       	ldd	r24, Y+1	; 0x01
    2eb2:	82 30       	cpi	r24, 0x02	; 2
    2eb4:	a1 f4       	brne	.+40     	; 0x2ede <MCAL_Interrupt_u8SetRegisterPin+0xa4>
			SET_BIT(MCUCR, Loc_u8PinID);
    2eb6:	a5 e5       	ldi	r26, 0x55	; 85
    2eb8:	b0 e0       	ldi	r27, 0x00	; 0
    2eba:	e5 e5       	ldi	r30, 0x55	; 85
    2ebc:	f0 e0       	ldi	r31, 0x00	; 0
    2ebe:	80 81       	ld	r24, Z
    2ec0:	48 2f       	mov	r20, r24
    2ec2:	8a 81       	ldd	r24, Y+2	; 0x02
    2ec4:	28 2f       	mov	r18, r24
    2ec6:	30 e0       	ldi	r19, 0x00	; 0
    2ec8:	81 e0       	ldi	r24, 0x01	; 1
    2eca:	90 e0       	ldi	r25, 0x00	; 0
    2ecc:	02 2e       	mov	r0, r18
    2ece:	02 c0       	rjmp	.+4      	; 0x2ed4 <MCAL_Interrupt_u8SetRegisterPin+0x9a>
    2ed0:	88 0f       	add	r24, r24
    2ed2:	99 1f       	adc	r25, r25
    2ed4:	0a 94       	dec	r0
    2ed6:	e2 f7       	brpl	.-8      	; 0x2ed0 <MCAL_Interrupt_u8SetRegisterPin+0x96>
    2ed8:	84 2b       	or	r24, r20
    2eda:	8c 93       	st	X, r24
    2edc:	7b c0       	rjmp	.+246    	; 0x2fd4 <MCAL_Interrupt_u8SetRegisterPin+0x19a>
		} else if (Loc_u8PortID == Mcucsr) {
    2ede:	89 81       	ldd	r24, Y+1	; 0x01
    2ee0:	83 30       	cpi	r24, 0x03	; 3
    2ee2:	09 f0       	breq	.+2      	; 0x2ee6 <MCAL_Interrupt_u8SetRegisterPin+0xac>
    2ee4:	77 c0       	rjmp	.+238    	; 0x2fd4 <MCAL_Interrupt_u8SetRegisterPin+0x19a>
			SET_BIT(MCUCSR, Loc_u8PinID);
    2ee6:	a4 e5       	ldi	r26, 0x54	; 84
    2ee8:	b0 e0       	ldi	r27, 0x00	; 0
    2eea:	e4 e5       	ldi	r30, 0x54	; 84
    2eec:	f0 e0       	ldi	r31, 0x00	; 0
    2eee:	80 81       	ld	r24, Z
    2ef0:	48 2f       	mov	r20, r24
    2ef2:	8a 81       	ldd	r24, Y+2	; 0x02
    2ef4:	28 2f       	mov	r18, r24
    2ef6:	30 e0       	ldi	r19, 0x00	; 0
    2ef8:	81 e0       	ldi	r24, 0x01	; 1
    2efa:	90 e0       	ldi	r25, 0x00	; 0
    2efc:	02 2e       	mov	r0, r18
    2efe:	02 c0       	rjmp	.+4      	; 0x2f04 <MCAL_Interrupt_u8SetRegisterPin+0xca>
    2f00:	88 0f       	add	r24, r24
    2f02:	99 1f       	adc	r25, r25
    2f04:	0a 94       	dec	r0
    2f06:	e2 f7       	brpl	.-8      	; 0x2f00 <MCAL_Interrupt_u8SetRegisterPin+0xc6>
    2f08:	84 2b       	or	r24, r20
    2f0a:	8c 93       	st	X, r24
    2f0c:	63 c0       	rjmp	.+198    	; 0x2fd4 <MCAL_Interrupt_u8SetRegisterPin+0x19a>
		} else {
			//Do Nothing
		}
	} else if (Loc_u8PinValue == Pin_Low) {
    2f0e:	8b 81       	ldd	r24, Y+3	; 0x03
    2f10:	88 23       	and	r24, r24
    2f12:	09 f0       	breq	.+2      	; 0x2f16 <MCAL_Interrupt_u8SetRegisterPin+0xdc>
    2f14:	5f c0       	rjmp	.+190    	; 0x2fd4 <MCAL_Interrupt_u8SetRegisterPin+0x19a>
		if (Loc_u8PortID == Sreg) {
    2f16:	89 81       	ldd	r24, Y+1	; 0x01
    2f18:	88 23       	and	r24, r24
    2f1a:	a9 f4       	brne	.+42     	; 0x2f46 <MCAL_Interrupt_u8SetRegisterPin+0x10c>
			CLR_BIT(SREG, Loc_u8PinID);
    2f1c:	af e5       	ldi	r26, 0x5F	; 95
    2f1e:	b0 e0       	ldi	r27, 0x00	; 0
    2f20:	ef e5       	ldi	r30, 0x5F	; 95
    2f22:	f0 e0       	ldi	r31, 0x00	; 0
    2f24:	80 81       	ld	r24, Z
    2f26:	48 2f       	mov	r20, r24
    2f28:	8a 81       	ldd	r24, Y+2	; 0x02
    2f2a:	28 2f       	mov	r18, r24
    2f2c:	30 e0       	ldi	r19, 0x00	; 0
    2f2e:	81 e0       	ldi	r24, 0x01	; 1
    2f30:	90 e0       	ldi	r25, 0x00	; 0
    2f32:	02 2e       	mov	r0, r18
    2f34:	02 c0       	rjmp	.+4      	; 0x2f3a <MCAL_Interrupt_u8SetRegisterPin+0x100>
    2f36:	88 0f       	add	r24, r24
    2f38:	99 1f       	adc	r25, r25
    2f3a:	0a 94       	dec	r0
    2f3c:	e2 f7       	brpl	.-8      	; 0x2f36 <MCAL_Interrupt_u8SetRegisterPin+0xfc>
    2f3e:	80 95       	com	r24
    2f40:	84 23       	and	r24, r20
    2f42:	8c 93       	st	X, r24
    2f44:	47 c0       	rjmp	.+142    	; 0x2fd4 <MCAL_Interrupt_u8SetRegisterPin+0x19a>
		} else if (Loc_u8PortID == Gicr) {
    2f46:	89 81       	ldd	r24, Y+1	; 0x01
    2f48:	81 30       	cpi	r24, 0x01	; 1
    2f4a:	a9 f4       	brne	.+42     	; 0x2f76 <MCAL_Interrupt_u8SetRegisterPin+0x13c>
			CLR_BIT(GICR, Loc_u8PinID);
    2f4c:	ab e5       	ldi	r26, 0x5B	; 91
    2f4e:	b0 e0       	ldi	r27, 0x00	; 0
    2f50:	eb e5       	ldi	r30, 0x5B	; 91
    2f52:	f0 e0       	ldi	r31, 0x00	; 0
    2f54:	80 81       	ld	r24, Z
    2f56:	48 2f       	mov	r20, r24
    2f58:	8a 81       	ldd	r24, Y+2	; 0x02
    2f5a:	28 2f       	mov	r18, r24
    2f5c:	30 e0       	ldi	r19, 0x00	; 0
    2f5e:	81 e0       	ldi	r24, 0x01	; 1
    2f60:	90 e0       	ldi	r25, 0x00	; 0
    2f62:	02 2e       	mov	r0, r18
    2f64:	02 c0       	rjmp	.+4      	; 0x2f6a <MCAL_Interrupt_u8SetRegisterPin+0x130>
    2f66:	88 0f       	add	r24, r24
    2f68:	99 1f       	adc	r25, r25
    2f6a:	0a 94       	dec	r0
    2f6c:	e2 f7       	brpl	.-8      	; 0x2f66 <MCAL_Interrupt_u8SetRegisterPin+0x12c>
    2f6e:	80 95       	com	r24
    2f70:	84 23       	and	r24, r20
    2f72:	8c 93       	st	X, r24
    2f74:	2f c0       	rjmp	.+94     	; 0x2fd4 <MCAL_Interrupt_u8SetRegisterPin+0x19a>
		} else if (Loc_u8PortID == Mcucr) {
    2f76:	89 81       	ldd	r24, Y+1	; 0x01
    2f78:	82 30       	cpi	r24, 0x02	; 2
    2f7a:	a9 f4       	brne	.+42     	; 0x2fa6 <MCAL_Interrupt_u8SetRegisterPin+0x16c>
			CLR_BIT(MCUCR, Loc_u8PinID);
    2f7c:	a5 e5       	ldi	r26, 0x55	; 85
    2f7e:	b0 e0       	ldi	r27, 0x00	; 0
    2f80:	e5 e5       	ldi	r30, 0x55	; 85
    2f82:	f0 e0       	ldi	r31, 0x00	; 0
    2f84:	80 81       	ld	r24, Z
    2f86:	48 2f       	mov	r20, r24
    2f88:	8a 81       	ldd	r24, Y+2	; 0x02
    2f8a:	28 2f       	mov	r18, r24
    2f8c:	30 e0       	ldi	r19, 0x00	; 0
    2f8e:	81 e0       	ldi	r24, 0x01	; 1
    2f90:	90 e0       	ldi	r25, 0x00	; 0
    2f92:	02 2e       	mov	r0, r18
    2f94:	02 c0       	rjmp	.+4      	; 0x2f9a <MCAL_Interrupt_u8SetRegisterPin+0x160>
    2f96:	88 0f       	add	r24, r24
    2f98:	99 1f       	adc	r25, r25
    2f9a:	0a 94       	dec	r0
    2f9c:	e2 f7       	brpl	.-8      	; 0x2f96 <MCAL_Interrupt_u8SetRegisterPin+0x15c>
    2f9e:	80 95       	com	r24
    2fa0:	84 23       	and	r24, r20
    2fa2:	8c 93       	st	X, r24
    2fa4:	17 c0       	rjmp	.+46     	; 0x2fd4 <MCAL_Interrupt_u8SetRegisterPin+0x19a>
		} else if (Loc_u8PortID == Mcucsr) {
    2fa6:	89 81       	ldd	r24, Y+1	; 0x01
    2fa8:	83 30       	cpi	r24, 0x03	; 3
    2faa:	a1 f4       	brne	.+40     	; 0x2fd4 <MCAL_Interrupt_u8SetRegisterPin+0x19a>
			CLR_BIT(MCUCSR, Loc_u8PinID);
    2fac:	a4 e5       	ldi	r26, 0x54	; 84
    2fae:	b0 e0       	ldi	r27, 0x00	; 0
    2fb0:	e4 e5       	ldi	r30, 0x54	; 84
    2fb2:	f0 e0       	ldi	r31, 0x00	; 0
    2fb4:	80 81       	ld	r24, Z
    2fb6:	48 2f       	mov	r20, r24
    2fb8:	8a 81       	ldd	r24, Y+2	; 0x02
    2fba:	28 2f       	mov	r18, r24
    2fbc:	30 e0       	ldi	r19, 0x00	; 0
    2fbe:	81 e0       	ldi	r24, 0x01	; 1
    2fc0:	90 e0       	ldi	r25, 0x00	; 0
    2fc2:	02 2e       	mov	r0, r18
    2fc4:	02 c0       	rjmp	.+4      	; 0x2fca <MCAL_Interrupt_u8SetRegisterPin+0x190>
    2fc6:	88 0f       	add	r24, r24
    2fc8:	99 1f       	adc	r25, r25
    2fca:	0a 94       	dec	r0
    2fcc:	e2 f7       	brpl	.-8      	; 0x2fc6 <MCAL_Interrupt_u8SetRegisterPin+0x18c>
    2fce:	80 95       	com	r24
    2fd0:	84 23       	and	r24, r20
    2fd2:	8c 93       	st	X, r24
			//Do Nothing
		}
	} else {
		//Do Nothing
	}
}
    2fd4:	0f 90       	pop	r0
    2fd6:	0f 90       	pop	r0
    2fd8:	0f 90       	pop	r0
    2fda:	cf 91       	pop	r28
    2fdc:	df 91       	pop	r29
    2fde:	08 95       	ret

00002fe0 <MCAL_Interrupt_EXIT_CallBack_0>:

void MCAL_Interrupt_EXIT_CallBack_0(void (*ptr)(void)) {
    2fe0:	df 93       	push	r29
    2fe2:	cf 93       	push	r28
    2fe4:	00 d0       	rcall	.+0      	; 0x2fe6 <MCAL_Interrupt_EXIT_CallBack_0+0x6>
    2fe6:	cd b7       	in	r28, 0x3d	; 61
    2fe8:	de b7       	in	r29, 0x3e	; 62
    2fea:	9a 83       	std	Y+2, r25	; 0x02
    2fec:	89 83       	std	Y+1, r24	; 0x01
	if (ptr != '\0')
    2fee:	89 81       	ldd	r24, Y+1	; 0x01
    2ff0:	9a 81       	ldd	r25, Y+2	; 0x02
    2ff2:	00 97       	sbiw	r24, 0x00	; 0
    2ff4:	31 f0       	breq	.+12     	; 0x3002 <MCAL_Interrupt_EXIT_CallBack_0+0x22>
		Gptr0 = ptr;
    2ff6:	89 81       	ldd	r24, Y+1	; 0x01
    2ff8:	9a 81       	ldd	r25, Y+2	; 0x02
    2ffa:	90 93 86 01 	sts	0x0186, r25
    2ffe:	80 93 85 01 	sts	0x0185, r24
}
    3002:	0f 90       	pop	r0
    3004:	0f 90       	pop	r0
    3006:	cf 91       	pop	r28
    3008:	df 91       	pop	r29
    300a:	08 95       	ret

0000300c <MCAL_Interrupt_EXIT_CallBack_1>:
void MCAL_Interrupt_EXIT_CallBack_1(void (*ptr)(void)) {
    300c:	df 93       	push	r29
    300e:	cf 93       	push	r28
    3010:	00 d0       	rcall	.+0      	; 0x3012 <MCAL_Interrupt_EXIT_CallBack_1+0x6>
    3012:	cd b7       	in	r28, 0x3d	; 61
    3014:	de b7       	in	r29, 0x3e	; 62
    3016:	9a 83       	std	Y+2, r25	; 0x02
    3018:	89 83       	std	Y+1, r24	; 0x01
	if (ptr != '\0')
    301a:	89 81       	ldd	r24, Y+1	; 0x01
    301c:	9a 81       	ldd	r25, Y+2	; 0x02
    301e:	00 97       	sbiw	r24, 0x00	; 0
    3020:	31 f0       	breq	.+12     	; 0x302e <MCAL_Interrupt_EXIT_CallBack_1+0x22>
		Gptr1 = ptr;
    3022:	89 81       	ldd	r24, Y+1	; 0x01
    3024:	9a 81       	ldd	r25, Y+2	; 0x02
    3026:	90 93 88 01 	sts	0x0188, r25
    302a:	80 93 87 01 	sts	0x0187, r24
}
    302e:	0f 90       	pop	r0
    3030:	0f 90       	pop	r0
    3032:	cf 91       	pop	r28
    3034:	df 91       	pop	r29
    3036:	08 95       	ret

00003038 <MCAL_Interrupt_EXIT_CallBack_2>:
void MCAL_Interrupt_EXIT_CallBack_2(void (*ptr)(void)) {
    3038:	df 93       	push	r29
    303a:	cf 93       	push	r28
    303c:	00 d0       	rcall	.+0      	; 0x303e <MCAL_Interrupt_EXIT_CallBack_2+0x6>
    303e:	cd b7       	in	r28, 0x3d	; 61
    3040:	de b7       	in	r29, 0x3e	; 62
    3042:	9a 83       	std	Y+2, r25	; 0x02
    3044:	89 83       	std	Y+1, r24	; 0x01
	if (ptr != '\0')
    3046:	89 81       	ldd	r24, Y+1	; 0x01
    3048:	9a 81       	ldd	r25, Y+2	; 0x02
    304a:	00 97       	sbiw	r24, 0x00	; 0
    304c:	31 f0       	breq	.+12     	; 0x305a <MCAL_Interrupt_EXIT_CallBack_2+0x22>
		Gptr2 = ptr;
    304e:	89 81       	ldd	r24, Y+1	; 0x01
    3050:	9a 81       	ldd	r25, Y+2	; 0x02
    3052:	90 93 8a 01 	sts	0x018A, r25
    3056:	80 93 89 01 	sts	0x0189, r24
}
    305a:	0f 90       	pop	r0
    305c:	0f 90       	pop	r0
    305e:	cf 91       	pop	r28
    3060:	df 91       	pop	r29
    3062:	08 95       	ret

00003064 <MCAL_Interrupt_EnableGIE>:

void MCAL_Interrupt_EnableGIE(u8 Loc_u8value) {
    3064:	df 93       	push	r29
    3066:	cf 93       	push	r28
    3068:	0f 92       	push	r0
    306a:	cd b7       	in	r28, 0x3d	; 61
    306c:	de b7       	in	r29, 0x3e	; 62
    306e:	89 83       	std	Y+1, r24	; 0x01
	if (Loc_u8value == Enable) {
    3070:	89 81       	ldd	r24, Y+1	; 0x01
    3072:	81 30       	cpi	r24, 0x01	; 1
    3074:	31 f4       	brne	.+12     	; 0x3082 <MCAL_Interrupt_EnableGIE+0x1e>
		MCAL_Interrupt_u8SetRegisterPin(Sreg, SREG_Pin, Pin_High);
    3076:	80 e0       	ldi	r24, 0x00	; 0
    3078:	67 e0       	ldi	r22, 0x07	; 7
    307a:	41 e0       	ldi	r20, 0x01	; 1
    307c:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <MCAL_Interrupt_u8SetRegisterPin>
    3080:	08 c0       	rjmp	.+16     	; 0x3092 <MCAL_Interrupt_EnableGIE+0x2e>
	} else if (Loc_u8value == Disable) {
    3082:	89 81       	ldd	r24, Y+1	; 0x01
    3084:	88 23       	and	r24, r24
    3086:	29 f4       	brne	.+10     	; 0x3092 <MCAL_Interrupt_EnableGIE+0x2e>
		MCAL_Interrupt_u8SetRegisterPin(Sreg, SREG_Pin, Pin_Low);
    3088:	80 e0       	ldi	r24, 0x00	; 0
    308a:	67 e0       	ldi	r22, 0x07	; 7
    308c:	40 e0       	ldi	r20, 0x00	; 0
    308e:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <MCAL_Interrupt_u8SetRegisterPin>
	}
}
    3092:	0f 90       	pop	r0
    3094:	cf 91       	pop	r28
    3096:	df 91       	pop	r29
    3098:	08 95       	ret

0000309a <MCAL_Interrupt_InterruptInit>:

void MCAL_Interrupt_InterruptInit() {
    309a:	df 93       	push	r29
    309c:	cf 93       	push	r28
    309e:	cd b7       	in	r28, 0x3d	; 61
    30a0:	de b7       	in	r29, 0x3e	; 62
	MCAL_Interrupt_u8SetRegisterPin(Sreg, SREG_Pin, Pin_High);
    30a2:	80 e0       	ldi	r24, 0x00	; 0
    30a4:	67 e0       	ldi	r22, 0x07	; 7
    30a6:	41 e0       	ldi	r20, 0x01	; 1
    30a8:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <MCAL_Interrupt_u8SetRegisterPin>
	MCAL_Interrupt_u8SetRegisterPin(Gicr, GICR_Pin6, Pin_High);
    30ac:	81 e0       	ldi	r24, 0x01	; 1
    30ae:	66 e0       	ldi	r22, 0x06	; 6
    30b0:	41 e0       	ldi	r20, 0x01	; 1
    30b2:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <MCAL_Interrupt_u8SetRegisterPin>
}
    30b6:	cf 91       	pop	r28
    30b8:	df 91       	pop	r29
    30ba:	08 95       	ret

000030bc <__vector_1>:

ISR(VECT_INT0) {
    30bc:	1f 92       	push	r1
    30be:	0f 92       	push	r0
    30c0:	0f b6       	in	r0, 0x3f	; 63
    30c2:	0f 92       	push	r0
    30c4:	11 24       	eor	r1, r1
    30c6:	2f 93       	push	r18
    30c8:	3f 93       	push	r19
    30ca:	4f 93       	push	r20
    30cc:	5f 93       	push	r21
    30ce:	6f 93       	push	r22
    30d0:	7f 93       	push	r23
    30d2:	8f 93       	push	r24
    30d4:	9f 93       	push	r25
    30d6:	af 93       	push	r26
    30d8:	bf 93       	push	r27
    30da:	ef 93       	push	r30
    30dc:	ff 93       	push	r31
    30de:	df 93       	push	r29
    30e0:	cf 93       	push	r28
    30e2:	cd b7       	in	r28, 0x3d	; 61
    30e4:	de b7       	in	r29, 0x3e	; 62
	if (Gptr0 != '\0')
    30e6:	80 91 85 01 	lds	r24, 0x0185
    30ea:	90 91 86 01 	lds	r25, 0x0186
    30ee:	00 97       	sbiw	r24, 0x00	; 0
    30f0:	29 f0       	breq	.+10     	; 0x30fc <__vector_1+0x40>
		Gptr0();
    30f2:	e0 91 85 01 	lds	r30, 0x0185
    30f6:	f0 91 86 01 	lds	r31, 0x0186
    30fa:	09 95       	icall
}
    30fc:	cf 91       	pop	r28
    30fe:	df 91       	pop	r29
    3100:	ff 91       	pop	r31
    3102:	ef 91       	pop	r30
    3104:	bf 91       	pop	r27
    3106:	af 91       	pop	r26
    3108:	9f 91       	pop	r25
    310a:	8f 91       	pop	r24
    310c:	7f 91       	pop	r23
    310e:	6f 91       	pop	r22
    3110:	5f 91       	pop	r21
    3112:	4f 91       	pop	r20
    3114:	3f 91       	pop	r19
    3116:	2f 91       	pop	r18
    3118:	0f 90       	pop	r0
    311a:	0f be       	out	0x3f, r0	; 63
    311c:	0f 90       	pop	r0
    311e:	1f 90       	pop	r1
    3120:	18 95       	reti

00003122 <__vector_2>:
ISR(VECT_INT1) {
    3122:	1f 92       	push	r1
    3124:	0f 92       	push	r0
    3126:	0f b6       	in	r0, 0x3f	; 63
    3128:	0f 92       	push	r0
    312a:	11 24       	eor	r1, r1
    312c:	2f 93       	push	r18
    312e:	3f 93       	push	r19
    3130:	4f 93       	push	r20
    3132:	5f 93       	push	r21
    3134:	6f 93       	push	r22
    3136:	7f 93       	push	r23
    3138:	8f 93       	push	r24
    313a:	9f 93       	push	r25
    313c:	af 93       	push	r26
    313e:	bf 93       	push	r27
    3140:	ef 93       	push	r30
    3142:	ff 93       	push	r31
    3144:	df 93       	push	r29
    3146:	cf 93       	push	r28
    3148:	cd b7       	in	r28, 0x3d	; 61
    314a:	de b7       	in	r29, 0x3e	; 62
	if (Gptr1 != '\0')
    314c:	80 91 87 01 	lds	r24, 0x0187
    3150:	90 91 88 01 	lds	r25, 0x0188
    3154:	00 97       	sbiw	r24, 0x00	; 0
    3156:	29 f0       	breq	.+10     	; 0x3162 <__vector_2+0x40>
		Gptr1();
    3158:	e0 91 87 01 	lds	r30, 0x0187
    315c:	f0 91 88 01 	lds	r31, 0x0188
    3160:	09 95       	icall
}
    3162:	cf 91       	pop	r28
    3164:	df 91       	pop	r29
    3166:	ff 91       	pop	r31
    3168:	ef 91       	pop	r30
    316a:	bf 91       	pop	r27
    316c:	af 91       	pop	r26
    316e:	9f 91       	pop	r25
    3170:	8f 91       	pop	r24
    3172:	7f 91       	pop	r23
    3174:	6f 91       	pop	r22
    3176:	5f 91       	pop	r21
    3178:	4f 91       	pop	r20
    317a:	3f 91       	pop	r19
    317c:	2f 91       	pop	r18
    317e:	0f 90       	pop	r0
    3180:	0f be       	out	0x3f, r0	; 63
    3182:	0f 90       	pop	r0
    3184:	1f 90       	pop	r1
    3186:	18 95       	reti

00003188 <__vector_3>:
ISR(VECT_INT2) {
    3188:	1f 92       	push	r1
    318a:	0f 92       	push	r0
    318c:	0f b6       	in	r0, 0x3f	; 63
    318e:	0f 92       	push	r0
    3190:	11 24       	eor	r1, r1
    3192:	2f 93       	push	r18
    3194:	3f 93       	push	r19
    3196:	4f 93       	push	r20
    3198:	5f 93       	push	r21
    319a:	6f 93       	push	r22
    319c:	7f 93       	push	r23
    319e:	8f 93       	push	r24
    31a0:	9f 93       	push	r25
    31a2:	af 93       	push	r26
    31a4:	bf 93       	push	r27
    31a6:	ef 93       	push	r30
    31a8:	ff 93       	push	r31
    31aa:	df 93       	push	r29
    31ac:	cf 93       	push	r28
    31ae:	cd b7       	in	r28, 0x3d	; 61
    31b0:	de b7       	in	r29, 0x3e	; 62
	if (Gptr2 != '\0')
    31b2:	80 91 89 01 	lds	r24, 0x0189
    31b6:	90 91 8a 01 	lds	r25, 0x018A
    31ba:	00 97       	sbiw	r24, 0x00	; 0
    31bc:	29 f0       	breq	.+10     	; 0x31c8 <__vector_3+0x40>
		Gptr2();
    31be:	e0 91 89 01 	lds	r30, 0x0189
    31c2:	f0 91 8a 01 	lds	r31, 0x018A
    31c6:	09 95       	icall
}
    31c8:	cf 91       	pop	r28
    31ca:	df 91       	pop	r29
    31cc:	ff 91       	pop	r31
    31ce:	ef 91       	pop	r30
    31d0:	bf 91       	pop	r27
    31d2:	af 91       	pop	r26
    31d4:	9f 91       	pop	r25
    31d6:	8f 91       	pop	r24
    31d8:	7f 91       	pop	r23
    31da:	6f 91       	pop	r22
    31dc:	5f 91       	pop	r21
    31de:	4f 91       	pop	r20
    31e0:	3f 91       	pop	r19
    31e2:	2f 91       	pop	r18
    31e4:	0f 90       	pop	r0
    31e6:	0f be       	out	0x3f, r0	; 63
    31e8:	0f 90       	pop	r0
    31ea:	1f 90       	pop	r1
    31ec:	18 95       	reti

000031ee <MCAL_DIO_u8SetPortDirection>:
 *      Author: Mohamed
 */

#include "DIO.h"

STD_Type MCAL_DIO_u8SetPortDirection(u8 Loc_u8PortID, u8 Loc_u8PortDirection) {
    31ee:	df 93       	push	r29
    31f0:	cf 93       	push	r28
    31f2:	00 d0       	rcall	.+0      	; 0x31f4 <MCAL_DIO_u8SetPortDirection+0x6>
    31f4:	0f 92       	push	r0
    31f6:	cd b7       	in	r28, 0x3d	; 61
    31f8:	de b7       	in	r29, 0x3e	; 62
    31fa:	8a 83       	std	Y+2, r24	; 0x02
    31fc:	6b 83       	std	Y+3, r22	; 0x03
	u8 Loc_u8Return_Value = E_NOT_OK;
    31fe:	81 e0       	ldi	r24, 0x01	; 1
    3200:	89 83       	std	Y+1, r24	; 0x01
	if (Loc_u8PortID <= PortD && Loc_u8PortDirection <= PORT_OUTPUT) {
    3202:	8a 81       	ldd	r24, Y+2	; 0x02
    3204:	84 30       	cpi	r24, 0x04	; 4
    3206:	08 f0       	brcs	.+2      	; 0x320a <MCAL_DIO_u8SetPortDirection+0x1c>
    3208:	6e c0       	rjmp	.+220    	; 0x32e6 <MCAL_DIO_u8SetPortDirection+0xf8>
		if (Loc_u8PortDirection == PORT_OUTPUT) {
    320a:	8b 81       	ldd	r24, Y+3	; 0x03
    320c:	8f 3f       	cpi	r24, 0xFF	; 255
    320e:	29 f5       	brne	.+74     	; 0x325a <MCAL_DIO_u8SetPortDirection+0x6c>
			if (Loc_u8PortID == PortA) {
    3210:	8a 81       	ldd	r24, Y+2	; 0x02
    3212:	88 23       	and	r24, r24
    3214:	31 f4       	brne	.+12     	; 0x3222 <MCAL_DIO_u8SetPortDirection+0x34>
				DDRA = PORT_OUTPUT;
    3216:	ea e3       	ldi	r30, 0x3A	; 58
    3218:	f0 e0       	ldi	r31, 0x00	; 0
    321a:	8f ef       	ldi	r24, 0xFF	; 255
    321c:	80 83       	st	Z, r24
				Loc_u8Return_Value = E_OK;
    321e:	19 82       	std	Y+1, r1	; 0x01
    3220:	62 c0       	rjmp	.+196    	; 0x32e6 <MCAL_DIO_u8SetPortDirection+0xf8>
			} else if (Loc_u8PortID == PortB) {
    3222:	8a 81       	ldd	r24, Y+2	; 0x02
    3224:	81 30       	cpi	r24, 0x01	; 1
    3226:	31 f4       	brne	.+12     	; 0x3234 <MCAL_DIO_u8SetPortDirection+0x46>
				DDRB = PORT_OUTPUT;
    3228:	e7 e3       	ldi	r30, 0x37	; 55
    322a:	f0 e0       	ldi	r31, 0x00	; 0
    322c:	8f ef       	ldi	r24, 0xFF	; 255
    322e:	80 83       	st	Z, r24
				Loc_u8Return_Value = E_OK;
    3230:	19 82       	std	Y+1, r1	; 0x01
    3232:	59 c0       	rjmp	.+178    	; 0x32e6 <MCAL_DIO_u8SetPortDirection+0xf8>
			} else if (Loc_u8PortID == PortC) {
    3234:	8a 81       	ldd	r24, Y+2	; 0x02
    3236:	82 30       	cpi	r24, 0x02	; 2
    3238:	31 f4       	brne	.+12     	; 0x3246 <MCAL_DIO_u8SetPortDirection+0x58>
				DDRC = PORT_OUTPUT;
    323a:	e4 e3       	ldi	r30, 0x34	; 52
    323c:	f0 e0       	ldi	r31, 0x00	; 0
    323e:	8f ef       	ldi	r24, 0xFF	; 255
    3240:	80 83       	st	Z, r24
				Loc_u8Return_Value = E_OK;
    3242:	19 82       	std	Y+1, r1	; 0x01
    3244:	50 c0       	rjmp	.+160    	; 0x32e6 <MCAL_DIO_u8SetPortDirection+0xf8>
			} else if (Loc_u8PortID == PortD) {
    3246:	8a 81       	ldd	r24, Y+2	; 0x02
    3248:	83 30       	cpi	r24, 0x03	; 3
    324a:	09 f0       	breq	.+2      	; 0x324e <MCAL_DIO_u8SetPortDirection+0x60>
    324c:	4c c0       	rjmp	.+152    	; 0x32e6 <MCAL_DIO_u8SetPortDirection+0xf8>
				DDRD = PORT_OUTPUT;
    324e:	e1 e3       	ldi	r30, 0x31	; 49
    3250:	f0 e0       	ldi	r31, 0x00	; 0
    3252:	8f ef       	ldi	r24, 0xFF	; 255
    3254:	80 83       	st	Z, r24
				Loc_u8Return_Value = E_OK;
    3256:	19 82       	std	Y+1, r1	; 0x01
    3258:	46 c0       	rjmp	.+140    	; 0x32e6 <MCAL_DIO_u8SetPortDirection+0xf8>
			} else {
				//Do Nothing
			}
		} else if (Loc_u8PortDirection == PORT_INPUT) {
    325a:	8b 81       	ldd	r24, Y+3	; 0x03
    325c:	88 23       	and	r24, r24
    325e:	01 f5       	brne	.+64     	; 0x32a0 <MCAL_DIO_u8SetPortDirection+0xb2>
			if (Loc_u8PortID == PortA) {
    3260:	8a 81       	ldd	r24, Y+2	; 0x02
    3262:	88 23       	and	r24, r24
    3264:	29 f4       	brne	.+10     	; 0x3270 <MCAL_DIO_u8SetPortDirection+0x82>
				DDRA = PORT_INPUT;
    3266:	ea e3       	ldi	r30, 0x3A	; 58
    3268:	f0 e0       	ldi	r31, 0x00	; 0
    326a:	10 82       	st	Z, r1
				Loc_u8Return_Value = E_OK;
    326c:	19 82       	std	Y+1, r1	; 0x01
    326e:	3b c0       	rjmp	.+118    	; 0x32e6 <MCAL_DIO_u8SetPortDirection+0xf8>
			} else if (Loc_u8PortID == PortB) {
    3270:	8a 81       	ldd	r24, Y+2	; 0x02
    3272:	81 30       	cpi	r24, 0x01	; 1
    3274:	29 f4       	brne	.+10     	; 0x3280 <MCAL_DIO_u8SetPortDirection+0x92>
				DDRB = PORT_INPUT;
    3276:	e7 e3       	ldi	r30, 0x37	; 55
    3278:	f0 e0       	ldi	r31, 0x00	; 0
    327a:	10 82       	st	Z, r1
				Loc_u8Return_Value = E_OK;
    327c:	19 82       	std	Y+1, r1	; 0x01
    327e:	33 c0       	rjmp	.+102    	; 0x32e6 <MCAL_DIO_u8SetPortDirection+0xf8>
			} else if (Loc_u8PortID == PortC) {
    3280:	8a 81       	ldd	r24, Y+2	; 0x02
    3282:	82 30       	cpi	r24, 0x02	; 2
    3284:	29 f4       	brne	.+10     	; 0x3290 <MCAL_DIO_u8SetPortDirection+0xa2>
				DDRC = PORT_INPUT;
    3286:	e4 e3       	ldi	r30, 0x34	; 52
    3288:	f0 e0       	ldi	r31, 0x00	; 0
    328a:	10 82       	st	Z, r1
				Loc_u8Return_Value = E_OK;
    328c:	19 82       	std	Y+1, r1	; 0x01
    328e:	2b c0       	rjmp	.+86     	; 0x32e6 <MCAL_DIO_u8SetPortDirection+0xf8>
			} else if (Loc_u8PortID == PortD) {
    3290:	8a 81       	ldd	r24, Y+2	; 0x02
    3292:	83 30       	cpi	r24, 0x03	; 3
    3294:	41 f5       	brne	.+80     	; 0x32e6 <MCAL_DIO_u8SetPortDirection+0xf8>
				DDRD = PORT_INPUT;
    3296:	e1 e3       	ldi	r30, 0x31	; 49
    3298:	f0 e0       	ldi	r31, 0x00	; 0
    329a:	10 82       	st	Z, r1
				Loc_u8Return_Value = E_OK;
    329c:	19 82       	std	Y+1, r1	; 0x01
    329e:	23 c0       	rjmp	.+70     	; 0x32e6 <MCAL_DIO_u8SetPortDirection+0xf8>
			} else {
				//Do Nothing
			}
		} else {
			if (Loc_u8PortID == PortA) {
    32a0:	8a 81       	ldd	r24, Y+2	; 0x02
    32a2:	88 23       	and	r24, r24
    32a4:	31 f4       	brne	.+12     	; 0x32b2 <MCAL_DIO_u8SetPortDirection+0xc4>
				DDRA = Loc_u8PortDirection;
    32a6:	ea e3       	ldi	r30, 0x3A	; 58
    32a8:	f0 e0       	ldi	r31, 0x00	; 0
    32aa:	8b 81       	ldd	r24, Y+3	; 0x03
    32ac:	80 83       	st	Z, r24
				Loc_u8Return_Value = E_OK;
    32ae:	19 82       	std	Y+1, r1	; 0x01
    32b0:	1a c0       	rjmp	.+52     	; 0x32e6 <MCAL_DIO_u8SetPortDirection+0xf8>
			} else if (Loc_u8PortID == PortB) {
    32b2:	8a 81       	ldd	r24, Y+2	; 0x02
    32b4:	81 30       	cpi	r24, 0x01	; 1
    32b6:	31 f4       	brne	.+12     	; 0x32c4 <MCAL_DIO_u8SetPortDirection+0xd6>
				DDRB = Loc_u8PortDirection;
    32b8:	e7 e3       	ldi	r30, 0x37	; 55
    32ba:	f0 e0       	ldi	r31, 0x00	; 0
    32bc:	8b 81       	ldd	r24, Y+3	; 0x03
    32be:	80 83       	st	Z, r24
				Loc_u8Return_Value = E_OK;
    32c0:	19 82       	std	Y+1, r1	; 0x01
    32c2:	11 c0       	rjmp	.+34     	; 0x32e6 <MCAL_DIO_u8SetPortDirection+0xf8>
			} else if (Loc_u8PortID == PortC) {
    32c4:	8a 81       	ldd	r24, Y+2	; 0x02
    32c6:	82 30       	cpi	r24, 0x02	; 2
    32c8:	31 f4       	brne	.+12     	; 0x32d6 <MCAL_DIO_u8SetPortDirection+0xe8>
				DDRC = Loc_u8PortDirection;
    32ca:	e4 e3       	ldi	r30, 0x34	; 52
    32cc:	f0 e0       	ldi	r31, 0x00	; 0
    32ce:	8b 81       	ldd	r24, Y+3	; 0x03
    32d0:	80 83       	st	Z, r24
				Loc_u8Return_Value = E_OK;
    32d2:	19 82       	std	Y+1, r1	; 0x01
    32d4:	08 c0       	rjmp	.+16     	; 0x32e6 <MCAL_DIO_u8SetPortDirection+0xf8>
			} else if (Loc_u8PortID == PortD) {
    32d6:	8a 81       	ldd	r24, Y+2	; 0x02
    32d8:	83 30       	cpi	r24, 0x03	; 3
    32da:	29 f4       	brne	.+10     	; 0x32e6 <MCAL_DIO_u8SetPortDirection+0xf8>
				DDRD = Loc_u8PortDirection;
    32dc:	e1 e3       	ldi	r30, 0x31	; 49
    32de:	f0 e0       	ldi	r31, 0x00	; 0
    32e0:	8b 81       	ldd	r24, Y+3	; 0x03
    32e2:	80 83       	st	Z, r24
				Loc_u8Return_Value = E_OK;
    32e4:	19 82       	std	Y+1, r1	; 0x01
			}
		}
	} else {
		//Do Nothing
	}
	return Loc_u8Return_Value;
    32e6:	89 81       	ldd	r24, Y+1	; 0x01
}
    32e8:	0f 90       	pop	r0
    32ea:	0f 90       	pop	r0
    32ec:	0f 90       	pop	r0
    32ee:	cf 91       	pop	r28
    32f0:	df 91       	pop	r29
    32f2:	08 95       	ret

000032f4 <MCAL_DIO_u8SetPinDirection>:

STD_Type MCAL_DIO_u8SetPinDirection(u8 Loc_u8PortID, u8 Loc_u8PinID,
		u8 Loc_u8PinDirection) {
    32f4:	df 93       	push	r29
    32f6:	cf 93       	push	r28
    32f8:	00 d0       	rcall	.+0      	; 0x32fa <MCAL_DIO_u8SetPinDirection+0x6>
    32fa:	00 d0       	rcall	.+0      	; 0x32fc <MCAL_DIO_u8SetPinDirection+0x8>
    32fc:	cd b7       	in	r28, 0x3d	; 61
    32fe:	de b7       	in	r29, 0x3e	; 62
    3300:	8a 83       	std	Y+2, r24	; 0x02
    3302:	6b 83       	std	Y+3, r22	; 0x03
    3304:	4c 83       	std	Y+4, r20	; 0x04
	u8 Loc_u8Return_Value = E_NOT_OK;
    3306:	81 e0       	ldi	r24, 0x01	; 1
    3308:	89 83       	std	Y+1, r24	; 0x01
	if (Loc_u8PortID <= PortD && Loc_u8PinID <= Num_Of_Pins
    330a:	8a 81       	ldd	r24, Y+2	; 0x02
    330c:	84 30       	cpi	r24, 0x04	; 4
    330e:	08 f0       	brcs	.+2      	; 0x3312 <MCAL_DIO_u8SetPinDirection+0x1e>
    3310:	d4 c0       	rjmp	.+424    	; 0x34ba <MCAL_DIO_u8SetPinDirection+0x1c6>
    3312:	8b 81       	ldd	r24, Y+3	; 0x03
    3314:	88 30       	cpi	r24, 0x08	; 8
    3316:	08 f0       	brcs	.+2      	; 0x331a <MCAL_DIO_u8SetPinDirection+0x26>
    3318:	d0 c0       	rjmp	.+416    	; 0x34ba <MCAL_DIO_u8SetPinDirection+0x1c6>
    331a:	8c 81       	ldd	r24, Y+4	; 0x04
    331c:	82 30       	cpi	r24, 0x02	; 2
    331e:	08 f0       	brcs	.+2      	; 0x3322 <MCAL_DIO_u8SetPinDirection+0x2e>
    3320:	cc c0       	rjmp	.+408    	; 0x34ba <MCAL_DIO_u8SetPinDirection+0x1c6>
			&& Loc_u8PinDirection <= Pin_High) {
		if (Loc_u8PinDirection == Pin_High) {
    3322:	8c 81       	ldd	r24, Y+4	; 0x04
    3324:	81 30       	cpi	r24, 0x01	; 1
    3326:	09 f0       	breq	.+2      	; 0x332a <MCAL_DIO_u8SetPinDirection+0x36>
    3328:	61 c0       	rjmp	.+194    	; 0x33ec <MCAL_DIO_u8SetPinDirection+0xf8>
			if (Loc_u8PortID == PortA) {
    332a:	8a 81       	ldd	r24, Y+2	; 0x02
    332c:	88 23       	and	r24, r24
    332e:	a9 f4       	brne	.+42     	; 0x335a <MCAL_DIO_u8SetPinDirection+0x66>
				SET_BIT(DDRA, Loc_u8PinID);
    3330:	aa e3       	ldi	r26, 0x3A	; 58
    3332:	b0 e0       	ldi	r27, 0x00	; 0
    3334:	ea e3       	ldi	r30, 0x3A	; 58
    3336:	f0 e0       	ldi	r31, 0x00	; 0
    3338:	80 81       	ld	r24, Z
    333a:	48 2f       	mov	r20, r24
    333c:	8b 81       	ldd	r24, Y+3	; 0x03
    333e:	28 2f       	mov	r18, r24
    3340:	30 e0       	ldi	r19, 0x00	; 0
    3342:	81 e0       	ldi	r24, 0x01	; 1
    3344:	90 e0       	ldi	r25, 0x00	; 0
    3346:	02 2e       	mov	r0, r18
    3348:	02 c0       	rjmp	.+4      	; 0x334e <MCAL_DIO_u8SetPinDirection+0x5a>
    334a:	88 0f       	add	r24, r24
    334c:	99 1f       	adc	r25, r25
    334e:	0a 94       	dec	r0
    3350:	e2 f7       	brpl	.-8      	; 0x334a <MCAL_DIO_u8SetPinDirection+0x56>
    3352:	84 2b       	or	r24, r20
    3354:	8c 93       	st	X, r24
				Loc_u8Return_Value = E_OK;
    3356:	19 82       	std	Y+1, r1	; 0x01
    3358:	b0 c0       	rjmp	.+352    	; 0x34ba <MCAL_DIO_u8SetPinDirection+0x1c6>
			} else if (Loc_u8PortID == PortB) {
    335a:	8a 81       	ldd	r24, Y+2	; 0x02
    335c:	81 30       	cpi	r24, 0x01	; 1
    335e:	a9 f4       	brne	.+42     	; 0x338a <MCAL_DIO_u8SetPinDirection+0x96>
				SET_BIT(DDRB, Loc_u8PinID);
    3360:	a7 e3       	ldi	r26, 0x37	; 55
    3362:	b0 e0       	ldi	r27, 0x00	; 0
    3364:	e7 e3       	ldi	r30, 0x37	; 55
    3366:	f0 e0       	ldi	r31, 0x00	; 0
    3368:	80 81       	ld	r24, Z
    336a:	48 2f       	mov	r20, r24
    336c:	8b 81       	ldd	r24, Y+3	; 0x03
    336e:	28 2f       	mov	r18, r24
    3370:	30 e0       	ldi	r19, 0x00	; 0
    3372:	81 e0       	ldi	r24, 0x01	; 1
    3374:	90 e0       	ldi	r25, 0x00	; 0
    3376:	02 2e       	mov	r0, r18
    3378:	02 c0       	rjmp	.+4      	; 0x337e <MCAL_DIO_u8SetPinDirection+0x8a>
    337a:	88 0f       	add	r24, r24
    337c:	99 1f       	adc	r25, r25
    337e:	0a 94       	dec	r0
    3380:	e2 f7       	brpl	.-8      	; 0x337a <MCAL_DIO_u8SetPinDirection+0x86>
    3382:	84 2b       	or	r24, r20
    3384:	8c 93       	st	X, r24
				Loc_u8Return_Value = E_OK;
    3386:	19 82       	std	Y+1, r1	; 0x01
    3388:	98 c0       	rjmp	.+304    	; 0x34ba <MCAL_DIO_u8SetPinDirection+0x1c6>
			} else if (Loc_u8PortID == PortC) {
    338a:	8a 81       	ldd	r24, Y+2	; 0x02
    338c:	82 30       	cpi	r24, 0x02	; 2
    338e:	a9 f4       	brne	.+42     	; 0x33ba <MCAL_DIO_u8SetPinDirection+0xc6>
				SET_BIT(DDRC, Loc_u8PinID);
    3390:	a4 e3       	ldi	r26, 0x34	; 52
    3392:	b0 e0       	ldi	r27, 0x00	; 0
    3394:	e4 e3       	ldi	r30, 0x34	; 52
    3396:	f0 e0       	ldi	r31, 0x00	; 0
    3398:	80 81       	ld	r24, Z
    339a:	48 2f       	mov	r20, r24
    339c:	8b 81       	ldd	r24, Y+3	; 0x03
    339e:	28 2f       	mov	r18, r24
    33a0:	30 e0       	ldi	r19, 0x00	; 0
    33a2:	81 e0       	ldi	r24, 0x01	; 1
    33a4:	90 e0       	ldi	r25, 0x00	; 0
    33a6:	02 2e       	mov	r0, r18
    33a8:	02 c0       	rjmp	.+4      	; 0x33ae <MCAL_DIO_u8SetPinDirection+0xba>
    33aa:	88 0f       	add	r24, r24
    33ac:	99 1f       	adc	r25, r25
    33ae:	0a 94       	dec	r0
    33b0:	e2 f7       	brpl	.-8      	; 0x33aa <MCAL_DIO_u8SetPinDirection+0xb6>
    33b2:	84 2b       	or	r24, r20
    33b4:	8c 93       	st	X, r24
				Loc_u8Return_Value = E_OK;
    33b6:	19 82       	std	Y+1, r1	; 0x01
    33b8:	80 c0       	rjmp	.+256    	; 0x34ba <MCAL_DIO_u8SetPinDirection+0x1c6>
			} else if (Loc_u8PortID == PortD) {
    33ba:	8a 81       	ldd	r24, Y+2	; 0x02
    33bc:	83 30       	cpi	r24, 0x03	; 3
    33be:	09 f0       	breq	.+2      	; 0x33c2 <MCAL_DIO_u8SetPinDirection+0xce>
    33c0:	7c c0       	rjmp	.+248    	; 0x34ba <MCAL_DIO_u8SetPinDirection+0x1c6>
				SET_BIT(DDRD, Loc_u8PinID);
    33c2:	a1 e3       	ldi	r26, 0x31	; 49
    33c4:	b0 e0       	ldi	r27, 0x00	; 0
    33c6:	e1 e3       	ldi	r30, 0x31	; 49
    33c8:	f0 e0       	ldi	r31, 0x00	; 0
    33ca:	80 81       	ld	r24, Z
    33cc:	48 2f       	mov	r20, r24
    33ce:	8b 81       	ldd	r24, Y+3	; 0x03
    33d0:	28 2f       	mov	r18, r24
    33d2:	30 e0       	ldi	r19, 0x00	; 0
    33d4:	81 e0       	ldi	r24, 0x01	; 1
    33d6:	90 e0       	ldi	r25, 0x00	; 0
    33d8:	02 2e       	mov	r0, r18
    33da:	02 c0       	rjmp	.+4      	; 0x33e0 <MCAL_DIO_u8SetPinDirection+0xec>
    33dc:	88 0f       	add	r24, r24
    33de:	99 1f       	adc	r25, r25
    33e0:	0a 94       	dec	r0
    33e2:	e2 f7       	brpl	.-8      	; 0x33dc <MCAL_DIO_u8SetPinDirection+0xe8>
    33e4:	84 2b       	or	r24, r20
    33e6:	8c 93       	st	X, r24
				Loc_u8Return_Value = E_OK;
    33e8:	19 82       	std	Y+1, r1	; 0x01
    33ea:	67 c0       	rjmp	.+206    	; 0x34ba <MCAL_DIO_u8SetPinDirection+0x1c6>
			} else {
				//Do Nothing
			}
		} else if (Loc_u8PinDirection == Pin_Low) {
    33ec:	8c 81       	ldd	r24, Y+4	; 0x04
    33ee:	88 23       	and	r24, r24
    33f0:	09 f0       	breq	.+2      	; 0x33f4 <MCAL_DIO_u8SetPinDirection+0x100>
    33f2:	63 c0       	rjmp	.+198    	; 0x34ba <MCAL_DIO_u8SetPinDirection+0x1c6>
			if (Loc_u8PortID == PortA) {
    33f4:	8a 81       	ldd	r24, Y+2	; 0x02
    33f6:	88 23       	and	r24, r24
    33f8:	b1 f4       	brne	.+44     	; 0x3426 <MCAL_DIO_u8SetPinDirection+0x132>
				CLR_BIT(DDRA, Loc_u8PinID);
    33fa:	aa e3       	ldi	r26, 0x3A	; 58
    33fc:	b0 e0       	ldi	r27, 0x00	; 0
    33fe:	ea e3       	ldi	r30, 0x3A	; 58
    3400:	f0 e0       	ldi	r31, 0x00	; 0
    3402:	80 81       	ld	r24, Z
    3404:	48 2f       	mov	r20, r24
    3406:	8b 81       	ldd	r24, Y+3	; 0x03
    3408:	28 2f       	mov	r18, r24
    340a:	30 e0       	ldi	r19, 0x00	; 0
    340c:	81 e0       	ldi	r24, 0x01	; 1
    340e:	90 e0       	ldi	r25, 0x00	; 0
    3410:	02 2e       	mov	r0, r18
    3412:	02 c0       	rjmp	.+4      	; 0x3418 <MCAL_DIO_u8SetPinDirection+0x124>
    3414:	88 0f       	add	r24, r24
    3416:	99 1f       	adc	r25, r25
    3418:	0a 94       	dec	r0
    341a:	e2 f7       	brpl	.-8      	; 0x3414 <MCAL_DIO_u8SetPinDirection+0x120>
    341c:	80 95       	com	r24
    341e:	84 23       	and	r24, r20
    3420:	8c 93       	st	X, r24
				Loc_u8Return_Value = E_OK;
    3422:	19 82       	std	Y+1, r1	; 0x01
    3424:	4a c0       	rjmp	.+148    	; 0x34ba <MCAL_DIO_u8SetPinDirection+0x1c6>
			} else if (Loc_u8PortID == PortB) {
    3426:	8a 81       	ldd	r24, Y+2	; 0x02
    3428:	81 30       	cpi	r24, 0x01	; 1
    342a:	b1 f4       	brne	.+44     	; 0x3458 <MCAL_DIO_u8SetPinDirection+0x164>
				CLR_BIT(DDRB, Loc_u8PinID);
    342c:	a7 e3       	ldi	r26, 0x37	; 55
    342e:	b0 e0       	ldi	r27, 0x00	; 0
    3430:	e7 e3       	ldi	r30, 0x37	; 55
    3432:	f0 e0       	ldi	r31, 0x00	; 0
    3434:	80 81       	ld	r24, Z
    3436:	48 2f       	mov	r20, r24
    3438:	8b 81       	ldd	r24, Y+3	; 0x03
    343a:	28 2f       	mov	r18, r24
    343c:	30 e0       	ldi	r19, 0x00	; 0
    343e:	81 e0       	ldi	r24, 0x01	; 1
    3440:	90 e0       	ldi	r25, 0x00	; 0
    3442:	02 2e       	mov	r0, r18
    3444:	02 c0       	rjmp	.+4      	; 0x344a <MCAL_DIO_u8SetPinDirection+0x156>
    3446:	88 0f       	add	r24, r24
    3448:	99 1f       	adc	r25, r25
    344a:	0a 94       	dec	r0
    344c:	e2 f7       	brpl	.-8      	; 0x3446 <MCAL_DIO_u8SetPinDirection+0x152>
    344e:	80 95       	com	r24
    3450:	84 23       	and	r24, r20
    3452:	8c 93       	st	X, r24
				Loc_u8Return_Value = E_OK;
    3454:	19 82       	std	Y+1, r1	; 0x01
    3456:	31 c0       	rjmp	.+98     	; 0x34ba <MCAL_DIO_u8SetPinDirection+0x1c6>
			} else if (Loc_u8PortID == PortC) {
    3458:	8a 81       	ldd	r24, Y+2	; 0x02
    345a:	82 30       	cpi	r24, 0x02	; 2
    345c:	b1 f4       	brne	.+44     	; 0x348a <MCAL_DIO_u8SetPinDirection+0x196>
				CLR_BIT(DDRC, Loc_u8PinID);
    345e:	a4 e3       	ldi	r26, 0x34	; 52
    3460:	b0 e0       	ldi	r27, 0x00	; 0
    3462:	e4 e3       	ldi	r30, 0x34	; 52
    3464:	f0 e0       	ldi	r31, 0x00	; 0
    3466:	80 81       	ld	r24, Z
    3468:	48 2f       	mov	r20, r24
    346a:	8b 81       	ldd	r24, Y+3	; 0x03
    346c:	28 2f       	mov	r18, r24
    346e:	30 e0       	ldi	r19, 0x00	; 0
    3470:	81 e0       	ldi	r24, 0x01	; 1
    3472:	90 e0       	ldi	r25, 0x00	; 0
    3474:	02 2e       	mov	r0, r18
    3476:	02 c0       	rjmp	.+4      	; 0x347c <MCAL_DIO_u8SetPinDirection+0x188>
    3478:	88 0f       	add	r24, r24
    347a:	99 1f       	adc	r25, r25
    347c:	0a 94       	dec	r0
    347e:	e2 f7       	brpl	.-8      	; 0x3478 <MCAL_DIO_u8SetPinDirection+0x184>
    3480:	80 95       	com	r24
    3482:	84 23       	and	r24, r20
    3484:	8c 93       	st	X, r24
				Loc_u8Return_Value = E_OK;
    3486:	19 82       	std	Y+1, r1	; 0x01
    3488:	18 c0       	rjmp	.+48     	; 0x34ba <MCAL_DIO_u8SetPinDirection+0x1c6>
			} else if (Loc_u8PortID == PortD) {
    348a:	8a 81       	ldd	r24, Y+2	; 0x02
    348c:	83 30       	cpi	r24, 0x03	; 3
    348e:	a9 f4       	brne	.+42     	; 0x34ba <MCAL_DIO_u8SetPinDirection+0x1c6>
				CLR_BIT(DDRD, Loc_u8PinID);
    3490:	a1 e3       	ldi	r26, 0x31	; 49
    3492:	b0 e0       	ldi	r27, 0x00	; 0
    3494:	e1 e3       	ldi	r30, 0x31	; 49
    3496:	f0 e0       	ldi	r31, 0x00	; 0
    3498:	80 81       	ld	r24, Z
    349a:	48 2f       	mov	r20, r24
    349c:	8b 81       	ldd	r24, Y+3	; 0x03
    349e:	28 2f       	mov	r18, r24
    34a0:	30 e0       	ldi	r19, 0x00	; 0
    34a2:	81 e0       	ldi	r24, 0x01	; 1
    34a4:	90 e0       	ldi	r25, 0x00	; 0
    34a6:	02 2e       	mov	r0, r18
    34a8:	02 c0       	rjmp	.+4      	; 0x34ae <MCAL_DIO_u8SetPinDirection+0x1ba>
    34aa:	88 0f       	add	r24, r24
    34ac:	99 1f       	adc	r25, r25
    34ae:	0a 94       	dec	r0
    34b0:	e2 f7       	brpl	.-8      	; 0x34aa <MCAL_DIO_u8SetPinDirection+0x1b6>
    34b2:	80 95       	com	r24
    34b4:	84 23       	and	r24, r20
    34b6:	8c 93       	st	X, r24
				Loc_u8Return_Value = E_OK;
    34b8:	19 82       	std	Y+1, r1	; 0x01
			//Do Nothing
		}
	} else {
		//Do Nothing
	}
	return Loc_u8Return_Value;
    34ba:	89 81       	ldd	r24, Y+1	; 0x01

}
    34bc:	0f 90       	pop	r0
    34be:	0f 90       	pop	r0
    34c0:	0f 90       	pop	r0
    34c2:	0f 90       	pop	r0
    34c4:	cf 91       	pop	r28
    34c6:	df 91       	pop	r29
    34c8:	08 95       	ret

000034ca <MCAL_DIO_u8SetPortValue>:

STD_Type MCAL_DIO_u8SetPortValue(u8 Loc_u8PortID, u8 Loc_u8PortValue) {
    34ca:	df 93       	push	r29
    34cc:	cf 93       	push	r28
    34ce:	00 d0       	rcall	.+0      	; 0x34d0 <MCAL_DIO_u8SetPortValue+0x6>
    34d0:	0f 92       	push	r0
    34d2:	cd b7       	in	r28, 0x3d	; 61
    34d4:	de b7       	in	r29, 0x3e	; 62
    34d6:	8a 83       	std	Y+2, r24	; 0x02
    34d8:	6b 83       	std	Y+3, r22	; 0x03
	u8 Loc_u8Return_Value = E_NOT_OK;
    34da:	81 e0       	ldi	r24, 0x01	; 1
    34dc:	89 83       	std	Y+1, r24	; 0x01
	if (Loc_u8PortID <= PortD && Loc_u8PortValue <= PORT_OUTPUT) {
    34de:	8a 81       	ldd	r24, Y+2	; 0x02
    34e0:	84 30       	cpi	r24, 0x04	; 4
    34e2:	08 f0       	brcs	.+2      	; 0x34e6 <MCAL_DIO_u8SetPortValue+0x1c>
    34e4:	6e c0       	rjmp	.+220    	; 0x35c2 <MCAL_DIO_u8SetPortValue+0xf8>
		if (Loc_u8PortValue == PORT_OUTPUT) {
    34e6:	8b 81       	ldd	r24, Y+3	; 0x03
    34e8:	8f 3f       	cpi	r24, 0xFF	; 255
    34ea:	29 f5       	brne	.+74     	; 0x3536 <MCAL_DIO_u8SetPortValue+0x6c>
			if (Loc_u8PortID == PortA) {
    34ec:	8a 81       	ldd	r24, Y+2	; 0x02
    34ee:	88 23       	and	r24, r24
    34f0:	31 f4       	brne	.+12     	; 0x34fe <MCAL_DIO_u8SetPortValue+0x34>
				PORTA = PORT_OUTPUT;
    34f2:	eb e3       	ldi	r30, 0x3B	; 59
    34f4:	f0 e0       	ldi	r31, 0x00	; 0
    34f6:	8f ef       	ldi	r24, 0xFF	; 255
    34f8:	80 83       	st	Z, r24
				Loc_u8Return_Value = E_OK;
    34fa:	19 82       	std	Y+1, r1	; 0x01
    34fc:	62 c0       	rjmp	.+196    	; 0x35c2 <MCAL_DIO_u8SetPortValue+0xf8>
			} else if (Loc_u8PortID == PortB) {
    34fe:	8a 81       	ldd	r24, Y+2	; 0x02
    3500:	81 30       	cpi	r24, 0x01	; 1
    3502:	31 f4       	brne	.+12     	; 0x3510 <MCAL_DIO_u8SetPortValue+0x46>
				PORTB = PORT_OUTPUT;
    3504:	e8 e3       	ldi	r30, 0x38	; 56
    3506:	f0 e0       	ldi	r31, 0x00	; 0
    3508:	8f ef       	ldi	r24, 0xFF	; 255
    350a:	80 83       	st	Z, r24
				Loc_u8Return_Value = E_OK;
    350c:	19 82       	std	Y+1, r1	; 0x01
    350e:	59 c0       	rjmp	.+178    	; 0x35c2 <MCAL_DIO_u8SetPortValue+0xf8>
			} else if (Loc_u8PortID == PortC) {
    3510:	8a 81       	ldd	r24, Y+2	; 0x02
    3512:	82 30       	cpi	r24, 0x02	; 2
    3514:	31 f4       	brne	.+12     	; 0x3522 <MCAL_DIO_u8SetPortValue+0x58>
				PORTC = PORT_OUTPUT;
    3516:	e5 e3       	ldi	r30, 0x35	; 53
    3518:	f0 e0       	ldi	r31, 0x00	; 0
    351a:	8f ef       	ldi	r24, 0xFF	; 255
    351c:	80 83       	st	Z, r24
				Loc_u8Return_Value = E_OK;
    351e:	19 82       	std	Y+1, r1	; 0x01
    3520:	50 c0       	rjmp	.+160    	; 0x35c2 <MCAL_DIO_u8SetPortValue+0xf8>
			} else if (Loc_u8PortID == PortD) {
    3522:	8a 81       	ldd	r24, Y+2	; 0x02
    3524:	83 30       	cpi	r24, 0x03	; 3
    3526:	09 f0       	breq	.+2      	; 0x352a <MCAL_DIO_u8SetPortValue+0x60>
    3528:	4c c0       	rjmp	.+152    	; 0x35c2 <MCAL_DIO_u8SetPortValue+0xf8>
				PORTD = PORT_OUTPUT;
    352a:	e2 e3       	ldi	r30, 0x32	; 50
    352c:	f0 e0       	ldi	r31, 0x00	; 0
    352e:	8f ef       	ldi	r24, 0xFF	; 255
    3530:	80 83       	st	Z, r24
				Loc_u8Return_Value = E_OK;
    3532:	19 82       	std	Y+1, r1	; 0x01
    3534:	46 c0       	rjmp	.+140    	; 0x35c2 <MCAL_DIO_u8SetPortValue+0xf8>
			} else {
				//Do Nothing
			}
		} else if (Loc_u8PortValue == PORT_INPUT) {
    3536:	8b 81       	ldd	r24, Y+3	; 0x03
    3538:	88 23       	and	r24, r24
    353a:	01 f5       	brne	.+64     	; 0x357c <MCAL_DIO_u8SetPortValue+0xb2>
			if (Loc_u8PortID == PortA) {
    353c:	8a 81       	ldd	r24, Y+2	; 0x02
    353e:	88 23       	and	r24, r24
    3540:	29 f4       	brne	.+10     	; 0x354c <MCAL_DIO_u8SetPortValue+0x82>
				PORTA = PORT_INPUT;
    3542:	eb e3       	ldi	r30, 0x3B	; 59
    3544:	f0 e0       	ldi	r31, 0x00	; 0
    3546:	10 82       	st	Z, r1
				Loc_u8Return_Value = E_OK;
    3548:	19 82       	std	Y+1, r1	; 0x01
    354a:	3b c0       	rjmp	.+118    	; 0x35c2 <MCAL_DIO_u8SetPortValue+0xf8>
			} else if (Loc_u8PortID == PortB) {
    354c:	8a 81       	ldd	r24, Y+2	; 0x02
    354e:	81 30       	cpi	r24, 0x01	; 1
    3550:	29 f4       	brne	.+10     	; 0x355c <MCAL_DIO_u8SetPortValue+0x92>
				PORTB = PORT_INPUT;
    3552:	e8 e3       	ldi	r30, 0x38	; 56
    3554:	f0 e0       	ldi	r31, 0x00	; 0
    3556:	10 82       	st	Z, r1
				Loc_u8Return_Value = E_OK;
    3558:	19 82       	std	Y+1, r1	; 0x01
    355a:	33 c0       	rjmp	.+102    	; 0x35c2 <MCAL_DIO_u8SetPortValue+0xf8>
			} else if (Loc_u8PortID == PortC) {
    355c:	8a 81       	ldd	r24, Y+2	; 0x02
    355e:	82 30       	cpi	r24, 0x02	; 2
    3560:	29 f4       	brne	.+10     	; 0x356c <MCAL_DIO_u8SetPortValue+0xa2>
				PORTC = PORT_INPUT;
    3562:	e5 e3       	ldi	r30, 0x35	; 53
    3564:	f0 e0       	ldi	r31, 0x00	; 0
    3566:	10 82       	st	Z, r1
				Loc_u8Return_Value = E_OK;
    3568:	19 82       	std	Y+1, r1	; 0x01
    356a:	2b c0       	rjmp	.+86     	; 0x35c2 <MCAL_DIO_u8SetPortValue+0xf8>
			} else if (Loc_u8PortID == PortD) {
    356c:	8a 81       	ldd	r24, Y+2	; 0x02
    356e:	83 30       	cpi	r24, 0x03	; 3
    3570:	41 f5       	brne	.+80     	; 0x35c2 <MCAL_DIO_u8SetPortValue+0xf8>
				PORTD = PORT_INPUT;
    3572:	e2 e3       	ldi	r30, 0x32	; 50
    3574:	f0 e0       	ldi	r31, 0x00	; 0
    3576:	10 82       	st	Z, r1
				Loc_u8Return_Value = E_OK;
    3578:	19 82       	std	Y+1, r1	; 0x01
    357a:	23 c0       	rjmp	.+70     	; 0x35c2 <MCAL_DIO_u8SetPortValue+0xf8>
			} else {
				//Do Nothing
			}
		} else {
			if (Loc_u8PortID == PortA) {
    357c:	8a 81       	ldd	r24, Y+2	; 0x02
    357e:	88 23       	and	r24, r24
    3580:	31 f4       	brne	.+12     	; 0x358e <MCAL_DIO_u8SetPortValue+0xc4>
				PORTA = Loc_u8PortValue;
    3582:	eb e3       	ldi	r30, 0x3B	; 59
    3584:	f0 e0       	ldi	r31, 0x00	; 0
    3586:	8b 81       	ldd	r24, Y+3	; 0x03
    3588:	80 83       	st	Z, r24
				Loc_u8Return_Value = E_OK;
    358a:	19 82       	std	Y+1, r1	; 0x01
    358c:	1a c0       	rjmp	.+52     	; 0x35c2 <MCAL_DIO_u8SetPortValue+0xf8>
			} else if (Loc_u8PortID == PortB) {
    358e:	8a 81       	ldd	r24, Y+2	; 0x02
    3590:	81 30       	cpi	r24, 0x01	; 1
    3592:	31 f4       	brne	.+12     	; 0x35a0 <MCAL_DIO_u8SetPortValue+0xd6>
				PORTB = Loc_u8PortValue;
    3594:	e8 e3       	ldi	r30, 0x38	; 56
    3596:	f0 e0       	ldi	r31, 0x00	; 0
    3598:	8b 81       	ldd	r24, Y+3	; 0x03
    359a:	80 83       	st	Z, r24
				Loc_u8Return_Value = E_OK;
    359c:	19 82       	std	Y+1, r1	; 0x01
    359e:	11 c0       	rjmp	.+34     	; 0x35c2 <MCAL_DIO_u8SetPortValue+0xf8>
			} else if (Loc_u8PortID == PortC) {
    35a0:	8a 81       	ldd	r24, Y+2	; 0x02
    35a2:	82 30       	cpi	r24, 0x02	; 2
    35a4:	31 f4       	brne	.+12     	; 0x35b2 <MCAL_DIO_u8SetPortValue+0xe8>
				PORTC = Loc_u8PortValue;
    35a6:	e5 e3       	ldi	r30, 0x35	; 53
    35a8:	f0 e0       	ldi	r31, 0x00	; 0
    35aa:	8b 81       	ldd	r24, Y+3	; 0x03
    35ac:	80 83       	st	Z, r24
				Loc_u8Return_Value = E_OK;
    35ae:	19 82       	std	Y+1, r1	; 0x01
    35b0:	08 c0       	rjmp	.+16     	; 0x35c2 <MCAL_DIO_u8SetPortValue+0xf8>
			} else if (Loc_u8PortID == PortD) {
    35b2:	8a 81       	ldd	r24, Y+2	; 0x02
    35b4:	83 30       	cpi	r24, 0x03	; 3
    35b6:	29 f4       	brne	.+10     	; 0x35c2 <MCAL_DIO_u8SetPortValue+0xf8>
				PORTD = Loc_u8PortValue;
    35b8:	e2 e3       	ldi	r30, 0x32	; 50
    35ba:	f0 e0       	ldi	r31, 0x00	; 0
    35bc:	8b 81       	ldd	r24, Y+3	; 0x03
    35be:	80 83       	st	Z, r24
				Loc_u8Return_Value = E_OK;
    35c0:	19 82       	std	Y+1, r1	; 0x01
			}
		}
	} else {
		//Do Nothing
	}
	return Loc_u8Return_Value;
    35c2:	89 81       	ldd	r24, Y+1	; 0x01
}
    35c4:	0f 90       	pop	r0
    35c6:	0f 90       	pop	r0
    35c8:	0f 90       	pop	r0
    35ca:	cf 91       	pop	r28
    35cc:	df 91       	pop	r29
    35ce:	08 95       	ret

000035d0 <MCAL_DIO_u8SetPinValue>:

STD_Type MCAL_DIO_u8SetPinValue(u8 Loc_u8PortID, u8 Loc_u8PinID,
		u8 Loc_u8PinValue) {
    35d0:	df 93       	push	r29
    35d2:	cf 93       	push	r28
    35d4:	00 d0       	rcall	.+0      	; 0x35d6 <MCAL_DIO_u8SetPinValue+0x6>
    35d6:	00 d0       	rcall	.+0      	; 0x35d8 <MCAL_DIO_u8SetPinValue+0x8>
    35d8:	cd b7       	in	r28, 0x3d	; 61
    35da:	de b7       	in	r29, 0x3e	; 62
    35dc:	8a 83       	std	Y+2, r24	; 0x02
    35de:	6b 83       	std	Y+3, r22	; 0x03
    35e0:	4c 83       	std	Y+4, r20	; 0x04
	u8 Loc_u8Return_Value = E_NOT_OK;
    35e2:	81 e0       	ldi	r24, 0x01	; 1
    35e4:	89 83       	std	Y+1, r24	; 0x01
	if (Loc_u8PortID <= PortD && Loc_u8PinID <= Num_Of_Pins
    35e6:	8a 81       	ldd	r24, Y+2	; 0x02
    35e8:	84 30       	cpi	r24, 0x04	; 4
    35ea:	08 f0       	brcs	.+2      	; 0x35ee <MCAL_DIO_u8SetPinValue+0x1e>
    35ec:	d4 c0       	rjmp	.+424    	; 0x3796 <MCAL_DIO_u8SetPinValue+0x1c6>
    35ee:	8b 81       	ldd	r24, Y+3	; 0x03
    35f0:	88 30       	cpi	r24, 0x08	; 8
    35f2:	08 f0       	brcs	.+2      	; 0x35f6 <MCAL_DIO_u8SetPinValue+0x26>
    35f4:	d0 c0       	rjmp	.+416    	; 0x3796 <MCAL_DIO_u8SetPinValue+0x1c6>
    35f6:	8c 81       	ldd	r24, Y+4	; 0x04
    35f8:	82 30       	cpi	r24, 0x02	; 2
    35fa:	08 f0       	brcs	.+2      	; 0x35fe <MCAL_DIO_u8SetPinValue+0x2e>
    35fc:	cc c0       	rjmp	.+408    	; 0x3796 <MCAL_DIO_u8SetPinValue+0x1c6>
			&& Loc_u8PinValue <= Pin_High) {
		if (Loc_u8PinValue == Pin_High) {
    35fe:	8c 81       	ldd	r24, Y+4	; 0x04
    3600:	81 30       	cpi	r24, 0x01	; 1
    3602:	09 f0       	breq	.+2      	; 0x3606 <MCAL_DIO_u8SetPinValue+0x36>
    3604:	61 c0       	rjmp	.+194    	; 0x36c8 <MCAL_DIO_u8SetPinValue+0xf8>
			if (Loc_u8PortID == PortA) {
    3606:	8a 81       	ldd	r24, Y+2	; 0x02
    3608:	88 23       	and	r24, r24
    360a:	a9 f4       	brne	.+42     	; 0x3636 <MCAL_DIO_u8SetPinValue+0x66>
				SET_BIT(PORTA, Loc_u8PinID);
    360c:	ab e3       	ldi	r26, 0x3B	; 59
    360e:	b0 e0       	ldi	r27, 0x00	; 0
    3610:	eb e3       	ldi	r30, 0x3B	; 59
    3612:	f0 e0       	ldi	r31, 0x00	; 0
    3614:	80 81       	ld	r24, Z
    3616:	48 2f       	mov	r20, r24
    3618:	8b 81       	ldd	r24, Y+3	; 0x03
    361a:	28 2f       	mov	r18, r24
    361c:	30 e0       	ldi	r19, 0x00	; 0
    361e:	81 e0       	ldi	r24, 0x01	; 1
    3620:	90 e0       	ldi	r25, 0x00	; 0
    3622:	02 2e       	mov	r0, r18
    3624:	02 c0       	rjmp	.+4      	; 0x362a <MCAL_DIO_u8SetPinValue+0x5a>
    3626:	88 0f       	add	r24, r24
    3628:	99 1f       	adc	r25, r25
    362a:	0a 94       	dec	r0
    362c:	e2 f7       	brpl	.-8      	; 0x3626 <MCAL_DIO_u8SetPinValue+0x56>
    362e:	84 2b       	or	r24, r20
    3630:	8c 93       	st	X, r24
				Loc_u8Return_Value = E_OK;
    3632:	19 82       	std	Y+1, r1	; 0x01
    3634:	b0 c0       	rjmp	.+352    	; 0x3796 <MCAL_DIO_u8SetPinValue+0x1c6>
			} else if (Loc_u8PortID == PortB) {
    3636:	8a 81       	ldd	r24, Y+2	; 0x02
    3638:	81 30       	cpi	r24, 0x01	; 1
    363a:	a9 f4       	brne	.+42     	; 0x3666 <MCAL_DIO_u8SetPinValue+0x96>
				SET_BIT(PORTB, Loc_u8PinID);
    363c:	a8 e3       	ldi	r26, 0x38	; 56
    363e:	b0 e0       	ldi	r27, 0x00	; 0
    3640:	e8 e3       	ldi	r30, 0x38	; 56
    3642:	f0 e0       	ldi	r31, 0x00	; 0
    3644:	80 81       	ld	r24, Z
    3646:	48 2f       	mov	r20, r24
    3648:	8b 81       	ldd	r24, Y+3	; 0x03
    364a:	28 2f       	mov	r18, r24
    364c:	30 e0       	ldi	r19, 0x00	; 0
    364e:	81 e0       	ldi	r24, 0x01	; 1
    3650:	90 e0       	ldi	r25, 0x00	; 0
    3652:	02 2e       	mov	r0, r18
    3654:	02 c0       	rjmp	.+4      	; 0x365a <MCAL_DIO_u8SetPinValue+0x8a>
    3656:	88 0f       	add	r24, r24
    3658:	99 1f       	adc	r25, r25
    365a:	0a 94       	dec	r0
    365c:	e2 f7       	brpl	.-8      	; 0x3656 <MCAL_DIO_u8SetPinValue+0x86>
    365e:	84 2b       	or	r24, r20
    3660:	8c 93       	st	X, r24
				Loc_u8Return_Value = E_OK;
    3662:	19 82       	std	Y+1, r1	; 0x01
    3664:	98 c0       	rjmp	.+304    	; 0x3796 <MCAL_DIO_u8SetPinValue+0x1c6>
			} else if (Loc_u8PortID == PortC) {
    3666:	8a 81       	ldd	r24, Y+2	; 0x02
    3668:	82 30       	cpi	r24, 0x02	; 2
    366a:	a9 f4       	brne	.+42     	; 0x3696 <MCAL_DIO_u8SetPinValue+0xc6>
				SET_BIT(PORTC, Loc_u8PinID);
    366c:	a5 e3       	ldi	r26, 0x35	; 53
    366e:	b0 e0       	ldi	r27, 0x00	; 0
    3670:	e5 e3       	ldi	r30, 0x35	; 53
    3672:	f0 e0       	ldi	r31, 0x00	; 0
    3674:	80 81       	ld	r24, Z
    3676:	48 2f       	mov	r20, r24
    3678:	8b 81       	ldd	r24, Y+3	; 0x03
    367a:	28 2f       	mov	r18, r24
    367c:	30 e0       	ldi	r19, 0x00	; 0
    367e:	81 e0       	ldi	r24, 0x01	; 1
    3680:	90 e0       	ldi	r25, 0x00	; 0
    3682:	02 2e       	mov	r0, r18
    3684:	02 c0       	rjmp	.+4      	; 0x368a <MCAL_DIO_u8SetPinValue+0xba>
    3686:	88 0f       	add	r24, r24
    3688:	99 1f       	adc	r25, r25
    368a:	0a 94       	dec	r0
    368c:	e2 f7       	brpl	.-8      	; 0x3686 <MCAL_DIO_u8SetPinValue+0xb6>
    368e:	84 2b       	or	r24, r20
    3690:	8c 93       	st	X, r24
				Loc_u8Return_Value = E_OK;
    3692:	19 82       	std	Y+1, r1	; 0x01
    3694:	80 c0       	rjmp	.+256    	; 0x3796 <MCAL_DIO_u8SetPinValue+0x1c6>
			} else if (Loc_u8PortID == PortD) {
    3696:	8a 81       	ldd	r24, Y+2	; 0x02
    3698:	83 30       	cpi	r24, 0x03	; 3
    369a:	09 f0       	breq	.+2      	; 0x369e <MCAL_DIO_u8SetPinValue+0xce>
    369c:	7c c0       	rjmp	.+248    	; 0x3796 <MCAL_DIO_u8SetPinValue+0x1c6>
				SET_BIT(PORTD, Loc_u8PinID);
    369e:	a2 e3       	ldi	r26, 0x32	; 50
    36a0:	b0 e0       	ldi	r27, 0x00	; 0
    36a2:	e2 e3       	ldi	r30, 0x32	; 50
    36a4:	f0 e0       	ldi	r31, 0x00	; 0
    36a6:	80 81       	ld	r24, Z
    36a8:	48 2f       	mov	r20, r24
    36aa:	8b 81       	ldd	r24, Y+3	; 0x03
    36ac:	28 2f       	mov	r18, r24
    36ae:	30 e0       	ldi	r19, 0x00	; 0
    36b0:	81 e0       	ldi	r24, 0x01	; 1
    36b2:	90 e0       	ldi	r25, 0x00	; 0
    36b4:	02 2e       	mov	r0, r18
    36b6:	02 c0       	rjmp	.+4      	; 0x36bc <MCAL_DIO_u8SetPinValue+0xec>
    36b8:	88 0f       	add	r24, r24
    36ba:	99 1f       	adc	r25, r25
    36bc:	0a 94       	dec	r0
    36be:	e2 f7       	brpl	.-8      	; 0x36b8 <MCAL_DIO_u8SetPinValue+0xe8>
    36c0:	84 2b       	or	r24, r20
    36c2:	8c 93       	st	X, r24
				Loc_u8Return_Value = E_OK;
    36c4:	19 82       	std	Y+1, r1	; 0x01
    36c6:	67 c0       	rjmp	.+206    	; 0x3796 <MCAL_DIO_u8SetPinValue+0x1c6>
			} else {
				//Do Nothing
			}
		} else if (Loc_u8PinValue == Pin_Low) {
    36c8:	8c 81       	ldd	r24, Y+4	; 0x04
    36ca:	88 23       	and	r24, r24
    36cc:	09 f0       	breq	.+2      	; 0x36d0 <MCAL_DIO_u8SetPinValue+0x100>
    36ce:	63 c0       	rjmp	.+198    	; 0x3796 <MCAL_DIO_u8SetPinValue+0x1c6>
			if (Loc_u8PortID == PortA) {
    36d0:	8a 81       	ldd	r24, Y+2	; 0x02
    36d2:	88 23       	and	r24, r24
    36d4:	b1 f4       	brne	.+44     	; 0x3702 <MCAL_DIO_u8SetPinValue+0x132>
				CLR_BIT(PORTA, Loc_u8PinID);
    36d6:	ab e3       	ldi	r26, 0x3B	; 59
    36d8:	b0 e0       	ldi	r27, 0x00	; 0
    36da:	eb e3       	ldi	r30, 0x3B	; 59
    36dc:	f0 e0       	ldi	r31, 0x00	; 0
    36de:	80 81       	ld	r24, Z
    36e0:	48 2f       	mov	r20, r24
    36e2:	8b 81       	ldd	r24, Y+3	; 0x03
    36e4:	28 2f       	mov	r18, r24
    36e6:	30 e0       	ldi	r19, 0x00	; 0
    36e8:	81 e0       	ldi	r24, 0x01	; 1
    36ea:	90 e0       	ldi	r25, 0x00	; 0
    36ec:	02 2e       	mov	r0, r18
    36ee:	02 c0       	rjmp	.+4      	; 0x36f4 <MCAL_DIO_u8SetPinValue+0x124>
    36f0:	88 0f       	add	r24, r24
    36f2:	99 1f       	adc	r25, r25
    36f4:	0a 94       	dec	r0
    36f6:	e2 f7       	brpl	.-8      	; 0x36f0 <MCAL_DIO_u8SetPinValue+0x120>
    36f8:	80 95       	com	r24
    36fa:	84 23       	and	r24, r20
    36fc:	8c 93       	st	X, r24
				Loc_u8Return_Value = E_OK;
    36fe:	19 82       	std	Y+1, r1	; 0x01
    3700:	4a c0       	rjmp	.+148    	; 0x3796 <MCAL_DIO_u8SetPinValue+0x1c6>
			} else if (Loc_u8PortID == PortB) {
    3702:	8a 81       	ldd	r24, Y+2	; 0x02
    3704:	81 30       	cpi	r24, 0x01	; 1
    3706:	b1 f4       	brne	.+44     	; 0x3734 <MCAL_DIO_u8SetPinValue+0x164>
				CLR_BIT(PORTB, Loc_u8PinID);
    3708:	a8 e3       	ldi	r26, 0x38	; 56
    370a:	b0 e0       	ldi	r27, 0x00	; 0
    370c:	e8 e3       	ldi	r30, 0x38	; 56
    370e:	f0 e0       	ldi	r31, 0x00	; 0
    3710:	80 81       	ld	r24, Z
    3712:	48 2f       	mov	r20, r24
    3714:	8b 81       	ldd	r24, Y+3	; 0x03
    3716:	28 2f       	mov	r18, r24
    3718:	30 e0       	ldi	r19, 0x00	; 0
    371a:	81 e0       	ldi	r24, 0x01	; 1
    371c:	90 e0       	ldi	r25, 0x00	; 0
    371e:	02 2e       	mov	r0, r18
    3720:	02 c0       	rjmp	.+4      	; 0x3726 <MCAL_DIO_u8SetPinValue+0x156>
    3722:	88 0f       	add	r24, r24
    3724:	99 1f       	adc	r25, r25
    3726:	0a 94       	dec	r0
    3728:	e2 f7       	brpl	.-8      	; 0x3722 <MCAL_DIO_u8SetPinValue+0x152>
    372a:	80 95       	com	r24
    372c:	84 23       	and	r24, r20
    372e:	8c 93       	st	X, r24
				Loc_u8Return_Value = E_OK;
    3730:	19 82       	std	Y+1, r1	; 0x01
    3732:	31 c0       	rjmp	.+98     	; 0x3796 <MCAL_DIO_u8SetPinValue+0x1c6>
			} else if (Loc_u8PortID == PortC) {
    3734:	8a 81       	ldd	r24, Y+2	; 0x02
    3736:	82 30       	cpi	r24, 0x02	; 2
    3738:	b1 f4       	brne	.+44     	; 0x3766 <MCAL_DIO_u8SetPinValue+0x196>
				CLR_BIT(PORTC, Loc_u8PinID);
    373a:	a5 e3       	ldi	r26, 0x35	; 53
    373c:	b0 e0       	ldi	r27, 0x00	; 0
    373e:	e5 e3       	ldi	r30, 0x35	; 53
    3740:	f0 e0       	ldi	r31, 0x00	; 0
    3742:	80 81       	ld	r24, Z
    3744:	48 2f       	mov	r20, r24
    3746:	8b 81       	ldd	r24, Y+3	; 0x03
    3748:	28 2f       	mov	r18, r24
    374a:	30 e0       	ldi	r19, 0x00	; 0
    374c:	81 e0       	ldi	r24, 0x01	; 1
    374e:	90 e0       	ldi	r25, 0x00	; 0
    3750:	02 2e       	mov	r0, r18
    3752:	02 c0       	rjmp	.+4      	; 0x3758 <MCAL_DIO_u8SetPinValue+0x188>
    3754:	88 0f       	add	r24, r24
    3756:	99 1f       	adc	r25, r25
    3758:	0a 94       	dec	r0
    375a:	e2 f7       	brpl	.-8      	; 0x3754 <MCAL_DIO_u8SetPinValue+0x184>
    375c:	80 95       	com	r24
    375e:	84 23       	and	r24, r20
    3760:	8c 93       	st	X, r24
				Loc_u8Return_Value = E_OK;
    3762:	19 82       	std	Y+1, r1	; 0x01
    3764:	18 c0       	rjmp	.+48     	; 0x3796 <MCAL_DIO_u8SetPinValue+0x1c6>
			} else if (Loc_u8PortID == PortD) {
    3766:	8a 81       	ldd	r24, Y+2	; 0x02
    3768:	83 30       	cpi	r24, 0x03	; 3
    376a:	a9 f4       	brne	.+42     	; 0x3796 <MCAL_DIO_u8SetPinValue+0x1c6>
				CLR_BIT(PORTD, Loc_u8PinID);
    376c:	a2 e3       	ldi	r26, 0x32	; 50
    376e:	b0 e0       	ldi	r27, 0x00	; 0
    3770:	e2 e3       	ldi	r30, 0x32	; 50
    3772:	f0 e0       	ldi	r31, 0x00	; 0
    3774:	80 81       	ld	r24, Z
    3776:	48 2f       	mov	r20, r24
    3778:	8b 81       	ldd	r24, Y+3	; 0x03
    377a:	28 2f       	mov	r18, r24
    377c:	30 e0       	ldi	r19, 0x00	; 0
    377e:	81 e0       	ldi	r24, 0x01	; 1
    3780:	90 e0       	ldi	r25, 0x00	; 0
    3782:	02 2e       	mov	r0, r18
    3784:	02 c0       	rjmp	.+4      	; 0x378a <MCAL_DIO_u8SetPinValue+0x1ba>
    3786:	88 0f       	add	r24, r24
    3788:	99 1f       	adc	r25, r25
    378a:	0a 94       	dec	r0
    378c:	e2 f7       	brpl	.-8      	; 0x3786 <MCAL_DIO_u8SetPinValue+0x1b6>
    378e:	80 95       	com	r24
    3790:	84 23       	and	r24, r20
    3792:	8c 93       	st	X, r24
				Loc_u8Return_Value = E_OK;
    3794:	19 82       	std	Y+1, r1	; 0x01
			//Do Nothing
		}
	} else {
		//Do Nothing
	}
	return Loc_u8Return_Value;
    3796:	89 81       	ldd	r24, Y+1	; 0x01

}
    3798:	0f 90       	pop	r0
    379a:	0f 90       	pop	r0
    379c:	0f 90       	pop	r0
    379e:	0f 90       	pop	r0
    37a0:	cf 91       	pop	r28
    37a2:	df 91       	pop	r29
    37a4:	08 95       	ret

000037a6 <MCAL_DIO_u8SGetPortValue>:

STD_Type MCAL_DIO_u8SGetPortValue(u8 Loc_u8PortID, u8* Loc_u8PortValue) {
    37a6:	df 93       	push	r29
    37a8:	cf 93       	push	r28
    37aa:	00 d0       	rcall	.+0      	; 0x37ac <MCAL_DIO_u8SGetPortValue+0x6>
    37ac:	00 d0       	rcall	.+0      	; 0x37ae <MCAL_DIO_u8SGetPortValue+0x8>
    37ae:	cd b7       	in	r28, 0x3d	; 61
    37b0:	de b7       	in	r29, 0x3e	; 62
    37b2:	8a 83       	std	Y+2, r24	; 0x02
    37b4:	7c 83       	std	Y+4, r23	; 0x04
    37b6:	6b 83       	std	Y+3, r22	; 0x03
	u8 Loc_u8Return_Value = E_NOT_OK;
    37b8:	81 e0       	ldi	r24, 0x01	; 1
    37ba:	89 83       	std	Y+1, r24	; 0x01
	if (Loc_u8PortID <= PortD) {
    37bc:	8a 81       	ldd	r24, Y+2	; 0x02
    37be:	84 30       	cpi	r24, 0x04	; 4
    37c0:	58 f5       	brcc	.+86     	; 0x3818 <MCAL_DIO_u8SGetPortValue+0x72>
		if (Loc_u8PortID == PortA) {
    37c2:	8a 81       	ldd	r24, Y+2	; 0x02
    37c4:	88 23       	and	r24, r24
    37c6:	41 f4       	brne	.+16     	; 0x37d8 <MCAL_DIO_u8SGetPortValue+0x32>
			*Loc_u8PortValue = PORTA;
    37c8:	eb e3       	ldi	r30, 0x3B	; 59
    37ca:	f0 e0       	ldi	r31, 0x00	; 0
    37cc:	80 81       	ld	r24, Z
    37ce:	eb 81       	ldd	r30, Y+3	; 0x03
    37d0:	fc 81       	ldd	r31, Y+4	; 0x04
    37d2:	80 83       	st	Z, r24
			Loc_u8Return_Value = E_OK;
    37d4:	19 82       	std	Y+1, r1	; 0x01
    37d6:	20 c0       	rjmp	.+64     	; 0x3818 <MCAL_DIO_u8SGetPortValue+0x72>
		} else if (Loc_u8PortID == PortB) {
    37d8:	8a 81       	ldd	r24, Y+2	; 0x02
    37da:	81 30       	cpi	r24, 0x01	; 1
    37dc:	41 f4       	brne	.+16     	; 0x37ee <MCAL_DIO_u8SGetPortValue+0x48>
			*Loc_u8PortValue = PORTB;
    37de:	e8 e3       	ldi	r30, 0x38	; 56
    37e0:	f0 e0       	ldi	r31, 0x00	; 0
    37e2:	80 81       	ld	r24, Z
    37e4:	eb 81       	ldd	r30, Y+3	; 0x03
    37e6:	fc 81       	ldd	r31, Y+4	; 0x04
    37e8:	80 83       	st	Z, r24
			Loc_u8Return_Value = E_OK;
    37ea:	19 82       	std	Y+1, r1	; 0x01
    37ec:	15 c0       	rjmp	.+42     	; 0x3818 <MCAL_DIO_u8SGetPortValue+0x72>
		} else if (Loc_u8PortID == PortC) {
    37ee:	8a 81       	ldd	r24, Y+2	; 0x02
    37f0:	82 30       	cpi	r24, 0x02	; 2
    37f2:	41 f4       	brne	.+16     	; 0x3804 <MCAL_DIO_u8SGetPortValue+0x5e>
			*Loc_u8PortValue = PORTC;
    37f4:	e5 e3       	ldi	r30, 0x35	; 53
    37f6:	f0 e0       	ldi	r31, 0x00	; 0
    37f8:	80 81       	ld	r24, Z
    37fa:	eb 81       	ldd	r30, Y+3	; 0x03
    37fc:	fc 81       	ldd	r31, Y+4	; 0x04
    37fe:	80 83       	st	Z, r24
			Loc_u8Return_Value = E_OK;
    3800:	19 82       	std	Y+1, r1	; 0x01
    3802:	0a c0       	rjmp	.+20     	; 0x3818 <MCAL_DIO_u8SGetPortValue+0x72>
		} else if (Loc_u8PortID == PortD) {
    3804:	8a 81       	ldd	r24, Y+2	; 0x02
    3806:	83 30       	cpi	r24, 0x03	; 3
    3808:	39 f4       	brne	.+14     	; 0x3818 <MCAL_DIO_u8SGetPortValue+0x72>
			*Loc_u8PortValue = PORTD;
    380a:	e2 e3       	ldi	r30, 0x32	; 50
    380c:	f0 e0       	ldi	r31, 0x00	; 0
    380e:	80 81       	ld	r24, Z
    3810:	eb 81       	ldd	r30, Y+3	; 0x03
    3812:	fc 81       	ldd	r31, Y+4	; 0x04
    3814:	80 83       	st	Z, r24
			Loc_u8Return_Value = E_OK;
    3816:	19 82       	std	Y+1, r1	; 0x01
			//Do Nothing
		}
	} else {
		//Do Nothing
	}
	return Loc_u8Return_Value;
    3818:	89 81       	ldd	r24, Y+1	; 0x01
}
    381a:	0f 90       	pop	r0
    381c:	0f 90       	pop	r0
    381e:	0f 90       	pop	r0
    3820:	0f 90       	pop	r0
    3822:	cf 91       	pop	r28
    3824:	df 91       	pop	r29
    3826:	08 95       	ret

00003828 <MCAL_DIO_u8GetPinValue>:

STD_Type MCAL_DIO_u8GetPinValue(u8 Loc_u8PortID, u8 Loc_u8PinID,
		u8* Loc_u8PinValue) {
    3828:	df 93       	push	r29
    382a:	cf 93       	push	r28
    382c:	00 d0       	rcall	.+0      	; 0x382e <MCAL_DIO_u8GetPinValue+0x6>
    382e:	00 d0       	rcall	.+0      	; 0x3830 <MCAL_DIO_u8GetPinValue+0x8>
    3830:	0f 92       	push	r0
    3832:	cd b7       	in	r28, 0x3d	; 61
    3834:	de b7       	in	r29, 0x3e	; 62
    3836:	8a 83       	std	Y+2, r24	; 0x02
    3838:	6b 83       	std	Y+3, r22	; 0x03
    383a:	5d 83       	std	Y+5, r21	; 0x05
    383c:	4c 83       	std	Y+4, r20	; 0x04
	u8 Loc_u8Return_Value = E_NOT_OK;
    383e:	81 e0       	ldi	r24, 0x01	; 1
    3840:	89 83       	std	Y+1, r24	; 0x01
	if (Loc_u8PortID <= PortD && Loc_u8PinID <= Num_Of_Pins) {
    3842:	8a 81       	ldd	r24, Y+2	; 0x02
    3844:	84 30       	cpi	r24, 0x04	; 4
    3846:	08 f0       	brcs	.+2      	; 0x384a <MCAL_DIO_u8GetPinValue+0x22>
    3848:	63 c0       	rjmp	.+198    	; 0x3910 <MCAL_DIO_u8GetPinValue+0xe8>
    384a:	8b 81       	ldd	r24, Y+3	; 0x03
    384c:	88 30       	cpi	r24, 0x08	; 8
    384e:	08 f0       	brcs	.+2      	; 0x3852 <MCAL_DIO_u8GetPinValue+0x2a>
    3850:	5f c0       	rjmp	.+190    	; 0x3910 <MCAL_DIO_u8GetPinValue+0xe8>
		if (Loc_u8PortID == PortA) {
    3852:	8a 81       	ldd	r24, Y+2	; 0x02
    3854:	88 23       	and	r24, r24
    3856:	a9 f4       	brne	.+42     	; 0x3882 <MCAL_DIO_u8GetPinValue+0x5a>
			*Loc_u8PinValue = GET_BIT(PINA, Loc_u8PinID);
    3858:	e9 e3       	ldi	r30, 0x39	; 57
    385a:	f0 e0       	ldi	r31, 0x00	; 0
    385c:	80 81       	ld	r24, Z
    385e:	28 2f       	mov	r18, r24
    3860:	30 e0       	ldi	r19, 0x00	; 0
    3862:	8b 81       	ldd	r24, Y+3	; 0x03
    3864:	88 2f       	mov	r24, r24
    3866:	90 e0       	ldi	r25, 0x00	; 0
    3868:	a9 01       	movw	r20, r18
    386a:	02 c0       	rjmp	.+4      	; 0x3870 <MCAL_DIO_u8GetPinValue+0x48>
    386c:	55 95       	asr	r21
    386e:	47 95       	ror	r20
    3870:	8a 95       	dec	r24
    3872:	e2 f7       	brpl	.-8      	; 0x386c <MCAL_DIO_u8GetPinValue+0x44>
    3874:	ca 01       	movw	r24, r20
    3876:	81 70       	andi	r24, 0x01	; 1
    3878:	ec 81       	ldd	r30, Y+4	; 0x04
    387a:	fd 81       	ldd	r31, Y+5	; 0x05
    387c:	80 83       	st	Z, r24
			Loc_u8Return_Value = E_OK;
    387e:	19 82       	std	Y+1, r1	; 0x01
    3880:	47 c0       	rjmp	.+142    	; 0x3910 <MCAL_DIO_u8GetPinValue+0xe8>
		} else if (Loc_u8PortID == PortB) {
    3882:	8a 81       	ldd	r24, Y+2	; 0x02
    3884:	81 30       	cpi	r24, 0x01	; 1
    3886:	a9 f4       	brne	.+42     	; 0x38b2 <MCAL_DIO_u8GetPinValue+0x8a>
			*Loc_u8PinValue = GET_BIT(PINB, Loc_u8PinID);
    3888:	e6 e3       	ldi	r30, 0x36	; 54
    388a:	f0 e0       	ldi	r31, 0x00	; 0
    388c:	80 81       	ld	r24, Z
    388e:	28 2f       	mov	r18, r24
    3890:	30 e0       	ldi	r19, 0x00	; 0
    3892:	8b 81       	ldd	r24, Y+3	; 0x03
    3894:	88 2f       	mov	r24, r24
    3896:	90 e0       	ldi	r25, 0x00	; 0
    3898:	a9 01       	movw	r20, r18
    389a:	02 c0       	rjmp	.+4      	; 0x38a0 <MCAL_DIO_u8GetPinValue+0x78>
    389c:	55 95       	asr	r21
    389e:	47 95       	ror	r20
    38a0:	8a 95       	dec	r24
    38a2:	e2 f7       	brpl	.-8      	; 0x389c <MCAL_DIO_u8GetPinValue+0x74>
    38a4:	ca 01       	movw	r24, r20
    38a6:	81 70       	andi	r24, 0x01	; 1
    38a8:	ec 81       	ldd	r30, Y+4	; 0x04
    38aa:	fd 81       	ldd	r31, Y+5	; 0x05
    38ac:	80 83       	st	Z, r24
			Loc_u8Return_Value = E_OK;
    38ae:	19 82       	std	Y+1, r1	; 0x01
    38b0:	2f c0       	rjmp	.+94     	; 0x3910 <MCAL_DIO_u8GetPinValue+0xe8>
		} else if (Loc_u8PortID == PortC) {
    38b2:	8a 81       	ldd	r24, Y+2	; 0x02
    38b4:	82 30       	cpi	r24, 0x02	; 2
    38b6:	a9 f4       	brne	.+42     	; 0x38e2 <MCAL_DIO_u8GetPinValue+0xba>
			*Loc_u8PinValue = GET_BIT(PINC, Loc_u8PinID);
    38b8:	e3 e3       	ldi	r30, 0x33	; 51
    38ba:	f0 e0       	ldi	r31, 0x00	; 0
    38bc:	80 81       	ld	r24, Z
    38be:	28 2f       	mov	r18, r24
    38c0:	30 e0       	ldi	r19, 0x00	; 0
    38c2:	8b 81       	ldd	r24, Y+3	; 0x03
    38c4:	88 2f       	mov	r24, r24
    38c6:	90 e0       	ldi	r25, 0x00	; 0
    38c8:	a9 01       	movw	r20, r18
    38ca:	02 c0       	rjmp	.+4      	; 0x38d0 <MCAL_DIO_u8GetPinValue+0xa8>
    38cc:	55 95       	asr	r21
    38ce:	47 95       	ror	r20
    38d0:	8a 95       	dec	r24
    38d2:	e2 f7       	brpl	.-8      	; 0x38cc <MCAL_DIO_u8GetPinValue+0xa4>
    38d4:	ca 01       	movw	r24, r20
    38d6:	81 70       	andi	r24, 0x01	; 1
    38d8:	ec 81       	ldd	r30, Y+4	; 0x04
    38da:	fd 81       	ldd	r31, Y+5	; 0x05
    38dc:	80 83       	st	Z, r24
			Loc_u8Return_Value = E_OK;
    38de:	19 82       	std	Y+1, r1	; 0x01
    38e0:	17 c0       	rjmp	.+46     	; 0x3910 <MCAL_DIO_u8GetPinValue+0xe8>
		} else if (Loc_u8PortID == PortD) {
    38e2:	8a 81       	ldd	r24, Y+2	; 0x02
    38e4:	83 30       	cpi	r24, 0x03	; 3
    38e6:	a1 f4       	brne	.+40     	; 0x3910 <MCAL_DIO_u8GetPinValue+0xe8>
			*Loc_u8PinValue = GET_BIT(PIND, Loc_u8PinID);
    38e8:	e0 e3       	ldi	r30, 0x30	; 48
    38ea:	f0 e0       	ldi	r31, 0x00	; 0
    38ec:	80 81       	ld	r24, Z
    38ee:	28 2f       	mov	r18, r24
    38f0:	30 e0       	ldi	r19, 0x00	; 0
    38f2:	8b 81       	ldd	r24, Y+3	; 0x03
    38f4:	88 2f       	mov	r24, r24
    38f6:	90 e0       	ldi	r25, 0x00	; 0
    38f8:	a9 01       	movw	r20, r18
    38fa:	02 c0       	rjmp	.+4      	; 0x3900 <MCAL_DIO_u8GetPinValue+0xd8>
    38fc:	55 95       	asr	r21
    38fe:	47 95       	ror	r20
    3900:	8a 95       	dec	r24
    3902:	e2 f7       	brpl	.-8      	; 0x38fc <MCAL_DIO_u8GetPinValue+0xd4>
    3904:	ca 01       	movw	r24, r20
    3906:	81 70       	andi	r24, 0x01	; 1
    3908:	ec 81       	ldd	r30, Y+4	; 0x04
    390a:	fd 81       	ldd	r31, Y+5	; 0x05
    390c:	80 83       	st	Z, r24
			Loc_u8Return_Value = E_OK;
    390e:	19 82       	std	Y+1, r1	; 0x01
			//Do Nothing
		}
	} else {
		//Do Nothing
	}
	return Loc_u8Return_Value;
    3910:	89 81       	ldd	r24, Y+1	; 0x01
}
    3912:	0f 90       	pop	r0
    3914:	0f 90       	pop	r0
    3916:	0f 90       	pop	r0
    3918:	0f 90       	pop	r0
    391a:	0f 90       	pop	r0
    391c:	cf 91       	pop	r28
    391e:	df 91       	pop	r29
    3920:	08 95       	ret

00003922 <MCAL_DIO_u8TogglePortValue>:

STD_Type MCAL_DIO_u8TogglePortValue(u8 Loc_u8PortID) {
    3922:	df 93       	push	r29
    3924:	cf 93       	push	r28
    3926:	00 d0       	rcall	.+0      	; 0x3928 <MCAL_DIO_u8TogglePortValue+0x6>
    3928:	cd b7       	in	r28, 0x3d	; 61
    392a:	de b7       	in	r29, 0x3e	; 62
    392c:	8a 83       	std	Y+2, r24	; 0x02
	u8 Loc_u8Return_Value = E_NOT_OK;
    392e:	81 e0       	ldi	r24, 0x01	; 1
    3930:	89 83       	std	Y+1, r24	; 0x01
	if (Loc_u8PortID <= PortD) {
    3932:	8a 81       	ldd	r24, Y+2	; 0x02
    3934:	84 30       	cpi	r24, 0x04	; 4
    3936:	78 f5       	brcc	.+94     	; 0x3996 <MCAL_DIO_u8TogglePortValue+0x74>
		if (Loc_u8PortID == PortA) {
    3938:	8a 81       	ldd	r24, Y+2	; 0x02
    393a:	88 23       	and	r24, r24
    393c:	49 f4       	brne	.+18     	; 0x3950 <MCAL_DIO_u8TogglePortValue+0x2e>
			PORTA = ~PORTA;
    393e:	ab e3       	ldi	r26, 0x3B	; 59
    3940:	b0 e0       	ldi	r27, 0x00	; 0
    3942:	eb e3       	ldi	r30, 0x3B	; 59
    3944:	f0 e0       	ldi	r31, 0x00	; 0
    3946:	80 81       	ld	r24, Z
    3948:	80 95       	com	r24
    394a:	8c 93       	st	X, r24
			Loc_u8Return_Value = E_OK;
    394c:	19 82       	std	Y+1, r1	; 0x01
    394e:	23 c0       	rjmp	.+70     	; 0x3996 <MCAL_DIO_u8TogglePortValue+0x74>
		} else if (Loc_u8PortID == PortB) {
    3950:	8a 81       	ldd	r24, Y+2	; 0x02
    3952:	81 30       	cpi	r24, 0x01	; 1
    3954:	49 f4       	brne	.+18     	; 0x3968 <MCAL_DIO_u8TogglePortValue+0x46>
			PORTB = ~PORTB;
    3956:	a8 e3       	ldi	r26, 0x38	; 56
    3958:	b0 e0       	ldi	r27, 0x00	; 0
    395a:	e8 e3       	ldi	r30, 0x38	; 56
    395c:	f0 e0       	ldi	r31, 0x00	; 0
    395e:	80 81       	ld	r24, Z
    3960:	80 95       	com	r24
    3962:	8c 93       	st	X, r24
			Loc_u8Return_Value = E_OK;
    3964:	19 82       	std	Y+1, r1	; 0x01
    3966:	17 c0       	rjmp	.+46     	; 0x3996 <MCAL_DIO_u8TogglePortValue+0x74>
		} else if (Loc_u8PortID == PortC) {
    3968:	8a 81       	ldd	r24, Y+2	; 0x02
    396a:	82 30       	cpi	r24, 0x02	; 2
    396c:	49 f4       	brne	.+18     	; 0x3980 <MCAL_DIO_u8TogglePortValue+0x5e>
			PORTC = ~PORTC;
    396e:	a5 e3       	ldi	r26, 0x35	; 53
    3970:	b0 e0       	ldi	r27, 0x00	; 0
    3972:	e5 e3       	ldi	r30, 0x35	; 53
    3974:	f0 e0       	ldi	r31, 0x00	; 0
    3976:	80 81       	ld	r24, Z
    3978:	80 95       	com	r24
    397a:	8c 93       	st	X, r24
			Loc_u8Return_Value = E_OK;
    397c:	19 82       	std	Y+1, r1	; 0x01
    397e:	0b c0       	rjmp	.+22     	; 0x3996 <MCAL_DIO_u8TogglePortValue+0x74>
		} else if (Loc_u8PortID == PortD) {
    3980:	8a 81       	ldd	r24, Y+2	; 0x02
    3982:	83 30       	cpi	r24, 0x03	; 3
    3984:	41 f4       	brne	.+16     	; 0x3996 <MCAL_DIO_u8TogglePortValue+0x74>
			PORTD = ~PORTD;
    3986:	a2 e3       	ldi	r26, 0x32	; 50
    3988:	b0 e0       	ldi	r27, 0x00	; 0
    398a:	e2 e3       	ldi	r30, 0x32	; 50
    398c:	f0 e0       	ldi	r31, 0x00	; 0
    398e:	80 81       	ld	r24, Z
    3990:	80 95       	com	r24
    3992:	8c 93       	st	X, r24
			Loc_u8Return_Value = E_OK;
    3994:	19 82       	std	Y+1, r1	; 0x01
			//Do Nothing
		}
	} else {
		//Do Nothing
	}
	return Loc_u8Return_Value;
    3996:	89 81       	ldd	r24, Y+1	; 0x01
}
    3998:	0f 90       	pop	r0
    399a:	0f 90       	pop	r0
    399c:	cf 91       	pop	r28
    399e:	df 91       	pop	r29
    39a0:	08 95       	ret

000039a2 <MCAL_DIO_u8TogglePinValue>:

STD_Type MCAL_DIO_u8TogglePinValue(u8 Loc_u8PortID, u8 Loc_u8PinID) {
    39a2:	df 93       	push	r29
    39a4:	cf 93       	push	r28
    39a6:	00 d0       	rcall	.+0      	; 0x39a8 <MCAL_DIO_u8TogglePinValue+0x6>
    39a8:	0f 92       	push	r0
    39aa:	cd b7       	in	r28, 0x3d	; 61
    39ac:	de b7       	in	r29, 0x3e	; 62
    39ae:	8a 83       	std	Y+2, r24	; 0x02
    39b0:	6b 83       	std	Y+3, r22	; 0x03
	u8 Loc_u8Return_Value = E_NOT_OK;
    39b2:	81 e0       	ldi	r24, 0x01	; 1
    39b4:	89 83       	std	Y+1, r24	; 0x01
	if (Loc_u8PortID <= PortD && Loc_u8PinID <= Num_Of_Pins) {
    39b6:	8a 81       	ldd	r24, Y+2	; 0x02
    39b8:	84 30       	cpi	r24, 0x04	; 4
    39ba:	08 f0       	brcs	.+2      	; 0x39be <MCAL_DIO_u8TogglePinValue+0x1c>
    39bc:	63 c0       	rjmp	.+198    	; 0x3a84 <MCAL_DIO_u8TogglePinValue+0xe2>
    39be:	8b 81       	ldd	r24, Y+3	; 0x03
    39c0:	88 30       	cpi	r24, 0x08	; 8
    39c2:	08 f0       	brcs	.+2      	; 0x39c6 <MCAL_DIO_u8TogglePinValue+0x24>
    39c4:	5f c0       	rjmp	.+190    	; 0x3a84 <MCAL_DIO_u8TogglePinValue+0xe2>
		if (Loc_u8PortID == PortA) {
    39c6:	8a 81       	ldd	r24, Y+2	; 0x02
    39c8:	88 23       	and	r24, r24
    39ca:	a9 f4       	brne	.+42     	; 0x39f6 <MCAL_DIO_u8TogglePinValue+0x54>
			TOGGLE_BIT(PORTA, Loc_u8PinID);
    39cc:	ab e3       	ldi	r26, 0x3B	; 59
    39ce:	b0 e0       	ldi	r27, 0x00	; 0
    39d0:	eb e3       	ldi	r30, 0x3B	; 59
    39d2:	f0 e0       	ldi	r31, 0x00	; 0
    39d4:	80 81       	ld	r24, Z
    39d6:	48 2f       	mov	r20, r24
    39d8:	8b 81       	ldd	r24, Y+3	; 0x03
    39da:	28 2f       	mov	r18, r24
    39dc:	30 e0       	ldi	r19, 0x00	; 0
    39de:	81 e0       	ldi	r24, 0x01	; 1
    39e0:	90 e0       	ldi	r25, 0x00	; 0
    39e2:	02 2e       	mov	r0, r18
    39e4:	02 c0       	rjmp	.+4      	; 0x39ea <MCAL_DIO_u8TogglePinValue+0x48>
    39e6:	88 0f       	add	r24, r24
    39e8:	99 1f       	adc	r25, r25
    39ea:	0a 94       	dec	r0
    39ec:	e2 f7       	brpl	.-8      	; 0x39e6 <MCAL_DIO_u8TogglePinValue+0x44>
    39ee:	84 27       	eor	r24, r20
    39f0:	8c 93       	st	X, r24
			Loc_u8Return_Value = E_OK;
    39f2:	19 82       	std	Y+1, r1	; 0x01
    39f4:	47 c0       	rjmp	.+142    	; 0x3a84 <MCAL_DIO_u8TogglePinValue+0xe2>
		} else if (Loc_u8PortID == PortB) {
    39f6:	8a 81       	ldd	r24, Y+2	; 0x02
    39f8:	81 30       	cpi	r24, 0x01	; 1
    39fa:	a9 f4       	brne	.+42     	; 0x3a26 <MCAL_DIO_u8TogglePinValue+0x84>
			TOGGLE_BIT(PORTB, Loc_u8PinID);
    39fc:	a8 e3       	ldi	r26, 0x38	; 56
    39fe:	b0 e0       	ldi	r27, 0x00	; 0
    3a00:	e8 e3       	ldi	r30, 0x38	; 56
    3a02:	f0 e0       	ldi	r31, 0x00	; 0
    3a04:	80 81       	ld	r24, Z
    3a06:	48 2f       	mov	r20, r24
    3a08:	8b 81       	ldd	r24, Y+3	; 0x03
    3a0a:	28 2f       	mov	r18, r24
    3a0c:	30 e0       	ldi	r19, 0x00	; 0
    3a0e:	81 e0       	ldi	r24, 0x01	; 1
    3a10:	90 e0       	ldi	r25, 0x00	; 0
    3a12:	02 2e       	mov	r0, r18
    3a14:	02 c0       	rjmp	.+4      	; 0x3a1a <MCAL_DIO_u8TogglePinValue+0x78>
    3a16:	88 0f       	add	r24, r24
    3a18:	99 1f       	adc	r25, r25
    3a1a:	0a 94       	dec	r0
    3a1c:	e2 f7       	brpl	.-8      	; 0x3a16 <MCAL_DIO_u8TogglePinValue+0x74>
    3a1e:	84 27       	eor	r24, r20
    3a20:	8c 93       	st	X, r24
			Loc_u8Return_Value = E_OK;
    3a22:	19 82       	std	Y+1, r1	; 0x01
    3a24:	2f c0       	rjmp	.+94     	; 0x3a84 <MCAL_DIO_u8TogglePinValue+0xe2>
		} else if (Loc_u8PortID == PortC) {
    3a26:	8a 81       	ldd	r24, Y+2	; 0x02
    3a28:	82 30       	cpi	r24, 0x02	; 2
    3a2a:	a9 f4       	brne	.+42     	; 0x3a56 <MCAL_DIO_u8TogglePinValue+0xb4>
			TOGGLE_BIT(PORTC, Loc_u8PinID);
    3a2c:	a5 e3       	ldi	r26, 0x35	; 53
    3a2e:	b0 e0       	ldi	r27, 0x00	; 0
    3a30:	e5 e3       	ldi	r30, 0x35	; 53
    3a32:	f0 e0       	ldi	r31, 0x00	; 0
    3a34:	80 81       	ld	r24, Z
    3a36:	48 2f       	mov	r20, r24
    3a38:	8b 81       	ldd	r24, Y+3	; 0x03
    3a3a:	28 2f       	mov	r18, r24
    3a3c:	30 e0       	ldi	r19, 0x00	; 0
    3a3e:	81 e0       	ldi	r24, 0x01	; 1
    3a40:	90 e0       	ldi	r25, 0x00	; 0
    3a42:	02 2e       	mov	r0, r18
    3a44:	02 c0       	rjmp	.+4      	; 0x3a4a <MCAL_DIO_u8TogglePinValue+0xa8>
    3a46:	88 0f       	add	r24, r24
    3a48:	99 1f       	adc	r25, r25
    3a4a:	0a 94       	dec	r0
    3a4c:	e2 f7       	brpl	.-8      	; 0x3a46 <MCAL_DIO_u8TogglePinValue+0xa4>
    3a4e:	84 27       	eor	r24, r20
    3a50:	8c 93       	st	X, r24
			Loc_u8Return_Value = E_OK;
    3a52:	19 82       	std	Y+1, r1	; 0x01
    3a54:	17 c0       	rjmp	.+46     	; 0x3a84 <MCAL_DIO_u8TogglePinValue+0xe2>
		} else if (Loc_u8PortID == PortD) {
    3a56:	8a 81       	ldd	r24, Y+2	; 0x02
    3a58:	83 30       	cpi	r24, 0x03	; 3
    3a5a:	a1 f4       	brne	.+40     	; 0x3a84 <MCAL_DIO_u8TogglePinValue+0xe2>
			TOGGLE_BIT(PORTD, Loc_u8PinID);
    3a5c:	a2 e3       	ldi	r26, 0x32	; 50
    3a5e:	b0 e0       	ldi	r27, 0x00	; 0
    3a60:	e2 e3       	ldi	r30, 0x32	; 50
    3a62:	f0 e0       	ldi	r31, 0x00	; 0
    3a64:	80 81       	ld	r24, Z
    3a66:	48 2f       	mov	r20, r24
    3a68:	8b 81       	ldd	r24, Y+3	; 0x03
    3a6a:	28 2f       	mov	r18, r24
    3a6c:	30 e0       	ldi	r19, 0x00	; 0
    3a6e:	81 e0       	ldi	r24, 0x01	; 1
    3a70:	90 e0       	ldi	r25, 0x00	; 0
    3a72:	02 2e       	mov	r0, r18
    3a74:	02 c0       	rjmp	.+4      	; 0x3a7a <MCAL_DIO_u8TogglePinValue+0xd8>
    3a76:	88 0f       	add	r24, r24
    3a78:	99 1f       	adc	r25, r25
    3a7a:	0a 94       	dec	r0
    3a7c:	e2 f7       	brpl	.-8      	; 0x3a76 <MCAL_DIO_u8TogglePinValue+0xd4>
    3a7e:	84 27       	eor	r24, r20
    3a80:	8c 93       	st	X, r24
			Loc_u8Return_Value = E_OK;
    3a82:	19 82       	std	Y+1, r1	; 0x01
			//Do Nothing
		}
	} else {
		//Do Nothing
	}
	return Loc_u8Return_Value;
    3a84:	89 81       	ldd	r24, Y+1	; 0x01
}
    3a86:	0f 90       	pop	r0
    3a88:	0f 90       	pop	r0
    3a8a:	0f 90       	pop	r0
    3a8c:	cf 91       	pop	r28
    3a8e:	df 91       	pop	r29
    3a90:	08 95       	ret

00003a92 <MCAL_ADC_u8SetRegister>:

#include "ADC.h"

void (*Gptr_ADC)(void)= '\0' ;

void MCAL_ADC_u8SetRegister(u8 Loc_u8PortID, u8 Loc_u8PortValue) {
    3a92:	df 93       	push	r29
    3a94:	cf 93       	push	r28
    3a96:	00 d0       	rcall	.+0      	; 0x3a98 <MCAL_ADC_u8SetRegister+0x6>
    3a98:	cd b7       	in	r28, 0x3d	; 61
    3a9a:	de b7       	in	r29, 0x3e	; 62
    3a9c:	89 83       	std	Y+1, r24	; 0x01
    3a9e:	6a 83       	std	Y+2, r22	; 0x02
	if (Loc_u8PortValue == PORT_OUTPUT) {
    3aa0:	8a 81       	ldd	r24, Y+2	; 0x02
    3aa2:	8f 3f       	cpi	r24, 0xFF	; 255
    3aa4:	c1 f4       	brne	.+48     	; 0x3ad6 <MCAL_ADC_u8SetRegister+0x44>
		if (Loc_u8PortID == Admux) {
    3aa6:	89 81       	ldd	r24, Y+1	; 0x01
    3aa8:	88 23       	and	r24, r24
    3aaa:	29 f4       	brne	.+10     	; 0x3ab6 <MCAL_ADC_u8SetRegister+0x24>
			ADMUX = PORT_OUTPUT;
    3aac:	e7 e2       	ldi	r30, 0x27	; 39
    3aae:	f0 e0       	ldi	r31, 0x00	; 0
    3ab0:	8f ef       	ldi	r24, 0xFF	; 255
    3ab2:	80 83       	st	Z, r24
    3ab4:	3f c0       	rjmp	.+126    	; 0x3b34 <MCAL_ADC_u8SetRegister+0xa2>
		} else if (Loc_u8PortID == Adcsra) {
    3ab6:	89 81       	ldd	r24, Y+1	; 0x01
    3ab8:	81 30       	cpi	r24, 0x01	; 1
    3aba:	29 f4       	brne	.+10     	; 0x3ac6 <MCAL_ADC_u8SetRegister+0x34>
			ADCSRA = PORT_OUTPUT;
    3abc:	e6 e2       	ldi	r30, 0x26	; 38
    3abe:	f0 e0       	ldi	r31, 0x00	; 0
    3ac0:	8f ef       	ldi	r24, 0xFF	; 255
    3ac2:	80 83       	st	Z, r24
    3ac4:	37 c0       	rjmp	.+110    	; 0x3b34 <MCAL_ADC_u8SetRegister+0xa2>
		} else if (Loc_u8PortID == Sfior) {
    3ac6:	89 81       	ldd	r24, Y+1	; 0x01
    3ac8:	82 30       	cpi	r24, 0x02	; 2
    3aca:	a1 f5       	brne	.+104    	; 0x3b34 <MCAL_ADC_u8SetRegister+0xa2>
			SFIOR = PORT_OUTPUT;
    3acc:	e0 e5       	ldi	r30, 0x50	; 80
    3ace:	f0 e0       	ldi	r31, 0x00	; 0
    3ad0:	8f ef       	ldi	r24, 0xFF	; 255
    3ad2:	80 83       	st	Z, r24
    3ad4:	2f c0       	rjmp	.+94     	; 0x3b34 <MCAL_ADC_u8SetRegister+0xa2>
		} else {
			//Do Nothing
		}
	} else if (Loc_u8PortValue == PORT_INPUT) {
    3ad6:	8a 81       	ldd	r24, Y+2	; 0x02
    3ad8:	88 23       	and	r24, r24
    3ada:	a9 f4       	brne	.+42     	; 0x3b06 <MCAL_ADC_u8SetRegister+0x74>
		if (Loc_u8PortID == Admux) {
    3adc:	89 81       	ldd	r24, Y+1	; 0x01
    3ade:	88 23       	and	r24, r24
    3ae0:	21 f4       	brne	.+8      	; 0x3aea <MCAL_ADC_u8SetRegister+0x58>
			ADMUX = PORT_INPUT;
    3ae2:	e7 e2       	ldi	r30, 0x27	; 39
    3ae4:	f0 e0       	ldi	r31, 0x00	; 0
    3ae6:	10 82       	st	Z, r1
    3ae8:	25 c0       	rjmp	.+74     	; 0x3b34 <MCAL_ADC_u8SetRegister+0xa2>
		} else if (Loc_u8PortID == Adcsra) {
    3aea:	89 81       	ldd	r24, Y+1	; 0x01
    3aec:	81 30       	cpi	r24, 0x01	; 1
    3aee:	21 f4       	brne	.+8      	; 0x3af8 <MCAL_ADC_u8SetRegister+0x66>
			ADCSRA = PORT_INPUT;
    3af0:	e6 e2       	ldi	r30, 0x26	; 38
    3af2:	f0 e0       	ldi	r31, 0x00	; 0
    3af4:	10 82       	st	Z, r1
    3af6:	1e c0       	rjmp	.+60     	; 0x3b34 <MCAL_ADC_u8SetRegister+0xa2>
		} else if (Loc_u8PortID == Sfior) {
    3af8:	89 81       	ldd	r24, Y+1	; 0x01
    3afa:	82 30       	cpi	r24, 0x02	; 2
    3afc:	d9 f4       	brne	.+54     	; 0x3b34 <MCAL_ADC_u8SetRegister+0xa2>
			SFIOR = PORT_INPUT;
    3afe:	e0 e5       	ldi	r30, 0x50	; 80
    3b00:	f0 e0       	ldi	r31, 0x00	; 0
    3b02:	10 82       	st	Z, r1
    3b04:	17 c0       	rjmp	.+46     	; 0x3b34 <MCAL_ADC_u8SetRegister+0xa2>
		} else {
			//Do Nothing
		}
	} else {
		if (Loc_u8PortID == Admux) {
    3b06:	89 81       	ldd	r24, Y+1	; 0x01
    3b08:	88 23       	and	r24, r24
    3b0a:	29 f4       	brne	.+10     	; 0x3b16 <MCAL_ADC_u8SetRegister+0x84>
			ADMUX = Loc_u8PortValue;
    3b0c:	e7 e2       	ldi	r30, 0x27	; 39
    3b0e:	f0 e0       	ldi	r31, 0x00	; 0
    3b10:	8a 81       	ldd	r24, Y+2	; 0x02
    3b12:	80 83       	st	Z, r24
    3b14:	0f c0       	rjmp	.+30     	; 0x3b34 <MCAL_ADC_u8SetRegister+0xa2>
		} else if (Loc_u8PortID == Adcsra) {
    3b16:	89 81       	ldd	r24, Y+1	; 0x01
    3b18:	81 30       	cpi	r24, 0x01	; 1
    3b1a:	29 f4       	brne	.+10     	; 0x3b26 <MCAL_ADC_u8SetRegister+0x94>
			ADCSRA = Loc_u8PortValue;
    3b1c:	e6 e2       	ldi	r30, 0x26	; 38
    3b1e:	f0 e0       	ldi	r31, 0x00	; 0
    3b20:	8a 81       	ldd	r24, Y+2	; 0x02
    3b22:	80 83       	st	Z, r24
    3b24:	07 c0       	rjmp	.+14     	; 0x3b34 <MCAL_ADC_u8SetRegister+0xa2>
		} else if (Loc_u8PortID == Sfior) {
    3b26:	89 81       	ldd	r24, Y+1	; 0x01
    3b28:	82 30       	cpi	r24, 0x02	; 2
    3b2a:	21 f4       	brne	.+8      	; 0x3b34 <MCAL_ADC_u8SetRegister+0xa2>
			SFIOR = Loc_u8PortValue;
    3b2c:	e0 e5       	ldi	r30, 0x50	; 80
    3b2e:	f0 e0       	ldi	r31, 0x00	; 0
    3b30:	8a 81       	ldd	r24, Y+2	; 0x02
    3b32:	80 83       	st	Z, r24
		}
	}
}
    3b34:	0f 90       	pop	r0
    3b36:	0f 90       	pop	r0
    3b38:	cf 91       	pop	r28
    3b3a:	df 91       	pop	r29
    3b3c:	08 95       	ret

00003b3e <MCAL_ADC_u8SetRegisterPin>:

void MCAL_ADC_u8SetRegisterPin(u8 Loc_u8PortID, u8 Loc_u8PinID,
		u8 Loc_u8PinValue) {
    3b3e:	df 93       	push	r29
    3b40:	cf 93       	push	r28
    3b42:	00 d0       	rcall	.+0      	; 0x3b44 <MCAL_ADC_u8SetRegisterPin+0x6>
    3b44:	0f 92       	push	r0
    3b46:	cd b7       	in	r28, 0x3d	; 61
    3b48:	de b7       	in	r29, 0x3e	; 62
    3b4a:	89 83       	std	Y+1, r24	; 0x01
    3b4c:	6a 83       	std	Y+2, r22	; 0x02
    3b4e:	4b 83       	std	Y+3, r20	; 0x03
	if (Loc_u8PinValue == Pin_High) {
    3b50:	8b 81       	ldd	r24, Y+3	; 0x03
    3b52:	81 30       	cpi	r24, 0x01	; 1
    3b54:	09 f0       	breq	.+2      	; 0x3b58 <MCAL_ADC_u8SetRegisterPin+0x1a>
    3b56:	46 c0       	rjmp	.+140    	; 0x3be4 <MCAL_ADC_u8SetRegisterPin+0xa6>
		if (Loc_u8PortID == Admux) {
    3b58:	89 81       	ldd	r24, Y+1	; 0x01
    3b5a:	88 23       	and	r24, r24
    3b5c:	a1 f4       	brne	.+40     	; 0x3b86 <MCAL_ADC_u8SetRegisterPin+0x48>
			SET_BIT(ADMUX, Loc_u8PinID);
    3b5e:	a7 e2       	ldi	r26, 0x27	; 39
    3b60:	b0 e0       	ldi	r27, 0x00	; 0
    3b62:	e7 e2       	ldi	r30, 0x27	; 39
    3b64:	f0 e0       	ldi	r31, 0x00	; 0
    3b66:	80 81       	ld	r24, Z
    3b68:	48 2f       	mov	r20, r24
    3b6a:	8a 81       	ldd	r24, Y+2	; 0x02
    3b6c:	28 2f       	mov	r18, r24
    3b6e:	30 e0       	ldi	r19, 0x00	; 0
    3b70:	81 e0       	ldi	r24, 0x01	; 1
    3b72:	90 e0       	ldi	r25, 0x00	; 0
    3b74:	02 2e       	mov	r0, r18
    3b76:	02 c0       	rjmp	.+4      	; 0x3b7c <MCAL_ADC_u8SetRegisterPin+0x3e>
    3b78:	88 0f       	add	r24, r24
    3b7a:	99 1f       	adc	r25, r25
    3b7c:	0a 94       	dec	r0
    3b7e:	e2 f7       	brpl	.-8      	; 0x3b78 <MCAL_ADC_u8SetRegisterPin+0x3a>
    3b80:	84 2b       	or	r24, r20
    3b82:	8c 93       	st	X, r24
    3b84:	7a c0       	rjmp	.+244    	; 0x3c7a <MCAL_ADC_u8SetRegisterPin+0x13c>
		} else if (Loc_u8PortID == Adcsra) {
    3b86:	89 81       	ldd	r24, Y+1	; 0x01
    3b88:	81 30       	cpi	r24, 0x01	; 1
    3b8a:	a1 f4       	brne	.+40     	; 0x3bb4 <MCAL_ADC_u8SetRegisterPin+0x76>
			SET_BIT(ADCSRA, Loc_u8PinID);
    3b8c:	a6 e2       	ldi	r26, 0x26	; 38
    3b8e:	b0 e0       	ldi	r27, 0x00	; 0
    3b90:	e6 e2       	ldi	r30, 0x26	; 38
    3b92:	f0 e0       	ldi	r31, 0x00	; 0
    3b94:	80 81       	ld	r24, Z
    3b96:	48 2f       	mov	r20, r24
    3b98:	8a 81       	ldd	r24, Y+2	; 0x02
    3b9a:	28 2f       	mov	r18, r24
    3b9c:	30 e0       	ldi	r19, 0x00	; 0
    3b9e:	81 e0       	ldi	r24, 0x01	; 1
    3ba0:	90 e0       	ldi	r25, 0x00	; 0
    3ba2:	02 2e       	mov	r0, r18
    3ba4:	02 c0       	rjmp	.+4      	; 0x3baa <MCAL_ADC_u8SetRegisterPin+0x6c>
    3ba6:	88 0f       	add	r24, r24
    3ba8:	99 1f       	adc	r25, r25
    3baa:	0a 94       	dec	r0
    3bac:	e2 f7       	brpl	.-8      	; 0x3ba6 <MCAL_ADC_u8SetRegisterPin+0x68>
    3bae:	84 2b       	or	r24, r20
    3bb0:	8c 93       	st	X, r24
    3bb2:	63 c0       	rjmp	.+198    	; 0x3c7a <MCAL_ADC_u8SetRegisterPin+0x13c>
		} else if (Loc_u8PortID == Sfior) {
    3bb4:	89 81       	ldd	r24, Y+1	; 0x01
    3bb6:	82 30       	cpi	r24, 0x02	; 2
    3bb8:	09 f0       	breq	.+2      	; 0x3bbc <MCAL_ADC_u8SetRegisterPin+0x7e>
    3bba:	5f c0       	rjmp	.+190    	; 0x3c7a <MCAL_ADC_u8SetRegisterPin+0x13c>
			SET_BIT(SFIOR, Loc_u8PinID);
    3bbc:	a0 e5       	ldi	r26, 0x50	; 80
    3bbe:	b0 e0       	ldi	r27, 0x00	; 0
    3bc0:	e0 e5       	ldi	r30, 0x50	; 80
    3bc2:	f0 e0       	ldi	r31, 0x00	; 0
    3bc4:	80 81       	ld	r24, Z
    3bc6:	48 2f       	mov	r20, r24
    3bc8:	8a 81       	ldd	r24, Y+2	; 0x02
    3bca:	28 2f       	mov	r18, r24
    3bcc:	30 e0       	ldi	r19, 0x00	; 0
    3bce:	81 e0       	ldi	r24, 0x01	; 1
    3bd0:	90 e0       	ldi	r25, 0x00	; 0
    3bd2:	02 2e       	mov	r0, r18
    3bd4:	02 c0       	rjmp	.+4      	; 0x3bda <MCAL_ADC_u8SetRegisterPin+0x9c>
    3bd6:	88 0f       	add	r24, r24
    3bd8:	99 1f       	adc	r25, r25
    3bda:	0a 94       	dec	r0
    3bdc:	e2 f7       	brpl	.-8      	; 0x3bd6 <MCAL_ADC_u8SetRegisterPin+0x98>
    3bde:	84 2b       	or	r24, r20
    3be0:	8c 93       	st	X, r24
    3be2:	4b c0       	rjmp	.+150    	; 0x3c7a <MCAL_ADC_u8SetRegisterPin+0x13c>
		} else {
			//Do Nothing
		}
	} else if (Loc_u8PinValue == Pin_Low) {
    3be4:	8b 81       	ldd	r24, Y+3	; 0x03
    3be6:	88 23       	and	r24, r24
    3be8:	09 f0       	breq	.+2      	; 0x3bec <MCAL_ADC_u8SetRegisterPin+0xae>
    3bea:	47 c0       	rjmp	.+142    	; 0x3c7a <MCAL_ADC_u8SetRegisterPin+0x13c>
		if (Loc_u8PortID == Admux) {
    3bec:	89 81       	ldd	r24, Y+1	; 0x01
    3bee:	88 23       	and	r24, r24
    3bf0:	a9 f4       	brne	.+42     	; 0x3c1c <MCAL_ADC_u8SetRegisterPin+0xde>
			CLR_BIT(ADMUX, Loc_u8PinID);
    3bf2:	a7 e2       	ldi	r26, 0x27	; 39
    3bf4:	b0 e0       	ldi	r27, 0x00	; 0
    3bf6:	e7 e2       	ldi	r30, 0x27	; 39
    3bf8:	f0 e0       	ldi	r31, 0x00	; 0
    3bfa:	80 81       	ld	r24, Z
    3bfc:	48 2f       	mov	r20, r24
    3bfe:	8a 81       	ldd	r24, Y+2	; 0x02
    3c00:	28 2f       	mov	r18, r24
    3c02:	30 e0       	ldi	r19, 0x00	; 0
    3c04:	81 e0       	ldi	r24, 0x01	; 1
    3c06:	90 e0       	ldi	r25, 0x00	; 0
    3c08:	02 2e       	mov	r0, r18
    3c0a:	02 c0       	rjmp	.+4      	; 0x3c10 <MCAL_ADC_u8SetRegisterPin+0xd2>
    3c0c:	88 0f       	add	r24, r24
    3c0e:	99 1f       	adc	r25, r25
    3c10:	0a 94       	dec	r0
    3c12:	e2 f7       	brpl	.-8      	; 0x3c0c <MCAL_ADC_u8SetRegisterPin+0xce>
    3c14:	80 95       	com	r24
    3c16:	84 23       	and	r24, r20
    3c18:	8c 93       	st	X, r24
    3c1a:	2f c0       	rjmp	.+94     	; 0x3c7a <MCAL_ADC_u8SetRegisterPin+0x13c>
		} else if (Loc_u8PortID == Adcsra) {
    3c1c:	89 81       	ldd	r24, Y+1	; 0x01
    3c1e:	81 30       	cpi	r24, 0x01	; 1
    3c20:	a9 f4       	brne	.+42     	; 0x3c4c <MCAL_ADC_u8SetRegisterPin+0x10e>
			CLR_BIT(ADCSRA, Loc_u8PinID);
    3c22:	a6 e2       	ldi	r26, 0x26	; 38
    3c24:	b0 e0       	ldi	r27, 0x00	; 0
    3c26:	e6 e2       	ldi	r30, 0x26	; 38
    3c28:	f0 e0       	ldi	r31, 0x00	; 0
    3c2a:	80 81       	ld	r24, Z
    3c2c:	48 2f       	mov	r20, r24
    3c2e:	8a 81       	ldd	r24, Y+2	; 0x02
    3c30:	28 2f       	mov	r18, r24
    3c32:	30 e0       	ldi	r19, 0x00	; 0
    3c34:	81 e0       	ldi	r24, 0x01	; 1
    3c36:	90 e0       	ldi	r25, 0x00	; 0
    3c38:	02 2e       	mov	r0, r18
    3c3a:	02 c0       	rjmp	.+4      	; 0x3c40 <MCAL_ADC_u8SetRegisterPin+0x102>
    3c3c:	88 0f       	add	r24, r24
    3c3e:	99 1f       	adc	r25, r25
    3c40:	0a 94       	dec	r0
    3c42:	e2 f7       	brpl	.-8      	; 0x3c3c <MCAL_ADC_u8SetRegisterPin+0xfe>
    3c44:	80 95       	com	r24
    3c46:	84 23       	and	r24, r20
    3c48:	8c 93       	st	X, r24
    3c4a:	17 c0       	rjmp	.+46     	; 0x3c7a <MCAL_ADC_u8SetRegisterPin+0x13c>
		} else if (Loc_u8PortID == Sfior) {
    3c4c:	89 81       	ldd	r24, Y+1	; 0x01
    3c4e:	82 30       	cpi	r24, 0x02	; 2
    3c50:	a1 f4       	brne	.+40     	; 0x3c7a <MCAL_ADC_u8SetRegisterPin+0x13c>
			CLR_BIT(SFIOR, Loc_u8PinID);
    3c52:	a0 e5       	ldi	r26, 0x50	; 80
    3c54:	b0 e0       	ldi	r27, 0x00	; 0
    3c56:	e0 e5       	ldi	r30, 0x50	; 80
    3c58:	f0 e0       	ldi	r31, 0x00	; 0
    3c5a:	80 81       	ld	r24, Z
    3c5c:	48 2f       	mov	r20, r24
    3c5e:	8a 81       	ldd	r24, Y+2	; 0x02
    3c60:	28 2f       	mov	r18, r24
    3c62:	30 e0       	ldi	r19, 0x00	; 0
    3c64:	81 e0       	ldi	r24, 0x01	; 1
    3c66:	90 e0       	ldi	r25, 0x00	; 0
    3c68:	02 2e       	mov	r0, r18
    3c6a:	02 c0       	rjmp	.+4      	; 0x3c70 <MCAL_ADC_u8SetRegisterPin+0x132>
    3c6c:	88 0f       	add	r24, r24
    3c6e:	99 1f       	adc	r25, r25
    3c70:	0a 94       	dec	r0
    3c72:	e2 f7       	brpl	.-8      	; 0x3c6c <MCAL_ADC_u8SetRegisterPin+0x12e>
    3c74:	80 95       	com	r24
    3c76:	84 23       	and	r24, r20
    3c78:	8c 93       	st	X, r24
			//Do Nothing
		}
	} else {
		//Do Nothing
	}
}
    3c7a:	0f 90       	pop	r0
    3c7c:	0f 90       	pop	r0
    3c7e:	0f 90       	pop	r0
    3c80:	cf 91       	pop	r28
    3c82:	df 91       	pop	r29
    3c84:	08 95       	ret

00003c86 <MCAL_ADC_AdcInit>:

void MCAL_ADC_AdcInit(u8 Loc_u8Position) {
    3c86:	df 93       	push	r29
    3c88:	cf 93       	push	r28
    3c8a:	0f 92       	push	r0
    3c8c:	cd b7       	in	r28, 0x3d	; 61
    3c8e:	de b7       	in	r29, 0x3e	; 62
    3c90:	89 83       	std	Y+1, r24	; 0x01
	MCAL_ADC_u8SetRegister(Adcsra, ADCSRA_VALUE);
    3c92:	81 e0       	ldi	r24, 0x01	; 1
    3c94:	6f ea       	ldi	r22, 0xAF	; 175
    3c96:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <MCAL_ADC_u8SetRegister>
	MCAL_ADC_u8SetRegisterPin(Sfior, 7, Pin_Low);
    3c9a:	82 e0       	ldi	r24, 0x02	; 2
    3c9c:	67 e0       	ldi	r22, 0x07	; 7
    3c9e:	40 e0       	ldi	r20, 0x00	; 0
    3ca0:	0e 94 9f 1d 	call	0x3b3e	; 0x3b3e <MCAL_ADC_u8SetRegisterPin>
	MCAL_ADC_u8SetRegisterPin(Sfior, 6, Pin_Low);
    3ca4:	82 e0       	ldi	r24, 0x02	; 2
    3ca6:	66 e0       	ldi	r22, 0x06	; 6
    3ca8:	40 e0       	ldi	r20, 0x00	; 0
    3caa:	0e 94 9f 1d 	call	0x3b3e	; 0x3b3e <MCAL_ADC_u8SetRegisterPin>
	MCAL_ADC_u8SetRegisterPin(Sfior, 5, Pin_Low);
    3cae:	82 e0       	ldi	r24, 0x02	; 2
    3cb0:	65 e0       	ldi	r22, 0x05	; 5
    3cb2:	40 e0       	ldi	r20, 0x00	; 0
    3cb4:	0e 94 9f 1d 	call	0x3b3e	; 0x3b3e <MCAL_ADC_u8SetRegisterPin>
	MCAL_Interrupt_u8SetRegisterPin(SREG, 7, Pin_High);
    3cb8:	ef e5       	ldi	r30, 0x5F	; 95
    3cba:	f0 e0       	ldi	r31, 0x00	; 0
    3cbc:	80 81       	ld	r24, Z
    3cbe:	88 2f       	mov	r24, r24
    3cc0:	90 e0       	ldi	r25, 0x00	; 0
    3cc2:	67 e0       	ldi	r22, 0x07	; 7
    3cc4:	70 e0       	ldi	r23, 0x00	; 0
    3cc6:	41 e0       	ldi	r20, 0x01	; 1
    3cc8:	50 e0       	ldi	r21, 0x00	; 0
    3cca:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <MCAL_Interrupt_u8SetRegisterPin>
	if (Loc_u8Position == Adc_0) {
    3cce:	89 81       	ldd	r24, Y+1	; 0x01
    3cd0:	88 23       	and	r24, r24
    3cd2:	29 f4       	brne	.+10     	; 0x3cde <MCAL_ADC_AdcInit+0x58>
		MCAL_ADC_u8SetRegister(Admux, ADUMX_Value_Adc0);
    3cd4:	80 e0       	ldi	r24, 0x00	; 0
    3cd6:	60 e4       	ldi	r22, 0x40	; 64
    3cd8:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <MCAL_ADC_u8SetRegister>
    3cdc:	37 c0       	rjmp	.+110    	; 0x3d4c <MCAL_ADC_AdcInit+0xc6>
	} else if (Loc_u8Position == Adc_1) {
    3cde:	89 81       	ldd	r24, Y+1	; 0x01
    3ce0:	81 30       	cpi	r24, 0x01	; 1
    3ce2:	29 f4       	brne	.+10     	; 0x3cee <MCAL_ADC_AdcInit+0x68>
		MCAL_ADC_u8SetRegister(Admux, ADUMX_Value_Adc1);
    3ce4:	80 e0       	ldi	r24, 0x00	; 0
    3ce6:	61 e4       	ldi	r22, 0x41	; 65
    3ce8:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <MCAL_ADC_u8SetRegister>
    3cec:	2f c0       	rjmp	.+94     	; 0x3d4c <MCAL_ADC_AdcInit+0xc6>
	} else if (Loc_u8Position == Adc_2) {
    3cee:	89 81       	ldd	r24, Y+1	; 0x01
    3cf0:	82 30       	cpi	r24, 0x02	; 2
    3cf2:	29 f4       	brne	.+10     	; 0x3cfe <MCAL_ADC_AdcInit+0x78>
		MCAL_ADC_u8SetRegister(Admux, ADUMX_Value_Adc2);
    3cf4:	80 e0       	ldi	r24, 0x00	; 0
    3cf6:	62 e4       	ldi	r22, 0x42	; 66
    3cf8:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <MCAL_ADC_u8SetRegister>
    3cfc:	27 c0       	rjmp	.+78     	; 0x3d4c <MCAL_ADC_AdcInit+0xc6>
	} else if (Loc_u8Position == Adc_3) {
    3cfe:	89 81       	ldd	r24, Y+1	; 0x01
    3d00:	83 30       	cpi	r24, 0x03	; 3
    3d02:	29 f4       	brne	.+10     	; 0x3d0e <MCAL_ADC_AdcInit+0x88>
		MCAL_ADC_u8SetRegister(Admux, ADUMX_Value_Adc3);
    3d04:	80 e0       	ldi	r24, 0x00	; 0
    3d06:	63 e4       	ldi	r22, 0x43	; 67
    3d08:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <MCAL_ADC_u8SetRegister>
    3d0c:	1f c0       	rjmp	.+62     	; 0x3d4c <MCAL_ADC_AdcInit+0xc6>
	} else if (Loc_u8Position == Adc_4) {
    3d0e:	89 81       	ldd	r24, Y+1	; 0x01
    3d10:	84 30       	cpi	r24, 0x04	; 4
    3d12:	29 f4       	brne	.+10     	; 0x3d1e <MCAL_ADC_AdcInit+0x98>
		MCAL_ADC_u8SetRegister(Admux, ADUMX_Value_Adc4);
    3d14:	80 e0       	ldi	r24, 0x00	; 0
    3d16:	64 e4       	ldi	r22, 0x44	; 68
    3d18:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <MCAL_ADC_u8SetRegister>
    3d1c:	17 c0       	rjmp	.+46     	; 0x3d4c <MCAL_ADC_AdcInit+0xc6>
	} else if (Loc_u8Position == Adc_5) {
    3d1e:	89 81       	ldd	r24, Y+1	; 0x01
    3d20:	85 30       	cpi	r24, 0x05	; 5
    3d22:	29 f4       	brne	.+10     	; 0x3d2e <MCAL_ADC_AdcInit+0xa8>
		MCAL_ADC_u8SetRegister(Admux, ADUMX_Value_Adc5);
    3d24:	80 e0       	ldi	r24, 0x00	; 0
    3d26:	65 e4       	ldi	r22, 0x45	; 69
    3d28:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <MCAL_ADC_u8SetRegister>
    3d2c:	0f c0       	rjmp	.+30     	; 0x3d4c <MCAL_ADC_AdcInit+0xc6>
	} else if (Loc_u8Position == Adc_6) {
    3d2e:	89 81       	ldd	r24, Y+1	; 0x01
    3d30:	86 30       	cpi	r24, 0x06	; 6
    3d32:	29 f4       	brne	.+10     	; 0x3d3e <MCAL_ADC_AdcInit+0xb8>
		MCAL_ADC_u8SetRegister(Admux, ADUMX_Value_Adc6);
    3d34:	80 e0       	ldi	r24, 0x00	; 0
    3d36:	66 e4       	ldi	r22, 0x46	; 70
    3d38:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <MCAL_ADC_u8SetRegister>
    3d3c:	07 c0       	rjmp	.+14     	; 0x3d4c <MCAL_ADC_AdcInit+0xc6>
	} else if (Loc_u8Position == Adc_7) {
    3d3e:	89 81       	ldd	r24, Y+1	; 0x01
    3d40:	87 30       	cpi	r24, 0x07	; 7
    3d42:	21 f4       	brne	.+8      	; 0x3d4c <MCAL_ADC_AdcInit+0xc6>
		MCAL_ADC_u8SetRegister(Admux, ADUMX_Value_Adc7);
    3d44:	80 e0       	ldi	r24, 0x00	; 0
    3d46:	67 e4       	ldi	r22, 0x47	; 71
    3d48:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <MCAL_ADC_u8SetRegister>
	} else {
		//Do Nothing
	}
}
    3d4c:	0f 90       	pop	r0
    3d4e:	cf 91       	pop	r28
    3d50:	df 91       	pop	r29
    3d52:	08 95       	ret

00003d54 <MCAL_ADC_AdcStartConversion>:

void MCAL_ADC_AdcStartConversion(u8 Loc_u8Value) {
    3d54:	df 93       	push	r29
    3d56:	cf 93       	push	r28
    3d58:	0f 92       	push	r0
    3d5a:	cd b7       	in	r28, 0x3d	; 61
    3d5c:	de b7       	in	r29, 0x3e	; 62
    3d5e:	89 83       	std	Y+1, r24	; 0x01
	if (Loc_u8Value == Enable) {
    3d60:	89 81       	ldd	r24, Y+1	; 0x01
    3d62:	81 30       	cpi	r24, 0x01	; 1
    3d64:	31 f4       	brne	.+12     	; 0x3d72 <MCAL_ADC_AdcStartConversion+0x1e>
		MCAL_ADC_u8SetRegisterPin(Adcsra, 6, Enable);
    3d66:	81 e0       	ldi	r24, 0x01	; 1
    3d68:	66 e0       	ldi	r22, 0x06	; 6
    3d6a:	41 e0       	ldi	r20, 0x01	; 1
    3d6c:	0e 94 9f 1d 	call	0x3b3e	; 0x3b3e <MCAL_ADC_u8SetRegisterPin>
    3d70:	08 c0       	rjmp	.+16     	; 0x3d82 <MCAL_ADC_AdcStartConversion+0x2e>
	} else if (Loc_u8Value == Disable) {
    3d72:	89 81       	ldd	r24, Y+1	; 0x01
    3d74:	88 23       	and	r24, r24
    3d76:	29 f4       	brne	.+10     	; 0x3d82 <MCAL_ADC_AdcStartConversion+0x2e>
		MCAL_ADC_u8SetRegisterPin(Adcsra, 6, Disable);
    3d78:	81 e0       	ldi	r24, 0x01	; 1
    3d7a:	66 e0       	ldi	r22, 0x06	; 6
    3d7c:	40 e0       	ldi	r20, 0x00	; 0
    3d7e:	0e 94 9f 1d 	call	0x3b3e	; 0x3b3e <MCAL_ADC_u8SetRegisterPin>
	} else {
		//NOTHING
	}
}
    3d82:	0f 90       	pop	r0
    3d84:	cf 91       	pop	r28
    3d86:	df 91       	pop	r29
    3d88:	08 95       	ret

00003d8a <MCAL_ADC_u8AdcSetValue>:

u8 MCAL_ADC_u8AdcSetValue(u16 *Loc_u16Value) {
    3d8a:	df 93       	push	r29
    3d8c:	cf 93       	push	r28
    3d8e:	00 d0       	rcall	.+0      	; 0x3d90 <MCAL_ADC_u8AdcSetValue+0x6>
    3d90:	0f 92       	push	r0
    3d92:	cd b7       	in	r28, 0x3d	; 61
    3d94:	de b7       	in	r29, 0x3e	; 62
    3d96:	9b 83       	std	Y+3, r25	; 0x03
    3d98:	8a 83       	std	Y+2, r24	; 0x02
	u8 LOC_u8ReturnValue = E_NOT_OK;
    3d9a:	81 e0       	ldi	r24, 0x01	; 1
    3d9c:	89 83       	std	Y+1, r24	; 0x01
	*Loc_u16Value = (((u32) ADC * 5000) / 1024);
    3d9e:	e4 e2       	ldi	r30, 0x24	; 36
    3da0:	f0 e0       	ldi	r31, 0x00	; 0
    3da2:	80 81       	ld	r24, Z
    3da4:	91 81       	ldd	r25, Z+1	; 0x01
    3da6:	cc 01       	movw	r24, r24
    3da8:	a0 e0       	ldi	r26, 0x00	; 0
    3daa:	b0 e0       	ldi	r27, 0x00	; 0
    3dac:	28 e8       	ldi	r18, 0x88	; 136
    3dae:	33 e1       	ldi	r19, 0x13	; 19
    3db0:	40 e0       	ldi	r20, 0x00	; 0
    3db2:	50 e0       	ldi	r21, 0x00	; 0
    3db4:	bc 01       	movw	r22, r24
    3db6:	cd 01       	movw	r24, r26
    3db8:	0e 94 9e 2b 	call	0x573c	; 0x573c <__mulsi3>
    3dbc:	dc 01       	movw	r26, r24
    3dbe:	cb 01       	movw	r24, r22
    3dc0:	07 2e       	mov	r0, r23
    3dc2:	7a e0       	ldi	r23, 0x0A	; 10
    3dc4:	b6 95       	lsr	r27
    3dc6:	a7 95       	ror	r26
    3dc8:	97 95       	ror	r25
    3dca:	87 95       	ror	r24
    3dcc:	7a 95       	dec	r23
    3dce:	d1 f7       	brne	.-12     	; 0x3dc4 <MCAL_ADC_u8AdcSetValue+0x3a>
    3dd0:	70 2d       	mov	r23, r0
    3dd2:	ea 81       	ldd	r30, Y+2	; 0x02
    3dd4:	fb 81       	ldd	r31, Y+3	; 0x03
    3dd6:	91 83       	std	Z+1, r25	; 0x01
    3dd8:	80 83       	st	Z, r24
	return LOC_u8ReturnValue;
    3dda:	89 81       	ldd	r24, Y+1	; 0x01
}
    3ddc:	0f 90       	pop	r0
    3dde:	0f 90       	pop	r0
    3de0:	0f 90       	pop	r0
    3de2:	cf 91       	pop	r28
    3de4:	df 91       	pop	r29
    3de6:	08 95       	ret

00003de8 <MCAL_ADC_EXIT_CallBack>:

void MCAL_ADC_EXIT_CallBack(void (*ptr)(void)) {
    3de8:	df 93       	push	r29
    3dea:	cf 93       	push	r28
    3dec:	00 d0       	rcall	.+0      	; 0x3dee <MCAL_ADC_EXIT_CallBack+0x6>
    3dee:	cd b7       	in	r28, 0x3d	; 61
    3df0:	de b7       	in	r29, 0x3e	; 62
    3df2:	9a 83       	std	Y+2, r25	; 0x02
    3df4:	89 83       	std	Y+1, r24	; 0x01
	if (ptr != '\0')
    3df6:	89 81       	ldd	r24, Y+1	; 0x01
    3df8:	9a 81       	ldd	r25, Y+2	; 0x02
    3dfa:	00 97       	sbiw	r24, 0x00	; 0
    3dfc:	31 f0       	breq	.+12     	; 0x3e0a <MCAL_ADC_EXIT_CallBack+0x22>
		Gptr_ADC = ptr;
    3dfe:	89 81       	ldd	r24, Y+1	; 0x01
    3e00:	9a 81       	ldd	r25, Y+2	; 0x02
    3e02:	90 93 8c 01 	sts	0x018C, r25
    3e06:	80 93 8b 01 	sts	0x018B, r24
}
    3e0a:	0f 90       	pop	r0
    3e0c:	0f 90       	pop	r0
    3e0e:	cf 91       	pop	r28
    3e10:	df 91       	pop	r29
    3e12:	08 95       	ret

00003e14 <__vector_16>:

ISR(ADC_vect) {
    3e14:	1f 92       	push	r1
    3e16:	0f 92       	push	r0
    3e18:	0f b6       	in	r0, 0x3f	; 63
    3e1a:	0f 92       	push	r0
    3e1c:	11 24       	eor	r1, r1
    3e1e:	2f 93       	push	r18
    3e20:	3f 93       	push	r19
    3e22:	4f 93       	push	r20
    3e24:	5f 93       	push	r21
    3e26:	6f 93       	push	r22
    3e28:	7f 93       	push	r23
    3e2a:	8f 93       	push	r24
    3e2c:	9f 93       	push	r25
    3e2e:	af 93       	push	r26
    3e30:	bf 93       	push	r27
    3e32:	ef 93       	push	r30
    3e34:	ff 93       	push	r31
    3e36:	df 93       	push	r29
    3e38:	cf 93       	push	r28
    3e3a:	cd b7       	in	r28, 0x3d	; 61
    3e3c:	de b7       	in	r29, 0x3e	; 62
	if (Gptr_ADC != '\0')
    3e3e:	80 91 8b 01 	lds	r24, 0x018B
    3e42:	90 91 8c 01 	lds	r25, 0x018C
    3e46:	00 97       	sbiw	r24, 0x00	; 0
    3e48:	29 f0       	breq	.+10     	; 0x3e54 <__vector_16+0x40>
		Gptr_ADC();
    3e4a:	e0 91 8b 01 	lds	r30, 0x018B
    3e4e:	f0 91 8c 01 	lds	r31, 0x018C
    3e52:	09 95       	icall
}
    3e54:	cf 91       	pop	r28
    3e56:	df 91       	pop	r29
    3e58:	ff 91       	pop	r31
    3e5a:	ef 91       	pop	r30
    3e5c:	bf 91       	pop	r27
    3e5e:	af 91       	pop	r26
    3e60:	9f 91       	pop	r25
    3e62:	8f 91       	pop	r24
    3e64:	7f 91       	pop	r23
    3e66:	6f 91       	pop	r22
    3e68:	5f 91       	pop	r21
    3e6a:	4f 91       	pop	r20
    3e6c:	3f 91       	pop	r19
    3e6e:	2f 91       	pop	r18
    3e70:	0f 90       	pop	r0
    3e72:	0f be       	out	0x3f, r0	; 63
    3e74:	0f 90       	pop	r0
    3e76:	1f 90       	pop	r1
    3e78:	18 95       	reti

00003e7a <HAL_SM_voidSMInit>:
 *
 *  Created on: Oct 29, 2023
 *      Author: TOP_WORLD
 */
#include "Servo_Motor.h"
void HAL_SM_voidSMInit(void){
    3e7a:	df 93       	push	r29
    3e7c:	cf 93       	push	r28
    3e7e:	00 d0       	rcall	.+0      	; 0x3e80 <HAL_SM_voidSMInit+0x6>
    3e80:	00 d0       	rcall	.+0      	; 0x3e82 <HAL_SM_voidSMInit+0x8>
    3e82:	cd b7       	in	r28, 0x3d	; 61
    3e84:	de b7       	in	r29, 0x3e	; 62
	f32 Tick_Time=0;
    3e86:	80 e0       	ldi	r24, 0x00	; 0
    3e88:	90 e0       	ldi	r25, 0x00	; 0
    3e8a:	a0 e0       	ldi	r26, 0x00	; 0
    3e8c:	b0 e0       	ldi	r27, 0x00	; 0
    3e8e:	89 83       	std	Y+1, r24	; 0x01
    3e90:	9a 83       	std	Y+2, r25	; 0x02
    3e92:	ab 83       	std	Y+3, r26	; 0x03
    3e94:	bc 83       	std	Y+4, r27	; 0x04
	MCAL_T1_u8T1Init(FAST_PWM_ICR1);
    3e96:	8e e0       	ldi	r24, 0x0E	; 14
    3e98:	0e 94 bb 09 	call	0x1376	; 0x1376 <MCAL_T1_u8T1Init>
	MCAL_T1_u8T1Prescaler(PRESCALLING_64,&Tick_Time);
    3e9c:	83 e0       	ldi	r24, 0x03	; 3
    3e9e:	9e 01       	movw	r18, r28
    3ea0:	2f 5f       	subi	r18, 0xFF	; 255
    3ea2:	3f 4f       	sbci	r19, 0xFF	; 255
    3ea4:	b9 01       	movw	r22, r18
    3ea6:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <MCAL_T1_u8T1Prescaler>
	MCAL_T1_u8T1CompareOutputMode(NON_INVERTING_MODE,CHENNEL_A);
    3eaa:	80 e0       	ldi	r24, 0x00	; 0
    3eac:	60 e0       	ldi	r22, 0x00	; 0
    3eae:	0e 94 f4 0c 	call	0x19e8	; 0x19e8 <MCAL_T1_u8T1CompareOutputMode>
	MCAL_T1_voidSetICR1Value(INIT_VALUE);
    3eb2:	87 e8       	ldi	r24, 0x87	; 135
    3eb4:	93 e1       	ldi	r25, 0x13	; 19
    3eb6:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <MCAL_T1_voidSetICR1Value>
	MCAL_T1_voidSetOCR1AValue(START_ZERO);
    3eba:	8a e8       	ldi	r24, 0x8A	; 138
    3ebc:	90 e0       	ldi	r25, 0x00	; 0
    3ebe:	0e 94 b3 0d 	call	0x1b66	; 0x1b66 <MCAL_T1_voidSetOCR1AValue>

}
    3ec2:	0f 90       	pop	r0
    3ec4:	0f 90       	pop	r0
    3ec6:	0f 90       	pop	r0
    3ec8:	0f 90       	pop	r0
    3eca:	cf 91       	pop	r28
    3ecc:	df 91       	pop	r29
    3ece:	08 95       	ret

00003ed0 <HAL_SM_voidSMSetAngle>:
void HAL_SM_voidSMSetAngle(u8 LOC_u8Angle){
    3ed0:	df 93       	push	r29
    3ed2:	cf 93       	push	r28
    3ed4:	00 d0       	rcall	.+0      	; 0x3ed6 <HAL_SM_voidSMSetAngle+0x6>
    3ed6:	0f 92       	push	r0
    3ed8:	cd b7       	in	r28, 0x3d	; 61
    3eda:	de b7       	in	r29, 0x3e	; 62
    3edc:	8b 83       	std	Y+3, r24	; 0x03
	if(LOC_u8Angle<=MAX_ANGLE&&LOC_u8Angle>=MIN_ANGLE){
    3ede:	8b 81       	ldd	r24, Y+3	; 0x03
    3ee0:	88 2f       	mov	r24, r24
    3ee2:	90 e0       	ldi	r25, 0x00	; 0
    3ee4:	aa 27       	eor	r26, r26
    3ee6:	97 fd       	sbrc	r25, 7
    3ee8:	a0 95       	com	r26
    3eea:	ba 2f       	mov	r27, r26
    3eec:	bc 01       	movw	r22, r24
    3eee:	cd 01       	movw	r24, r26
    3ef0:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    3ef4:	dc 01       	movw	r26, r24
    3ef6:	cb 01       	movw	r24, r22
    3ef8:	bc 01       	movw	r22, r24
    3efa:	cd 01       	movw	r24, r26
    3efc:	20 e0       	ldi	r18, 0x00	; 0
    3efe:	30 e0       	ldi	r19, 0x00	; 0
    3f00:	44 e3       	ldi	r20, 0x34	; 52
    3f02:	53 e4       	ldi	r21, 0x43	; 67
    3f04:	0e 94 55 04 	call	0x8aa	; 0x8aa <__lesf2>
    3f08:	18 16       	cp	r1, r24
    3f0a:	bc f1       	brlt	.+110    	; 0x3f7a <HAL_SM_voidSMSetAngle+0xaa>
	u16 SetAngle=START_ZERO+((LOC_u8Angle/MAX_ANGLE)*BETWEEN_0_180);
    3f0c:	8b 81       	ldd	r24, Y+3	; 0x03
    3f0e:	88 2f       	mov	r24, r24
    3f10:	90 e0       	ldi	r25, 0x00	; 0
    3f12:	aa 27       	eor	r26, r26
    3f14:	97 fd       	sbrc	r25, 7
    3f16:	a0 95       	com	r26
    3f18:	ba 2f       	mov	r27, r26
    3f1a:	bc 01       	movw	r22, r24
    3f1c:	cd 01       	movw	r24, r26
    3f1e:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    3f22:	dc 01       	movw	r26, r24
    3f24:	cb 01       	movw	r24, r22
    3f26:	bc 01       	movw	r22, r24
    3f28:	cd 01       	movw	r24, r26
    3f2a:	20 e0       	ldi	r18, 0x00	; 0
    3f2c:	30 e0       	ldi	r19, 0x00	; 0
    3f2e:	44 e3       	ldi	r20, 0x34	; 52
    3f30:	53 e4       	ldi	r21, 0x43	; 67
    3f32:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3f36:	dc 01       	movw	r26, r24
    3f38:	cb 01       	movw	r24, r22
    3f3a:	bc 01       	movw	r22, r24
    3f3c:	cd 01       	movw	r24, r26
    3f3e:	20 e0       	ldi	r18, 0x00	; 0
    3f40:	30 e0       	ldi	r19, 0x00	; 0
    3f42:	4e ef       	ldi	r20, 0xFE	; 254
    3f44:	53 e4       	ldi	r21, 0x43	; 67
    3f46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f4a:	dc 01       	movw	r26, r24
    3f4c:	cb 01       	movw	r24, r22
    3f4e:	bc 01       	movw	r22, r24
    3f50:	cd 01       	movw	r24, r26
    3f52:	20 e0       	ldi	r18, 0x00	; 0
    3f54:	30 e0       	ldi	r19, 0x00	; 0
    3f56:	4a e0       	ldi	r20, 0x0A	; 10
    3f58:	53 e4       	ldi	r21, 0x43	; 67
    3f5a:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    3f5e:	dc 01       	movw	r26, r24
    3f60:	cb 01       	movw	r24, r22
    3f62:	bc 01       	movw	r22, r24
    3f64:	cd 01       	movw	r24, r26
    3f66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f6a:	dc 01       	movw	r26, r24
    3f6c:	cb 01       	movw	r24, r22
    3f6e:	9a 83       	std	Y+2, r25	; 0x02
    3f70:	89 83       	std	Y+1, r24	; 0x01
	MCAL_T1_voidSetOCR1AValue(SetAngle);
    3f72:	89 81       	ldd	r24, Y+1	; 0x01
    3f74:	9a 81       	ldd	r25, Y+2	; 0x02
    3f76:	0e 94 b3 0d 	call	0x1b66	; 0x1b66 <MCAL_T1_voidSetOCR1AValue>
	}else {
		//NOTHING
	}
}
    3f7a:	0f 90       	pop	r0
    3f7c:	0f 90       	pop	r0
    3f7e:	0f 90       	pop	r0
    3f80:	cf 91       	pop	r28
    3f82:	df 91       	pop	r29
    3f84:	08 95       	ret

00003f86 <HAL_PushButton_u8PushButtonInit>:
u8 Glob_PB0_u8PinValue=0;
u8 Glob_PB1_u8PinValue=0;
u8 Glob_PB2_u8PinValue=0;

STD_Type HAL_PushButton_u8PushButtonInit(u8 Loc_u8PushButtonPortID,
		u8 Loc_u8PushButtonPinID) {
    3f86:	df 93       	push	r29
    3f88:	cf 93       	push	r28
    3f8a:	00 d0       	rcall	.+0      	; 0x3f8c <HAL_PushButton_u8PushButtonInit+0x6>
    3f8c:	0f 92       	push	r0
    3f8e:	cd b7       	in	r28, 0x3d	; 61
    3f90:	de b7       	in	r29, 0x3e	; 62
    3f92:	8a 83       	std	Y+2, r24	; 0x02
    3f94:	6b 83       	std	Y+3, r22	; 0x03
	u8 Loc_u8Return_Value = E_NOT_OK;
    3f96:	81 e0       	ldi	r24, 0x01	; 1
    3f98:	89 83       	std	Y+1, r24	; 0x01
	if (Loc_u8PushButtonPortID <= PortD && Loc_u8PushButtonPinID <= Num_Of_Pins) {
    3f9a:	8a 81       	ldd	r24, Y+2	; 0x02
    3f9c:	84 30       	cpi	r24, 0x04	; 4
    3f9e:	48 f4       	brcc	.+18     	; 0x3fb2 <HAL_PushButton_u8PushButtonInit+0x2c>
    3fa0:	8b 81       	ldd	r24, Y+3	; 0x03
    3fa2:	88 30       	cpi	r24, 0x08	; 8
    3fa4:	30 f4       	brcc	.+12     	; 0x3fb2 <HAL_PushButton_u8PushButtonInit+0x2c>
		Loc_u8Return_Value = MCAL_DIO_u8SetPinDirection(Loc_u8PushButtonPortID,
    3fa6:	8a 81       	ldd	r24, Y+2	; 0x02
    3fa8:	6b 81       	ldd	r22, Y+3	; 0x03
    3faa:	41 e0       	ldi	r20, 0x01	; 1
    3fac:	0e 94 7a 19 	call	0x32f4	; 0x32f4 <MCAL_DIO_u8SetPinDirection>
    3fb0:	89 83       	std	Y+1, r24	; 0x01
				Loc_u8PushButtonPinID, Pin_High);
	} else {
		//Do Nothing
	}
	return Loc_u8Return_Value;
    3fb2:	89 81       	ldd	r24, Y+1	; 0x01
}
    3fb4:	0f 90       	pop	r0
    3fb6:	0f 90       	pop	r0
    3fb8:	0f 90       	pop	r0
    3fba:	cf 91       	pop	r28
    3fbc:	df 91       	pop	r29
    3fbe:	08 95       	ret

00003fc0 <HAL_PushButton_u8PushButtonCheck>:

STD_Type HAL_PushButton_u8PushButtonCheck(u8 Loc_u8PushButtonPortID,
		u8 Loc_u8PushButtonPinID) {
    3fc0:	df 93       	push	r29
    3fc2:	cf 93       	push	r28
    3fc4:	00 d0       	rcall	.+0      	; 0x3fc6 <HAL_PushButton_u8PushButtonCheck+0x6>
    3fc6:	0f 92       	push	r0
    3fc8:	cd b7       	in	r28, 0x3d	; 61
    3fca:	de b7       	in	r29, 0x3e	; 62
    3fcc:	8a 83       	std	Y+2, r24	; 0x02
    3fce:	6b 83       	std	Y+3, r22	; 0x03
	u8 Loc_u8Return_Value = E_NOT_OK;
    3fd0:	81 e0       	ldi	r24, 0x01	; 1
    3fd2:	89 83       	std	Y+1, r24	; 0x01
	if (Loc_u8PushButtonPortID <= PortD && Loc_u8PushButtonPinID <= Num_Of_Pins) {
    3fd4:	8a 81       	ldd	r24, Y+2	; 0x02
    3fd6:	84 30       	cpi	r24, 0x04	; 4
    3fd8:	30 f5       	brcc	.+76     	; 0x4026 <HAL_PushButton_u8PushButtonCheck+0x66>
    3fda:	8b 81       	ldd	r24, Y+3	; 0x03
    3fdc:	88 30       	cpi	r24, 0x08	; 8
    3fde:	18 f5       	brcc	.+70     	; 0x4026 <HAL_PushButton_u8PushButtonCheck+0x66>
		if(Loc_u8PushButtonPinID==PushButton0_PIN){
    3fe0:	8b 81       	ldd	r24, Y+3	; 0x03
    3fe2:	88 23       	and	r24, r24
    3fe4:	49 f4       	brne	.+18     	; 0x3ff8 <HAL_PushButton_u8PushButtonCheck+0x38>
			Loc_u8Return_Value = MCAL_DIO_u8GetPinValue(Loc_u8PushButtonPortID,
    3fe6:	2d e8       	ldi	r18, 0x8D	; 141
    3fe8:	31 e0       	ldi	r19, 0x01	; 1
    3fea:	8a 81       	ldd	r24, Y+2	; 0x02
    3fec:	6b 81       	ldd	r22, Y+3	; 0x03
    3fee:	a9 01       	movw	r20, r18
    3ff0:	0e 94 14 1c 	call	0x3828	; 0x3828 <MCAL_DIO_u8GetPinValue>
    3ff4:	89 83       	std	Y+1, r24	; 0x01
    3ff6:	17 c0       	rjmp	.+46     	; 0x4026 <HAL_PushButton_u8PushButtonCheck+0x66>
					Loc_u8PushButtonPinID, &Glob_PB0_u8PinValue);
		}
		else if(Loc_u8PushButtonPinID==PushButton1_PIN){
    3ff8:	8b 81       	ldd	r24, Y+3	; 0x03
    3ffa:	86 30       	cpi	r24, 0x06	; 6
    3ffc:	49 f4       	brne	.+18     	; 0x4010 <HAL_PushButton_u8PushButtonCheck+0x50>
			Loc_u8Return_Value = MCAL_DIO_u8GetPinValue(Loc_u8PushButtonPortID,
    3ffe:	2e e8       	ldi	r18, 0x8E	; 142
    4000:	31 e0       	ldi	r19, 0x01	; 1
    4002:	8a 81       	ldd	r24, Y+2	; 0x02
    4004:	6b 81       	ldd	r22, Y+3	; 0x03
    4006:	a9 01       	movw	r20, r18
    4008:	0e 94 14 1c 	call	0x3828	; 0x3828 <MCAL_DIO_u8GetPinValue>
    400c:	89 83       	std	Y+1, r24	; 0x01
    400e:	0b c0       	rjmp	.+22     	; 0x4026 <HAL_PushButton_u8PushButtonCheck+0x66>
					Loc_u8PushButtonPinID, &Glob_PB1_u8PinValue);
		}
		else if(Loc_u8PushButtonPinID==PushButton2_PIN){
    4010:	8b 81       	ldd	r24, Y+3	; 0x03
    4012:	82 30       	cpi	r24, 0x02	; 2
    4014:	41 f4       	brne	.+16     	; 0x4026 <HAL_PushButton_u8PushButtonCheck+0x66>
			Loc_u8Return_Value = MCAL_DIO_u8GetPinValue(Loc_u8PushButtonPortID,
    4016:	2f e8       	ldi	r18, 0x8F	; 143
    4018:	31 e0       	ldi	r19, 0x01	; 1
    401a:	8a 81       	ldd	r24, Y+2	; 0x02
    401c:	6b 81       	ldd	r22, Y+3	; 0x03
    401e:	a9 01       	movw	r20, r18
    4020:	0e 94 14 1c 	call	0x3828	; 0x3828 <MCAL_DIO_u8GetPinValue>
    4024:	89 83       	std	Y+1, r24	; 0x01
			//Do Nothing
		}
	} else {
		//Do Nothing
	}
	return Loc_u8Return_Value;
    4026:	89 81       	ldd	r24, Y+1	; 0x01
}
    4028:	0f 90       	pop	r0
    402a:	0f 90       	pop	r0
    402c:	0f 90       	pop	r0
    402e:	cf 91       	pop	r28
    4030:	df 91       	pop	r29
    4032:	08 95       	ret

00004034 <HAL_Potentiometer_PotentiometerInit>:
 *      Author: Mohamed
 */

#include "Potentiometer.h"

void HAL_Potentiometer_PotentiometerInit(u8 Loc_u8PotPort,u8 Loc_u8PotPin) {
    4034:	df 93       	push	r29
    4036:	cf 93       	push	r28
    4038:	00 d0       	rcall	.+0      	; 0x403a <HAL_Potentiometer_PotentiometerInit+0x6>
    403a:	cd b7       	in	r28, 0x3d	; 61
    403c:	de b7       	in	r29, 0x3e	; 62
    403e:	89 83       	std	Y+1, r24	; 0x01
    4040:	6a 83       	std	Y+2, r22	; 0x02
//	MCAL_DIO_u8SetPinDirection(Loc_u8PotPort,Loc_u8PotPin,Pin_Low);
	MCAL_ADC_AdcInit(Adc_1);
    4042:	81 e0       	ldi	r24, 0x01	; 1
    4044:	0e 94 43 1e 	call	0x3c86	; 0x3c86 <MCAL_ADC_AdcInit>
}
    4048:	0f 90       	pop	r0
    404a:	0f 90       	pop	r0
    404c:	cf 91       	pop	r28
    404e:	df 91       	pop	r29
    4050:	08 95       	ret

00004052 <HAL_Potentiometer_PotentiometerValue>:

void HAL_Potentiometer_PotentiometerValue(u16 *Loc_u16Value) {
    4052:	df 93       	push	r29
    4054:	cf 93       	push	r28
    4056:	00 d0       	rcall	.+0      	; 0x4058 <HAL_Potentiometer_PotentiometerValue+0x6>
    4058:	cd b7       	in	r28, 0x3d	; 61
    405a:	de b7       	in	r29, 0x3e	; 62
    405c:	9a 83       	std	Y+2, r25	; 0x02
    405e:	89 83       	std	Y+1, r24	; 0x01
	MCAL_ADC_AdcStartConversion(Enable);
    4060:	81 e0       	ldi	r24, 0x01	; 1
    4062:	0e 94 aa 1e 	call	0x3d54	; 0x3d54 <MCAL_ADC_AdcStartConversion>
	MCAL_ADC_u8AdcSetValue(Loc_u16Value);
    4066:	89 81       	ldd	r24, Y+1	; 0x01
    4068:	9a 81       	ldd	r25, Y+2	; 0x02
    406a:	0e 94 c5 1e 	call	0x3d8a	; 0x3d8a <MCAL_ADC_u8AdcSetValue>
}
    406e:	0f 90       	pop	r0
    4070:	0f 90       	pop	r0
    4072:	cf 91       	pop	r28
    4074:	df 91       	pop	r29
    4076:	08 95       	ret

00004078 <HAL_LED_u8LedInit>:
 *  Created on: Sep 25, 2023
 *      Author: Mohamed
 */
#include "LED.h"

STD_Type HAL_LED_u8LedInit(u8 Loc_u8LEDPortID, u8 Loc_u8LEDPinID) {
    4078:	df 93       	push	r29
    407a:	cf 93       	push	r28
    407c:	00 d0       	rcall	.+0      	; 0x407e <HAL_LED_u8LedInit+0x6>
    407e:	0f 92       	push	r0
    4080:	cd b7       	in	r28, 0x3d	; 61
    4082:	de b7       	in	r29, 0x3e	; 62
    4084:	8a 83       	std	Y+2, r24	; 0x02
    4086:	6b 83       	std	Y+3, r22	; 0x03
	u8 Loc_u8Return_Value = E_NOT_OK;
    4088:	81 e0       	ldi	r24, 0x01	; 1
    408a:	89 83       	std	Y+1, r24	; 0x01
	if (Loc_u8LEDPortID <= PortD && Loc_u8LEDPinID <= Num_Of_Pins) {
    408c:	8a 81       	ldd	r24, Y+2	; 0x02
    408e:	84 30       	cpi	r24, 0x04	; 4
    4090:	48 f4       	brcc	.+18     	; 0x40a4 <HAL_LED_u8LedInit+0x2c>
    4092:	8b 81       	ldd	r24, Y+3	; 0x03
    4094:	88 30       	cpi	r24, 0x08	; 8
    4096:	30 f4       	brcc	.+12     	; 0x40a4 <HAL_LED_u8LedInit+0x2c>
		Loc_u8Return_Value = MCAL_DIO_u8SetPinDirection(Loc_u8LEDPortID,
    4098:	8a 81       	ldd	r24, Y+2	; 0x02
    409a:	6b 81       	ldd	r22, Y+3	; 0x03
    409c:	41 e0       	ldi	r20, 0x01	; 1
    409e:	0e 94 7a 19 	call	0x32f4	; 0x32f4 <MCAL_DIO_u8SetPinDirection>
    40a2:	89 83       	std	Y+1, r24	; 0x01
				Loc_u8LEDPinID, Pin_High);
	} else {
		//Do Nothing
	}
	return Loc_u8Return_Value;
    40a4:	89 81       	ldd	r24, Y+1	; 0x01
}
    40a6:	0f 90       	pop	r0
    40a8:	0f 90       	pop	r0
    40aa:	0f 90       	pop	r0
    40ac:	cf 91       	pop	r28
    40ae:	df 91       	pop	r29
    40b0:	08 95       	ret

000040b2 <HAL_LED_u8LedMode>:

STD_Type HAL_LED_u8LedMode(u8 Loc_u8LEDPortID, u8 Loc_u8LEDPinID,
		u8 Loc_u8LEDMode) {
    40b2:	df 93       	push	r29
    40b4:	cf 93       	push	r28
    40b6:	00 d0       	rcall	.+0      	; 0x40b8 <HAL_LED_u8LedMode+0x6>
    40b8:	00 d0       	rcall	.+0      	; 0x40ba <HAL_LED_u8LedMode+0x8>
    40ba:	cd b7       	in	r28, 0x3d	; 61
    40bc:	de b7       	in	r29, 0x3e	; 62
    40be:	8a 83       	std	Y+2, r24	; 0x02
    40c0:	6b 83       	std	Y+3, r22	; 0x03
    40c2:	4c 83       	std	Y+4, r20	; 0x04
	u8 Loc_u8Return_Value = E_NOT_OK;
    40c4:	81 e0       	ldi	r24, 0x01	; 1
    40c6:	89 83       	std	Y+1, r24	; 0x01
	if (Loc_u8LEDPortID <= PortD && Loc_u8LEDPinID <= Num_Of_Pins
    40c8:	8a 81       	ldd	r24, Y+2	; 0x02
    40ca:	84 30       	cpi	r24, 0x04	; 4
    40cc:	10 f5       	brcc	.+68     	; 0x4112 <HAL_LED_u8LedMode+0x60>
    40ce:	8b 81       	ldd	r24, Y+3	; 0x03
    40d0:	88 30       	cpi	r24, 0x08	; 8
    40d2:	f8 f4       	brcc	.+62     	; 0x4112 <HAL_LED_u8LedMode+0x60>
    40d4:	8c 81       	ldd	r24, Y+4	; 0x04
    40d6:	83 30       	cpi	r24, 0x03	; 3
    40d8:	e0 f4       	brcc	.+56     	; 0x4112 <HAL_LED_u8LedMode+0x60>
			&& Loc_u8LEDMode <= LED_TOG) {
		if (Loc_u8LEDMode == LED_ON) {
    40da:	8c 81       	ldd	r24, Y+4	; 0x04
    40dc:	81 30       	cpi	r24, 0x01	; 1
    40de:	39 f4       	brne	.+14     	; 0x40ee <HAL_LED_u8LedMode+0x3c>
			Loc_u8Return_Value = MCAL_DIO_u8SetPinValue(Loc_u8LEDPortID,
    40e0:	8a 81       	ldd	r24, Y+2	; 0x02
    40e2:	6b 81       	ldd	r22, Y+3	; 0x03
    40e4:	41 e0       	ldi	r20, 0x01	; 1
    40e6:	0e 94 e8 1a 	call	0x35d0	; 0x35d0 <MCAL_DIO_u8SetPinValue>
    40ea:	89 83       	std	Y+1, r24	; 0x01
    40ec:	12 c0       	rjmp	.+36     	; 0x4112 <HAL_LED_u8LedMode+0x60>
					Loc_u8LEDPinID, Pin_High);
		} else if (Loc_u8LEDMode == LED_OFF) {
    40ee:	8c 81       	ldd	r24, Y+4	; 0x04
    40f0:	88 23       	and	r24, r24
    40f2:	39 f4       	brne	.+14     	; 0x4102 <HAL_LED_u8LedMode+0x50>
			Loc_u8Return_Value = MCAL_DIO_u8SetPinValue(Loc_u8LEDPortID,
    40f4:	8a 81       	ldd	r24, Y+2	; 0x02
    40f6:	6b 81       	ldd	r22, Y+3	; 0x03
    40f8:	40 e0       	ldi	r20, 0x00	; 0
    40fa:	0e 94 e8 1a 	call	0x35d0	; 0x35d0 <MCAL_DIO_u8SetPinValue>
    40fe:	89 83       	std	Y+1, r24	; 0x01
    4100:	08 c0       	rjmp	.+16     	; 0x4112 <HAL_LED_u8LedMode+0x60>
					Loc_u8LEDPinID, Pin_Low);
		} else if (Loc_u8LEDMode == LED_TOG) {
    4102:	8c 81       	ldd	r24, Y+4	; 0x04
    4104:	82 30       	cpi	r24, 0x02	; 2
    4106:	29 f4       	brne	.+10     	; 0x4112 <HAL_LED_u8LedMode+0x60>
			Loc_u8Return_Value = MCAL_DIO_u8TogglePinValue(Loc_u8LEDPortID,
    4108:	8a 81       	ldd	r24, Y+2	; 0x02
    410a:	6b 81       	ldd	r22, Y+3	; 0x03
    410c:	0e 94 d1 1c 	call	0x39a2	; 0x39a2 <MCAL_DIO_u8TogglePinValue>
    4110:	89 83       	std	Y+1, r24	; 0x01
			//Do Nothing
		}
	} else {
		//Do Nothing
	}
	return Loc_u8Return_Value;
    4112:	89 81       	ldd	r24, Y+1	; 0x01
}
    4114:	0f 90       	pop	r0
    4116:	0f 90       	pop	r0
    4118:	0f 90       	pop	r0
    411a:	0f 90       	pop	r0
    411c:	cf 91       	pop	r28
    411e:	df 91       	pop	r29
    4120:	08 95       	ret

00004122 <HAL_LCD_u8LCDInit>:

#include "LCD.h"

//static u32 Counter = 0;

void HAL_LCD_u8LCDInit() {
    4122:	0f 93       	push	r16
    4124:	1f 93       	push	r17
    4126:	df 93       	push	r29
    4128:	cf 93       	push	r28
    412a:	cd b7       	in	r28, 0x3d	; 61
    412c:	de b7       	in	r29, 0x3e	; 62
    412e:	c6 54       	subi	r28, 0x46	; 70
    4130:	d0 40       	sbci	r29, 0x00	; 0
    4132:	0f b6       	in	r0, 0x3f	; 63
    4134:	f8 94       	cli
    4136:	de bf       	out	0x3e, r29	; 62
    4138:	0f be       	out	0x3f, r0	; 63
    413a:	cd bf       	out	0x3d, r28	; 61
	MCAL_DIO_u8SetPinDirection(LCD_D_PORT, LCD_D7_PIN, Pin_High);
    413c:	80 e0       	ldi	r24, 0x00	; 0
    413e:	67 e0       	ldi	r22, 0x07	; 7
    4140:	41 e0       	ldi	r20, 0x01	; 1
    4142:	0e 94 7a 19 	call	0x32f4	; 0x32f4 <MCAL_DIO_u8SetPinDirection>
	MCAL_DIO_u8SetPinDirection(LCD_D_PORT, LCD_D6_PIN, Pin_High);
    4146:	80 e0       	ldi	r24, 0x00	; 0
    4148:	66 e0       	ldi	r22, 0x06	; 6
    414a:	41 e0       	ldi	r20, 0x01	; 1
    414c:	0e 94 7a 19 	call	0x32f4	; 0x32f4 <MCAL_DIO_u8SetPinDirection>
	MCAL_DIO_u8SetPinDirection(LCD_D_PORT, LCD_D5_PIN, Pin_High);
    4150:	80 e0       	ldi	r24, 0x00	; 0
    4152:	65 e0       	ldi	r22, 0x05	; 5
    4154:	41 e0       	ldi	r20, 0x01	; 1
    4156:	0e 94 7a 19 	call	0x32f4	; 0x32f4 <MCAL_DIO_u8SetPinDirection>
	MCAL_DIO_u8SetPinDirection(LCD_D_PORT, LCD_D4_PIN, Pin_High);
    415a:	80 e0       	ldi	r24, 0x00	; 0
    415c:	64 e0       	ldi	r22, 0x04	; 4
    415e:	41 e0       	ldi	r20, 0x01	; 1
    4160:	0e 94 7a 19 	call	0x32f4	; 0x32f4 <MCAL_DIO_u8SetPinDirection>
	MCAL_DIO_u8SetPinDirection(RS_Port, RS_Pin, Pin_High);
    4164:	81 e0       	ldi	r24, 0x01	; 1
    4166:	61 e0       	ldi	r22, 0x01	; 1
    4168:	41 e0       	ldi	r20, 0x01	; 1
    416a:	0e 94 7a 19 	call	0x32f4	; 0x32f4 <MCAL_DIO_u8SetPinDirection>
	MCAL_DIO_u8SetPinDirection(RW_Port, RW_Pin, Pin_High);
    416e:	81 e0       	ldi	r24, 0x01	; 1
    4170:	62 e0       	ldi	r22, 0x02	; 2
    4172:	41 e0       	ldi	r20, 0x01	; 1
    4174:	0e 94 7a 19 	call	0x32f4	; 0x32f4 <MCAL_DIO_u8SetPinDirection>
	MCAL_DIO_u8SetPinDirection(Enable_PORT, Enable_PIN, Pin_High);
    4178:	81 e0       	ldi	r24, 0x01	; 1
    417a:	63 e0       	ldi	r22, 0x03	; 3
    417c:	41 e0       	ldi	r20, 0x01	; 1
    417e:	0e 94 7a 19 	call	0x32f4	; 0x32f4 <MCAL_DIO_u8SetPinDirection>
    4182:	fe 01       	movw	r30, r28
    4184:	ed 5b       	subi	r30, 0xBD	; 189
    4186:	ff 4f       	sbci	r31, 0xFF	; 255
    4188:	80 e0       	ldi	r24, 0x00	; 0
    418a:	90 e0       	ldi	r25, 0x00	; 0
    418c:	a0 e0       	ldi	r26, 0x00	; 0
    418e:	b0 e4       	ldi	r27, 0x40	; 64
    4190:	80 83       	st	Z, r24
    4192:	91 83       	std	Z+1, r25	; 0x01
    4194:	a2 83       	std	Z+2, r26	; 0x02
    4196:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4198:	8e 01       	movw	r16, r28
    419a:	01 5c       	subi	r16, 0xC1	; 193
    419c:	1f 4f       	sbci	r17, 0xFF	; 255
    419e:	fe 01       	movw	r30, r28
    41a0:	ed 5b       	subi	r30, 0xBD	; 189
    41a2:	ff 4f       	sbci	r31, 0xFF	; 255
    41a4:	60 81       	ld	r22, Z
    41a6:	71 81       	ldd	r23, Z+1	; 0x01
    41a8:	82 81       	ldd	r24, Z+2	; 0x02
    41aa:	93 81       	ldd	r25, Z+3	; 0x03
    41ac:	20 e0       	ldi	r18, 0x00	; 0
    41ae:	30 e0       	ldi	r19, 0x00	; 0
    41b0:	4a e7       	ldi	r20, 0x7A	; 122
    41b2:	55 e4       	ldi	r21, 0x45	; 69
    41b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    41b8:	dc 01       	movw	r26, r24
    41ba:	cb 01       	movw	r24, r22
    41bc:	f8 01       	movw	r30, r16
    41be:	80 83       	st	Z, r24
    41c0:	91 83       	std	Z+1, r25	; 0x01
    41c2:	a2 83       	std	Z+2, r26	; 0x02
    41c4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    41c6:	fe 01       	movw	r30, r28
    41c8:	ff 96       	adiw	r30, 0x3f	; 63
    41ca:	60 81       	ld	r22, Z
    41cc:	71 81       	ldd	r23, Z+1	; 0x01
    41ce:	82 81       	ldd	r24, Z+2	; 0x02
    41d0:	93 81       	ldd	r25, Z+3	; 0x03
    41d2:	20 e0       	ldi	r18, 0x00	; 0
    41d4:	30 e0       	ldi	r19, 0x00	; 0
    41d6:	40 e8       	ldi	r20, 0x80	; 128
    41d8:	5f e3       	ldi	r21, 0x3F	; 63
    41da:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    41de:	88 23       	and	r24, r24
    41e0:	2c f4       	brge	.+10     	; 0x41ec <HAL_LCD_u8LCDInit+0xca>
		__ticks = 1;
    41e2:	81 e0       	ldi	r24, 0x01	; 1
    41e4:	90 e0       	ldi	r25, 0x00	; 0
    41e6:	9e af       	std	Y+62, r25	; 0x3e
    41e8:	8d af       	std	Y+61, r24	; 0x3d
    41ea:	46 c0       	rjmp	.+140    	; 0x4278 <HAL_LCD_u8LCDInit+0x156>
	else if (__tmp > 65535)
    41ec:	fe 01       	movw	r30, r28
    41ee:	ff 96       	adiw	r30, 0x3f	; 63
    41f0:	60 81       	ld	r22, Z
    41f2:	71 81       	ldd	r23, Z+1	; 0x01
    41f4:	82 81       	ldd	r24, Z+2	; 0x02
    41f6:	93 81       	ldd	r25, Z+3	; 0x03
    41f8:	20 e0       	ldi	r18, 0x00	; 0
    41fa:	3f ef       	ldi	r19, 0xFF	; 255
    41fc:	4f e7       	ldi	r20, 0x7F	; 127
    41fe:	57 e4       	ldi	r21, 0x47	; 71
    4200:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4204:	18 16       	cp	r1, r24
    4206:	64 f5       	brge	.+88     	; 0x4260 <HAL_LCD_u8LCDInit+0x13e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4208:	fe 01       	movw	r30, r28
    420a:	ed 5b       	subi	r30, 0xBD	; 189
    420c:	ff 4f       	sbci	r31, 0xFF	; 255
    420e:	60 81       	ld	r22, Z
    4210:	71 81       	ldd	r23, Z+1	; 0x01
    4212:	82 81       	ldd	r24, Z+2	; 0x02
    4214:	93 81       	ldd	r25, Z+3	; 0x03
    4216:	20 e0       	ldi	r18, 0x00	; 0
    4218:	30 e0       	ldi	r19, 0x00	; 0
    421a:	40 e2       	ldi	r20, 0x20	; 32
    421c:	51 e4       	ldi	r21, 0x41	; 65
    421e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4222:	dc 01       	movw	r26, r24
    4224:	cb 01       	movw	r24, r22
    4226:	bc 01       	movw	r22, r24
    4228:	cd 01       	movw	r24, r26
    422a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    422e:	dc 01       	movw	r26, r24
    4230:	cb 01       	movw	r24, r22
    4232:	9e af       	std	Y+62, r25	; 0x3e
    4234:	8d af       	std	Y+61, r24	; 0x3d
    4236:	0f c0       	rjmp	.+30     	; 0x4256 <HAL_LCD_u8LCDInit+0x134>
    4238:	80 e9       	ldi	r24, 0x90	; 144
    423a:	91 e0       	ldi	r25, 0x01	; 1
    423c:	9c af       	std	Y+60, r25	; 0x3c
    423e:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    4240:	8b ad       	ldd	r24, Y+59	; 0x3b
    4242:	9c ad       	ldd	r25, Y+60	; 0x3c
    4244:	01 97       	sbiw	r24, 0x01	; 1
    4246:	f1 f7       	brne	.-4      	; 0x4244 <HAL_LCD_u8LCDInit+0x122>
    4248:	9c af       	std	Y+60, r25	; 0x3c
    424a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    424c:	8d ad       	ldd	r24, Y+61	; 0x3d
    424e:	9e ad       	ldd	r25, Y+62	; 0x3e
    4250:	01 97       	sbiw	r24, 0x01	; 1
    4252:	9e af       	std	Y+62, r25	; 0x3e
    4254:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4256:	8d ad       	ldd	r24, Y+61	; 0x3d
    4258:	9e ad       	ldd	r25, Y+62	; 0x3e
    425a:	00 97       	sbiw	r24, 0x00	; 0
    425c:	69 f7       	brne	.-38     	; 0x4238 <HAL_LCD_u8LCDInit+0x116>
    425e:	16 c0       	rjmp	.+44     	; 0x428c <HAL_LCD_u8LCDInit+0x16a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4260:	fe 01       	movw	r30, r28
    4262:	ff 96       	adiw	r30, 0x3f	; 63
    4264:	60 81       	ld	r22, Z
    4266:	71 81       	ldd	r23, Z+1	; 0x01
    4268:	82 81       	ldd	r24, Z+2	; 0x02
    426a:	93 81       	ldd	r25, Z+3	; 0x03
    426c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4270:	dc 01       	movw	r26, r24
    4272:	cb 01       	movw	r24, r22
    4274:	9e af       	std	Y+62, r25	; 0x3e
    4276:	8d af       	std	Y+61, r24	; 0x3d
    4278:	8d ad       	ldd	r24, Y+61	; 0x3d
    427a:	9e ad       	ldd	r25, Y+62	; 0x3e
    427c:	9a af       	std	Y+58, r25	; 0x3a
    427e:	89 af       	std	Y+57, r24	; 0x39
    4280:	89 ad       	ldd	r24, Y+57	; 0x39
    4282:	9a ad       	ldd	r25, Y+58	; 0x3a
    4284:	01 97       	sbiw	r24, 0x01	; 1
    4286:	f1 f7       	brne	.-4      	; 0x4284 <HAL_LCD_u8LCDInit+0x162>
    4288:	9a af       	std	Y+58, r25	; 0x3a
    428a:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(2);
	HAL_LCD_u8SendCommands(Reset);
    428c:	82 e0       	ldi	r24, 0x02	; 2
    428e:	0e 94 29 23 	call	0x4652	; 0x4652 <HAL_LCD_u8SendCommands>
    4292:	80 e0       	ldi	r24, 0x00	; 0
    4294:	90 e0       	ldi	r25, 0x00	; 0
    4296:	a0 e0       	ldi	r26, 0x00	; 0
    4298:	b0 e4       	ldi	r27, 0x40	; 64
    429a:	8d ab       	std	Y+53, r24	; 0x35
    429c:	9e ab       	std	Y+54, r25	; 0x36
    429e:	af ab       	std	Y+55, r26	; 0x37
    42a0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    42a2:	6d a9       	ldd	r22, Y+53	; 0x35
    42a4:	7e a9       	ldd	r23, Y+54	; 0x36
    42a6:	8f a9       	ldd	r24, Y+55	; 0x37
    42a8:	98 ad       	ldd	r25, Y+56	; 0x38
    42aa:	20 e0       	ldi	r18, 0x00	; 0
    42ac:	30 e0       	ldi	r19, 0x00	; 0
    42ae:	4a e7       	ldi	r20, 0x7A	; 122
    42b0:	55 e4       	ldi	r21, 0x45	; 69
    42b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    42b6:	dc 01       	movw	r26, r24
    42b8:	cb 01       	movw	r24, r22
    42ba:	89 ab       	std	Y+49, r24	; 0x31
    42bc:	9a ab       	std	Y+50, r25	; 0x32
    42be:	ab ab       	std	Y+51, r26	; 0x33
    42c0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    42c2:	69 a9       	ldd	r22, Y+49	; 0x31
    42c4:	7a a9       	ldd	r23, Y+50	; 0x32
    42c6:	8b a9       	ldd	r24, Y+51	; 0x33
    42c8:	9c a9       	ldd	r25, Y+52	; 0x34
    42ca:	20 e0       	ldi	r18, 0x00	; 0
    42cc:	30 e0       	ldi	r19, 0x00	; 0
    42ce:	40 e8       	ldi	r20, 0x80	; 128
    42d0:	5f e3       	ldi	r21, 0x3F	; 63
    42d2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    42d6:	88 23       	and	r24, r24
    42d8:	2c f4       	brge	.+10     	; 0x42e4 <HAL_LCD_u8LCDInit+0x1c2>
		__ticks = 1;
    42da:	81 e0       	ldi	r24, 0x01	; 1
    42dc:	90 e0       	ldi	r25, 0x00	; 0
    42de:	98 ab       	std	Y+48, r25	; 0x30
    42e0:	8f a7       	std	Y+47, r24	; 0x2f
    42e2:	3f c0       	rjmp	.+126    	; 0x4362 <HAL_LCD_u8LCDInit+0x240>
	else if (__tmp > 65535)
    42e4:	69 a9       	ldd	r22, Y+49	; 0x31
    42e6:	7a a9       	ldd	r23, Y+50	; 0x32
    42e8:	8b a9       	ldd	r24, Y+51	; 0x33
    42ea:	9c a9       	ldd	r25, Y+52	; 0x34
    42ec:	20 e0       	ldi	r18, 0x00	; 0
    42ee:	3f ef       	ldi	r19, 0xFF	; 255
    42f0:	4f e7       	ldi	r20, 0x7F	; 127
    42f2:	57 e4       	ldi	r21, 0x47	; 71
    42f4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    42f8:	18 16       	cp	r1, r24
    42fa:	4c f5       	brge	.+82     	; 0x434e <HAL_LCD_u8LCDInit+0x22c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    42fc:	6d a9       	ldd	r22, Y+53	; 0x35
    42fe:	7e a9       	ldd	r23, Y+54	; 0x36
    4300:	8f a9       	ldd	r24, Y+55	; 0x37
    4302:	98 ad       	ldd	r25, Y+56	; 0x38
    4304:	20 e0       	ldi	r18, 0x00	; 0
    4306:	30 e0       	ldi	r19, 0x00	; 0
    4308:	40 e2       	ldi	r20, 0x20	; 32
    430a:	51 e4       	ldi	r21, 0x41	; 65
    430c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4310:	dc 01       	movw	r26, r24
    4312:	cb 01       	movw	r24, r22
    4314:	bc 01       	movw	r22, r24
    4316:	cd 01       	movw	r24, r26
    4318:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    431c:	dc 01       	movw	r26, r24
    431e:	cb 01       	movw	r24, r22
    4320:	98 ab       	std	Y+48, r25	; 0x30
    4322:	8f a7       	std	Y+47, r24	; 0x2f
    4324:	0f c0       	rjmp	.+30     	; 0x4344 <HAL_LCD_u8LCDInit+0x222>
    4326:	80 e9       	ldi	r24, 0x90	; 144
    4328:	91 e0       	ldi	r25, 0x01	; 1
    432a:	9e a7       	std	Y+46, r25	; 0x2e
    432c:	8d a7       	std	Y+45, r24	; 0x2d
    432e:	8d a5       	ldd	r24, Y+45	; 0x2d
    4330:	9e a5       	ldd	r25, Y+46	; 0x2e
    4332:	01 97       	sbiw	r24, 0x01	; 1
    4334:	f1 f7       	brne	.-4      	; 0x4332 <HAL_LCD_u8LCDInit+0x210>
    4336:	9e a7       	std	Y+46, r25	; 0x2e
    4338:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    433a:	8f a5       	ldd	r24, Y+47	; 0x2f
    433c:	98 a9       	ldd	r25, Y+48	; 0x30
    433e:	01 97       	sbiw	r24, 0x01	; 1
    4340:	98 ab       	std	Y+48, r25	; 0x30
    4342:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4344:	8f a5       	ldd	r24, Y+47	; 0x2f
    4346:	98 a9       	ldd	r25, Y+48	; 0x30
    4348:	00 97       	sbiw	r24, 0x00	; 0
    434a:	69 f7       	brne	.-38     	; 0x4326 <HAL_LCD_u8LCDInit+0x204>
    434c:	14 c0       	rjmp	.+40     	; 0x4376 <HAL_LCD_u8LCDInit+0x254>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    434e:	69 a9       	ldd	r22, Y+49	; 0x31
    4350:	7a a9       	ldd	r23, Y+50	; 0x32
    4352:	8b a9       	ldd	r24, Y+51	; 0x33
    4354:	9c a9       	ldd	r25, Y+52	; 0x34
    4356:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    435a:	dc 01       	movw	r26, r24
    435c:	cb 01       	movw	r24, r22
    435e:	98 ab       	std	Y+48, r25	; 0x30
    4360:	8f a7       	std	Y+47, r24	; 0x2f
    4362:	8f a5       	ldd	r24, Y+47	; 0x2f
    4364:	98 a9       	ldd	r25, Y+48	; 0x30
    4366:	9c a7       	std	Y+44, r25	; 0x2c
    4368:	8b a7       	std	Y+43, r24	; 0x2b
    436a:	8b a5       	ldd	r24, Y+43	; 0x2b
    436c:	9c a5       	ldd	r25, Y+44	; 0x2c
    436e:	01 97       	sbiw	r24, 0x01	; 1
    4370:	f1 f7       	brne	.-4      	; 0x436e <HAL_LCD_u8LCDInit+0x24c>
    4372:	9c a7       	std	Y+44, r25	; 0x2c
    4374:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(2);
	HAL_LCD_u8SendCommands(Function_Set);
    4376:	88 e2       	ldi	r24, 0x28	; 40
    4378:	0e 94 29 23 	call	0x4652	; 0x4652 <HAL_LCD_u8SendCommands>
    437c:	80 e0       	ldi	r24, 0x00	; 0
    437e:	90 e0       	ldi	r25, 0x00	; 0
    4380:	a0 e0       	ldi	r26, 0x00	; 0
    4382:	b0 e4       	ldi	r27, 0x40	; 64
    4384:	8f a3       	std	Y+39, r24	; 0x27
    4386:	98 a7       	std	Y+40, r25	; 0x28
    4388:	a9 a7       	std	Y+41, r26	; 0x29
    438a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    438c:	6f a1       	ldd	r22, Y+39	; 0x27
    438e:	78 a5       	ldd	r23, Y+40	; 0x28
    4390:	89 a5       	ldd	r24, Y+41	; 0x29
    4392:	9a a5       	ldd	r25, Y+42	; 0x2a
    4394:	20 e0       	ldi	r18, 0x00	; 0
    4396:	30 e0       	ldi	r19, 0x00	; 0
    4398:	4a e7       	ldi	r20, 0x7A	; 122
    439a:	55 e4       	ldi	r21, 0x45	; 69
    439c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    43a0:	dc 01       	movw	r26, r24
    43a2:	cb 01       	movw	r24, r22
    43a4:	8b a3       	std	Y+35, r24	; 0x23
    43a6:	9c a3       	std	Y+36, r25	; 0x24
    43a8:	ad a3       	std	Y+37, r26	; 0x25
    43aa:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    43ac:	6b a1       	ldd	r22, Y+35	; 0x23
    43ae:	7c a1       	ldd	r23, Y+36	; 0x24
    43b0:	8d a1       	ldd	r24, Y+37	; 0x25
    43b2:	9e a1       	ldd	r25, Y+38	; 0x26
    43b4:	20 e0       	ldi	r18, 0x00	; 0
    43b6:	30 e0       	ldi	r19, 0x00	; 0
    43b8:	40 e8       	ldi	r20, 0x80	; 128
    43ba:	5f e3       	ldi	r21, 0x3F	; 63
    43bc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    43c0:	88 23       	and	r24, r24
    43c2:	2c f4       	brge	.+10     	; 0x43ce <HAL_LCD_u8LCDInit+0x2ac>
		__ticks = 1;
    43c4:	81 e0       	ldi	r24, 0x01	; 1
    43c6:	90 e0       	ldi	r25, 0x00	; 0
    43c8:	9a a3       	std	Y+34, r25	; 0x22
    43ca:	89 a3       	std	Y+33, r24	; 0x21
    43cc:	3f c0       	rjmp	.+126    	; 0x444c <HAL_LCD_u8LCDInit+0x32a>
	else if (__tmp > 65535)
    43ce:	6b a1       	ldd	r22, Y+35	; 0x23
    43d0:	7c a1       	ldd	r23, Y+36	; 0x24
    43d2:	8d a1       	ldd	r24, Y+37	; 0x25
    43d4:	9e a1       	ldd	r25, Y+38	; 0x26
    43d6:	20 e0       	ldi	r18, 0x00	; 0
    43d8:	3f ef       	ldi	r19, 0xFF	; 255
    43da:	4f e7       	ldi	r20, 0x7F	; 127
    43dc:	57 e4       	ldi	r21, 0x47	; 71
    43de:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    43e2:	18 16       	cp	r1, r24
    43e4:	4c f5       	brge	.+82     	; 0x4438 <HAL_LCD_u8LCDInit+0x316>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    43e6:	6f a1       	ldd	r22, Y+39	; 0x27
    43e8:	78 a5       	ldd	r23, Y+40	; 0x28
    43ea:	89 a5       	ldd	r24, Y+41	; 0x29
    43ec:	9a a5       	ldd	r25, Y+42	; 0x2a
    43ee:	20 e0       	ldi	r18, 0x00	; 0
    43f0:	30 e0       	ldi	r19, 0x00	; 0
    43f2:	40 e2       	ldi	r20, 0x20	; 32
    43f4:	51 e4       	ldi	r21, 0x41	; 65
    43f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    43fa:	dc 01       	movw	r26, r24
    43fc:	cb 01       	movw	r24, r22
    43fe:	bc 01       	movw	r22, r24
    4400:	cd 01       	movw	r24, r26
    4402:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4406:	dc 01       	movw	r26, r24
    4408:	cb 01       	movw	r24, r22
    440a:	9a a3       	std	Y+34, r25	; 0x22
    440c:	89 a3       	std	Y+33, r24	; 0x21
    440e:	0f c0       	rjmp	.+30     	; 0x442e <HAL_LCD_u8LCDInit+0x30c>
    4410:	80 e9       	ldi	r24, 0x90	; 144
    4412:	91 e0       	ldi	r25, 0x01	; 1
    4414:	98 a3       	std	Y+32, r25	; 0x20
    4416:	8f 8f       	std	Y+31, r24	; 0x1f
    4418:	8f 8d       	ldd	r24, Y+31	; 0x1f
    441a:	98 a1       	ldd	r25, Y+32	; 0x20
    441c:	01 97       	sbiw	r24, 0x01	; 1
    441e:	f1 f7       	brne	.-4      	; 0x441c <HAL_LCD_u8LCDInit+0x2fa>
    4420:	98 a3       	std	Y+32, r25	; 0x20
    4422:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4424:	89 a1       	ldd	r24, Y+33	; 0x21
    4426:	9a a1       	ldd	r25, Y+34	; 0x22
    4428:	01 97       	sbiw	r24, 0x01	; 1
    442a:	9a a3       	std	Y+34, r25	; 0x22
    442c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    442e:	89 a1       	ldd	r24, Y+33	; 0x21
    4430:	9a a1       	ldd	r25, Y+34	; 0x22
    4432:	00 97       	sbiw	r24, 0x00	; 0
    4434:	69 f7       	brne	.-38     	; 0x4410 <HAL_LCD_u8LCDInit+0x2ee>
    4436:	14 c0       	rjmp	.+40     	; 0x4460 <HAL_LCD_u8LCDInit+0x33e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4438:	6b a1       	ldd	r22, Y+35	; 0x23
    443a:	7c a1       	ldd	r23, Y+36	; 0x24
    443c:	8d a1       	ldd	r24, Y+37	; 0x25
    443e:	9e a1       	ldd	r25, Y+38	; 0x26
    4440:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4444:	dc 01       	movw	r26, r24
    4446:	cb 01       	movw	r24, r22
    4448:	9a a3       	std	Y+34, r25	; 0x22
    444a:	89 a3       	std	Y+33, r24	; 0x21
    444c:	89 a1       	ldd	r24, Y+33	; 0x21
    444e:	9a a1       	ldd	r25, Y+34	; 0x22
    4450:	9e 8f       	std	Y+30, r25	; 0x1e
    4452:	8d 8f       	std	Y+29, r24	; 0x1d
    4454:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4456:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4458:	01 97       	sbiw	r24, 0x01	; 1
    445a:	f1 f7       	brne	.-4      	; 0x4458 <HAL_LCD_u8LCDInit+0x336>
    445c:	9e 8f       	std	Y+30, r25	; 0x1e
    445e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(2);
	HAL_LCD_u8SendCommands(Display_Mode);
    4460:	8f e0       	ldi	r24, 0x0F	; 15
    4462:	0e 94 29 23 	call	0x4652	; 0x4652 <HAL_LCD_u8SendCommands>
    4466:	80 e0       	ldi	r24, 0x00	; 0
    4468:	90 e0       	ldi	r25, 0x00	; 0
    446a:	a0 e0       	ldi	r26, 0x00	; 0
    446c:	b0 e4       	ldi	r27, 0x40	; 64
    446e:	89 8f       	std	Y+25, r24	; 0x19
    4470:	9a 8f       	std	Y+26, r25	; 0x1a
    4472:	ab 8f       	std	Y+27, r26	; 0x1b
    4474:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4476:	69 8d       	ldd	r22, Y+25	; 0x19
    4478:	7a 8d       	ldd	r23, Y+26	; 0x1a
    447a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    447c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    447e:	20 e0       	ldi	r18, 0x00	; 0
    4480:	30 e0       	ldi	r19, 0x00	; 0
    4482:	4a e7       	ldi	r20, 0x7A	; 122
    4484:	55 e4       	ldi	r21, 0x45	; 69
    4486:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    448a:	dc 01       	movw	r26, r24
    448c:	cb 01       	movw	r24, r22
    448e:	8d 8b       	std	Y+21, r24	; 0x15
    4490:	9e 8b       	std	Y+22, r25	; 0x16
    4492:	af 8b       	std	Y+23, r26	; 0x17
    4494:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4496:	6d 89       	ldd	r22, Y+21	; 0x15
    4498:	7e 89       	ldd	r23, Y+22	; 0x16
    449a:	8f 89       	ldd	r24, Y+23	; 0x17
    449c:	98 8d       	ldd	r25, Y+24	; 0x18
    449e:	20 e0       	ldi	r18, 0x00	; 0
    44a0:	30 e0       	ldi	r19, 0x00	; 0
    44a2:	40 e8       	ldi	r20, 0x80	; 128
    44a4:	5f e3       	ldi	r21, 0x3F	; 63
    44a6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    44aa:	88 23       	and	r24, r24
    44ac:	2c f4       	brge	.+10     	; 0x44b8 <HAL_LCD_u8LCDInit+0x396>
		__ticks = 1;
    44ae:	81 e0       	ldi	r24, 0x01	; 1
    44b0:	90 e0       	ldi	r25, 0x00	; 0
    44b2:	9c 8b       	std	Y+20, r25	; 0x14
    44b4:	8b 8b       	std	Y+19, r24	; 0x13
    44b6:	3f c0       	rjmp	.+126    	; 0x4536 <HAL_LCD_u8LCDInit+0x414>
	else if (__tmp > 65535)
    44b8:	6d 89       	ldd	r22, Y+21	; 0x15
    44ba:	7e 89       	ldd	r23, Y+22	; 0x16
    44bc:	8f 89       	ldd	r24, Y+23	; 0x17
    44be:	98 8d       	ldd	r25, Y+24	; 0x18
    44c0:	20 e0       	ldi	r18, 0x00	; 0
    44c2:	3f ef       	ldi	r19, 0xFF	; 255
    44c4:	4f e7       	ldi	r20, 0x7F	; 127
    44c6:	57 e4       	ldi	r21, 0x47	; 71
    44c8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    44cc:	18 16       	cp	r1, r24
    44ce:	4c f5       	brge	.+82     	; 0x4522 <HAL_LCD_u8LCDInit+0x400>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    44d0:	69 8d       	ldd	r22, Y+25	; 0x19
    44d2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    44d4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    44d6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    44d8:	20 e0       	ldi	r18, 0x00	; 0
    44da:	30 e0       	ldi	r19, 0x00	; 0
    44dc:	40 e2       	ldi	r20, 0x20	; 32
    44de:	51 e4       	ldi	r21, 0x41	; 65
    44e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    44e4:	dc 01       	movw	r26, r24
    44e6:	cb 01       	movw	r24, r22
    44e8:	bc 01       	movw	r22, r24
    44ea:	cd 01       	movw	r24, r26
    44ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    44f0:	dc 01       	movw	r26, r24
    44f2:	cb 01       	movw	r24, r22
    44f4:	9c 8b       	std	Y+20, r25	; 0x14
    44f6:	8b 8b       	std	Y+19, r24	; 0x13
    44f8:	0f c0       	rjmp	.+30     	; 0x4518 <HAL_LCD_u8LCDInit+0x3f6>
    44fa:	80 e9       	ldi	r24, 0x90	; 144
    44fc:	91 e0       	ldi	r25, 0x01	; 1
    44fe:	9a 8b       	std	Y+18, r25	; 0x12
    4500:	89 8b       	std	Y+17, r24	; 0x11
    4502:	89 89       	ldd	r24, Y+17	; 0x11
    4504:	9a 89       	ldd	r25, Y+18	; 0x12
    4506:	01 97       	sbiw	r24, 0x01	; 1
    4508:	f1 f7       	brne	.-4      	; 0x4506 <HAL_LCD_u8LCDInit+0x3e4>
    450a:	9a 8b       	std	Y+18, r25	; 0x12
    450c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    450e:	8b 89       	ldd	r24, Y+19	; 0x13
    4510:	9c 89       	ldd	r25, Y+20	; 0x14
    4512:	01 97       	sbiw	r24, 0x01	; 1
    4514:	9c 8b       	std	Y+20, r25	; 0x14
    4516:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4518:	8b 89       	ldd	r24, Y+19	; 0x13
    451a:	9c 89       	ldd	r25, Y+20	; 0x14
    451c:	00 97       	sbiw	r24, 0x00	; 0
    451e:	69 f7       	brne	.-38     	; 0x44fa <HAL_LCD_u8LCDInit+0x3d8>
    4520:	14 c0       	rjmp	.+40     	; 0x454a <HAL_LCD_u8LCDInit+0x428>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4522:	6d 89       	ldd	r22, Y+21	; 0x15
    4524:	7e 89       	ldd	r23, Y+22	; 0x16
    4526:	8f 89       	ldd	r24, Y+23	; 0x17
    4528:	98 8d       	ldd	r25, Y+24	; 0x18
    452a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    452e:	dc 01       	movw	r26, r24
    4530:	cb 01       	movw	r24, r22
    4532:	9c 8b       	std	Y+20, r25	; 0x14
    4534:	8b 8b       	std	Y+19, r24	; 0x13
    4536:	8b 89       	ldd	r24, Y+19	; 0x13
    4538:	9c 89       	ldd	r25, Y+20	; 0x14
    453a:	98 8b       	std	Y+16, r25	; 0x10
    453c:	8f 87       	std	Y+15, r24	; 0x0f
    453e:	8f 85       	ldd	r24, Y+15	; 0x0f
    4540:	98 89       	ldd	r25, Y+16	; 0x10
    4542:	01 97       	sbiw	r24, 0x01	; 1
    4544:	f1 f7       	brne	.-4      	; 0x4542 <HAL_LCD_u8LCDInit+0x420>
    4546:	98 8b       	std	Y+16, r25	; 0x10
    4548:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	HAL_LCD_u8SendCommands(Display_Clear);
    454a:	81 e0       	ldi	r24, 0x01	; 1
    454c:	0e 94 29 23 	call	0x4652	; 0x4652 <HAL_LCD_u8SendCommands>
    4550:	80 e0       	ldi	r24, 0x00	; 0
    4552:	90 e0       	ldi	r25, 0x00	; 0
    4554:	a0 e0       	ldi	r26, 0x00	; 0
    4556:	b0 e4       	ldi	r27, 0x40	; 64
    4558:	8b 87       	std	Y+11, r24	; 0x0b
    455a:	9c 87       	std	Y+12, r25	; 0x0c
    455c:	ad 87       	std	Y+13, r26	; 0x0d
    455e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4560:	6b 85       	ldd	r22, Y+11	; 0x0b
    4562:	7c 85       	ldd	r23, Y+12	; 0x0c
    4564:	8d 85       	ldd	r24, Y+13	; 0x0d
    4566:	9e 85       	ldd	r25, Y+14	; 0x0e
    4568:	20 e0       	ldi	r18, 0x00	; 0
    456a:	30 e0       	ldi	r19, 0x00	; 0
    456c:	4a e7       	ldi	r20, 0x7A	; 122
    456e:	55 e4       	ldi	r21, 0x45	; 69
    4570:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4574:	dc 01       	movw	r26, r24
    4576:	cb 01       	movw	r24, r22
    4578:	8f 83       	std	Y+7, r24	; 0x07
    457a:	98 87       	std	Y+8, r25	; 0x08
    457c:	a9 87       	std	Y+9, r26	; 0x09
    457e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4580:	6f 81       	ldd	r22, Y+7	; 0x07
    4582:	78 85       	ldd	r23, Y+8	; 0x08
    4584:	89 85       	ldd	r24, Y+9	; 0x09
    4586:	9a 85       	ldd	r25, Y+10	; 0x0a
    4588:	20 e0       	ldi	r18, 0x00	; 0
    458a:	30 e0       	ldi	r19, 0x00	; 0
    458c:	40 e8       	ldi	r20, 0x80	; 128
    458e:	5f e3       	ldi	r21, 0x3F	; 63
    4590:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4594:	88 23       	and	r24, r24
    4596:	2c f4       	brge	.+10     	; 0x45a2 <HAL_LCD_u8LCDInit+0x480>
		__ticks = 1;
    4598:	81 e0       	ldi	r24, 0x01	; 1
    459a:	90 e0       	ldi	r25, 0x00	; 0
    459c:	9e 83       	std	Y+6, r25	; 0x06
    459e:	8d 83       	std	Y+5, r24	; 0x05
    45a0:	3f c0       	rjmp	.+126    	; 0x4620 <HAL_LCD_u8LCDInit+0x4fe>
	else if (__tmp > 65535)
    45a2:	6f 81       	ldd	r22, Y+7	; 0x07
    45a4:	78 85       	ldd	r23, Y+8	; 0x08
    45a6:	89 85       	ldd	r24, Y+9	; 0x09
    45a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    45aa:	20 e0       	ldi	r18, 0x00	; 0
    45ac:	3f ef       	ldi	r19, 0xFF	; 255
    45ae:	4f e7       	ldi	r20, 0x7F	; 127
    45b0:	57 e4       	ldi	r21, 0x47	; 71
    45b2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    45b6:	18 16       	cp	r1, r24
    45b8:	4c f5       	brge	.+82     	; 0x460c <HAL_LCD_u8LCDInit+0x4ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    45ba:	6b 85       	ldd	r22, Y+11	; 0x0b
    45bc:	7c 85       	ldd	r23, Y+12	; 0x0c
    45be:	8d 85       	ldd	r24, Y+13	; 0x0d
    45c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    45c2:	20 e0       	ldi	r18, 0x00	; 0
    45c4:	30 e0       	ldi	r19, 0x00	; 0
    45c6:	40 e2       	ldi	r20, 0x20	; 32
    45c8:	51 e4       	ldi	r21, 0x41	; 65
    45ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    45ce:	dc 01       	movw	r26, r24
    45d0:	cb 01       	movw	r24, r22
    45d2:	bc 01       	movw	r22, r24
    45d4:	cd 01       	movw	r24, r26
    45d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    45da:	dc 01       	movw	r26, r24
    45dc:	cb 01       	movw	r24, r22
    45de:	9e 83       	std	Y+6, r25	; 0x06
    45e0:	8d 83       	std	Y+5, r24	; 0x05
    45e2:	0f c0       	rjmp	.+30     	; 0x4602 <HAL_LCD_u8LCDInit+0x4e0>
    45e4:	80 e9       	ldi	r24, 0x90	; 144
    45e6:	91 e0       	ldi	r25, 0x01	; 1
    45e8:	9c 83       	std	Y+4, r25	; 0x04
    45ea:	8b 83       	std	Y+3, r24	; 0x03
    45ec:	8b 81       	ldd	r24, Y+3	; 0x03
    45ee:	9c 81       	ldd	r25, Y+4	; 0x04
    45f0:	01 97       	sbiw	r24, 0x01	; 1
    45f2:	f1 f7       	brne	.-4      	; 0x45f0 <HAL_LCD_u8LCDInit+0x4ce>
    45f4:	9c 83       	std	Y+4, r25	; 0x04
    45f6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    45f8:	8d 81       	ldd	r24, Y+5	; 0x05
    45fa:	9e 81       	ldd	r25, Y+6	; 0x06
    45fc:	01 97       	sbiw	r24, 0x01	; 1
    45fe:	9e 83       	std	Y+6, r25	; 0x06
    4600:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4602:	8d 81       	ldd	r24, Y+5	; 0x05
    4604:	9e 81       	ldd	r25, Y+6	; 0x06
    4606:	00 97       	sbiw	r24, 0x00	; 0
    4608:	69 f7       	brne	.-38     	; 0x45e4 <HAL_LCD_u8LCDInit+0x4c2>
    460a:	14 c0       	rjmp	.+40     	; 0x4634 <HAL_LCD_u8LCDInit+0x512>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    460c:	6f 81       	ldd	r22, Y+7	; 0x07
    460e:	78 85       	ldd	r23, Y+8	; 0x08
    4610:	89 85       	ldd	r24, Y+9	; 0x09
    4612:	9a 85       	ldd	r25, Y+10	; 0x0a
    4614:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4618:	dc 01       	movw	r26, r24
    461a:	cb 01       	movw	r24, r22
    461c:	9e 83       	std	Y+6, r25	; 0x06
    461e:	8d 83       	std	Y+5, r24	; 0x05
    4620:	8d 81       	ldd	r24, Y+5	; 0x05
    4622:	9e 81       	ldd	r25, Y+6	; 0x06
    4624:	9a 83       	std	Y+2, r25	; 0x02
    4626:	89 83       	std	Y+1, r24	; 0x01
    4628:	89 81       	ldd	r24, Y+1	; 0x01
    462a:	9a 81       	ldd	r25, Y+2	; 0x02
    462c:	01 97       	sbiw	r24, 0x01	; 1
    462e:	f1 f7       	brne	.-4      	; 0x462c <HAL_LCD_u8LCDInit+0x50a>
    4630:	9a 83       	std	Y+2, r25	; 0x02
    4632:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	HAL_LCD_u8SendCommands(Entry_Mode);
    4634:	86 e0       	ldi	r24, 0x06	; 6
    4636:	0e 94 29 23 	call	0x4652	; 0x4652 <HAL_LCD_u8SendCommands>
}
    463a:	ca 5b       	subi	r28, 0xBA	; 186
    463c:	df 4f       	sbci	r29, 0xFF	; 255
    463e:	0f b6       	in	r0, 0x3f	; 63
    4640:	f8 94       	cli
    4642:	de bf       	out	0x3e, r29	; 62
    4644:	0f be       	out	0x3f, r0	; 63
    4646:	cd bf       	out	0x3d, r28	; 61
    4648:	cf 91       	pop	r28
    464a:	df 91       	pop	r29
    464c:	1f 91       	pop	r17
    464e:	0f 91       	pop	r16
    4650:	08 95       	ret

00004652 <HAL_LCD_u8SendCommands>:

void HAL_LCD_u8SendCommands(u8 Loc_u8LCD_Command) {
    4652:	df 93       	push	r29
    4654:	cf 93       	push	r28
    4656:	cd b7       	in	r28, 0x3d	; 61
    4658:	de b7       	in	r29, 0x3e	; 62
    465a:	6d 97       	sbiw	r28, 0x1d	; 29
    465c:	0f b6       	in	r0, 0x3f	; 63
    465e:	f8 94       	cli
    4660:	de bf       	out	0x3e, r29	; 62
    4662:	0f be       	out	0x3f, r0	; 63
    4664:	cd bf       	out	0x3d, r28	; 61
    4666:	8d 8f       	std	Y+29, r24	; 0x1d
	MCAL_DIO_u8SetPinValue(RS_Port, RS_Pin, RS_Low);
    4668:	81 e0       	ldi	r24, 0x01	; 1
    466a:	61 e0       	ldi	r22, 0x01	; 1
    466c:	40 e0       	ldi	r20, 0x00	; 0
    466e:	0e 94 e8 1a 	call	0x35d0	; 0x35d0 <MCAL_DIO_u8SetPinValue>
	MCAL_DIO_u8SetPinValue(RW_Port, RW_Pin, RW_Low);
    4672:	81 e0       	ldi	r24, 0x01	; 1
    4674:	62 e0       	ldi	r22, 0x02	; 2
    4676:	40 e0       	ldi	r20, 0x00	; 0
    4678:	0e 94 e8 1a 	call	0x35d0	; 0x35d0 <MCAL_DIO_u8SetPinValue>
	MCAL_DIO_u8SetPortValue(LCD_D_PORT, Loc_u8LCD_Command);
    467c:	80 e0       	ldi	r24, 0x00	; 0
    467e:	6d 8d       	ldd	r22, Y+29	; 0x1d
    4680:	0e 94 65 1a 	call	0x34ca	; 0x34ca <MCAL_DIO_u8SetPortValue>
	MCAL_DIO_u8SetPinValue(Enable_PORT, Enable_PIN, Enable_High);
    4684:	81 e0       	ldi	r24, 0x01	; 1
    4686:	63 e0       	ldi	r22, 0x03	; 3
    4688:	41 e0       	ldi	r20, 0x01	; 1
    468a:	0e 94 e8 1a 	call	0x35d0	; 0x35d0 <MCAL_DIO_u8SetPinValue>
    468e:	80 e0       	ldi	r24, 0x00	; 0
    4690:	90 e0       	ldi	r25, 0x00	; 0
    4692:	a0 e0       	ldi	r26, 0x00	; 0
    4694:	b0 e4       	ldi	r27, 0x40	; 64
    4696:	89 8f       	std	Y+25, r24	; 0x19
    4698:	9a 8f       	std	Y+26, r25	; 0x1a
    469a:	ab 8f       	std	Y+27, r26	; 0x1b
    469c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    469e:	69 8d       	ldd	r22, Y+25	; 0x19
    46a0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    46a2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    46a4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    46a6:	20 e0       	ldi	r18, 0x00	; 0
    46a8:	30 e0       	ldi	r19, 0x00	; 0
    46aa:	4a e7       	ldi	r20, 0x7A	; 122
    46ac:	55 e4       	ldi	r21, 0x45	; 69
    46ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    46b2:	dc 01       	movw	r26, r24
    46b4:	cb 01       	movw	r24, r22
    46b6:	8d 8b       	std	Y+21, r24	; 0x15
    46b8:	9e 8b       	std	Y+22, r25	; 0x16
    46ba:	af 8b       	std	Y+23, r26	; 0x17
    46bc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    46be:	6d 89       	ldd	r22, Y+21	; 0x15
    46c0:	7e 89       	ldd	r23, Y+22	; 0x16
    46c2:	8f 89       	ldd	r24, Y+23	; 0x17
    46c4:	98 8d       	ldd	r25, Y+24	; 0x18
    46c6:	20 e0       	ldi	r18, 0x00	; 0
    46c8:	30 e0       	ldi	r19, 0x00	; 0
    46ca:	40 e8       	ldi	r20, 0x80	; 128
    46cc:	5f e3       	ldi	r21, 0x3F	; 63
    46ce:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    46d2:	88 23       	and	r24, r24
    46d4:	2c f4       	brge	.+10     	; 0x46e0 <HAL_LCD_u8SendCommands+0x8e>
		__ticks = 1;
    46d6:	81 e0       	ldi	r24, 0x01	; 1
    46d8:	90 e0       	ldi	r25, 0x00	; 0
    46da:	9c 8b       	std	Y+20, r25	; 0x14
    46dc:	8b 8b       	std	Y+19, r24	; 0x13
    46de:	3f c0       	rjmp	.+126    	; 0x475e <HAL_LCD_u8SendCommands+0x10c>
	else if (__tmp > 65535)
    46e0:	6d 89       	ldd	r22, Y+21	; 0x15
    46e2:	7e 89       	ldd	r23, Y+22	; 0x16
    46e4:	8f 89       	ldd	r24, Y+23	; 0x17
    46e6:	98 8d       	ldd	r25, Y+24	; 0x18
    46e8:	20 e0       	ldi	r18, 0x00	; 0
    46ea:	3f ef       	ldi	r19, 0xFF	; 255
    46ec:	4f e7       	ldi	r20, 0x7F	; 127
    46ee:	57 e4       	ldi	r21, 0x47	; 71
    46f0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    46f4:	18 16       	cp	r1, r24
    46f6:	4c f5       	brge	.+82     	; 0x474a <HAL_LCD_u8SendCommands+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    46f8:	69 8d       	ldd	r22, Y+25	; 0x19
    46fa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    46fc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    46fe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4700:	20 e0       	ldi	r18, 0x00	; 0
    4702:	30 e0       	ldi	r19, 0x00	; 0
    4704:	40 e2       	ldi	r20, 0x20	; 32
    4706:	51 e4       	ldi	r21, 0x41	; 65
    4708:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    470c:	dc 01       	movw	r26, r24
    470e:	cb 01       	movw	r24, r22
    4710:	bc 01       	movw	r22, r24
    4712:	cd 01       	movw	r24, r26
    4714:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4718:	dc 01       	movw	r26, r24
    471a:	cb 01       	movw	r24, r22
    471c:	9c 8b       	std	Y+20, r25	; 0x14
    471e:	8b 8b       	std	Y+19, r24	; 0x13
    4720:	0f c0       	rjmp	.+30     	; 0x4740 <HAL_LCD_u8SendCommands+0xee>
    4722:	80 e9       	ldi	r24, 0x90	; 144
    4724:	91 e0       	ldi	r25, 0x01	; 1
    4726:	9a 8b       	std	Y+18, r25	; 0x12
    4728:	89 8b       	std	Y+17, r24	; 0x11
    472a:	89 89       	ldd	r24, Y+17	; 0x11
    472c:	9a 89       	ldd	r25, Y+18	; 0x12
    472e:	01 97       	sbiw	r24, 0x01	; 1
    4730:	f1 f7       	brne	.-4      	; 0x472e <HAL_LCD_u8SendCommands+0xdc>
    4732:	9a 8b       	std	Y+18, r25	; 0x12
    4734:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4736:	8b 89       	ldd	r24, Y+19	; 0x13
    4738:	9c 89       	ldd	r25, Y+20	; 0x14
    473a:	01 97       	sbiw	r24, 0x01	; 1
    473c:	9c 8b       	std	Y+20, r25	; 0x14
    473e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4740:	8b 89       	ldd	r24, Y+19	; 0x13
    4742:	9c 89       	ldd	r25, Y+20	; 0x14
    4744:	00 97       	sbiw	r24, 0x00	; 0
    4746:	69 f7       	brne	.-38     	; 0x4722 <HAL_LCD_u8SendCommands+0xd0>
    4748:	14 c0       	rjmp	.+40     	; 0x4772 <HAL_LCD_u8SendCommands+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    474a:	6d 89       	ldd	r22, Y+21	; 0x15
    474c:	7e 89       	ldd	r23, Y+22	; 0x16
    474e:	8f 89       	ldd	r24, Y+23	; 0x17
    4750:	98 8d       	ldd	r25, Y+24	; 0x18
    4752:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4756:	dc 01       	movw	r26, r24
    4758:	cb 01       	movw	r24, r22
    475a:	9c 8b       	std	Y+20, r25	; 0x14
    475c:	8b 8b       	std	Y+19, r24	; 0x13
    475e:	8b 89       	ldd	r24, Y+19	; 0x13
    4760:	9c 89       	ldd	r25, Y+20	; 0x14
    4762:	98 8b       	std	Y+16, r25	; 0x10
    4764:	8f 87       	std	Y+15, r24	; 0x0f
    4766:	8f 85       	ldd	r24, Y+15	; 0x0f
    4768:	98 89       	ldd	r25, Y+16	; 0x10
    476a:	01 97       	sbiw	r24, 0x01	; 1
    476c:	f1 f7       	brne	.-4      	; 0x476a <HAL_LCD_u8SendCommands+0x118>
    476e:	98 8b       	std	Y+16, r25	; 0x10
    4770:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	MCAL_DIO_u8SetPinValue(Enable_PORT, Enable_PIN, Enable_Low);
    4772:	81 e0       	ldi	r24, 0x01	; 1
    4774:	63 e0       	ldi	r22, 0x03	; 3
    4776:	40 e0       	ldi	r20, 0x00	; 0
    4778:	0e 94 e8 1a 	call	0x35d0	; 0x35d0 <MCAL_DIO_u8SetPinValue>
	MCAL_DIO_u8SetPortValue(LCD_D_PORT, (Loc_u8LCD_Command << 4));
    477c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    477e:	98 2f       	mov	r25, r24
    4780:	92 95       	swap	r25
    4782:	90 7f       	andi	r25, 0xF0	; 240
    4784:	80 e0       	ldi	r24, 0x00	; 0
    4786:	69 2f       	mov	r22, r25
    4788:	0e 94 65 1a 	call	0x34ca	; 0x34ca <MCAL_DIO_u8SetPortValue>
	MCAL_DIO_u8SetPinValue(Enable_PORT, Enable_PIN, Enable_High);
    478c:	81 e0       	ldi	r24, 0x01	; 1
    478e:	63 e0       	ldi	r22, 0x03	; 3
    4790:	41 e0       	ldi	r20, 0x01	; 1
    4792:	0e 94 e8 1a 	call	0x35d0	; 0x35d0 <MCAL_DIO_u8SetPinValue>
    4796:	80 e0       	ldi	r24, 0x00	; 0
    4798:	90 e0       	ldi	r25, 0x00	; 0
    479a:	a0 e0       	ldi	r26, 0x00	; 0
    479c:	b0 e4       	ldi	r27, 0x40	; 64
    479e:	8b 87       	std	Y+11, r24	; 0x0b
    47a0:	9c 87       	std	Y+12, r25	; 0x0c
    47a2:	ad 87       	std	Y+13, r26	; 0x0d
    47a4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    47a6:	6b 85       	ldd	r22, Y+11	; 0x0b
    47a8:	7c 85       	ldd	r23, Y+12	; 0x0c
    47aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    47ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    47ae:	20 e0       	ldi	r18, 0x00	; 0
    47b0:	30 e0       	ldi	r19, 0x00	; 0
    47b2:	4a e7       	ldi	r20, 0x7A	; 122
    47b4:	55 e4       	ldi	r21, 0x45	; 69
    47b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    47ba:	dc 01       	movw	r26, r24
    47bc:	cb 01       	movw	r24, r22
    47be:	8f 83       	std	Y+7, r24	; 0x07
    47c0:	98 87       	std	Y+8, r25	; 0x08
    47c2:	a9 87       	std	Y+9, r26	; 0x09
    47c4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    47c6:	6f 81       	ldd	r22, Y+7	; 0x07
    47c8:	78 85       	ldd	r23, Y+8	; 0x08
    47ca:	89 85       	ldd	r24, Y+9	; 0x09
    47cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    47ce:	20 e0       	ldi	r18, 0x00	; 0
    47d0:	30 e0       	ldi	r19, 0x00	; 0
    47d2:	40 e8       	ldi	r20, 0x80	; 128
    47d4:	5f e3       	ldi	r21, 0x3F	; 63
    47d6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    47da:	88 23       	and	r24, r24
    47dc:	2c f4       	brge	.+10     	; 0x47e8 <HAL_LCD_u8SendCommands+0x196>
		__ticks = 1;
    47de:	81 e0       	ldi	r24, 0x01	; 1
    47e0:	90 e0       	ldi	r25, 0x00	; 0
    47e2:	9e 83       	std	Y+6, r25	; 0x06
    47e4:	8d 83       	std	Y+5, r24	; 0x05
    47e6:	3f c0       	rjmp	.+126    	; 0x4866 <HAL_LCD_u8SendCommands+0x214>
	else if (__tmp > 65535)
    47e8:	6f 81       	ldd	r22, Y+7	; 0x07
    47ea:	78 85       	ldd	r23, Y+8	; 0x08
    47ec:	89 85       	ldd	r24, Y+9	; 0x09
    47ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    47f0:	20 e0       	ldi	r18, 0x00	; 0
    47f2:	3f ef       	ldi	r19, 0xFF	; 255
    47f4:	4f e7       	ldi	r20, 0x7F	; 127
    47f6:	57 e4       	ldi	r21, 0x47	; 71
    47f8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    47fc:	18 16       	cp	r1, r24
    47fe:	4c f5       	brge	.+82     	; 0x4852 <HAL_LCD_u8SendCommands+0x200>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4800:	6b 85       	ldd	r22, Y+11	; 0x0b
    4802:	7c 85       	ldd	r23, Y+12	; 0x0c
    4804:	8d 85       	ldd	r24, Y+13	; 0x0d
    4806:	9e 85       	ldd	r25, Y+14	; 0x0e
    4808:	20 e0       	ldi	r18, 0x00	; 0
    480a:	30 e0       	ldi	r19, 0x00	; 0
    480c:	40 e2       	ldi	r20, 0x20	; 32
    480e:	51 e4       	ldi	r21, 0x41	; 65
    4810:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4814:	dc 01       	movw	r26, r24
    4816:	cb 01       	movw	r24, r22
    4818:	bc 01       	movw	r22, r24
    481a:	cd 01       	movw	r24, r26
    481c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4820:	dc 01       	movw	r26, r24
    4822:	cb 01       	movw	r24, r22
    4824:	9e 83       	std	Y+6, r25	; 0x06
    4826:	8d 83       	std	Y+5, r24	; 0x05
    4828:	0f c0       	rjmp	.+30     	; 0x4848 <HAL_LCD_u8SendCommands+0x1f6>
    482a:	80 e9       	ldi	r24, 0x90	; 144
    482c:	91 e0       	ldi	r25, 0x01	; 1
    482e:	9c 83       	std	Y+4, r25	; 0x04
    4830:	8b 83       	std	Y+3, r24	; 0x03
    4832:	8b 81       	ldd	r24, Y+3	; 0x03
    4834:	9c 81       	ldd	r25, Y+4	; 0x04
    4836:	01 97       	sbiw	r24, 0x01	; 1
    4838:	f1 f7       	brne	.-4      	; 0x4836 <HAL_LCD_u8SendCommands+0x1e4>
    483a:	9c 83       	std	Y+4, r25	; 0x04
    483c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    483e:	8d 81       	ldd	r24, Y+5	; 0x05
    4840:	9e 81       	ldd	r25, Y+6	; 0x06
    4842:	01 97       	sbiw	r24, 0x01	; 1
    4844:	9e 83       	std	Y+6, r25	; 0x06
    4846:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4848:	8d 81       	ldd	r24, Y+5	; 0x05
    484a:	9e 81       	ldd	r25, Y+6	; 0x06
    484c:	00 97       	sbiw	r24, 0x00	; 0
    484e:	69 f7       	brne	.-38     	; 0x482a <HAL_LCD_u8SendCommands+0x1d8>
    4850:	14 c0       	rjmp	.+40     	; 0x487a <HAL_LCD_u8SendCommands+0x228>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4852:	6f 81       	ldd	r22, Y+7	; 0x07
    4854:	78 85       	ldd	r23, Y+8	; 0x08
    4856:	89 85       	ldd	r24, Y+9	; 0x09
    4858:	9a 85       	ldd	r25, Y+10	; 0x0a
    485a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    485e:	dc 01       	movw	r26, r24
    4860:	cb 01       	movw	r24, r22
    4862:	9e 83       	std	Y+6, r25	; 0x06
    4864:	8d 83       	std	Y+5, r24	; 0x05
    4866:	8d 81       	ldd	r24, Y+5	; 0x05
    4868:	9e 81       	ldd	r25, Y+6	; 0x06
    486a:	9a 83       	std	Y+2, r25	; 0x02
    486c:	89 83       	std	Y+1, r24	; 0x01
    486e:	89 81       	ldd	r24, Y+1	; 0x01
    4870:	9a 81       	ldd	r25, Y+2	; 0x02
    4872:	01 97       	sbiw	r24, 0x01	; 1
    4874:	f1 f7       	brne	.-4      	; 0x4872 <HAL_LCD_u8SendCommands+0x220>
    4876:	9a 83       	std	Y+2, r25	; 0x02
    4878:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	MCAL_DIO_u8SetPinValue(Enable_PORT, Enable_PIN, Enable_Low);
    487a:	81 e0       	ldi	r24, 0x01	; 1
    487c:	63 e0       	ldi	r22, 0x03	; 3
    487e:	40 e0       	ldi	r20, 0x00	; 0
    4880:	0e 94 e8 1a 	call	0x35d0	; 0x35d0 <MCAL_DIO_u8SetPinValue>
}
    4884:	6d 96       	adiw	r28, 0x1d	; 29
    4886:	0f b6       	in	r0, 0x3f	; 63
    4888:	f8 94       	cli
    488a:	de bf       	out	0x3e, r29	; 62
    488c:	0f be       	out	0x3f, r0	; 63
    488e:	cd bf       	out	0x3d, r28	; 61
    4890:	cf 91       	pop	r28
    4892:	df 91       	pop	r29
    4894:	08 95       	ret

00004896 <HAL_LCD_u8SendChar>:

void HAL_LCD_u8SendChar(u8 Loc_u8LCD_Char) {
    4896:	df 93       	push	r29
    4898:	cf 93       	push	r28
    489a:	cd b7       	in	r28, 0x3d	; 61
    489c:	de b7       	in	r29, 0x3e	; 62
    489e:	6d 97       	sbiw	r28, 0x1d	; 29
    48a0:	0f b6       	in	r0, 0x3f	; 63
    48a2:	f8 94       	cli
    48a4:	de bf       	out	0x3e, r29	; 62
    48a6:	0f be       	out	0x3f, r0	; 63
    48a8:	cd bf       	out	0x3d, r28	; 61
    48aa:	8d 8f       	std	Y+29, r24	; 0x1d
	MCAL_DIO_u8SetPinValue(RS_Port, RS_Pin, RS_High);
    48ac:	81 e0       	ldi	r24, 0x01	; 1
    48ae:	61 e0       	ldi	r22, 0x01	; 1
    48b0:	41 e0       	ldi	r20, 0x01	; 1
    48b2:	0e 94 e8 1a 	call	0x35d0	; 0x35d0 <MCAL_DIO_u8SetPinValue>
	MCAL_DIO_u8SetPinValue(RW_Port, RW_Pin, RW_Low);
    48b6:	81 e0       	ldi	r24, 0x01	; 1
    48b8:	62 e0       	ldi	r22, 0x02	; 2
    48ba:	40 e0       	ldi	r20, 0x00	; 0
    48bc:	0e 94 e8 1a 	call	0x35d0	; 0x35d0 <MCAL_DIO_u8SetPinValue>
	MCAL_DIO_u8SetPortValue(LCD_D_PORT, Loc_u8LCD_Char);
    48c0:	80 e0       	ldi	r24, 0x00	; 0
    48c2:	6d 8d       	ldd	r22, Y+29	; 0x1d
    48c4:	0e 94 65 1a 	call	0x34ca	; 0x34ca <MCAL_DIO_u8SetPortValue>
	MCAL_DIO_u8SetPinValue(Enable_PORT, Enable_PIN, Enable_High);
    48c8:	81 e0       	ldi	r24, 0x01	; 1
    48ca:	63 e0       	ldi	r22, 0x03	; 3
    48cc:	41 e0       	ldi	r20, 0x01	; 1
    48ce:	0e 94 e8 1a 	call	0x35d0	; 0x35d0 <MCAL_DIO_u8SetPinValue>
    48d2:	80 e0       	ldi	r24, 0x00	; 0
    48d4:	90 e0       	ldi	r25, 0x00	; 0
    48d6:	a0 e0       	ldi	r26, 0x00	; 0
    48d8:	b0 e4       	ldi	r27, 0x40	; 64
    48da:	89 8f       	std	Y+25, r24	; 0x19
    48dc:	9a 8f       	std	Y+26, r25	; 0x1a
    48de:	ab 8f       	std	Y+27, r26	; 0x1b
    48e0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    48e2:	69 8d       	ldd	r22, Y+25	; 0x19
    48e4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    48e6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    48e8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    48ea:	20 e0       	ldi	r18, 0x00	; 0
    48ec:	30 e0       	ldi	r19, 0x00	; 0
    48ee:	4a e7       	ldi	r20, 0x7A	; 122
    48f0:	55 e4       	ldi	r21, 0x45	; 69
    48f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    48f6:	dc 01       	movw	r26, r24
    48f8:	cb 01       	movw	r24, r22
    48fa:	8d 8b       	std	Y+21, r24	; 0x15
    48fc:	9e 8b       	std	Y+22, r25	; 0x16
    48fe:	af 8b       	std	Y+23, r26	; 0x17
    4900:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4902:	6d 89       	ldd	r22, Y+21	; 0x15
    4904:	7e 89       	ldd	r23, Y+22	; 0x16
    4906:	8f 89       	ldd	r24, Y+23	; 0x17
    4908:	98 8d       	ldd	r25, Y+24	; 0x18
    490a:	20 e0       	ldi	r18, 0x00	; 0
    490c:	30 e0       	ldi	r19, 0x00	; 0
    490e:	40 e8       	ldi	r20, 0x80	; 128
    4910:	5f e3       	ldi	r21, 0x3F	; 63
    4912:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4916:	88 23       	and	r24, r24
    4918:	2c f4       	brge	.+10     	; 0x4924 <HAL_LCD_u8SendChar+0x8e>
		__ticks = 1;
    491a:	81 e0       	ldi	r24, 0x01	; 1
    491c:	90 e0       	ldi	r25, 0x00	; 0
    491e:	9c 8b       	std	Y+20, r25	; 0x14
    4920:	8b 8b       	std	Y+19, r24	; 0x13
    4922:	3f c0       	rjmp	.+126    	; 0x49a2 <HAL_LCD_u8SendChar+0x10c>
	else if (__tmp > 65535)
    4924:	6d 89       	ldd	r22, Y+21	; 0x15
    4926:	7e 89       	ldd	r23, Y+22	; 0x16
    4928:	8f 89       	ldd	r24, Y+23	; 0x17
    492a:	98 8d       	ldd	r25, Y+24	; 0x18
    492c:	20 e0       	ldi	r18, 0x00	; 0
    492e:	3f ef       	ldi	r19, 0xFF	; 255
    4930:	4f e7       	ldi	r20, 0x7F	; 127
    4932:	57 e4       	ldi	r21, 0x47	; 71
    4934:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4938:	18 16       	cp	r1, r24
    493a:	4c f5       	brge	.+82     	; 0x498e <HAL_LCD_u8SendChar+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    493c:	69 8d       	ldd	r22, Y+25	; 0x19
    493e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4940:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4942:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4944:	20 e0       	ldi	r18, 0x00	; 0
    4946:	30 e0       	ldi	r19, 0x00	; 0
    4948:	40 e2       	ldi	r20, 0x20	; 32
    494a:	51 e4       	ldi	r21, 0x41	; 65
    494c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4950:	dc 01       	movw	r26, r24
    4952:	cb 01       	movw	r24, r22
    4954:	bc 01       	movw	r22, r24
    4956:	cd 01       	movw	r24, r26
    4958:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    495c:	dc 01       	movw	r26, r24
    495e:	cb 01       	movw	r24, r22
    4960:	9c 8b       	std	Y+20, r25	; 0x14
    4962:	8b 8b       	std	Y+19, r24	; 0x13
    4964:	0f c0       	rjmp	.+30     	; 0x4984 <HAL_LCD_u8SendChar+0xee>
    4966:	80 e9       	ldi	r24, 0x90	; 144
    4968:	91 e0       	ldi	r25, 0x01	; 1
    496a:	9a 8b       	std	Y+18, r25	; 0x12
    496c:	89 8b       	std	Y+17, r24	; 0x11
    496e:	89 89       	ldd	r24, Y+17	; 0x11
    4970:	9a 89       	ldd	r25, Y+18	; 0x12
    4972:	01 97       	sbiw	r24, 0x01	; 1
    4974:	f1 f7       	brne	.-4      	; 0x4972 <HAL_LCD_u8SendChar+0xdc>
    4976:	9a 8b       	std	Y+18, r25	; 0x12
    4978:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    497a:	8b 89       	ldd	r24, Y+19	; 0x13
    497c:	9c 89       	ldd	r25, Y+20	; 0x14
    497e:	01 97       	sbiw	r24, 0x01	; 1
    4980:	9c 8b       	std	Y+20, r25	; 0x14
    4982:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4984:	8b 89       	ldd	r24, Y+19	; 0x13
    4986:	9c 89       	ldd	r25, Y+20	; 0x14
    4988:	00 97       	sbiw	r24, 0x00	; 0
    498a:	69 f7       	brne	.-38     	; 0x4966 <HAL_LCD_u8SendChar+0xd0>
    498c:	14 c0       	rjmp	.+40     	; 0x49b6 <HAL_LCD_u8SendChar+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    498e:	6d 89       	ldd	r22, Y+21	; 0x15
    4990:	7e 89       	ldd	r23, Y+22	; 0x16
    4992:	8f 89       	ldd	r24, Y+23	; 0x17
    4994:	98 8d       	ldd	r25, Y+24	; 0x18
    4996:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    499a:	dc 01       	movw	r26, r24
    499c:	cb 01       	movw	r24, r22
    499e:	9c 8b       	std	Y+20, r25	; 0x14
    49a0:	8b 8b       	std	Y+19, r24	; 0x13
    49a2:	8b 89       	ldd	r24, Y+19	; 0x13
    49a4:	9c 89       	ldd	r25, Y+20	; 0x14
    49a6:	98 8b       	std	Y+16, r25	; 0x10
    49a8:	8f 87       	std	Y+15, r24	; 0x0f
    49aa:	8f 85       	ldd	r24, Y+15	; 0x0f
    49ac:	98 89       	ldd	r25, Y+16	; 0x10
    49ae:	01 97       	sbiw	r24, 0x01	; 1
    49b0:	f1 f7       	brne	.-4      	; 0x49ae <HAL_LCD_u8SendChar+0x118>
    49b2:	98 8b       	std	Y+16, r25	; 0x10
    49b4:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	MCAL_DIO_u8SetPinValue(Enable_PORT, Enable_PIN, Enable_Low);
    49b6:	81 e0       	ldi	r24, 0x01	; 1
    49b8:	63 e0       	ldi	r22, 0x03	; 3
    49ba:	40 e0       	ldi	r20, 0x00	; 0
    49bc:	0e 94 e8 1a 	call	0x35d0	; 0x35d0 <MCAL_DIO_u8SetPinValue>
	MCAL_DIO_u8SetPortValue(LCD_D_PORT, (Loc_u8LCD_Char << 4));
    49c0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    49c2:	98 2f       	mov	r25, r24
    49c4:	92 95       	swap	r25
    49c6:	90 7f       	andi	r25, 0xF0	; 240
    49c8:	80 e0       	ldi	r24, 0x00	; 0
    49ca:	69 2f       	mov	r22, r25
    49cc:	0e 94 65 1a 	call	0x34ca	; 0x34ca <MCAL_DIO_u8SetPortValue>
	MCAL_DIO_u8SetPinValue(Enable_PORT, Enable_PIN, Enable_High);
    49d0:	81 e0       	ldi	r24, 0x01	; 1
    49d2:	63 e0       	ldi	r22, 0x03	; 3
    49d4:	41 e0       	ldi	r20, 0x01	; 1
    49d6:	0e 94 e8 1a 	call	0x35d0	; 0x35d0 <MCAL_DIO_u8SetPinValue>
    49da:	80 e0       	ldi	r24, 0x00	; 0
    49dc:	90 e0       	ldi	r25, 0x00	; 0
    49de:	a0 e0       	ldi	r26, 0x00	; 0
    49e0:	b0 e4       	ldi	r27, 0x40	; 64
    49e2:	8b 87       	std	Y+11, r24	; 0x0b
    49e4:	9c 87       	std	Y+12, r25	; 0x0c
    49e6:	ad 87       	std	Y+13, r26	; 0x0d
    49e8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    49ea:	6b 85       	ldd	r22, Y+11	; 0x0b
    49ec:	7c 85       	ldd	r23, Y+12	; 0x0c
    49ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    49f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    49f2:	20 e0       	ldi	r18, 0x00	; 0
    49f4:	30 e0       	ldi	r19, 0x00	; 0
    49f6:	4a e7       	ldi	r20, 0x7A	; 122
    49f8:	55 e4       	ldi	r21, 0x45	; 69
    49fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    49fe:	dc 01       	movw	r26, r24
    4a00:	cb 01       	movw	r24, r22
    4a02:	8f 83       	std	Y+7, r24	; 0x07
    4a04:	98 87       	std	Y+8, r25	; 0x08
    4a06:	a9 87       	std	Y+9, r26	; 0x09
    4a08:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4a0a:	6f 81       	ldd	r22, Y+7	; 0x07
    4a0c:	78 85       	ldd	r23, Y+8	; 0x08
    4a0e:	89 85       	ldd	r24, Y+9	; 0x09
    4a10:	9a 85       	ldd	r25, Y+10	; 0x0a
    4a12:	20 e0       	ldi	r18, 0x00	; 0
    4a14:	30 e0       	ldi	r19, 0x00	; 0
    4a16:	40 e8       	ldi	r20, 0x80	; 128
    4a18:	5f e3       	ldi	r21, 0x3F	; 63
    4a1a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4a1e:	88 23       	and	r24, r24
    4a20:	2c f4       	brge	.+10     	; 0x4a2c <HAL_LCD_u8SendChar+0x196>
		__ticks = 1;
    4a22:	81 e0       	ldi	r24, 0x01	; 1
    4a24:	90 e0       	ldi	r25, 0x00	; 0
    4a26:	9e 83       	std	Y+6, r25	; 0x06
    4a28:	8d 83       	std	Y+5, r24	; 0x05
    4a2a:	3f c0       	rjmp	.+126    	; 0x4aaa <HAL_LCD_u8SendChar+0x214>
	else if (__tmp > 65535)
    4a2c:	6f 81       	ldd	r22, Y+7	; 0x07
    4a2e:	78 85       	ldd	r23, Y+8	; 0x08
    4a30:	89 85       	ldd	r24, Y+9	; 0x09
    4a32:	9a 85       	ldd	r25, Y+10	; 0x0a
    4a34:	20 e0       	ldi	r18, 0x00	; 0
    4a36:	3f ef       	ldi	r19, 0xFF	; 255
    4a38:	4f e7       	ldi	r20, 0x7F	; 127
    4a3a:	57 e4       	ldi	r21, 0x47	; 71
    4a3c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4a40:	18 16       	cp	r1, r24
    4a42:	4c f5       	brge	.+82     	; 0x4a96 <HAL_LCD_u8SendChar+0x200>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4a44:	6b 85       	ldd	r22, Y+11	; 0x0b
    4a46:	7c 85       	ldd	r23, Y+12	; 0x0c
    4a48:	8d 85       	ldd	r24, Y+13	; 0x0d
    4a4a:	9e 85       	ldd	r25, Y+14	; 0x0e
    4a4c:	20 e0       	ldi	r18, 0x00	; 0
    4a4e:	30 e0       	ldi	r19, 0x00	; 0
    4a50:	40 e2       	ldi	r20, 0x20	; 32
    4a52:	51 e4       	ldi	r21, 0x41	; 65
    4a54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a58:	dc 01       	movw	r26, r24
    4a5a:	cb 01       	movw	r24, r22
    4a5c:	bc 01       	movw	r22, r24
    4a5e:	cd 01       	movw	r24, r26
    4a60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a64:	dc 01       	movw	r26, r24
    4a66:	cb 01       	movw	r24, r22
    4a68:	9e 83       	std	Y+6, r25	; 0x06
    4a6a:	8d 83       	std	Y+5, r24	; 0x05
    4a6c:	0f c0       	rjmp	.+30     	; 0x4a8c <HAL_LCD_u8SendChar+0x1f6>
    4a6e:	80 e9       	ldi	r24, 0x90	; 144
    4a70:	91 e0       	ldi	r25, 0x01	; 1
    4a72:	9c 83       	std	Y+4, r25	; 0x04
    4a74:	8b 83       	std	Y+3, r24	; 0x03
    4a76:	8b 81       	ldd	r24, Y+3	; 0x03
    4a78:	9c 81       	ldd	r25, Y+4	; 0x04
    4a7a:	01 97       	sbiw	r24, 0x01	; 1
    4a7c:	f1 f7       	brne	.-4      	; 0x4a7a <HAL_LCD_u8SendChar+0x1e4>
    4a7e:	9c 83       	std	Y+4, r25	; 0x04
    4a80:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4a82:	8d 81       	ldd	r24, Y+5	; 0x05
    4a84:	9e 81       	ldd	r25, Y+6	; 0x06
    4a86:	01 97       	sbiw	r24, 0x01	; 1
    4a88:	9e 83       	std	Y+6, r25	; 0x06
    4a8a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4a8c:	8d 81       	ldd	r24, Y+5	; 0x05
    4a8e:	9e 81       	ldd	r25, Y+6	; 0x06
    4a90:	00 97       	sbiw	r24, 0x00	; 0
    4a92:	69 f7       	brne	.-38     	; 0x4a6e <HAL_LCD_u8SendChar+0x1d8>
    4a94:	14 c0       	rjmp	.+40     	; 0x4abe <HAL_LCD_u8SendChar+0x228>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4a96:	6f 81       	ldd	r22, Y+7	; 0x07
    4a98:	78 85       	ldd	r23, Y+8	; 0x08
    4a9a:	89 85       	ldd	r24, Y+9	; 0x09
    4a9c:	9a 85       	ldd	r25, Y+10	; 0x0a
    4a9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4aa2:	dc 01       	movw	r26, r24
    4aa4:	cb 01       	movw	r24, r22
    4aa6:	9e 83       	std	Y+6, r25	; 0x06
    4aa8:	8d 83       	std	Y+5, r24	; 0x05
    4aaa:	8d 81       	ldd	r24, Y+5	; 0x05
    4aac:	9e 81       	ldd	r25, Y+6	; 0x06
    4aae:	9a 83       	std	Y+2, r25	; 0x02
    4ab0:	89 83       	std	Y+1, r24	; 0x01
    4ab2:	89 81       	ldd	r24, Y+1	; 0x01
    4ab4:	9a 81       	ldd	r25, Y+2	; 0x02
    4ab6:	01 97       	sbiw	r24, 0x01	; 1
    4ab8:	f1 f7       	brne	.-4      	; 0x4ab6 <HAL_LCD_u8SendChar+0x220>
    4aba:	9a 83       	std	Y+2, r25	; 0x02
    4abc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	MCAL_DIO_u8SetPinValue(Enable_PORT, Enable_PIN, Enable_Low);
    4abe:	81 e0       	ldi	r24, 0x01	; 1
    4ac0:	63 e0       	ldi	r22, 0x03	; 3
    4ac2:	40 e0       	ldi	r20, 0x00	; 0
    4ac4:	0e 94 e8 1a 	call	0x35d0	; 0x35d0 <MCAL_DIO_u8SetPinValue>
}
    4ac8:	6d 96       	adiw	r28, 0x1d	; 29
    4aca:	0f b6       	in	r0, 0x3f	; 63
    4acc:	f8 94       	cli
    4ace:	de bf       	out	0x3e, r29	; 62
    4ad0:	0f be       	out	0x3f, r0	; 63
    4ad2:	cd bf       	out	0x3d, r28	; 61
    4ad4:	cf 91       	pop	r28
    4ad6:	df 91       	pop	r29
    4ad8:	08 95       	ret

00004ada <HAL_LCD_u8SendString>:

void HAL_LCD_u8SendString(u8* Loc_u8LCD_String) {
    4ada:	df 93       	push	r29
    4adc:	cf 93       	push	r28
    4ade:	00 d0       	rcall	.+0      	; 0x4ae0 <HAL_LCD_u8SendString+0x6>
    4ae0:	00 d0       	rcall	.+0      	; 0x4ae2 <HAL_LCD_u8SendString+0x8>
    4ae2:	00 d0       	rcall	.+0      	; 0x4ae4 <HAL_LCD_u8SendString+0xa>
    4ae4:	cd b7       	in	r28, 0x3d	; 61
    4ae6:	de b7       	in	r29, 0x3e	; 62
    4ae8:	9e 83       	std	Y+6, r25	; 0x06
    4aea:	8d 83       	std	Y+5, r24	; 0x05
	for (u32 count = 0; Loc_u8LCD_String[count] != '\0'; count++) {
    4aec:	19 82       	std	Y+1, r1	; 0x01
    4aee:	1a 82       	std	Y+2, r1	; 0x02
    4af0:	1b 82       	std	Y+3, r1	; 0x03
    4af2:	1c 82       	std	Y+4, r1	; 0x04
    4af4:	15 c0       	rjmp	.+42     	; 0x4b20 <HAL_LCD_u8SendString+0x46>
		HAL_LCD_u8SendChar(Loc_u8LCD_String[count]);
    4af6:	29 81       	ldd	r18, Y+1	; 0x01
    4af8:	3a 81       	ldd	r19, Y+2	; 0x02
    4afa:	8d 81       	ldd	r24, Y+5	; 0x05
    4afc:	9e 81       	ldd	r25, Y+6	; 0x06
    4afe:	fc 01       	movw	r30, r24
    4b00:	e2 0f       	add	r30, r18
    4b02:	f3 1f       	adc	r31, r19
    4b04:	80 81       	ld	r24, Z
    4b06:	0e 94 4b 24 	call	0x4896	; 0x4896 <HAL_LCD_u8SendChar>
	_delay_ms(2);
	MCAL_DIO_u8SetPinValue(Enable_PORT, Enable_PIN, Enable_Low);
}

void HAL_LCD_u8SendString(u8* Loc_u8LCD_String) {
	for (u32 count = 0; Loc_u8LCD_String[count] != '\0'; count++) {
    4b0a:	89 81       	ldd	r24, Y+1	; 0x01
    4b0c:	9a 81       	ldd	r25, Y+2	; 0x02
    4b0e:	ab 81       	ldd	r26, Y+3	; 0x03
    4b10:	bc 81       	ldd	r27, Y+4	; 0x04
    4b12:	01 96       	adiw	r24, 0x01	; 1
    4b14:	a1 1d       	adc	r26, r1
    4b16:	b1 1d       	adc	r27, r1
    4b18:	89 83       	std	Y+1, r24	; 0x01
    4b1a:	9a 83       	std	Y+2, r25	; 0x02
    4b1c:	ab 83       	std	Y+3, r26	; 0x03
    4b1e:	bc 83       	std	Y+4, r27	; 0x04
    4b20:	29 81       	ldd	r18, Y+1	; 0x01
    4b22:	3a 81       	ldd	r19, Y+2	; 0x02
    4b24:	8d 81       	ldd	r24, Y+5	; 0x05
    4b26:	9e 81       	ldd	r25, Y+6	; 0x06
    4b28:	fc 01       	movw	r30, r24
    4b2a:	e2 0f       	add	r30, r18
    4b2c:	f3 1f       	adc	r31, r19
    4b2e:	80 81       	ld	r24, Z
    4b30:	88 23       	and	r24, r24
    4b32:	09 f7       	brne	.-62     	; 0x4af6 <HAL_LCD_u8SendString+0x1c>
		HAL_LCD_u8SendChar(Loc_u8LCD_String[count]);
	}
}
    4b34:	26 96       	adiw	r28, 0x06	; 6
    4b36:	0f b6       	in	r0, 0x3f	; 63
    4b38:	f8 94       	cli
    4b3a:	de bf       	out	0x3e, r29	; 62
    4b3c:	0f be       	out	0x3f, r0	; 63
    4b3e:	cd bf       	out	0x3d, r28	; 61
    4b40:	cf 91       	pop	r28
    4b42:	df 91       	pop	r29
    4b44:	08 95       	ret

00004b46 <HAL_LCD_u8SendNumber>:

void HAL_LCD_u8SendNumber(u16 Loc_u8LCD_Number) {
    4b46:	df 93       	push	r29
    4b48:	cf 93       	push	r28
    4b4a:	cd b7       	in	r28, 0x3d	; 61
    4b4c:	de b7       	in	r29, 0x3e	; 62
    4b4e:	2c 97       	sbiw	r28, 0x0c	; 12
    4b50:	0f b6       	in	r0, 0x3f	; 63
    4b52:	f8 94       	cli
    4b54:	de bf       	out	0x3e, r29	; 62
    4b56:	0f be       	out	0x3f, r0	; 63
    4b58:	cd bf       	out	0x3d, r28	; 61
    4b5a:	9c 87       	std	Y+12, r25	; 0x0c
    4b5c:	8b 87       	std	Y+11, r24	; 0x0b
	u8 str[10];
	itoa(Loc_u8LCD_Number, str, 10);
    4b5e:	8b 85       	ldd	r24, Y+11	; 0x0b
    4b60:	9c 85       	ldd	r25, Y+12	; 0x0c
    4b62:	9e 01       	movw	r18, r28
    4b64:	2f 5f       	subi	r18, 0xFF	; 255
    4b66:	3f 4f       	sbci	r19, 0xFF	; 255
    4b68:	b9 01       	movw	r22, r18
    4b6a:	4a e0       	ldi	r20, 0x0A	; 10
    4b6c:	50 e0       	ldi	r21, 0x00	; 0
    4b6e:	0e 94 16 2c 	call	0x582c	; 0x582c <itoa>
	HAL_LCD_u8SendString(str);
    4b72:	ce 01       	movw	r24, r28
    4b74:	01 96       	adiw	r24, 0x01	; 1
    4b76:	0e 94 6d 25 	call	0x4ada	; 0x4ada <HAL_LCD_u8SendString>
}
    4b7a:	2c 96       	adiw	r28, 0x0c	; 12
    4b7c:	0f b6       	in	r0, 0x3f	; 63
    4b7e:	f8 94       	cli
    4b80:	de bf       	out	0x3e, r29	; 62
    4b82:	0f be       	out	0x3f, r0	; 63
    4b84:	cd bf       	out	0x3d, r28	; 61
    4b86:	cf 91       	pop	r28
    4b88:	df 91       	pop	r29
    4b8a:	08 95       	ret

00004b8c <HAL_LCD_u8GoTo>:

void HAL_LCD_u8GoTo(u8 Loc_u8TypeOfShift, u8 Loc_u8NumOfShift) {
    4b8c:	df 93       	push	r29
    4b8e:	cf 93       	push	r28
    4b90:	cd b7       	in	r28, 0x3d	; 61
    4b92:	de b7       	in	r29, 0x3e	; 62
    4b94:	c2 54       	subi	r28, 0x42	; 66
    4b96:	d0 40       	sbci	r29, 0x00	; 0
    4b98:	0f b6       	in	r0, 0x3f	; 63
    4b9a:	f8 94       	cli
    4b9c:	de bf       	out	0x3e, r29	; 62
    4b9e:	0f be       	out	0x3f, r0	; 63
    4ba0:	cd bf       	out	0x3d, r28	; 61
    4ba2:	fe 01       	movw	r30, r28
    4ba4:	ef 5b       	subi	r30, 0xBF	; 191
    4ba6:	ff 4f       	sbci	r31, 0xFF	; 255
    4ba8:	80 83       	st	Z, r24
    4baa:	fe 01       	movw	r30, r28
    4bac:	ee 5b       	subi	r30, 0xBE	; 190
    4bae:	ff 4f       	sbci	r31, 0xFF	; 255
    4bb0:	60 83       	st	Z, r22
	if (Loc_u8TypeOfShift == Right_Shift) {
    4bb2:	fe 01       	movw	r30, r28
    4bb4:	ef 5b       	subi	r30, 0xBF	; 191
    4bb6:	ff 4f       	sbci	r31, 0xFF	; 255
    4bb8:	80 81       	ld	r24, Z
    4bba:	81 30       	cpi	r24, 0x01	; 1
    4bbc:	09 f0       	breq	.+2      	; 0x4bc0 <HAL_LCD_u8GoTo+0x34>
    4bbe:	a0 c0       	rjmp	.+320    	; 0x4d00 <HAL_LCD_u8GoTo+0x174>
		for (u32 count = 0; count < Loc_u8NumOfShift; count++) {
    4bc0:	fe 01       	movw	r30, r28
    4bc2:	fd 96       	adiw	r30, 0x3d	; 61
    4bc4:	10 82       	st	Z, r1
    4bc6:	11 82       	std	Z+1, r1	; 0x01
    4bc8:	12 82       	std	Z+2, r1	; 0x02
    4bca:	13 82       	std	Z+3, r1	; 0x03
    4bcc:	84 c0       	rjmp	.+264    	; 0x4cd6 <HAL_LCD_u8GoTo+0x14a>
    4bce:	80 e0       	ldi	r24, 0x00	; 0
    4bd0:	90 e0       	ldi	r25, 0x00	; 0
    4bd2:	a0 e0       	ldi	r26, 0x00	; 0
    4bd4:	b0 e4       	ldi	r27, 0x40	; 64
    4bd6:	8d ab       	std	Y+53, r24	; 0x35
    4bd8:	9e ab       	std	Y+54, r25	; 0x36
    4bda:	af ab       	std	Y+55, r26	; 0x37
    4bdc:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4bde:	6d a9       	ldd	r22, Y+53	; 0x35
    4be0:	7e a9       	ldd	r23, Y+54	; 0x36
    4be2:	8f a9       	ldd	r24, Y+55	; 0x37
    4be4:	98 ad       	ldd	r25, Y+56	; 0x38
    4be6:	20 e0       	ldi	r18, 0x00	; 0
    4be8:	30 e0       	ldi	r19, 0x00	; 0
    4bea:	4a e7       	ldi	r20, 0x7A	; 122
    4bec:	55 e4       	ldi	r21, 0x45	; 69
    4bee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4bf2:	dc 01       	movw	r26, r24
    4bf4:	cb 01       	movw	r24, r22
    4bf6:	89 ab       	std	Y+49, r24	; 0x31
    4bf8:	9a ab       	std	Y+50, r25	; 0x32
    4bfa:	ab ab       	std	Y+51, r26	; 0x33
    4bfc:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    4bfe:	69 a9       	ldd	r22, Y+49	; 0x31
    4c00:	7a a9       	ldd	r23, Y+50	; 0x32
    4c02:	8b a9       	ldd	r24, Y+51	; 0x33
    4c04:	9c a9       	ldd	r25, Y+52	; 0x34
    4c06:	20 e0       	ldi	r18, 0x00	; 0
    4c08:	30 e0       	ldi	r19, 0x00	; 0
    4c0a:	40 e8       	ldi	r20, 0x80	; 128
    4c0c:	5f e3       	ldi	r21, 0x3F	; 63
    4c0e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4c12:	88 23       	and	r24, r24
    4c14:	2c f4       	brge	.+10     	; 0x4c20 <HAL_LCD_u8GoTo+0x94>
		__ticks = 1;
    4c16:	81 e0       	ldi	r24, 0x01	; 1
    4c18:	90 e0       	ldi	r25, 0x00	; 0
    4c1a:	98 ab       	std	Y+48, r25	; 0x30
    4c1c:	8f a7       	std	Y+47, r24	; 0x2f
    4c1e:	3f c0       	rjmp	.+126    	; 0x4c9e <HAL_LCD_u8GoTo+0x112>
	else if (__tmp > 65535)
    4c20:	69 a9       	ldd	r22, Y+49	; 0x31
    4c22:	7a a9       	ldd	r23, Y+50	; 0x32
    4c24:	8b a9       	ldd	r24, Y+51	; 0x33
    4c26:	9c a9       	ldd	r25, Y+52	; 0x34
    4c28:	20 e0       	ldi	r18, 0x00	; 0
    4c2a:	3f ef       	ldi	r19, 0xFF	; 255
    4c2c:	4f e7       	ldi	r20, 0x7F	; 127
    4c2e:	57 e4       	ldi	r21, 0x47	; 71
    4c30:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4c34:	18 16       	cp	r1, r24
    4c36:	4c f5       	brge	.+82     	; 0x4c8a <HAL_LCD_u8GoTo+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4c38:	6d a9       	ldd	r22, Y+53	; 0x35
    4c3a:	7e a9       	ldd	r23, Y+54	; 0x36
    4c3c:	8f a9       	ldd	r24, Y+55	; 0x37
    4c3e:	98 ad       	ldd	r25, Y+56	; 0x38
    4c40:	20 e0       	ldi	r18, 0x00	; 0
    4c42:	30 e0       	ldi	r19, 0x00	; 0
    4c44:	40 e2       	ldi	r20, 0x20	; 32
    4c46:	51 e4       	ldi	r21, 0x41	; 65
    4c48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4c4c:	dc 01       	movw	r26, r24
    4c4e:	cb 01       	movw	r24, r22
    4c50:	bc 01       	movw	r22, r24
    4c52:	cd 01       	movw	r24, r26
    4c54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4c58:	dc 01       	movw	r26, r24
    4c5a:	cb 01       	movw	r24, r22
    4c5c:	98 ab       	std	Y+48, r25	; 0x30
    4c5e:	8f a7       	std	Y+47, r24	; 0x2f
    4c60:	0f c0       	rjmp	.+30     	; 0x4c80 <HAL_LCD_u8GoTo+0xf4>
    4c62:	80 e9       	ldi	r24, 0x90	; 144
    4c64:	91 e0       	ldi	r25, 0x01	; 1
    4c66:	9e a7       	std	Y+46, r25	; 0x2e
    4c68:	8d a7       	std	Y+45, r24	; 0x2d
    4c6a:	8d a5       	ldd	r24, Y+45	; 0x2d
    4c6c:	9e a5       	ldd	r25, Y+46	; 0x2e
    4c6e:	01 97       	sbiw	r24, 0x01	; 1
    4c70:	f1 f7       	brne	.-4      	; 0x4c6e <HAL_LCD_u8GoTo+0xe2>
    4c72:	9e a7       	std	Y+46, r25	; 0x2e
    4c74:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4c76:	8f a5       	ldd	r24, Y+47	; 0x2f
    4c78:	98 a9       	ldd	r25, Y+48	; 0x30
    4c7a:	01 97       	sbiw	r24, 0x01	; 1
    4c7c:	98 ab       	std	Y+48, r25	; 0x30
    4c7e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4c80:	8f a5       	ldd	r24, Y+47	; 0x2f
    4c82:	98 a9       	ldd	r25, Y+48	; 0x30
    4c84:	00 97       	sbiw	r24, 0x00	; 0
    4c86:	69 f7       	brne	.-38     	; 0x4c62 <HAL_LCD_u8GoTo+0xd6>
    4c88:	14 c0       	rjmp	.+40     	; 0x4cb2 <HAL_LCD_u8GoTo+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4c8a:	69 a9       	ldd	r22, Y+49	; 0x31
    4c8c:	7a a9       	ldd	r23, Y+50	; 0x32
    4c8e:	8b a9       	ldd	r24, Y+51	; 0x33
    4c90:	9c a9       	ldd	r25, Y+52	; 0x34
    4c92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4c96:	dc 01       	movw	r26, r24
    4c98:	cb 01       	movw	r24, r22
    4c9a:	98 ab       	std	Y+48, r25	; 0x30
    4c9c:	8f a7       	std	Y+47, r24	; 0x2f
    4c9e:	8f a5       	ldd	r24, Y+47	; 0x2f
    4ca0:	98 a9       	ldd	r25, Y+48	; 0x30
    4ca2:	9c a7       	std	Y+44, r25	; 0x2c
    4ca4:	8b a7       	std	Y+43, r24	; 0x2b
    4ca6:	8b a5       	ldd	r24, Y+43	; 0x2b
    4ca8:	9c a5       	ldd	r25, Y+44	; 0x2c
    4caa:	01 97       	sbiw	r24, 0x01	; 1
    4cac:	f1 f7       	brne	.-4      	; 0x4caa <HAL_LCD_u8GoTo+0x11e>
    4cae:	9c a7       	std	Y+44, r25	; 0x2c
    4cb0:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(2);
			HAL_LCD_u8SendCommands(Right_Shift_Command);
    4cb2:	8c e1       	ldi	r24, 0x1C	; 28
    4cb4:	0e 94 29 23 	call	0x4652	; 0x4652 <HAL_LCD_u8SendCommands>
	HAL_LCD_u8SendString(str);
}

void HAL_LCD_u8GoTo(u8 Loc_u8TypeOfShift, u8 Loc_u8NumOfShift) {
	if (Loc_u8TypeOfShift == Right_Shift) {
		for (u32 count = 0; count < Loc_u8NumOfShift; count++) {
    4cb8:	fe 01       	movw	r30, r28
    4cba:	fd 96       	adiw	r30, 0x3d	; 61
    4cbc:	80 81       	ld	r24, Z
    4cbe:	91 81       	ldd	r25, Z+1	; 0x01
    4cc0:	a2 81       	ldd	r26, Z+2	; 0x02
    4cc2:	b3 81       	ldd	r27, Z+3	; 0x03
    4cc4:	01 96       	adiw	r24, 0x01	; 1
    4cc6:	a1 1d       	adc	r26, r1
    4cc8:	b1 1d       	adc	r27, r1
    4cca:	fe 01       	movw	r30, r28
    4ccc:	fd 96       	adiw	r30, 0x3d	; 61
    4cce:	80 83       	st	Z, r24
    4cd0:	91 83       	std	Z+1, r25	; 0x01
    4cd2:	a2 83       	std	Z+2, r26	; 0x02
    4cd4:	b3 83       	std	Z+3, r27	; 0x03
    4cd6:	fe 01       	movw	r30, r28
    4cd8:	ee 5b       	subi	r30, 0xBE	; 190
    4cda:	ff 4f       	sbci	r31, 0xFF	; 255
    4cdc:	80 81       	ld	r24, Z
    4cde:	28 2f       	mov	r18, r24
    4ce0:	30 e0       	ldi	r19, 0x00	; 0
    4ce2:	40 e0       	ldi	r20, 0x00	; 0
    4ce4:	50 e0       	ldi	r21, 0x00	; 0
    4ce6:	fe 01       	movw	r30, r28
    4ce8:	fd 96       	adiw	r30, 0x3d	; 61
    4cea:	80 81       	ld	r24, Z
    4cec:	91 81       	ldd	r25, Z+1	; 0x01
    4cee:	a2 81       	ldd	r26, Z+2	; 0x02
    4cf0:	b3 81       	ldd	r27, Z+3	; 0x03
    4cf2:	82 17       	cp	r24, r18
    4cf4:	93 07       	cpc	r25, r19
    4cf6:	a4 07       	cpc	r26, r20
    4cf8:	b5 07       	cpc	r27, r21
    4cfa:	08 f4       	brcc	.+2      	; 0x4cfe <HAL_LCD_u8GoTo+0x172>
    4cfc:	68 cf       	rjmp	.-304    	; 0x4bce <HAL_LCD_u8GoTo+0x42>
    4cfe:	98 c1       	rjmp	.+816    	; 0x5030 <HAL_LCD_u8GoTo+0x4a4>
			_delay_ms(2);
			HAL_LCD_u8SendCommands(Right_Shift_Command);
		}
	} else if (Loc_u8TypeOfShift == Left_Shift) {
    4d00:	fe 01       	movw	r30, r28
    4d02:	ef 5b       	subi	r30, 0xBF	; 191
    4d04:	ff 4f       	sbci	r31, 0xFF	; 255
    4d06:	80 81       	ld	r24, Z
    4d08:	88 23       	and	r24, r24
    4d0a:	09 f0       	breq	.+2      	; 0x4d0e <HAL_LCD_u8GoTo+0x182>
    4d0c:	98 c0       	rjmp	.+304    	; 0x4e3e <HAL_LCD_u8GoTo+0x2b2>
		for (u32 count = 0; count < Loc_u8NumOfShift; count++) {
    4d0e:	19 ae       	std	Y+57, r1	; 0x39
    4d10:	1a ae       	std	Y+58, r1	; 0x3a
    4d12:	1b ae       	std	Y+59, r1	; 0x3b
    4d14:	1c ae       	std	Y+60, r1	; 0x3c
    4d16:	80 c0       	rjmp	.+256    	; 0x4e18 <HAL_LCD_u8GoTo+0x28c>
    4d18:	80 e0       	ldi	r24, 0x00	; 0
    4d1a:	90 e0       	ldi	r25, 0x00	; 0
    4d1c:	a0 e0       	ldi	r26, 0x00	; 0
    4d1e:	b0 e4       	ldi	r27, 0x40	; 64
    4d20:	8f a3       	std	Y+39, r24	; 0x27
    4d22:	98 a7       	std	Y+40, r25	; 0x28
    4d24:	a9 a7       	std	Y+41, r26	; 0x29
    4d26:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4d28:	6f a1       	ldd	r22, Y+39	; 0x27
    4d2a:	78 a5       	ldd	r23, Y+40	; 0x28
    4d2c:	89 a5       	ldd	r24, Y+41	; 0x29
    4d2e:	9a a5       	ldd	r25, Y+42	; 0x2a
    4d30:	20 e0       	ldi	r18, 0x00	; 0
    4d32:	30 e0       	ldi	r19, 0x00	; 0
    4d34:	4a e7       	ldi	r20, 0x7A	; 122
    4d36:	55 e4       	ldi	r21, 0x45	; 69
    4d38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d3c:	dc 01       	movw	r26, r24
    4d3e:	cb 01       	movw	r24, r22
    4d40:	8b a3       	std	Y+35, r24	; 0x23
    4d42:	9c a3       	std	Y+36, r25	; 0x24
    4d44:	ad a3       	std	Y+37, r26	; 0x25
    4d46:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4d48:	6b a1       	ldd	r22, Y+35	; 0x23
    4d4a:	7c a1       	ldd	r23, Y+36	; 0x24
    4d4c:	8d a1       	ldd	r24, Y+37	; 0x25
    4d4e:	9e a1       	ldd	r25, Y+38	; 0x26
    4d50:	20 e0       	ldi	r18, 0x00	; 0
    4d52:	30 e0       	ldi	r19, 0x00	; 0
    4d54:	40 e8       	ldi	r20, 0x80	; 128
    4d56:	5f e3       	ldi	r21, 0x3F	; 63
    4d58:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4d5c:	88 23       	and	r24, r24
    4d5e:	2c f4       	brge	.+10     	; 0x4d6a <HAL_LCD_u8GoTo+0x1de>
		__ticks = 1;
    4d60:	81 e0       	ldi	r24, 0x01	; 1
    4d62:	90 e0       	ldi	r25, 0x00	; 0
    4d64:	9a a3       	std	Y+34, r25	; 0x22
    4d66:	89 a3       	std	Y+33, r24	; 0x21
    4d68:	3f c0       	rjmp	.+126    	; 0x4de8 <HAL_LCD_u8GoTo+0x25c>
	else if (__tmp > 65535)
    4d6a:	6b a1       	ldd	r22, Y+35	; 0x23
    4d6c:	7c a1       	ldd	r23, Y+36	; 0x24
    4d6e:	8d a1       	ldd	r24, Y+37	; 0x25
    4d70:	9e a1       	ldd	r25, Y+38	; 0x26
    4d72:	20 e0       	ldi	r18, 0x00	; 0
    4d74:	3f ef       	ldi	r19, 0xFF	; 255
    4d76:	4f e7       	ldi	r20, 0x7F	; 127
    4d78:	57 e4       	ldi	r21, 0x47	; 71
    4d7a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4d7e:	18 16       	cp	r1, r24
    4d80:	4c f5       	brge	.+82     	; 0x4dd4 <HAL_LCD_u8GoTo+0x248>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4d82:	6f a1       	ldd	r22, Y+39	; 0x27
    4d84:	78 a5       	ldd	r23, Y+40	; 0x28
    4d86:	89 a5       	ldd	r24, Y+41	; 0x29
    4d88:	9a a5       	ldd	r25, Y+42	; 0x2a
    4d8a:	20 e0       	ldi	r18, 0x00	; 0
    4d8c:	30 e0       	ldi	r19, 0x00	; 0
    4d8e:	40 e2       	ldi	r20, 0x20	; 32
    4d90:	51 e4       	ldi	r21, 0x41	; 65
    4d92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d96:	dc 01       	movw	r26, r24
    4d98:	cb 01       	movw	r24, r22
    4d9a:	bc 01       	movw	r22, r24
    4d9c:	cd 01       	movw	r24, r26
    4d9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4da2:	dc 01       	movw	r26, r24
    4da4:	cb 01       	movw	r24, r22
    4da6:	9a a3       	std	Y+34, r25	; 0x22
    4da8:	89 a3       	std	Y+33, r24	; 0x21
    4daa:	0f c0       	rjmp	.+30     	; 0x4dca <HAL_LCD_u8GoTo+0x23e>
    4dac:	80 e9       	ldi	r24, 0x90	; 144
    4dae:	91 e0       	ldi	r25, 0x01	; 1
    4db0:	98 a3       	std	Y+32, r25	; 0x20
    4db2:	8f 8f       	std	Y+31, r24	; 0x1f
    4db4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4db6:	98 a1       	ldd	r25, Y+32	; 0x20
    4db8:	01 97       	sbiw	r24, 0x01	; 1
    4dba:	f1 f7       	brne	.-4      	; 0x4db8 <HAL_LCD_u8GoTo+0x22c>
    4dbc:	98 a3       	std	Y+32, r25	; 0x20
    4dbe:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4dc0:	89 a1       	ldd	r24, Y+33	; 0x21
    4dc2:	9a a1       	ldd	r25, Y+34	; 0x22
    4dc4:	01 97       	sbiw	r24, 0x01	; 1
    4dc6:	9a a3       	std	Y+34, r25	; 0x22
    4dc8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4dca:	89 a1       	ldd	r24, Y+33	; 0x21
    4dcc:	9a a1       	ldd	r25, Y+34	; 0x22
    4dce:	00 97       	sbiw	r24, 0x00	; 0
    4dd0:	69 f7       	brne	.-38     	; 0x4dac <HAL_LCD_u8GoTo+0x220>
    4dd2:	14 c0       	rjmp	.+40     	; 0x4dfc <HAL_LCD_u8GoTo+0x270>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4dd4:	6b a1       	ldd	r22, Y+35	; 0x23
    4dd6:	7c a1       	ldd	r23, Y+36	; 0x24
    4dd8:	8d a1       	ldd	r24, Y+37	; 0x25
    4dda:	9e a1       	ldd	r25, Y+38	; 0x26
    4ddc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4de0:	dc 01       	movw	r26, r24
    4de2:	cb 01       	movw	r24, r22
    4de4:	9a a3       	std	Y+34, r25	; 0x22
    4de6:	89 a3       	std	Y+33, r24	; 0x21
    4de8:	89 a1       	ldd	r24, Y+33	; 0x21
    4dea:	9a a1       	ldd	r25, Y+34	; 0x22
    4dec:	9e 8f       	std	Y+30, r25	; 0x1e
    4dee:	8d 8f       	std	Y+29, r24	; 0x1d
    4df0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4df2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4df4:	01 97       	sbiw	r24, 0x01	; 1
    4df6:	f1 f7       	brne	.-4      	; 0x4df4 <HAL_LCD_u8GoTo+0x268>
    4df8:	9e 8f       	std	Y+30, r25	; 0x1e
    4dfa:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(2);
			HAL_LCD_u8SendCommands(Left_Shift_Command);
    4dfc:	88 e1       	ldi	r24, 0x18	; 24
    4dfe:	0e 94 29 23 	call	0x4652	; 0x4652 <HAL_LCD_u8SendCommands>
		for (u32 count = 0; count < Loc_u8NumOfShift; count++) {
			_delay_ms(2);
			HAL_LCD_u8SendCommands(Right_Shift_Command);
		}
	} else if (Loc_u8TypeOfShift == Left_Shift) {
		for (u32 count = 0; count < Loc_u8NumOfShift; count++) {
    4e02:	89 ad       	ldd	r24, Y+57	; 0x39
    4e04:	9a ad       	ldd	r25, Y+58	; 0x3a
    4e06:	ab ad       	ldd	r26, Y+59	; 0x3b
    4e08:	bc ad       	ldd	r27, Y+60	; 0x3c
    4e0a:	01 96       	adiw	r24, 0x01	; 1
    4e0c:	a1 1d       	adc	r26, r1
    4e0e:	b1 1d       	adc	r27, r1
    4e10:	89 af       	std	Y+57, r24	; 0x39
    4e12:	9a af       	std	Y+58, r25	; 0x3a
    4e14:	ab af       	std	Y+59, r26	; 0x3b
    4e16:	bc af       	std	Y+60, r27	; 0x3c
    4e18:	fe 01       	movw	r30, r28
    4e1a:	ee 5b       	subi	r30, 0xBE	; 190
    4e1c:	ff 4f       	sbci	r31, 0xFF	; 255
    4e1e:	80 81       	ld	r24, Z
    4e20:	28 2f       	mov	r18, r24
    4e22:	30 e0       	ldi	r19, 0x00	; 0
    4e24:	40 e0       	ldi	r20, 0x00	; 0
    4e26:	50 e0       	ldi	r21, 0x00	; 0
    4e28:	89 ad       	ldd	r24, Y+57	; 0x39
    4e2a:	9a ad       	ldd	r25, Y+58	; 0x3a
    4e2c:	ab ad       	ldd	r26, Y+59	; 0x3b
    4e2e:	bc ad       	ldd	r27, Y+60	; 0x3c
    4e30:	82 17       	cp	r24, r18
    4e32:	93 07       	cpc	r25, r19
    4e34:	a4 07       	cpc	r26, r20
    4e36:	b5 07       	cpc	r27, r21
    4e38:	08 f4       	brcc	.+2      	; 0x4e3c <HAL_LCD_u8GoTo+0x2b0>
    4e3a:	6e cf       	rjmp	.-292    	; 0x4d18 <HAL_LCD_u8GoTo+0x18c>
    4e3c:	f9 c0       	rjmp	.+498    	; 0x5030 <HAL_LCD_u8GoTo+0x4a4>
			_delay_ms(2);
			HAL_LCD_u8SendCommands(Left_Shift_Command);
		}
	} else if (Loc_u8TypeOfShift == First_Line) {
    4e3e:	fe 01       	movw	r30, r28
    4e40:	ef 5b       	subi	r30, 0xBF	; 191
    4e42:	ff 4f       	sbci	r31, 0xFF	; 255
    4e44:	80 81       	ld	r24, Z
    4e46:	82 30       	cpi	r24, 0x02	; 2
    4e48:	09 f0       	breq	.+2      	; 0x4e4c <HAL_LCD_u8GoTo+0x2c0>
    4e4a:	76 c0       	rjmp	.+236    	; 0x4f38 <HAL_LCD_u8GoTo+0x3ac>
    4e4c:	80 e0       	ldi	r24, 0x00	; 0
    4e4e:	90 e0       	ldi	r25, 0x00	; 0
    4e50:	a0 e0       	ldi	r26, 0x00	; 0
    4e52:	b0 e4       	ldi	r27, 0x40	; 64
    4e54:	89 8f       	std	Y+25, r24	; 0x19
    4e56:	9a 8f       	std	Y+26, r25	; 0x1a
    4e58:	ab 8f       	std	Y+27, r26	; 0x1b
    4e5a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4e5c:	69 8d       	ldd	r22, Y+25	; 0x19
    4e5e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4e60:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4e62:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4e64:	20 e0       	ldi	r18, 0x00	; 0
    4e66:	30 e0       	ldi	r19, 0x00	; 0
    4e68:	4a e7       	ldi	r20, 0x7A	; 122
    4e6a:	55 e4       	ldi	r21, 0x45	; 69
    4e6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4e70:	dc 01       	movw	r26, r24
    4e72:	cb 01       	movw	r24, r22
    4e74:	8d 8b       	std	Y+21, r24	; 0x15
    4e76:	9e 8b       	std	Y+22, r25	; 0x16
    4e78:	af 8b       	std	Y+23, r26	; 0x17
    4e7a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4e7c:	6d 89       	ldd	r22, Y+21	; 0x15
    4e7e:	7e 89       	ldd	r23, Y+22	; 0x16
    4e80:	8f 89       	ldd	r24, Y+23	; 0x17
    4e82:	98 8d       	ldd	r25, Y+24	; 0x18
    4e84:	20 e0       	ldi	r18, 0x00	; 0
    4e86:	30 e0       	ldi	r19, 0x00	; 0
    4e88:	40 e8       	ldi	r20, 0x80	; 128
    4e8a:	5f e3       	ldi	r21, 0x3F	; 63
    4e8c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4e90:	88 23       	and	r24, r24
    4e92:	2c f4       	brge	.+10     	; 0x4e9e <HAL_LCD_u8GoTo+0x312>
		__ticks = 1;
    4e94:	81 e0       	ldi	r24, 0x01	; 1
    4e96:	90 e0       	ldi	r25, 0x00	; 0
    4e98:	9c 8b       	std	Y+20, r25	; 0x14
    4e9a:	8b 8b       	std	Y+19, r24	; 0x13
    4e9c:	3f c0       	rjmp	.+126    	; 0x4f1c <HAL_LCD_u8GoTo+0x390>
	else if (__tmp > 65535)
    4e9e:	6d 89       	ldd	r22, Y+21	; 0x15
    4ea0:	7e 89       	ldd	r23, Y+22	; 0x16
    4ea2:	8f 89       	ldd	r24, Y+23	; 0x17
    4ea4:	98 8d       	ldd	r25, Y+24	; 0x18
    4ea6:	20 e0       	ldi	r18, 0x00	; 0
    4ea8:	3f ef       	ldi	r19, 0xFF	; 255
    4eaa:	4f e7       	ldi	r20, 0x7F	; 127
    4eac:	57 e4       	ldi	r21, 0x47	; 71
    4eae:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4eb2:	18 16       	cp	r1, r24
    4eb4:	4c f5       	brge	.+82     	; 0x4f08 <HAL_LCD_u8GoTo+0x37c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4eb6:	69 8d       	ldd	r22, Y+25	; 0x19
    4eb8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4eba:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4ebc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4ebe:	20 e0       	ldi	r18, 0x00	; 0
    4ec0:	30 e0       	ldi	r19, 0x00	; 0
    4ec2:	40 e2       	ldi	r20, 0x20	; 32
    4ec4:	51 e4       	ldi	r21, 0x41	; 65
    4ec6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4eca:	dc 01       	movw	r26, r24
    4ecc:	cb 01       	movw	r24, r22
    4ece:	bc 01       	movw	r22, r24
    4ed0:	cd 01       	movw	r24, r26
    4ed2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ed6:	dc 01       	movw	r26, r24
    4ed8:	cb 01       	movw	r24, r22
    4eda:	9c 8b       	std	Y+20, r25	; 0x14
    4edc:	8b 8b       	std	Y+19, r24	; 0x13
    4ede:	0f c0       	rjmp	.+30     	; 0x4efe <HAL_LCD_u8GoTo+0x372>
    4ee0:	80 e9       	ldi	r24, 0x90	; 144
    4ee2:	91 e0       	ldi	r25, 0x01	; 1
    4ee4:	9a 8b       	std	Y+18, r25	; 0x12
    4ee6:	89 8b       	std	Y+17, r24	; 0x11
    4ee8:	89 89       	ldd	r24, Y+17	; 0x11
    4eea:	9a 89       	ldd	r25, Y+18	; 0x12
    4eec:	01 97       	sbiw	r24, 0x01	; 1
    4eee:	f1 f7       	brne	.-4      	; 0x4eec <HAL_LCD_u8GoTo+0x360>
    4ef0:	9a 8b       	std	Y+18, r25	; 0x12
    4ef2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4ef4:	8b 89       	ldd	r24, Y+19	; 0x13
    4ef6:	9c 89       	ldd	r25, Y+20	; 0x14
    4ef8:	01 97       	sbiw	r24, 0x01	; 1
    4efa:	9c 8b       	std	Y+20, r25	; 0x14
    4efc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4efe:	8b 89       	ldd	r24, Y+19	; 0x13
    4f00:	9c 89       	ldd	r25, Y+20	; 0x14
    4f02:	00 97       	sbiw	r24, 0x00	; 0
    4f04:	69 f7       	brne	.-38     	; 0x4ee0 <HAL_LCD_u8GoTo+0x354>
    4f06:	14 c0       	rjmp	.+40     	; 0x4f30 <HAL_LCD_u8GoTo+0x3a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4f08:	6d 89       	ldd	r22, Y+21	; 0x15
    4f0a:	7e 89       	ldd	r23, Y+22	; 0x16
    4f0c:	8f 89       	ldd	r24, Y+23	; 0x17
    4f0e:	98 8d       	ldd	r25, Y+24	; 0x18
    4f10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4f14:	dc 01       	movw	r26, r24
    4f16:	cb 01       	movw	r24, r22
    4f18:	9c 8b       	std	Y+20, r25	; 0x14
    4f1a:	8b 8b       	std	Y+19, r24	; 0x13
    4f1c:	8b 89       	ldd	r24, Y+19	; 0x13
    4f1e:	9c 89       	ldd	r25, Y+20	; 0x14
    4f20:	98 8b       	std	Y+16, r25	; 0x10
    4f22:	8f 87       	std	Y+15, r24	; 0x0f
    4f24:	8f 85       	ldd	r24, Y+15	; 0x0f
    4f26:	98 89       	ldd	r25, Y+16	; 0x10
    4f28:	01 97       	sbiw	r24, 0x01	; 1
    4f2a:	f1 f7       	brne	.-4      	; 0x4f28 <HAL_LCD_u8GoTo+0x39c>
    4f2c:	98 8b       	std	Y+16, r25	; 0x10
    4f2e:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(2);
		HAL_LCD_u8SendCommands(beginning_1stLine);
    4f30:	80 e8       	ldi	r24, 0x80	; 128
    4f32:	0e 94 29 23 	call	0x4652	; 0x4652 <HAL_LCD_u8SendCommands>
    4f36:	7c c0       	rjmp	.+248    	; 0x5030 <HAL_LCD_u8GoTo+0x4a4>
	} else if (Loc_u8TypeOfShift == Second_Line) {
    4f38:	fe 01       	movw	r30, r28
    4f3a:	ef 5b       	subi	r30, 0xBF	; 191
    4f3c:	ff 4f       	sbci	r31, 0xFF	; 255
    4f3e:	80 81       	ld	r24, Z
    4f40:	83 30       	cpi	r24, 0x03	; 3
    4f42:	09 f0       	breq	.+2      	; 0x4f46 <HAL_LCD_u8GoTo+0x3ba>
    4f44:	75 c0       	rjmp	.+234    	; 0x5030 <HAL_LCD_u8GoTo+0x4a4>
    4f46:	80 e0       	ldi	r24, 0x00	; 0
    4f48:	90 e0       	ldi	r25, 0x00	; 0
    4f4a:	a0 e0       	ldi	r26, 0x00	; 0
    4f4c:	b0 e4       	ldi	r27, 0x40	; 64
    4f4e:	8b 87       	std	Y+11, r24	; 0x0b
    4f50:	9c 87       	std	Y+12, r25	; 0x0c
    4f52:	ad 87       	std	Y+13, r26	; 0x0d
    4f54:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4f56:	6b 85       	ldd	r22, Y+11	; 0x0b
    4f58:	7c 85       	ldd	r23, Y+12	; 0x0c
    4f5a:	8d 85       	ldd	r24, Y+13	; 0x0d
    4f5c:	9e 85       	ldd	r25, Y+14	; 0x0e
    4f5e:	20 e0       	ldi	r18, 0x00	; 0
    4f60:	30 e0       	ldi	r19, 0x00	; 0
    4f62:	4a e7       	ldi	r20, 0x7A	; 122
    4f64:	55 e4       	ldi	r21, 0x45	; 69
    4f66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4f6a:	dc 01       	movw	r26, r24
    4f6c:	cb 01       	movw	r24, r22
    4f6e:	8f 83       	std	Y+7, r24	; 0x07
    4f70:	98 87       	std	Y+8, r25	; 0x08
    4f72:	a9 87       	std	Y+9, r26	; 0x09
    4f74:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4f76:	6f 81       	ldd	r22, Y+7	; 0x07
    4f78:	78 85       	ldd	r23, Y+8	; 0x08
    4f7a:	89 85       	ldd	r24, Y+9	; 0x09
    4f7c:	9a 85       	ldd	r25, Y+10	; 0x0a
    4f7e:	20 e0       	ldi	r18, 0x00	; 0
    4f80:	30 e0       	ldi	r19, 0x00	; 0
    4f82:	40 e8       	ldi	r20, 0x80	; 128
    4f84:	5f e3       	ldi	r21, 0x3F	; 63
    4f86:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4f8a:	88 23       	and	r24, r24
    4f8c:	2c f4       	brge	.+10     	; 0x4f98 <HAL_LCD_u8GoTo+0x40c>
		__ticks = 1;
    4f8e:	81 e0       	ldi	r24, 0x01	; 1
    4f90:	90 e0       	ldi	r25, 0x00	; 0
    4f92:	9e 83       	std	Y+6, r25	; 0x06
    4f94:	8d 83       	std	Y+5, r24	; 0x05
    4f96:	3f c0       	rjmp	.+126    	; 0x5016 <HAL_LCD_u8GoTo+0x48a>
	else if (__tmp > 65535)
    4f98:	6f 81       	ldd	r22, Y+7	; 0x07
    4f9a:	78 85       	ldd	r23, Y+8	; 0x08
    4f9c:	89 85       	ldd	r24, Y+9	; 0x09
    4f9e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4fa0:	20 e0       	ldi	r18, 0x00	; 0
    4fa2:	3f ef       	ldi	r19, 0xFF	; 255
    4fa4:	4f e7       	ldi	r20, 0x7F	; 127
    4fa6:	57 e4       	ldi	r21, 0x47	; 71
    4fa8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4fac:	18 16       	cp	r1, r24
    4fae:	4c f5       	brge	.+82     	; 0x5002 <HAL_LCD_u8GoTo+0x476>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4fb0:	6b 85       	ldd	r22, Y+11	; 0x0b
    4fb2:	7c 85       	ldd	r23, Y+12	; 0x0c
    4fb4:	8d 85       	ldd	r24, Y+13	; 0x0d
    4fb6:	9e 85       	ldd	r25, Y+14	; 0x0e
    4fb8:	20 e0       	ldi	r18, 0x00	; 0
    4fba:	30 e0       	ldi	r19, 0x00	; 0
    4fbc:	40 e2       	ldi	r20, 0x20	; 32
    4fbe:	51 e4       	ldi	r21, 0x41	; 65
    4fc0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4fc4:	dc 01       	movw	r26, r24
    4fc6:	cb 01       	movw	r24, r22
    4fc8:	bc 01       	movw	r22, r24
    4fca:	cd 01       	movw	r24, r26
    4fcc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4fd0:	dc 01       	movw	r26, r24
    4fd2:	cb 01       	movw	r24, r22
    4fd4:	9e 83       	std	Y+6, r25	; 0x06
    4fd6:	8d 83       	std	Y+5, r24	; 0x05
    4fd8:	0f c0       	rjmp	.+30     	; 0x4ff8 <HAL_LCD_u8GoTo+0x46c>
    4fda:	80 e9       	ldi	r24, 0x90	; 144
    4fdc:	91 e0       	ldi	r25, 0x01	; 1
    4fde:	9c 83       	std	Y+4, r25	; 0x04
    4fe0:	8b 83       	std	Y+3, r24	; 0x03
    4fe2:	8b 81       	ldd	r24, Y+3	; 0x03
    4fe4:	9c 81       	ldd	r25, Y+4	; 0x04
    4fe6:	01 97       	sbiw	r24, 0x01	; 1
    4fe8:	f1 f7       	brne	.-4      	; 0x4fe6 <HAL_LCD_u8GoTo+0x45a>
    4fea:	9c 83       	std	Y+4, r25	; 0x04
    4fec:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4fee:	8d 81       	ldd	r24, Y+5	; 0x05
    4ff0:	9e 81       	ldd	r25, Y+6	; 0x06
    4ff2:	01 97       	sbiw	r24, 0x01	; 1
    4ff4:	9e 83       	std	Y+6, r25	; 0x06
    4ff6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4ff8:	8d 81       	ldd	r24, Y+5	; 0x05
    4ffa:	9e 81       	ldd	r25, Y+6	; 0x06
    4ffc:	00 97       	sbiw	r24, 0x00	; 0
    4ffe:	69 f7       	brne	.-38     	; 0x4fda <HAL_LCD_u8GoTo+0x44e>
    5000:	14 c0       	rjmp	.+40     	; 0x502a <HAL_LCD_u8GoTo+0x49e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5002:	6f 81       	ldd	r22, Y+7	; 0x07
    5004:	78 85       	ldd	r23, Y+8	; 0x08
    5006:	89 85       	ldd	r24, Y+9	; 0x09
    5008:	9a 85       	ldd	r25, Y+10	; 0x0a
    500a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    500e:	dc 01       	movw	r26, r24
    5010:	cb 01       	movw	r24, r22
    5012:	9e 83       	std	Y+6, r25	; 0x06
    5014:	8d 83       	std	Y+5, r24	; 0x05
    5016:	8d 81       	ldd	r24, Y+5	; 0x05
    5018:	9e 81       	ldd	r25, Y+6	; 0x06
    501a:	9a 83       	std	Y+2, r25	; 0x02
    501c:	89 83       	std	Y+1, r24	; 0x01
    501e:	89 81       	ldd	r24, Y+1	; 0x01
    5020:	9a 81       	ldd	r25, Y+2	; 0x02
    5022:	01 97       	sbiw	r24, 0x01	; 1
    5024:	f1 f7       	brne	.-4      	; 0x5022 <HAL_LCD_u8GoTo+0x496>
    5026:	9a 83       	std	Y+2, r25	; 0x02
    5028:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2);
		HAL_LCD_u8SendCommands(beginning_2stLine);
    502a:	80 ec       	ldi	r24, 0xC0	; 192
    502c:	0e 94 29 23 	call	0x4652	; 0x4652 <HAL_LCD_u8SendCommands>
	}
}
    5030:	ce 5b       	subi	r28, 0xBE	; 190
    5032:	df 4f       	sbci	r29, 0xFF	; 255
    5034:	0f b6       	in	r0, 0x3f	; 63
    5036:	f8 94       	cli
    5038:	de bf       	out	0x3e, r29	; 62
    503a:	0f be       	out	0x3f, r0	; 63
    503c:	cd bf       	out	0x3d, r28	; 61
    503e:	cf 91       	pop	r28
    5040:	df 91       	pop	r29
    5042:	08 95       	ret

00005044 <HAL_LCD_u8Clear>:

void HAL_LCD_u8Clear() {
    5044:	df 93       	push	r29
    5046:	cf 93       	push	r28
    5048:	cd b7       	in	r28, 0x3d	; 61
    504a:	de b7       	in	r29, 0x3e	; 62
    504c:	2e 97       	sbiw	r28, 0x0e	; 14
    504e:	0f b6       	in	r0, 0x3f	; 63
    5050:	f8 94       	cli
    5052:	de bf       	out	0x3e, r29	; 62
    5054:	0f be       	out	0x3f, r0	; 63
    5056:	cd bf       	out	0x3d, r28	; 61
    5058:	80 e0       	ldi	r24, 0x00	; 0
    505a:	90 e0       	ldi	r25, 0x00	; 0
    505c:	a0 e0       	ldi	r26, 0x00	; 0
    505e:	b0 e4       	ldi	r27, 0x40	; 64
    5060:	8b 87       	std	Y+11, r24	; 0x0b
    5062:	9c 87       	std	Y+12, r25	; 0x0c
    5064:	ad 87       	std	Y+13, r26	; 0x0d
    5066:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5068:	6b 85       	ldd	r22, Y+11	; 0x0b
    506a:	7c 85       	ldd	r23, Y+12	; 0x0c
    506c:	8d 85       	ldd	r24, Y+13	; 0x0d
    506e:	9e 85       	ldd	r25, Y+14	; 0x0e
    5070:	20 e0       	ldi	r18, 0x00	; 0
    5072:	30 e0       	ldi	r19, 0x00	; 0
    5074:	4a e7       	ldi	r20, 0x7A	; 122
    5076:	55 e4       	ldi	r21, 0x45	; 69
    5078:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    507c:	dc 01       	movw	r26, r24
    507e:	cb 01       	movw	r24, r22
    5080:	8f 83       	std	Y+7, r24	; 0x07
    5082:	98 87       	std	Y+8, r25	; 0x08
    5084:	a9 87       	std	Y+9, r26	; 0x09
    5086:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5088:	6f 81       	ldd	r22, Y+7	; 0x07
    508a:	78 85       	ldd	r23, Y+8	; 0x08
    508c:	89 85       	ldd	r24, Y+9	; 0x09
    508e:	9a 85       	ldd	r25, Y+10	; 0x0a
    5090:	20 e0       	ldi	r18, 0x00	; 0
    5092:	30 e0       	ldi	r19, 0x00	; 0
    5094:	40 e8       	ldi	r20, 0x80	; 128
    5096:	5f e3       	ldi	r21, 0x3F	; 63
    5098:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    509c:	88 23       	and	r24, r24
    509e:	2c f4       	brge	.+10     	; 0x50aa <HAL_LCD_u8Clear+0x66>
		__ticks = 1;
    50a0:	81 e0       	ldi	r24, 0x01	; 1
    50a2:	90 e0       	ldi	r25, 0x00	; 0
    50a4:	9e 83       	std	Y+6, r25	; 0x06
    50a6:	8d 83       	std	Y+5, r24	; 0x05
    50a8:	3f c0       	rjmp	.+126    	; 0x5128 <HAL_LCD_u8Clear+0xe4>
	else if (__tmp > 65535)
    50aa:	6f 81       	ldd	r22, Y+7	; 0x07
    50ac:	78 85       	ldd	r23, Y+8	; 0x08
    50ae:	89 85       	ldd	r24, Y+9	; 0x09
    50b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    50b2:	20 e0       	ldi	r18, 0x00	; 0
    50b4:	3f ef       	ldi	r19, 0xFF	; 255
    50b6:	4f e7       	ldi	r20, 0x7F	; 127
    50b8:	57 e4       	ldi	r21, 0x47	; 71
    50ba:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    50be:	18 16       	cp	r1, r24
    50c0:	4c f5       	brge	.+82     	; 0x5114 <HAL_LCD_u8Clear+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    50c2:	6b 85       	ldd	r22, Y+11	; 0x0b
    50c4:	7c 85       	ldd	r23, Y+12	; 0x0c
    50c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    50c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    50ca:	20 e0       	ldi	r18, 0x00	; 0
    50cc:	30 e0       	ldi	r19, 0x00	; 0
    50ce:	40 e2       	ldi	r20, 0x20	; 32
    50d0:	51 e4       	ldi	r21, 0x41	; 65
    50d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    50d6:	dc 01       	movw	r26, r24
    50d8:	cb 01       	movw	r24, r22
    50da:	bc 01       	movw	r22, r24
    50dc:	cd 01       	movw	r24, r26
    50de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    50e2:	dc 01       	movw	r26, r24
    50e4:	cb 01       	movw	r24, r22
    50e6:	9e 83       	std	Y+6, r25	; 0x06
    50e8:	8d 83       	std	Y+5, r24	; 0x05
    50ea:	0f c0       	rjmp	.+30     	; 0x510a <HAL_LCD_u8Clear+0xc6>
    50ec:	80 e9       	ldi	r24, 0x90	; 144
    50ee:	91 e0       	ldi	r25, 0x01	; 1
    50f0:	9c 83       	std	Y+4, r25	; 0x04
    50f2:	8b 83       	std	Y+3, r24	; 0x03
    50f4:	8b 81       	ldd	r24, Y+3	; 0x03
    50f6:	9c 81       	ldd	r25, Y+4	; 0x04
    50f8:	01 97       	sbiw	r24, 0x01	; 1
    50fa:	f1 f7       	brne	.-4      	; 0x50f8 <HAL_LCD_u8Clear+0xb4>
    50fc:	9c 83       	std	Y+4, r25	; 0x04
    50fe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5100:	8d 81       	ldd	r24, Y+5	; 0x05
    5102:	9e 81       	ldd	r25, Y+6	; 0x06
    5104:	01 97       	sbiw	r24, 0x01	; 1
    5106:	9e 83       	std	Y+6, r25	; 0x06
    5108:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    510a:	8d 81       	ldd	r24, Y+5	; 0x05
    510c:	9e 81       	ldd	r25, Y+6	; 0x06
    510e:	00 97       	sbiw	r24, 0x00	; 0
    5110:	69 f7       	brne	.-38     	; 0x50ec <HAL_LCD_u8Clear+0xa8>
    5112:	14 c0       	rjmp	.+40     	; 0x513c <HAL_LCD_u8Clear+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5114:	6f 81       	ldd	r22, Y+7	; 0x07
    5116:	78 85       	ldd	r23, Y+8	; 0x08
    5118:	89 85       	ldd	r24, Y+9	; 0x09
    511a:	9a 85       	ldd	r25, Y+10	; 0x0a
    511c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5120:	dc 01       	movw	r26, r24
    5122:	cb 01       	movw	r24, r22
    5124:	9e 83       	std	Y+6, r25	; 0x06
    5126:	8d 83       	std	Y+5, r24	; 0x05
    5128:	8d 81       	ldd	r24, Y+5	; 0x05
    512a:	9e 81       	ldd	r25, Y+6	; 0x06
    512c:	9a 83       	std	Y+2, r25	; 0x02
    512e:	89 83       	std	Y+1, r24	; 0x01
    5130:	89 81       	ldd	r24, Y+1	; 0x01
    5132:	9a 81       	ldd	r25, Y+2	; 0x02
    5134:	01 97       	sbiw	r24, 0x01	; 1
    5136:	f1 f7       	brne	.-4      	; 0x5134 <HAL_LCD_u8Clear+0xf0>
    5138:	9a 83       	std	Y+2, r25	; 0x02
    513a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	HAL_LCD_u8SendCommands(Display_Clear);
    513c:	81 e0       	ldi	r24, 0x01	; 1
    513e:	0e 94 29 23 	call	0x4652	; 0x4652 <HAL_LCD_u8SendCommands>
}
    5142:	2e 96       	adiw	r28, 0x0e	; 14
    5144:	0f b6       	in	r0, 0x3f	; 63
    5146:	f8 94       	cli
    5148:	de bf       	out	0x3e, r29	; 62
    514a:	0f be       	out	0x3f, r0	; 63
    514c:	cd bf       	out	0x3d, r28	; 61
    514e:	cf 91       	pop	r28
    5150:	df 91       	pop	r29
    5152:	08 95       	ret

00005154 <HAL_LCD_u8CustomChar>:

void HAL_LCD_u8CustomChar(u8 Loc_u8Location, u8* Loc_u8msg) {
    5154:	df 93       	push	r29
    5156:	cf 93       	push	r28
    5158:	00 d0       	rcall	.+0      	; 0x515a <HAL_LCD_u8CustomChar+0x6>
    515a:	00 d0       	rcall	.+0      	; 0x515c <HAL_LCD_u8CustomChar+0x8>
    515c:	cd b7       	in	r28, 0x3d	; 61
    515e:	de b7       	in	r29, 0x3e	; 62
    5160:	8a 83       	std	Y+2, r24	; 0x02
    5162:	7c 83       	std	Y+4, r23	; 0x04
    5164:	6b 83       	std	Y+3, r22	; 0x03
	if (Loc_u8Location < 8) {
    5166:	8a 81       	ldd	r24, Y+2	; 0x02
    5168:	88 30       	cpi	r24, 0x08	; 8
    516a:	f8 f4       	brcc	.+62     	; 0x51aa <HAL_LCD_u8CustomChar+0x56>
		HAL_LCD_u8SendCommands(0x40 + (Loc_u8Location*8));
    516c:	8a 81       	ldd	r24, Y+2	; 0x02
    516e:	88 2f       	mov	r24, r24
    5170:	90 e0       	ldi	r25, 0x00	; 0
    5172:	08 96       	adiw	r24, 0x08	; 8
    5174:	88 0f       	add	r24, r24
    5176:	99 1f       	adc	r25, r25
    5178:	88 0f       	add	r24, r24
    517a:	99 1f       	adc	r25, r25
    517c:	88 0f       	add	r24, r24
    517e:	99 1f       	adc	r25, r25
    5180:	0e 94 29 23 	call	0x4652	; 0x4652 <HAL_LCD_u8SendCommands>
		for( u8 count = 0; count < 8; count++)
    5184:	19 82       	std	Y+1, r1	; 0x01
    5186:	0e c0       	rjmp	.+28     	; 0x51a4 <HAL_LCD_u8CustomChar+0x50>
			HAL_LCD_u8SendChar(Loc_u8msg[count]);
    5188:	89 81       	ldd	r24, Y+1	; 0x01
    518a:	28 2f       	mov	r18, r24
    518c:	30 e0       	ldi	r19, 0x00	; 0
    518e:	8b 81       	ldd	r24, Y+3	; 0x03
    5190:	9c 81       	ldd	r25, Y+4	; 0x04
    5192:	fc 01       	movw	r30, r24
    5194:	e2 0f       	add	r30, r18
    5196:	f3 1f       	adc	r31, r19
    5198:	80 81       	ld	r24, Z
    519a:	0e 94 4b 24 	call	0x4896	; 0x4896 <HAL_LCD_u8SendChar>
}

void HAL_LCD_u8CustomChar(u8 Loc_u8Location, u8* Loc_u8msg) {
	if (Loc_u8Location < 8) {
		HAL_LCD_u8SendCommands(0x40 + (Loc_u8Location*8));
		for( u8 count = 0; count < 8; count++)
    519e:	89 81       	ldd	r24, Y+1	; 0x01
    51a0:	8f 5f       	subi	r24, 0xFF	; 255
    51a2:	89 83       	std	Y+1, r24	; 0x01
    51a4:	89 81       	ldd	r24, Y+1	; 0x01
    51a6:	88 30       	cpi	r24, 0x08	; 8
    51a8:	78 f3       	brcs	.-34     	; 0x5188 <HAL_LCD_u8CustomChar+0x34>
			HAL_LCD_u8SendChar(Loc_u8msg[count]);
	}
	HAL_LCD_u8SendCommands(0x02);
    51aa:	82 e0       	ldi	r24, 0x02	; 2
    51ac:	0e 94 29 23 	call	0x4652	; 0x4652 <HAL_LCD_u8SendCommands>
}
    51b0:	0f 90       	pop	r0
    51b2:	0f 90       	pop	r0
    51b4:	0f 90       	pop	r0
    51b6:	0f 90       	pop	r0
    51b8:	cf 91       	pop	r28
    51ba:	df 91       	pop	r29
    51bc:	08 95       	ret

000051be <HAL_KeyPad_u8KeyPadInit>:

u8 array[4][4] = { { '1', '2', '3', 'A' }, { '4', '5', '6', 'B' }, { '7', '8',
		'9', 'C' }, { '*', '0', '#', 'D' } };
u8 KetPadValue = 0;

void HAL_KeyPad_u8KeyPadInit() {
    51be:	df 93       	push	r29
    51c0:	cf 93       	push	r28
    51c2:	cd b7       	in	r28, 0x3d	; 61
    51c4:	de b7       	in	r29, 0x3e	; 62
	MCAL_DIO_u8SetPortDirection(2, 0x0F);
    51c6:	82 e0       	ldi	r24, 0x02	; 2
    51c8:	6f e0       	ldi	r22, 0x0F	; 15
    51ca:	0e 94 f7 18 	call	0x31ee	; 0x31ee <MCAL_DIO_u8SetPortDirection>
	MCAL_DIO_u8SetPortValue(2, PORT_OUTPUT);
    51ce:	82 e0       	ldi	r24, 0x02	; 2
    51d0:	6f ef       	ldi	r22, 0xFF	; 255
    51d2:	0e 94 65 1a 	call	0x34ca	; 0x34ca <MCAL_DIO_u8SetPortValue>
}
    51d6:	cf 91       	pop	r28
    51d8:	df 91       	pop	r29
    51da:	08 95       	ret

000051dc <HAL_KeyPad_u8GetKeyPressed>:
//		c--;
//		MCAL_DIO_u8SetPinValue(2, col, 1);
//	}
//}

void HAL_KeyPad_u8GetKeyPressed(u8 *Button) {
    51dc:	df 93       	push	r29
    51de:	cf 93       	push	r28
    51e0:	cd b7       	in	r28, 0x3d	; 61
    51e2:	de b7       	in	r29, 0x3e	; 62
    51e4:	a2 97       	sbiw	r28, 0x22	; 34
    51e6:	0f b6       	in	r0, 0x3f	; 63
    51e8:	f8 94       	cli
    51ea:	de bf       	out	0x3e, r29	; 62
    51ec:	0f be       	out	0x3f, r0	; 63
    51ee:	cd bf       	out	0x3d, r28	; 61
    51f0:	9a a3       	std	Y+34, r25	; 0x22
    51f2:	89 a3       	std	Y+33, r24	; 0x21

	u8 LOC_u8Col, LOC_u8Row, LOC_u8Status = 7, LOC_u8PinValue;
    51f4:	87 e0       	ldi	r24, 0x07	; 7
    51f6:	8d 8f       	std	Y+29, r24	; 0x1d
	*Button = 0;
    51f8:	e9 a1       	ldd	r30, Y+33	; 0x21
    51fa:	fa a1       	ldd	r31, Y+34	; 0x22
    51fc:	10 82       	st	Z, r1
	for (LOC_u8Row = 0; LOC_u8Row < 4; LOC_u8Row++) {
    51fe:	1e 8e       	std	Y+30, r1	; 0x1e
    5200:	2f c1       	rjmp	.+606    	; 0x5460 <HAL_KeyPad_u8GetKeyPressed+0x284>
		//  LOC_u8Return_Value = MCAL_DIO_u8SetPinValue(KeyPad_Port,R0,Pin_HIGH);
		//  LOC_u8Return_Value = MCAL_DIO_u8SetPinValue(KeyPad_Port,R1,Pin_HIGH);
		//  LOC_u8Return_Value = MCAL_DIO_u8SetPinValue(KeyPad_Port,R2,Pin_HIGH);
		//  LOC_u8Return_Value = MCAL_DIO_u8SetPinValue(KeyPad_Port,R3,Pin_HIGH);
		MCAL_DIO_u8SetPinValue(2, LOC_u8Row, 0);
    5202:	82 e0       	ldi	r24, 0x02	; 2
    5204:	6e 8d       	ldd	r22, Y+30	; 0x1e
    5206:	40 e0       	ldi	r20, 0x00	; 0
    5208:	0e 94 e8 1a 	call	0x35d0	; 0x35d0 <MCAL_DIO_u8SetPinValue>
		for (LOC_u8Col = 0; LOC_u8Col < 4; LOC_u8Col++) {
    520c:	1f 8e       	std	Y+31, r1	; 0x1f
    520e:	1c c1       	rjmp	.+568    	; 0x5448 <HAL_KeyPad_u8GetKeyPressed+0x26c>
			MCAL_DIO_u8GetPinValue(2, (LOC_u8Col + 4), &LOC_u8PinValue);
    5210:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5212:	98 2f       	mov	r25, r24
    5214:	9c 5f       	subi	r25, 0xFC	; 252
    5216:	9e 01       	movw	r18, r28
    5218:	20 5e       	subi	r18, 0xE0	; 224
    521a:	3f 4f       	sbci	r19, 0xFF	; 255
    521c:	82 e0       	ldi	r24, 0x02	; 2
    521e:	69 2f       	mov	r22, r25
    5220:	a9 01       	movw	r20, r18
    5222:	0e 94 14 1c 	call	0x3828	; 0x3828 <MCAL_DIO_u8GetPinValue>
			LOC_u8Status = LOC_u8PinValue; //new
    5226:	88 a1       	ldd	r24, Y+32	; 0x20
    5228:	8d 8f       	std	Y+29, r24	; 0x1d
			if (LOC_u8PinValue == 0) {
    522a:	88 a1       	ldd	r24, Y+32	; 0x20
    522c:	88 23       	and	r24, r24
    522e:	09 f0       	breq	.+2      	; 0x5232 <HAL_KeyPad_u8GetKeyPressed+0x56>
    5230:	08 c1       	rjmp	.+528    	; 0x5442 <HAL_KeyPad_u8GetKeyPressed+0x266>
    5232:	80 e0       	ldi	r24, 0x00	; 0
    5234:	90 e0       	ldi	r25, 0x00	; 0
    5236:	a0 ea       	ldi	r26, 0xA0	; 160
    5238:	b0 e4       	ldi	r27, 0x40	; 64
    523a:	89 8f       	std	Y+25, r24	; 0x19
    523c:	9a 8f       	std	Y+26, r25	; 0x1a
    523e:	ab 8f       	std	Y+27, r26	; 0x1b
    5240:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5242:	69 8d       	ldd	r22, Y+25	; 0x19
    5244:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5246:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5248:	9c 8d       	ldd	r25, Y+28	; 0x1c
    524a:	20 e0       	ldi	r18, 0x00	; 0
    524c:	30 e0       	ldi	r19, 0x00	; 0
    524e:	4a e7       	ldi	r20, 0x7A	; 122
    5250:	55 e4       	ldi	r21, 0x45	; 69
    5252:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5256:	dc 01       	movw	r26, r24
    5258:	cb 01       	movw	r24, r22
    525a:	8d 8b       	std	Y+21, r24	; 0x15
    525c:	9e 8b       	std	Y+22, r25	; 0x16
    525e:	af 8b       	std	Y+23, r26	; 0x17
    5260:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    5262:	6d 89       	ldd	r22, Y+21	; 0x15
    5264:	7e 89       	ldd	r23, Y+22	; 0x16
    5266:	8f 89       	ldd	r24, Y+23	; 0x17
    5268:	98 8d       	ldd	r25, Y+24	; 0x18
    526a:	20 e0       	ldi	r18, 0x00	; 0
    526c:	30 e0       	ldi	r19, 0x00	; 0
    526e:	40 e8       	ldi	r20, 0x80	; 128
    5270:	5f e3       	ldi	r21, 0x3F	; 63
    5272:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5276:	88 23       	and	r24, r24
    5278:	2c f4       	brge	.+10     	; 0x5284 <HAL_KeyPad_u8GetKeyPressed+0xa8>
		__ticks = 1;
    527a:	81 e0       	ldi	r24, 0x01	; 1
    527c:	90 e0       	ldi	r25, 0x00	; 0
    527e:	9c 8b       	std	Y+20, r25	; 0x14
    5280:	8b 8b       	std	Y+19, r24	; 0x13
    5282:	3f c0       	rjmp	.+126    	; 0x5302 <HAL_KeyPad_u8GetKeyPressed+0x126>
	else if (__tmp > 65535)
    5284:	6d 89       	ldd	r22, Y+21	; 0x15
    5286:	7e 89       	ldd	r23, Y+22	; 0x16
    5288:	8f 89       	ldd	r24, Y+23	; 0x17
    528a:	98 8d       	ldd	r25, Y+24	; 0x18
    528c:	20 e0       	ldi	r18, 0x00	; 0
    528e:	3f ef       	ldi	r19, 0xFF	; 255
    5290:	4f e7       	ldi	r20, 0x7F	; 127
    5292:	57 e4       	ldi	r21, 0x47	; 71
    5294:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5298:	18 16       	cp	r1, r24
    529a:	4c f5       	brge	.+82     	; 0x52ee <HAL_KeyPad_u8GetKeyPressed+0x112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    529c:	69 8d       	ldd	r22, Y+25	; 0x19
    529e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    52a0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    52a2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    52a4:	20 e0       	ldi	r18, 0x00	; 0
    52a6:	30 e0       	ldi	r19, 0x00	; 0
    52a8:	40 e2       	ldi	r20, 0x20	; 32
    52aa:	51 e4       	ldi	r21, 0x41	; 65
    52ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    52b0:	dc 01       	movw	r26, r24
    52b2:	cb 01       	movw	r24, r22
    52b4:	bc 01       	movw	r22, r24
    52b6:	cd 01       	movw	r24, r26
    52b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    52bc:	dc 01       	movw	r26, r24
    52be:	cb 01       	movw	r24, r22
    52c0:	9c 8b       	std	Y+20, r25	; 0x14
    52c2:	8b 8b       	std	Y+19, r24	; 0x13
    52c4:	0f c0       	rjmp	.+30     	; 0x52e4 <HAL_KeyPad_u8GetKeyPressed+0x108>
    52c6:	80 e9       	ldi	r24, 0x90	; 144
    52c8:	91 e0       	ldi	r25, 0x01	; 1
    52ca:	9a 8b       	std	Y+18, r25	; 0x12
    52cc:	89 8b       	std	Y+17, r24	; 0x11
    52ce:	89 89       	ldd	r24, Y+17	; 0x11
    52d0:	9a 89       	ldd	r25, Y+18	; 0x12
    52d2:	01 97       	sbiw	r24, 0x01	; 1
    52d4:	f1 f7       	brne	.-4      	; 0x52d2 <HAL_KeyPad_u8GetKeyPressed+0xf6>
    52d6:	9a 8b       	std	Y+18, r25	; 0x12
    52d8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    52da:	8b 89       	ldd	r24, Y+19	; 0x13
    52dc:	9c 89       	ldd	r25, Y+20	; 0x14
    52de:	01 97       	sbiw	r24, 0x01	; 1
    52e0:	9c 8b       	std	Y+20, r25	; 0x14
    52e2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    52e4:	8b 89       	ldd	r24, Y+19	; 0x13
    52e6:	9c 89       	ldd	r25, Y+20	; 0x14
    52e8:	00 97       	sbiw	r24, 0x00	; 0
    52ea:	69 f7       	brne	.-38     	; 0x52c6 <HAL_KeyPad_u8GetKeyPressed+0xea>
    52ec:	14 c0       	rjmp	.+40     	; 0x5316 <HAL_KeyPad_u8GetKeyPressed+0x13a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    52ee:	6d 89       	ldd	r22, Y+21	; 0x15
    52f0:	7e 89       	ldd	r23, Y+22	; 0x16
    52f2:	8f 89       	ldd	r24, Y+23	; 0x17
    52f4:	98 8d       	ldd	r25, Y+24	; 0x18
    52f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    52fa:	dc 01       	movw	r26, r24
    52fc:	cb 01       	movw	r24, r22
    52fe:	9c 8b       	std	Y+20, r25	; 0x14
    5300:	8b 8b       	std	Y+19, r24	; 0x13
    5302:	8b 89       	ldd	r24, Y+19	; 0x13
    5304:	9c 89       	ldd	r25, Y+20	; 0x14
    5306:	98 8b       	std	Y+16, r25	; 0x10
    5308:	8f 87       	std	Y+15, r24	; 0x0f
    530a:	8f 85       	ldd	r24, Y+15	; 0x0f
    530c:	98 89       	ldd	r25, Y+16	; 0x10
    530e:	01 97       	sbiw	r24, 0x01	; 1
    5310:	f1 f7       	brne	.-4      	; 0x530e <HAL_KeyPad_u8GetKeyPressed+0x132>
    5312:	98 8b       	std	Y+16, r25	; 0x10
    5314:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(5); //new
				MCAL_DIO_u8GetPinValue(2, (LOC_u8Col + 4), &LOC_u8PinValue); //new
    5316:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5318:	98 2f       	mov	r25, r24
    531a:	9c 5f       	subi	r25, 0xFC	; 252
    531c:	9e 01       	movw	r18, r28
    531e:	20 5e       	subi	r18, 0xE0	; 224
    5320:	3f 4f       	sbci	r19, 0xFF	; 255
    5322:	82 e0       	ldi	r24, 0x02	; 2
    5324:	69 2f       	mov	r22, r25
    5326:	a9 01       	movw	r20, r18
    5328:	0e 94 14 1c 	call	0x3828	; 0x3828 <MCAL_DIO_u8GetPinValue>
				if (LOC_u8PinValue == 1) //new
    532c:	88 a1       	ldd	r24, Y+32	; 0x20
    532e:	81 30       	cpi	r24, 0x01	; 1
    5330:	09 f0       	breq	.+2      	; 0x5334 <HAL_KeyPad_u8GetKeyPressed+0x158>
    5332:	8e c0       	rjmp	.+284    	; 0x5450 <HAL_KeyPad_u8GetKeyPressed+0x274>
    5334:	80 e0       	ldi	r24, 0x00	; 0
    5336:	90 e0       	ldi	r25, 0x00	; 0
    5338:	a0 ea       	ldi	r26, 0xA0	; 160
    533a:	b0 e4       	ldi	r27, 0x40	; 64
    533c:	8b 87       	std	Y+11, r24	; 0x0b
    533e:	9c 87       	std	Y+12, r25	; 0x0c
    5340:	ad 87       	std	Y+13, r26	; 0x0d
    5342:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5344:	6b 85       	ldd	r22, Y+11	; 0x0b
    5346:	7c 85       	ldd	r23, Y+12	; 0x0c
    5348:	8d 85       	ldd	r24, Y+13	; 0x0d
    534a:	9e 85       	ldd	r25, Y+14	; 0x0e
    534c:	20 e0       	ldi	r18, 0x00	; 0
    534e:	30 e0       	ldi	r19, 0x00	; 0
    5350:	4a e7       	ldi	r20, 0x7A	; 122
    5352:	55 e4       	ldi	r21, 0x45	; 69
    5354:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5358:	dc 01       	movw	r26, r24
    535a:	cb 01       	movw	r24, r22
    535c:	8f 83       	std	Y+7, r24	; 0x07
    535e:	98 87       	std	Y+8, r25	; 0x08
    5360:	a9 87       	std	Y+9, r26	; 0x09
    5362:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5364:	6f 81       	ldd	r22, Y+7	; 0x07
    5366:	78 85       	ldd	r23, Y+8	; 0x08
    5368:	89 85       	ldd	r24, Y+9	; 0x09
    536a:	9a 85       	ldd	r25, Y+10	; 0x0a
    536c:	20 e0       	ldi	r18, 0x00	; 0
    536e:	30 e0       	ldi	r19, 0x00	; 0
    5370:	40 e8       	ldi	r20, 0x80	; 128
    5372:	5f e3       	ldi	r21, 0x3F	; 63
    5374:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5378:	88 23       	and	r24, r24
    537a:	2c f4       	brge	.+10     	; 0x5386 <HAL_KeyPad_u8GetKeyPressed+0x1aa>
		__ticks = 1;
    537c:	81 e0       	ldi	r24, 0x01	; 1
    537e:	90 e0       	ldi	r25, 0x00	; 0
    5380:	9e 83       	std	Y+6, r25	; 0x06
    5382:	8d 83       	std	Y+5, r24	; 0x05
    5384:	3f c0       	rjmp	.+126    	; 0x5404 <HAL_KeyPad_u8GetKeyPressed+0x228>
	else if (__tmp > 65535)
    5386:	6f 81       	ldd	r22, Y+7	; 0x07
    5388:	78 85       	ldd	r23, Y+8	; 0x08
    538a:	89 85       	ldd	r24, Y+9	; 0x09
    538c:	9a 85       	ldd	r25, Y+10	; 0x0a
    538e:	20 e0       	ldi	r18, 0x00	; 0
    5390:	3f ef       	ldi	r19, 0xFF	; 255
    5392:	4f e7       	ldi	r20, 0x7F	; 127
    5394:	57 e4       	ldi	r21, 0x47	; 71
    5396:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    539a:	18 16       	cp	r1, r24
    539c:	4c f5       	brge	.+82     	; 0x53f0 <HAL_KeyPad_u8GetKeyPressed+0x214>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    539e:	6b 85       	ldd	r22, Y+11	; 0x0b
    53a0:	7c 85       	ldd	r23, Y+12	; 0x0c
    53a2:	8d 85       	ldd	r24, Y+13	; 0x0d
    53a4:	9e 85       	ldd	r25, Y+14	; 0x0e
    53a6:	20 e0       	ldi	r18, 0x00	; 0
    53a8:	30 e0       	ldi	r19, 0x00	; 0
    53aa:	40 e2       	ldi	r20, 0x20	; 32
    53ac:	51 e4       	ldi	r21, 0x41	; 65
    53ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    53b2:	dc 01       	movw	r26, r24
    53b4:	cb 01       	movw	r24, r22
    53b6:	bc 01       	movw	r22, r24
    53b8:	cd 01       	movw	r24, r26
    53ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    53be:	dc 01       	movw	r26, r24
    53c0:	cb 01       	movw	r24, r22
    53c2:	9e 83       	std	Y+6, r25	; 0x06
    53c4:	8d 83       	std	Y+5, r24	; 0x05
    53c6:	0f c0       	rjmp	.+30     	; 0x53e6 <HAL_KeyPad_u8GetKeyPressed+0x20a>
    53c8:	80 e9       	ldi	r24, 0x90	; 144
    53ca:	91 e0       	ldi	r25, 0x01	; 1
    53cc:	9c 83       	std	Y+4, r25	; 0x04
    53ce:	8b 83       	std	Y+3, r24	; 0x03
    53d0:	8b 81       	ldd	r24, Y+3	; 0x03
    53d2:	9c 81       	ldd	r25, Y+4	; 0x04
    53d4:	01 97       	sbiw	r24, 0x01	; 1
    53d6:	f1 f7       	brne	.-4      	; 0x53d4 <HAL_KeyPad_u8GetKeyPressed+0x1f8>
    53d8:	9c 83       	std	Y+4, r25	; 0x04
    53da:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    53dc:	8d 81       	ldd	r24, Y+5	; 0x05
    53de:	9e 81       	ldd	r25, Y+6	; 0x06
    53e0:	01 97       	sbiw	r24, 0x01	; 1
    53e2:	9e 83       	std	Y+6, r25	; 0x06
    53e4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    53e6:	8d 81       	ldd	r24, Y+5	; 0x05
    53e8:	9e 81       	ldd	r25, Y+6	; 0x06
    53ea:	00 97       	sbiw	r24, 0x00	; 0
    53ec:	69 f7       	brne	.-38     	; 0x53c8 <HAL_KeyPad_u8GetKeyPressed+0x1ec>
    53ee:	14 c0       	rjmp	.+40     	; 0x5418 <HAL_KeyPad_u8GetKeyPressed+0x23c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    53f0:	6f 81       	ldd	r22, Y+7	; 0x07
    53f2:	78 85       	ldd	r23, Y+8	; 0x08
    53f4:	89 85       	ldd	r24, Y+9	; 0x09
    53f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    53f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    53fc:	dc 01       	movw	r26, r24
    53fe:	cb 01       	movw	r24, r22
    5400:	9e 83       	std	Y+6, r25	; 0x06
    5402:	8d 83       	std	Y+5, r24	; 0x05
    5404:	8d 81       	ldd	r24, Y+5	; 0x05
    5406:	9e 81       	ldd	r25, Y+6	; 0x06
    5408:	9a 83       	std	Y+2, r25	; 0x02
    540a:	89 83       	std	Y+1, r24	; 0x01
    540c:	89 81       	ldd	r24, Y+1	; 0x01
    540e:	9a 81       	ldd	r25, Y+2	; 0x02
    5410:	01 97       	sbiw	r24, 0x01	; 1
    5412:	f1 f7       	brne	.-4      	; 0x5410 <HAL_KeyPad_u8GetKeyPressed+0x234>
    5414:	9a 83       	std	Y+2, r25	; 0x02
    5416:	89 83       	std	Y+1, r24	; 0x01
						{
					_delay_ms(5);
					*Button = array[LOC_u8Row][LOC_u8Col];
    5418:	8e 8d       	ldd	r24, Y+30	; 0x1e
    541a:	48 2f       	mov	r20, r24
    541c:	50 e0       	ldi	r21, 0x00	; 0
    541e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5420:	28 2f       	mov	r18, r24
    5422:	30 e0       	ldi	r19, 0x00	; 0
    5424:	ca 01       	movw	r24, r20
    5426:	88 0f       	add	r24, r24
    5428:	99 1f       	adc	r25, r25
    542a:	88 0f       	add	r24, r24
    542c:	99 1f       	adc	r25, r25
    542e:	82 0f       	add	r24, r18
    5430:	93 1f       	adc	r25, r19
    5432:	fc 01       	movw	r30, r24
    5434:	e8 59       	subi	r30, 0x98	; 152
    5436:	fe 4f       	sbci	r31, 0xFE	; 254
    5438:	80 81       	ld	r24, Z
    543a:	e9 a1       	ldd	r30, Y+33	; 0x21
    543c:	fa a1       	ldd	r31, Y+34	; 0x22
    543e:	80 83       	st	Z, r24
    5440:	07 c0       	rjmp	.+14     	; 0x5450 <HAL_KeyPad_u8GetKeyPressed+0x274>
		//  LOC_u8Return_Value = MCAL_DIO_u8SetPinValue(KeyPad_Port,R0,Pin_HIGH);
		//  LOC_u8Return_Value = MCAL_DIO_u8SetPinValue(KeyPad_Port,R1,Pin_HIGH);
		//  LOC_u8Return_Value = MCAL_DIO_u8SetPinValue(KeyPad_Port,R2,Pin_HIGH);
		//  LOC_u8Return_Value = MCAL_DIO_u8SetPinValue(KeyPad_Port,R3,Pin_HIGH);
		MCAL_DIO_u8SetPinValue(2, LOC_u8Row, 0);
		for (LOC_u8Col = 0; LOC_u8Col < 4; LOC_u8Col++) {
    5442:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5444:	8f 5f       	subi	r24, 0xFF	; 255
    5446:	8f 8f       	std	Y+31, r24	; 0x1f
    5448:	8f 8d       	ldd	r24, Y+31	; 0x1f
    544a:	84 30       	cpi	r24, 0x04	; 4
    544c:	08 f4       	brcc	.+2      	; 0x5450 <HAL_KeyPad_u8GetKeyPressed+0x274>
    544e:	e0 ce       	rjmp	.-576    	; 0x5210 <HAL_KeyPad_u8GetKeyPressed+0x34>
					*Button = array[LOC_u8Row][LOC_u8Col];
				}
				break;
			}
		}
		MCAL_DIO_u8SetPinValue(2, LOC_u8Row, 1);
    5450:	82 e0       	ldi	r24, 0x02	; 2
    5452:	6e 8d       	ldd	r22, Y+30	; 0x1e
    5454:	41 e0       	ldi	r20, 0x01	; 1
    5456:	0e 94 e8 1a 	call	0x35d0	; 0x35d0 <MCAL_DIO_u8SetPinValue>

void HAL_KeyPad_u8GetKeyPressed(u8 *Button) {

	u8 LOC_u8Col, LOC_u8Row, LOC_u8Status = 7, LOC_u8PinValue;
	*Button = 0;
	for (LOC_u8Row = 0; LOC_u8Row < 4; LOC_u8Row++) {
    545a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    545c:	8f 5f       	subi	r24, 0xFF	; 255
    545e:	8e 8f       	std	Y+30, r24	; 0x1e
    5460:	8e 8d       	ldd	r24, Y+30	; 0x1e
    5462:	84 30       	cpi	r24, 0x04	; 4
    5464:	08 f4       	brcc	.+2      	; 0x5468 <HAL_KeyPad_u8GetKeyPressed+0x28c>
    5466:	cd ce       	rjmp	.-614    	; 0x5202 <HAL_KeyPad_u8GetKeyPressed+0x26>
		 {
		 break;
		 }
		 */
	}
}
    5468:	a2 96       	adiw	r28, 0x22	; 34
    546a:	0f b6       	in	r0, 0x3f	; 63
    546c:	f8 94       	cli
    546e:	de bf       	out	0x3e, r29	; 62
    5470:	0f be       	out	0x3f, r0	; 63
    5472:	cd bf       	out	0x3d, r28	; 61
    5474:	cf 91       	pop	r28
    5476:	df 91       	pop	r29
    5478:	08 95       	ret

0000547a <HAL_void_H_BridgeInit>:
 *      Author: Mohamed
 */

#include "H_Bridge.h"

void HAL_void_H_BridgeInit() {
    547a:	df 93       	push	r29
    547c:	cf 93       	push	r28
    547e:	cd b7       	in	r28, 0x3d	; 61
    5480:	de b7       	in	r29, 0x3e	; 62
	MCAL_DIO_u8SetPinDirection(PortC, 3, Pin_High);
    5482:	82 e0       	ldi	r24, 0x02	; 2
    5484:	63 e0       	ldi	r22, 0x03	; 3
    5486:	41 e0       	ldi	r20, 0x01	; 1
    5488:	0e 94 7a 19 	call	0x32f4	; 0x32f4 <MCAL_DIO_u8SetPinDirection>
	MCAL_DIO_u8SetPinDirection(PortC, 4, Pin_High);
    548c:	82 e0       	ldi	r24, 0x02	; 2
    548e:	64 e0       	ldi	r22, 0x04	; 4
    5490:	41 e0       	ldi	r20, 0x01	; 1
    5492:	0e 94 7a 19 	call	0x32f4	; 0x32f4 <MCAL_DIO_u8SetPinDirection>
	MCAL_DIO_u8SetPinDirection(PortC, 5, Pin_High);
    5496:	82 e0       	ldi	r24, 0x02	; 2
    5498:	65 e0       	ldi	r22, 0x05	; 5
    549a:	41 e0       	ldi	r20, 0x01	; 1
    549c:	0e 94 7a 19 	call	0x32f4	; 0x32f4 <MCAL_DIO_u8SetPinDirection>
	MCAL_DIO_u8SetPinDirection(PortC, 6, Pin_High);
    54a0:	82 e0       	ldi	r24, 0x02	; 2
    54a2:	66 e0       	ldi	r22, 0x06	; 6
    54a4:	41 e0       	ldi	r20, 0x01	; 1
    54a6:	0e 94 7a 19 	call	0x32f4	; 0x32f4 <MCAL_DIO_u8SetPinDirection>
}
    54aa:	cf 91       	pop	r28
    54ac:	df 91       	pop	r29
    54ae:	08 95       	ret

000054b0 <HAL_void_H_BridgeCW>:

void HAL_void_H_BridgeCW(u8 copy_u8_speed) {
    54b0:	df 93       	push	r29
    54b2:	cf 93       	push	r28
    54b4:	0f 92       	push	r0
    54b6:	cd b7       	in	r28, 0x3d	; 61
    54b8:	de b7       	in	r29, 0x3e	; 62
    54ba:	89 83       	std	Y+1, r24	; 0x01
	MCAL_T1_FPWM_10bitRES(CHENNEL_B, copy_u8_speed);
    54bc:	81 e0       	ldi	r24, 0x01	; 1
    54be:	69 81       	ldd	r22, Y+1	; 0x01
    54c0:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <MCAL_T1_FPWM_10bitRES>
	MCAL_T1_FPWM_10bitRES(CHENNEL_A, copy_u8_speed);
    54c4:	80 e0       	ldi	r24, 0x00	; 0
    54c6:	69 81       	ldd	r22, Y+1	; 0x01
    54c8:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <MCAL_T1_FPWM_10bitRES>
	MCAL_DIO_u8SetPinValue(PortC, Pin3, Pin_Low);
    54cc:	82 e0       	ldi	r24, 0x02	; 2
    54ce:	63 e0       	ldi	r22, 0x03	; 3
    54d0:	40 e0       	ldi	r20, 0x00	; 0
    54d2:	0e 94 e8 1a 	call	0x35d0	; 0x35d0 <MCAL_DIO_u8SetPinValue>
	MCAL_DIO_u8SetPinValue(PortC, Pin4, Pin_Low);
    54d6:	82 e0       	ldi	r24, 0x02	; 2
    54d8:	64 e0       	ldi	r22, 0x04	; 4
    54da:	40 e0       	ldi	r20, 0x00	; 0
    54dc:	0e 94 e8 1a 	call	0x35d0	; 0x35d0 <MCAL_DIO_u8SetPinValue>
	MCAL_DIO_u8SetPinValue(PortC, Pin3, Pin_High);
    54e0:	82 e0       	ldi	r24, 0x02	; 2
    54e2:	63 e0       	ldi	r22, 0x03	; 3
    54e4:	41 e0       	ldi	r20, 0x01	; 1
    54e6:	0e 94 e8 1a 	call	0x35d0	; 0x35d0 <MCAL_DIO_u8SetPinValue>
	MCAL_DIO_u8SetPinValue(PortC, Pin4, Pin_Low);
    54ea:	82 e0       	ldi	r24, 0x02	; 2
    54ec:	64 e0       	ldi	r22, 0x04	; 4
    54ee:	40 e0       	ldi	r20, 0x00	; 0
    54f0:	0e 94 e8 1a 	call	0x35d0	; 0x35d0 <MCAL_DIO_u8SetPinValue>
}
    54f4:	0f 90       	pop	r0
    54f6:	cf 91       	pop	r28
    54f8:	df 91       	pop	r29
    54fa:	08 95       	ret

000054fc <HAL_void_H_BridgeFront>:
void HAL_void_H_BridgeFront(u8 copy_u8_speed) {
    54fc:	df 93       	push	r29
    54fe:	cf 93       	push	r28
    5500:	0f 92       	push	r0
    5502:	cd b7       	in	r28, 0x3d	; 61
    5504:	de b7       	in	r29, 0x3e	; 62
    5506:	89 83       	std	Y+1, r24	; 0x01
	MCAL_T1_FPWM_10bitRES(CHENNEL_B, copy_u8_speed);
    5508:	81 e0       	ldi	r24, 0x01	; 1
    550a:	69 81       	ldd	r22, Y+1	; 0x01
    550c:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <MCAL_T1_FPWM_10bitRES>
	MCAL_T1_FPWM_10bitRES(CHENNEL_A, copy_u8_speed);
    5510:	80 e0       	ldi	r24, 0x00	; 0
    5512:	69 81       	ldd	r22, Y+1	; 0x01
    5514:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <MCAL_T1_FPWM_10bitRES>
	MCAL_DIO_u8SetPinValue(PortC, Pin3, Pin_High);
    5518:	82 e0       	ldi	r24, 0x02	; 2
    551a:	63 e0       	ldi	r22, 0x03	; 3
    551c:	41 e0       	ldi	r20, 0x01	; 1
    551e:	0e 94 e8 1a 	call	0x35d0	; 0x35d0 <MCAL_DIO_u8SetPinValue>
	MCAL_DIO_u8SetPinValue(PortC, Pin4, Pin_Low);
    5522:	82 e0       	ldi	r24, 0x02	; 2
    5524:	64 e0       	ldi	r22, 0x04	; 4
    5526:	40 e0       	ldi	r20, 0x00	; 0
    5528:	0e 94 e8 1a 	call	0x35d0	; 0x35d0 <MCAL_DIO_u8SetPinValue>
	MCAL_DIO_u8SetPinValue(PortC, Pin5, Pin_High);
    552c:	82 e0       	ldi	r24, 0x02	; 2
    552e:	65 e0       	ldi	r22, 0x05	; 5
    5530:	41 e0       	ldi	r20, 0x01	; 1
    5532:	0e 94 e8 1a 	call	0x35d0	; 0x35d0 <MCAL_DIO_u8SetPinValue>
	MCAL_DIO_u8SetPinValue(PortC, Pin6, Pin_Low);
    5536:	82 e0       	ldi	r24, 0x02	; 2
    5538:	66 e0       	ldi	r22, 0x06	; 6
    553a:	40 e0       	ldi	r20, 0x00	; 0
    553c:	0e 94 e8 1a 	call	0x35d0	; 0x35d0 <MCAL_DIO_u8SetPinValue>
}
    5540:	0f 90       	pop	r0
    5542:	cf 91       	pop	r28
    5544:	df 91       	pop	r29
    5546:	08 95       	ret

00005548 <HAL_void_H_BridgeBack>:
void HAL_void_H_BridgeBack(u8 copy_u8_speed) {
    5548:	df 93       	push	r29
    554a:	cf 93       	push	r28
    554c:	0f 92       	push	r0
    554e:	cd b7       	in	r28, 0x3d	; 61
    5550:	de b7       	in	r29, 0x3e	; 62
    5552:	89 83       	std	Y+1, r24	; 0x01
	MCAL_T1_FPWM_10bitRES(CHENNEL_B, copy_u8_speed);
    5554:	81 e0       	ldi	r24, 0x01	; 1
    5556:	69 81       	ldd	r22, Y+1	; 0x01
    5558:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <MCAL_T1_FPWM_10bitRES>
	MCAL_T1_FPWM_10bitRES(CHENNEL_A, copy_u8_speed);
    555c:	80 e0       	ldi	r24, 0x00	; 0
    555e:	69 81       	ldd	r22, Y+1	; 0x01
    5560:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <MCAL_T1_FPWM_10bitRES>
	MCAL_DIO_u8SetPinValue(PortC, Pin3, Pin_Low);
    5564:	82 e0       	ldi	r24, 0x02	; 2
    5566:	63 e0       	ldi	r22, 0x03	; 3
    5568:	40 e0       	ldi	r20, 0x00	; 0
    556a:	0e 94 e8 1a 	call	0x35d0	; 0x35d0 <MCAL_DIO_u8SetPinValue>
	MCAL_DIO_u8SetPinValue(PortC, Pin4, Pin_High);
    556e:	82 e0       	ldi	r24, 0x02	; 2
    5570:	64 e0       	ldi	r22, 0x04	; 4
    5572:	41 e0       	ldi	r20, 0x01	; 1
    5574:	0e 94 e8 1a 	call	0x35d0	; 0x35d0 <MCAL_DIO_u8SetPinValue>
	MCAL_DIO_u8SetPinValue(PortC, Pin5, Pin_Low);
    5578:	82 e0       	ldi	r24, 0x02	; 2
    557a:	65 e0       	ldi	r22, 0x05	; 5
    557c:	40 e0       	ldi	r20, 0x00	; 0
    557e:	0e 94 e8 1a 	call	0x35d0	; 0x35d0 <MCAL_DIO_u8SetPinValue>
	MCAL_DIO_u8SetPinValue(PortC, Pin6, Pin_High);
    5582:	82 e0       	ldi	r24, 0x02	; 2
    5584:	66 e0       	ldi	r22, 0x06	; 6
    5586:	41 e0       	ldi	r20, 0x01	; 1
    5588:	0e 94 e8 1a 	call	0x35d0	; 0x35d0 <MCAL_DIO_u8SetPinValue>
}
    558c:	0f 90       	pop	r0
    558e:	cf 91       	pop	r28
    5590:	df 91       	pop	r29
    5592:	08 95       	ret

00005594 <HAL_void_H_BridgeCCW>:
void HAL_void_H_BridgeCCW(u8 copy_u8_speed) {
    5594:	df 93       	push	r29
    5596:	cf 93       	push	r28
    5598:	0f 92       	push	r0
    559a:	cd b7       	in	r28, 0x3d	; 61
    559c:	de b7       	in	r29, 0x3e	; 62
    559e:	89 83       	std	Y+1, r24	; 0x01
	MCAL_T1_FPWM_10bitRES(CHENNEL_B, copy_u8_speed);
    55a0:	81 e0       	ldi	r24, 0x01	; 1
    55a2:	69 81       	ldd	r22, Y+1	; 0x01
    55a4:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <MCAL_T1_FPWM_10bitRES>
	MCAL_T1_FPWM_10bitRES(CHENNEL_A, copy_u8_speed);
    55a8:	80 e0       	ldi	r24, 0x00	; 0
    55aa:	69 81       	ldd	r22, Y+1	; 0x01
    55ac:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <MCAL_T1_FPWM_10bitRES>
	MCAL_DIO_u8SetPinValue(PortC, Pin3, Pin_High);
    55b0:	82 e0       	ldi	r24, 0x02	; 2
    55b2:	63 e0       	ldi	r22, 0x03	; 3
    55b4:	41 e0       	ldi	r20, 0x01	; 1
    55b6:	0e 94 e8 1a 	call	0x35d0	; 0x35d0 <MCAL_DIO_u8SetPinValue>
	MCAL_DIO_u8SetPinValue(PortC, Pin4, Pin_Low);
    55ba:	82 e0       	ldi	r24, 0x02	; 2
    55bc:	64 e0       	ldi	r22, 0x04	; 4
    55be:	40 e0       	ldi	r20, 0x00	; 0
    55c0:	0e 94 e8 1a 	call	0x35d0	; 0x35d0 <MCAL_DIO_u8SetPinValue>
	MCAL_DIO_u8SetPinValue(PortC, Pin5, Pin_Low);
    55c4:	82 e0       	ldi	r24, 0x02	; 2
    55c6:	65 e0       	ldi	r22, 0x05	; 5
    55c8:	40 e0       	ldi	r20, 0x00	; 0
    55ca:	0e 94 e8 1a 	call	0x35d0	; 0x35d0 <MCAL_DIO_u8SetPinValue>
	MCAL_DIO_u8SetPinValue(PortC, Pin6, Pin_Low);
    55ce:	82 e0       	ldi	r24, 0x02	; 2
    55d0:	66 e0       	ldi	r22, 0x06	; 6
    55d2:	40 e0       	ldi	r20, 0x00	; 0
    55d4:	0e 94 e8 1a 	call	0x35d0	; 0x35d0 <MCAL_DIO_u8SetPinValue>
}
    55d8:	0f 90       	pop	r0
    55da:	cf 91       	pop	r28
    55dc:	df 91       	pop	r29
    55de:	08 95       	ret

000055e0 <HAL_void_H_BridgeStop>:

void HAL_void_H_BridgeStop(u8 copy_u8_speed) {
    55e0:	df 93       	push	r29
    55e2:	cf 93       	push	r28
    55e4:	0f 92       	push	r0
    55e6:	cd b7       	in	r28, 0x3d	; 61
    55e8:	de b7       	in	r29, 0x3e	; 62
    55ea:	89 83       	std	Y+1, r24	; 0x01
	MCAL_T1_FPWM_10bitRES(CHENNEL_B, copy_u8_speed);
    55ec:	81 e0       	ldi	r24, 0x01	; 1
    55ee:	69 81       	ldd	r22, Y+1	; 0x01
    55f0:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <MCAL_T1_FPWM_10bitRES>
	MCAL_T1_FPWM_10bitRES(CHENNEL_A, copy_u8_speed);
    55f4:	80 e0       	ldi	r24, 0x00	; 0
    55f6:	69 81       	ldd	r22, Y+1	; 0x01
    55f8:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <MCAL_T1_FPWM_10bitRES>
	MCAL_DIO_u8SetPinValue(PortC, Pin3, Pin_Low);
    55fc:	82 e0       	ldi	r24, 0x02	; 2
    55fe:	63 e0       	ldi	r22, 0x03	; 3
    5600:	40 e0       	ldi	r20, 0x00	; 0
    5602:	0e 94 e8 1a 	call	0x35d0	; 0x35d0 <MCAL_DIO_u8SetPinValue>
	MCAL_DIO_u8SetPinValue(PortC, Pin4, Pin_Low);
    5606:	82 e0       	ldi	r24, 0x02	; 2
    5608:	64 e0       	ldi	r22, 0x04	; 4
    560a:	40 e0       	ldi	r20, 0x00	; 0
    560c:	0e 94 e8 1a 	call	0x35d0	; 0x35d0 <MCAL_DIO_u8SetPinValue>
	MCAL_DIO_u8SetPinValue(PortC, Pin5, Pin_Low);
    5610:	82 e0       	ldi	r24, 0x02	; 2
    5612:	65 e0       	ldi	r22, 0x05	; 5
    5614:	40 e0       	ldi	r20, 0x00	; 0
    5616:	0e 94 e8 1a 	call	0x35d0	; 0x35d0 <MCAL_DIO_u8SetPinValue>
	MCAL_DIO_u8SetPinValue(PortC, Pin6, Pin_Low);
    561a:	82 e0       	ldi	r24, 0x02	; 2
    561c:	66 e0       	ldi	r22, 0x06	; 6
    561e:	40 e0       	ldi	r20, 0x00	; 0
    5620:	0e 94 e8 1a 	call	0x35d0	; 0x35d0 <MCAL_DIO_u8SetPinValue>
}
    5624:	0f 90       	pop	r0
    5626:	cf 91       	pop	r28
    5628:	df 91       	pop	r29
    562a:	08 95       	ret

0000562c <HAL_Buzzer_u8BuzzerInit>:
 *      Author: Mohamed
 */

#include "Buzzer.h"

STD_Type HAL_Buzzer_u8BuzzerInit(u8 Loc_u8BuzzerPortID, u8 Loc_u8BuzzerPinID) {
    562c:	df 93       	push	r29
    562e:	cf 93       	push	r28
    5630:	00 d0       	rcall	.+0      	; 0x5632 <HAL_Buzzer_u8BuzzerInit+0x6>
    5632:	0f 92       	push	r0
    5634:	cd b7       	in	r28, 0x3d	; 61
    5636:	de b7       	in	r29, 0x3e	; 62
    5638:	8a 83       	std	Y+2, r24	; 0x02
    563a:	6b 83       	std	Y+3, r22	; 0x03
	u8 Loc_u8Return_Value = E_NOT_OK;
    563c:	81 e0       	ldi	r24, 0x01	; 1
    563e:	89 83       	std	Y+1, r24	; 0x01
	if (Loc_u8BuzzerPortID <= PortD && Loc_u8BuzzerPinID <= Num_Of_Pins) {
    5640:	8a 81       	ldd	r24, Y+2	; 0x02
    5642:	84 30       	cpi	r24, 0x04	; 4
    5644:	48 f4       	brcc	.+18     	; 0x5658 <HAL_Buzzer_u8BuzzerInit+0x2c>
    5646:	8b 81       	ldd	r24, Y+3	; 0x03
    5648:	88 30       	cpi	r24, 0x08	; 8
    564a:	30 f4       	brcc	.+12     	; 0x5658 <HAL_Buzzer_u8BuzzerInit+0x2c>
		Loc_u8Return_Value=Loc_u8Return_Value = MCAL_DIO_u8SetPinDirection(Loc_u8BuzzerPortID,
    564c:	8a 81       	ldd	r24, Y+2	; 0x02
    564e:	6b 81       	ldd	r22, Y+3	; 0x03
    5650:	41 e0       	ldi	r20, 0x01	; 1
    5652:	0e 94 7a 19 	call	0x32f4	; 0x32f4 <MCAL_DIO_u8SetPinDirection>
    5656:	89 83       	std	Y+1, r24	; 0x01
				Loc_u8BuzzerPinID, Pin_High);
	} else {
		//Do Nothing
	}
	return Loc_u8Return_Value;
    5658:	89 81       	ldd	r24, Y+1	; 0x01
}
    565a:	0f 90       	pop	r0
    565c:	0f 90       	pop	r0
    565e:	0f 90       	pop	r0
    5660:	cf 91       	pop	r28
    5662:	df 91       	pop	r29
    5664:	08 95       	ret

00005666 <HAL_Buzzer_u8BuzzerMode>:

STD_Type HAL_Buzzer_u8BuzzerMode(u8 Loc_u8BuzzerPortID, u8 Loc_u8BuzzerPinID,
		u8 Loc_u8BuzzerMode) {
    5666:	df 93       	push	r29
    5668:	cf 93       	push	r28
    566a:	00 d0       	rcall	.+0      	; 0x566c <HAL_Buzzer_u8BuzzerMode+0x6>
    566c:	00 d0       	rcall	.+0      	; 0x566e <HAL_Buzzer_u8BuzzerMode+0x8>
    566e:	cd b7       	in	r28, 0x3d	; 61
    5670:	de b7       	in	r29, 0x3e	; 62
    5672:	8a 83       	std	Y+2, r24	; 0x02
    5674:	6b 83       	std	Y+3, r22	; 0x03
    5676:	4c 83       	std	Y+4, r20	; 0x04
	u8 Loc_u8Return_Value = E_NOT_OK;
    5678:	81 e0       	ldi	r24, 0x01	; 1
    567a:	89 83       	std	Y+1, r24	; 0x01
	if (Loc_u8BuzzerPortID <= PortD && Loc_u8BuzzerPinID <= Num_Of_Pins
    567c:	8a 81       	ldd	r24, Y+2	; 0x02
    567e:	84 30       	cpi	r24, 0x04	; 4
    5680:	10 f5       	brcc	.+68     	; 0x56c6 <HAL_Buzzer_u8BuzzerMode+0x60>
    5682:	8b 81       	ldd	r24, Y+3	; 0x03
    5684:	88 30       	cpi	r24, 0x08	; 8
    5686:	f8 f4       	brcc	.+62     	; 0x56c6 <HAL_Buzzer_u8BuzzerMode+0x60>
    5688:	8c 81       	ldd	r24, Y+4	; 0x04
    568a:	83 30       	cpi	r24, 0x03	; 3
    568c:	e0 f4       	brcc	.+56     	; 0x56c6 <HAL_Buzzer_u8BuzzerMode+0x60>
			&& Loc_u8BuzzerMode <= Buzzer_TOG) {
		if (Loc_u8BuzzerMode == Buzzer_ON) {
    568e:	8c 81       	ldd	r24, Y+4	; 0x04
    5690:	81 30       	cpi	r24, 0x01	; 1
    5692:	39 f4       	brne	.+14     	; 0x56a2 <HAL_Buzzer_u8BuzzerMode+0x3c>
			Loc_u8Return_Value=MCAL_DIO_u8SetPinValue(Loc_u8BuzzerPortID, Loc_u8BuzzerPinID, Pin_High);
    5694:	8a 81       	ldd	r24, Y+2	; 0x02
    5696:	6b 81       	ldd	r22, Y+3	; 0x03
    5698:	41 e0       	ldi	r20, 0x01	; 1
    569a:	0e 94 e8 1a 	call	0x35d0	; 0x35d0 <MCAL_DIO_u8SetPinValue>
    569e:	89 83       	std	Y+1, r24	; 0x01
    56a0:	12 c0       	rjmp	.+36     	; 0x56c6 <HAL_Buzzer_u8BuzzerMode+0x60>
		} else if (Loc_u8BuzzerMode == Buzzer_OFF) {
    56a2:	8c 81       	ldd	r24, Y+4	; 0x04
    56a4:	88 23       	and	r24, r24
    56a6:	39 f4       	brne	.+14     	; 0x56b6 <HAL_Buzzer_u8BuzzerMode+0x50>
			Loc_u8Return_Value=MCAL_DIO_u8SetPinValue(Loc_u8BuzzerPortID, Loc_u8BuzzerPinID, Pin_Low);
    56a8:	8a 81       	ldd	r24, Y+2	; 0x02
    56aa:	6b 81       	ldd	r22, Y+3	; 0x03
    56ac:	40 e0       	ldi	r20, 0x00	; 0
    56ae:	0e 94 e8 1a 	call	0x35d0	; 0x35d0 <MCAL_DIO_u8SetPinValue>
    56b2:	89 83       	std	Y+1, r24	; 0x01
    56b4:	08 c0       	rjmp	.+16     	; 0x56c6 <HAL_Buzzer_u8BuzzerMode+0x60>
		} else if (Loc_u8BuzzerMode == Buzzer_TOG) {
    56b6:	8c 81       	ldd	r24, Y+4	; 0x04
    56b8:	82 30       	cpi	r24, 0x02	; 2
    56ba:	29 f4       	brne	.+10     	; 0x56c6 <HAL_Buzzer_u8BuzzerMode+0x60>
			Loc_u8Return_Value=MCAL_DIO_u8TogglePinValue(Loc_u8BuzzerPortID,Loc_u8BuzzerPinID);
    56bc:	8a 81       	ldd	r24, Y+2	; 0x02
    56be:	6b 81       	ldd	r22, Y+3	; 0x03
    56c0:	0e 94 d1 1c 	call	0x39a2	; 0x39a2 <MCAL_DIO_u8TogglePinValue>
    56c4:	89 83       	std	Y+1, r24	; 0x01
			//Do Nothing
		}
	} else {
		//Do Nothing
	}
	return Loc_u8Return_Value;
    56c6:	89 81       	ldd	r24, Y+1	; 0x01
}
    56c8:	0f 90       	pop	r0
    56ca:	0f 90       	pop	r0
    56cc:	0f 90       	pop	r0
    56ce:	0f 90       	pop	r0
    56d0:	cf 91       	pop	r28
    56d2:	df 91       	pop	r29
    56d4:	08 95       	ret

000056d6 <main>:
#include "main.h"
#include "../MCAL/DIO/DIO.h"
#include "../MCAL/Timer 0/Timer_0.h"
#include "../SERVICE/ICU_Interface.h"

int main(void) {
    56d6:	df 93       	push	r29
    56d8:	cf 93       	push	r28
    56da:	00 d0       	rcall	.+0      	; 0x56dc <main+0x6>
    56dc:	00 d0       	rcall	.+0      	; 0x56de <main+0x8>
    56de:	cd b7       	in	r28, 0x3d	; 61
    56e0:	de b7       	in	r29, 0x3e	; 62
//	HAL_SM_voidSMInit();
//			HAL_SM_voidSMSetAngle(i);
	u16 period_Ticks = 0;
    56e2:	1a 82       	std	Y+2, r1	; 0x02
    56e4:	19 82       	std	Y+1, r1	; 0x01
	  u16 on_Ticks = 0;
    56e6:	1c 82       	std	Y+4, r1	; 0x04
    56e8:	1b 82       	std	Y+3, r1	; 0x03
	  	SET_BIT(DDRD, Pin3);
    56ea:	a1 e3       	ldi	r26, 0x31	; 49
    56ec:	b0 e0       	ldi	r27, 0x00	; 0
    56ee:	e1 e3       	ldi	r30, 0x31	; 49
    56f0:	f0 e0       	ldi	r31, 0x00	; 0
    56f2:	80 81       	ld	r24, Z
    56f4:	88 60       	ori	r24, 0x08	; 8
    56f6:	8c 93       	st	X, r24
	  	MCAL_DIO_u8SetPinDirection(PortB, Pin3, Pin_High); //PWM
    56f8:	81 e0       	ldi	r24, 0x01	; 1
    56fa:	63 e0       	ldi	r22, 0x03	; 3
    56fc:	41 e0       	ldi	r20, 0x01	; 1
    56fe:	0e 94 7a 19 	call	0x32f4	; 0x32f4 <MCAL_DIO_u8SetPinDirection>
	  	//T0
	  	MCAL_Timer0_Init(FastPWM_Mode,Prescaller_8,NON_INVERTING_MODE);
    5702:	83 e0       	ldi	r24, 0x03	; 3
    5704:	62 e0       	ldi	r22, 0x02	; 2
    5706:	40 e0       	ldi	r20, 0x00	; 0
    5708:	0e 94 47 11 	call	0x228e	; 0x228e <MCAL_Timer0_Init>
	  	MCAL_Timer0_SetCompareValue(64);
    570c:	80 e4       	ldi	r24, 0x40	; 64
    570e:	0e 94 1c 13 	call	0x2638	; 0x2638 <MCAL_Timer0_SetCompareValue>

	  	while (1) {
	  	ICU_SW_init(&period_Ticks,&on_Ticks);
    5712:	9e 01       	movw	r18, r28
    5714:	2d 5f       	subi	r18, 0xFD	; 253
    5716:	3f 4f       	sbci	r19, 0xFF	; 255
    5718:	ce 01       	movw	r24, r28
    571a:	01 96       	adiw	r24, 0x01	; 1
    571c:	b9 01       	movw	r22, r18
    571e:	0e 94 a5 07 	call	0xf4a	; 0xf4a <ICU_SW_init>
	  		if (on_Ticks == 64) {
    5722:	8b 81       	ldd	r24, Y+3	; 0x03
    5724:	9c 81       	ldd	r25, Y+4	; 0x04
    5726:	80 34       	cpi	r24, 0x40	; 64
    5728:	91 05       	cpc	r25, r1
    572a:	99 f7       	brne	.-26     	; 0x5712 <main+0x3c>
	  			SET_BIT(PORTD, Pin3);
    572c:	a2 e3       	ldi	r26, 0x32	; 50
    572e:	b0 e0       	ldi	r27, 0x00	; 0
    5730:	e2 e3       	ldi	r30, 0x32	; 50
    5732:	f0 e0       	ldi	r31, 0x00	; 0
    5734:	80 81       	ld	r24, Z
    5736:	88 60       	ori	r24, 0x08	; 8
    5738:	8c 93       	st	X, r24
    573a:	eb cf       	rjmp	.-42     	; 0x5712 <main+0x3c>

0000573c <__mulsi3>:
    573c:	62 9f       	mul	r22, r18
    573e:	d0 01       	movw	r26, r0
    5740:	73 9f       	mul	r23, r19
    5742:	f0 01       	movw	r30, r0
    5744:	82 9f       	mul	r24, r18
    5746:	e0 0d       	add	r30, r0
    5748:	f1 1d       	adc	r31, r1
    574a:	64 9f       	mul	r22, r20
    574c:	e0 0d       	add	r30, r0
    574e:	f1 1d       	adc	r31, r1
    5750:	92 9f       	mul	r25, r18
    5752:	f0 0d       	add	r31, r0
    5754:	83 9f       	mul	r24, r19
    5756:	f0 0d       	add	r31, r0
    5758:	74 9f       	mul	r23, r20
    575a:	f0 0d       	add	r31, r0
    575c:	65 9f       	mul	r22, r21
    575e:	f0 0d       	add	r31, r0
    5760:	99 27       	eor	r25, r25
    5762:	72 9f       	mul	r23, r18
    5764:	b0 0d       	add	r27, r0
    5766:	e1 1d       	adc	r30, r1
    5768:	f9 1f       	adc	r31, r25
    576a:	63 9f       	mul	r22, r19
    576c:	b0 0d       	add	r27, r0
    576e:	e1 1d       	adc	r30, r1
    5770:	f9 1f       	adc	r31, r25
    5772:	bd 01       	movw	r22, r26
    5774:	cf 01       	movw	r24, r30
    5776:	11 24       	eor	r1, r1
    5778:	08 95       	ret

0000577a <__udivmodsi4>:
    577a:	a1 e2       	ldi	r26, 0x21	; 33
    577c:	1a 2e       	mov	r1, r26
    577e:	aa 1b       	sub	r26, r26
    5780:	bb 1b       	sub	r27, r27
    5782:	fd 01       	movw	r30, r26
    5784:	0d c0       	rjmp	.+26     	; 0x57a0 <__udivmodsi4_ep>

00005786 <__udivmodsi4_loop>:
    5786:	aa 1f       	adc	r26, r26
    5788:	bb 1f       	adc	r27, r27
    578a:	ee 1f       	adc	r30, r30
    578c:	ff 1f       	adc	r31, r31
    578e:	a2 17       	cp	r26, r18
    5790:	b3 07       	cpc	r27, r19
    5792:	e4 07       	cpc	r30, r20
    5794:	f5 07       	cpc	r31, r21
    5796:	20 f0       	brcs	.+8      	; 0x57a0 <__udivmodsi4_ep>
    5798:	a2 1b       	sub	r26, r18
    579a:	b3 0b       	sbc	r27, r19
    579c:	e4 0b       	sbc	r30, r20
    579e:	f5 0b       	sbc	r31, r21

000057a0 <__udivmodsi4_ep>:
    57a0:	66 1f       	adc	r22, r22
    57a2:	77 1f       	adc	r23, r23
    57a4:	88 1f       	adc	r24, r24
    57a6:	99 1f       	adc	r25, r25
    57a8:	1a 94       	dec	r1
    57aa:	69 f7       	brne	.-38     	; 0x5786 <__udivmodsi4_loop>
    57ac:	60 95       	com	r22
    57ae:	70 95       	com	r23
    57b0:	80 95       	com	r24
    57b2:	90 95       	com	r25
    57b4:	9b 01       	movw	r18, r22
    57b6:	ac 01       	movw	r20, r24
    57b8:	bd 01       	movw	r22, r26
    57ba:	cf 01       	movw	r24, r30
    57bc:	08 95       	ret

000057be <__prologue_saves__>:
    57be:	2f 92       	push	r2
    57c0:	3f 92       	push	r3
    57c2:	4f 92       	push	r4
    57c4:	5f 92       	push	r5
    57c6:	6f 92       	push	r6
    57c8:	7f 92       	push	r7
    57ca:	8f 92       	push	r8
    57cc:	9f 92       	push	r9
    57ce:	af 92       	push	r10
    57d0:	bf 92       	push	r11
    57d2:	cf 92       	push	r12
    57d4:	df 92       	push	r13
    57d6:	ef 92       	push	r14
    57d8:	ff 92       	push	r15
    57da:	0f 93       	push	r16
    57dc:	1f 93       	push	r17
    57de:	cf 93       	push	r28
    57e0:	df 93       	push	r29
    57e2:	cd b7       	in	r28, 0x3d	; 61
    57e4:	de b7       	in	r29, 0x3e	; 62
    57e6:	ca 1b       	sub	r28, r26
    57e8:	db 0b       	sbc	r29, r27
    57ea:	0f b6       	in	r0, 0x3f	; 63
    57ec:	f8 94       	cli
    57ee:	de bf       	out	0x3e, r29	; 62
    57f0:	0f be       	out	0x3f, r0	; 63
    57f2:	cd bf       	out	0x3d, r28	; 61
    57f4:	09 94       	ijmp

000057f6 <__epilogue_restores__>:
    57f6:	2a 88       	ldd	r2, Y+18	; 0x12
    57f8:	39 88       	ldd	r3, Y+17	; 0x11
    57fa:	48 88       	ldd	r4, Y+16	; 0x10
    57fc:	5f 84       	ldd	r5, Y+15	; 0x0f
    57fe:	6e 84       	ldd	r6, Y+14	; 0x0e
    5800:	7d 84       	ldd	r7, Y+13	; 0x0d
    5802:	8c 84       	ldd	r8, Y+12	; 0x0c
    5804:	9b 84       	ldd	r9, Y+11	; 0x0b
    5806:	aa 84       	ldd	r10, Y+10	; 0x0a
    5808:	b9 84       	ldd	r11, Y+9	; 0x09
    580a:	c8 84       	ldd	r12, Y+8	; 0x08
    580c:	df 80       	ldd	r13, Y+7	; 0x07
    580e:	ee 80       	ldd	r14, Y+6	; 0x06
    5810:	fd 80       	ldd	r15, Y+5	; 0x05
    5812:	0c 81       	ldd	r16, Y+4	; 0x04
    5814:	1b 81       	ldd	r17, Y+3	; 0x03
    5816:	aa 81       	ldd	r26, Y+2	; 0x02
    5818:	b9 81       	ldd	r27, Y+1	; 0x01
    581a:	ce 0f       	add	r28, r30
    581c:	d1 1d       	adc	r29, r1
    581e:	0f b6       	in	r0, 0x3f	; 63
    5820:	f8 94       	cli
    5822:	de bf       	out	0x3e, r29	; 62
    5824:	0f be       	out	0x3f, r0	; 63
    5826:	cd bf       	out	0x3d, r28	; 61
    5828:	ed 01       	movw	r28, r26
    582a:	08 95       	ret

0000582c <itoa>:
    582c:	fb 01       	movw	r30, r22
    582e:	9f 01       	movw	r18, r30
    5830:	e8 94       	clt
    5832:	42 30       	cpi	r20, 0x02	; 2
    5834:	c4 f0       	brlt	.+48     	; 0x5866 <itoa+0x3a>
    5836:	45 32       	cpi	r20, 0x25	; 37
    5838:	b4 f4       	brge	.+44     	; 0x5866 <itoa+0x3a>
    583a:	4a 30       	cpi	r20, 0x0A	; 10
    583c:	29 f4       	brne	.+10     	; 0x5848 <itoa+0x1c>
    583e:	97 fb       	bst	r25, 7
    5840:	1e f4       	brtc	.+6      	; 0x5848 <itoa+0x1c>
    5842:	90 95       	com	r25
    5844:	81 95       	neg	r24
    5846:	9f 4f       	sbci	r25, 0xFF	; 255
    5848:	64 2f       	mov	r22, r20
    584a:	77 27       	eor	r23, r23
    584c:	0e 94 47 2c 	call	0x588e	; 0x588e <__udivmodhi4>
    5850:	80 5d       	subi	r24, 0xD0	; 208
    5852:	8a 33       	cpi	r24, 0x3A	; 58
    5854:	0c f0       	brlt	.+2      	; 0x5858 <itoa+0x2c>
    5856:	89 5d       	subi	r24, 0xD9	; 217
    5858:	81 93       	st	Z+, r24
    585a:	cb 01       	movw	r24, r22
    585c:	00 97       	sbiw	r24, 0x00	; 0
    585e:	a1 f7       	brne	.-24     	; 0x5848 <itoa+0x1c>
    5860:	16 f4       	brtc	.+4      	; 0x5866 <itoa+0x3a>
    5862:	5d e2       	ldi	r21, 0x2D	; 45
    5864:	51 93       	st	Z+, r21
    5866:	10 82       	st	Z, r1
    5868:	c9 01       	movw	r24, r18
    586a:	0c 94 37 2c 	jmp	0x586e	; 0x586e <strrev>

0000586e <strrev>:
    586e:	dc 01       	movw	r26, r24
    5870:	fc 01       	movw	r30, r24
    5872:	67 2f       	mov	r22, r23
    5874:	71 91       	ld	r23, Z+
    5876:	77 23       	and	r23, r23
    5878:	e1 f7       	brne	.-8      	; 0x5872 <strrev+0x4>
    587a:	32 97       	sbiw	r30, 0x02	; 2
    587c:	04 c0       	rjmp	.+8      	; 0x5886 <strrev+0x18>
    587e:	7c 91       	ld	r23, X
    5880:	6d 93       	st	X+, r22
    5882:	70 83       	st	Z, r23
    5884:	62 91       	ld	r22, -Z
    5886:	ae 17       	cp	r26, r30
    5888:	bf 07       	cpc	r27, r31
    588a:	c8 f3       	brcs	.-14     	; 0x587e <strrev+0x10>
    588c:	08 95       	ret

0000588e <__udivmodhi4>:
    588e:	aa 1b       	sub	r26, r26
    5890:	bb 1b       	sub	r27, r27
    5892:	51 e1       	ldi	r21, 0x11	; 17
    5894:	07 c0       	rjmp	.+14     	; 0x58a4 <__udivmodhi4_ep>

00005896 <__udivmodhi4_loop>:
    5896:	aa 1f       	adc	r26, r26
    5898:	bb 1f       	adc	r27, r27
    589a:	a6 17       	cp	r26, r22
    589c:	b7 07       	cpc	r27, r23
    589e:	10 f0       	brcs	.+4      	; 0x58a4 <__udivmodhi4_ep>
    58a0:	a6 1b       	sub	r26, r22
    58a2:	b7 0b       	sbc	r27, r23

000058a4 <__udivmodhi4_ep>:
    58a4:	88 1f       	adc	r24, r24
    58a6:	99 1f       	adc	r25, r25
    58a8:	5a 95       	dec	r21
    58aa:	a9 f7       	brne	.-22     	; 0x5896 <__udivmodhi4_loop>
    58ac:	80 95       	com	r24
    58ae:	90 95       	com	r25
    58b0:	bc 01       	movw	r22, r24
    58b2:	cd 01       	movw	r24, r26
    58b4:	08 95       	ret

000058b6 <_exit>:
    58b6:	f8 94       	cli

000058b8 <__stop_program>:
    58b8:	ff cf       	rjmp	.-2      	; 0x58b8 <__stop_program>
